{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isFunction } from '@antv/util';\nimport { animation, interaction, scale, theme, tooltip } from '../../adaptor/common';\nimport { interval, point } from '../../adaptor/geometries';\nimport { deepAssign, flow, transformLabel } from '../../utils';\nimport { transformData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var bulletStyle = options.bulletStyle,\n    targetField = options.targetField,\n    rangeField = options.rangeField,\n    measureField = options.measureField,\n    xField = options.xField,\n    color = options.color,\n    layout = options.layout,\n    size = options.size,\n    label = options.label;\n  // 处理数据\n  var _a = transformData(options),\n    min = _a.min,\n    max = _a.max,\n    ds = _a.ds;\n  chart.data(ds);\n  // rangeGeometry\n  var r = deepAssign({}, params, {\n    options: {\n      xField: xField,\n      yField: rangeField,\n      seriesField: 'rKey',\n      isStack: true,\n      label: get(label, 'range'),\n      interval: {\n        color: get(color, 'range'),\n        style: get(bulletStyle, 'range'),\n        size: get(size, 'range')\n      }\n    }\n  });\n  interval(r);\n  // 范围值的 tooltip 隐藏掉\n  chart.geometries[0].tooltip(false);\n  // measureGeometry\n  var m = deepAssign({}, params, {\n    options: {\n      xField: xField,\n      yField: measureField,\n      seriesField: 'mKey',\n      isStack: true,\n      label: get(label, 'measure'),\n      interval: {\n        color: get(color, 'measure'),\n        style: get(bulletStyle, 'measure'),\n        size: get(size, 'measure')\n      }\n    }\n  });\n  interval(m);\n  // targetGeometry\n  var t = deepAssign({}, params, {\n    options: {\n      xField: xField,\n      yField: targetField,\n      seriesField: 'tKey',\n      label: get(label, 'target'),\n      point: {\n        color: get(color, 'target'),\n        style: get(bulletStyle, 'target'),\n        size: isFunction(get(size, 'target')) ? function (data) {\n          return get(size, 'target')(data) / 2;\n        } : get(size, 'target') / 2,\n        shape: layout === 'horizontal' ? 'line' : 'hyphen'\n      }\n    }\n  });\n  point(t);\n  // 水平的时候，要转换坐标轴\n  if (layout === 'horizontal') {\n    chart.coordinate().transpose();\n  }\n  return __assign(__assign({}, params), {\n    ext: {\n      data: {\n        min: min,\n        max: max\n      }\n    }\n  });\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a, _b;\n  var options = params.options,\n    ext = params.ext;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    targetField = options.targetField,\n    rangeField = options.rangeField,\n    measureField = options.measureField,\n    xField = options.xField;\n  var extData = ext.data;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[measureField] = yAxis, _a), (_b = {}, _b[measureField] = {\n    min: extData === null || extData === void 0 ? void 0 : extData.min,\n    max: extData === null || extData === void 0 ? void 0 : extData.max,\n    sync: true\n  }, _b[targetField] = {\n    sync: \"\" + measureField\n  }, _b[rangeField] = {\n    sync: \"\" + measureField\n  }, _b)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    measureField = options.measureField,\n    rangeField = options.rangeField,\n    targetField = options.targetField;\n  chart.axis(\"\" + rangeField, false);\n  chart.axis(\"\" + targetField, false);\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(\"\" + xField, false);\n  } else {\n    chart.axis(\"\" + xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(\"\" + measureField, false);\n  } else {\n    chart.axis(\"\" + measureField, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nfunction legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend;\n  chart.removeInteraction('legend-filter');\n  // @TODO 后续看是否内部自定义一个 legend\n  chart.legend(legend);\n  // 默认关闭掉所在 color 字段的 legend, 从而不影响自定义的legend\n  chart.legend('rKey', false);\n  chart.legend('mKey', false);\n  chart.legend('tKey', false);\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    measureField = options.measureField,\n    targetField = options.targetField,\n    rangeField = options.rangeField;\n  var _a = chart.geometries,\n    rangeGeometry = _a[0],\n    measureGeometry = _a[1],\n    targetGeometry = _a[2];\n  if (get(label, 'range')) {\n    rangeGeometry.label(\"\" + rangeField, __assign({\n      layout: [{\n        type: 'limit-in-plot'\n      }]\n    }, transformLabel(label.range)));\n  } else {\n    rangeGeometry.label(false);\n  }\n  if (get(label, 'measure')) {\n    measureGeometry.label(\"\" + measureField, __assign({\n      layout: [{\n        type: 'limit-in-plot'\n      }]\n    }, transformLabel(label.measure)));\n  } else {\n    measureGeometry.label(false);\n  }\n  if (get(label, 'target')) {\n    targetGeometry.label(\"\" + targetField, __assign({\n      layout: [{\n        type: 'limit-in-plot'\n      }]\n    }, transformLabel(label.target)));\n  } else {\n    targetGeometry.label(false);\n  }\n  return params;\n}\n/**\n * 子弹图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(geometry, meta, axis, legend, theme, label, tooltip, interaction, animation)(params);\n}","map":null,"metadata":{},"sourceType":"module"}