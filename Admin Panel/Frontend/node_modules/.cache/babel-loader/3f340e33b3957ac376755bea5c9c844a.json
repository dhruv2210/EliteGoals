{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ext, vec2, vec3 } from '@antv/matrix-util';\nimport { isNumberEqual } from '@antv/util';\nimport Coordinate from './base';\nvar Polar = /** @class */function (_super) {\n  __extends(Polar, _super);\n  function Polar(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.isPolar = true;\n    _this.type = 'polar';\n    var _a = cfg.startAngle,\n      startAngle = _a === void 0 ? -Math.PI / 2 : _a,\n      _b = cfg.endAngle,\n      endAngle = _b === void 0 ? Math.PI * 3 / 2 : _b,\n      _c = cfg.innerRadius,\n      innerRadius = _c === void 0 ? 0 : _c,\n      radius = cfg.radius;\n    _this.startAngle = startAngle;\n    _this.endAngle = endAngle;\n    _this.innerRadius = innerRadius;\n    _this.radius = radius;\n    _this.initial();\n    return _this;\n  }\n  Polar.prototype.initial = function () {\n    _super.prototype.initial.call(this);\n    while (this.endAngle < this.startAngle) {\n      this.endAngle += Math.PI * 2;\n    }\n    var oneBox = this.getOneBox();\n    var oneWidth = oneBox.maxX - oneBox.minX;\n    var oneHeight = oneBox.maxY - oneBox.minY;\n    var left = Math.abs(oneBox.minX) / oneWidth;\n    var top = Math.abs(oneBox.minY) / oneHeight;\n    var maxRadius;\n    if (this.height / oneHeight > this.width / oneWidth) {\n      // width 为主\n      maxRadius = this.width / oneWidth;\n      this.circleCenter = {\n        x: this.center.x - (0.5 - left) * this.width,\n        y: this.center.y - (0.5 - top) * maxRadius * oneHeight\n      };\n    } else {\n      // height 为主\n      maxRadius = this.height / oneHeight;\n      this.circleCenter = {\n        x: this.center.x - (0.5 - left) * maxRadius * oneWidth,\n        y: this.center.y - (0.5 - top) * this.height\n      };\n    }\n    this.polarRadius = this.radius;\n    if (!this.radius) {\n      this.polarRadius = maxRadius;\n    } else if (this.radius > 0 && this.radius <= 1) {\n      this.polarRadius = maxRadius * this.radius;\n    } else if (this.radius <= 0 || this.radius > maxRadius) {\n      this.polarRadius = maxRadius;\n    }\n    this.x = {\n      start: this.startAngle,\n      end: this.endAngle\n    };\n    this.y = {\n      start: this.innerRadius * this.polarRadius,\n      end: this.polarRadius\n    };\n  };\n  Polar.prototype.getRadius = function () {\n    return this.polarRadius;\n  };\n  Polar.prototype.convertPoint = function (point) {\n    var _a;\n    var center = this.getCenter();\n    var x = point.x,\n      y = point.y;\n    if (this.isTransposed) {\n      _a = [y, x], x = _a[0], y = _a[1];\n    }\n    x = this.convertDim(x, 'x');\n    y = this.convertDim(y, 'y');\n    return {\n      x: center.x + Math.cos(x) * y,\n      y: center.y + Math.sin(x) * y\n    };\n  };\n  Polar.prototype.invertPoint = function (point) {\n    var _a;\n    var center = this.getCenter();\n    var vPoint = [point.x - center.x, point.y - center.y];\n    var _b = this,\n      startAngle = _b.startAngle,\n      endAngle = _b.endAngle;\n    if (this.isReflect('x')) {\n      _a = [endAngle, startAngle], startAngle = _a[0], endAngle = _a[1];\n    }\n    var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    ext.leftRotate(m, m, startAngle);\n    var vStart3 = [1, 0, 0];\n    vec3.transformMat3(vStart3, vStart3, m);\n    var vStart2 = [vStart3[0], vStart3[1]];\n    var angle = ext.angleTo(vStart2, vPoint, endAngle < startAngle);\n    if (isNumberEqual(angle, Math.PI * 2)) {\n      angle = 0;\n    }\n    var radius = vec2.length(vPoint);\n    var xPercent = angle / (endAngle - startAngle);\n    xPercent = endAngle - startAngle > 0 ? xPercent : -xPercent;\n    var yPercent = this.invertDim(radius, 'y');\n    var rst = {\n      x: 0,\n      y: 0\n    };\n    rst.x = this.isTransposed ? yPercent : xPercent;\n    rst.y = this.isTransposed ? xPercent : yPercent;\n    return rst;\n  };\n  Polar.prototype.getCenter = function () {\n    return this.circleCenter;\n  };\n  Polar.prototype.getOneBox = function () {\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    if (Math.abs(endAngle - startAngle) >= Math.PI * 2) {\n      return {\n        minX: -1,\n        maxX: 1,\n        minY: -1,\n        maxY: 1\n      };\n    }\n    var xs = [0, Math.cos(startAngle), Math.cos(endAngle)];\n    var ys = [0, Math.sin(startAngle), Math.sin(endAngle)];\n    for (var i = Math.min(startAngle, endAngle); i < Math.max(startAngle, endAngle); i += Math.PI / 18) {\n      xs.push(Math.cos(i));\n      ys.push(Math.sin(i));\n    }\n    return {\n      minX: Math.min.apply(Math, xs),\n      maxX: Math.max.apply(Math, xs),\n      minY: Math.min.apply(Math, ys),\n      maxY: Math.max.apply(Math, ys)\n    };\n  };\n  return Polar;\n}(Coordinate);\nexport default Polar;","map":null,"metadata":{},"sourceType":"module"}