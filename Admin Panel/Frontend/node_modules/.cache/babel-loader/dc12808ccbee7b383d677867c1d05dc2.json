{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { animation, annotation, interaction, theme, tooltip } from '../../adaptor/common';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { PLOT_CONTAINER_OPTIONS } from '../../core/plot';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { execPlotAdaptor } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction multiView(params) {\n  var chart = params.chart,\n    options = params.options;\n  var views = options.views,\n    legend = options.legend;\n  each(views, function (v) {\n    var region = v.region,\n      data = v.data,\n      meta = v.meta,\n      axes = v.axes,\n      coordinate = v.coordinate,\n      interactions = v.interactions,\n      annotations = v.annotations,\n      tooltip = v.tooltip,\n      geometries = v.geometries;\n    // 1. 创建 view\n    var viewOfG2 = chart.createView({\n      region: region\n    });\n    // 2. data\n    viewOfG2.data(data);\n    // 3. meta\n    var scales = {};\n    if (axes) {\n      each(axes, function (axis, field) {\n        scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n      });\n    }\n    scales = deepAssign({}, meta, scales);\n    viewOfG2.scale(scales);\n    // 4. x y axis\n    if (!axes) {\n      viewOfG2.axis(false);\n    } else {\n      each(axes, function (axis, field) {\n        viewOfG2.axis(field, axis);\n      });\n    }\n    // 5. coordinate\n    viewOfG2.coordinate(coordinate);\n    // 6. geometry\n    each(geometries, function (geometry) {\n      var ext = geometryAdaptor({\n        chart: viewOfG2,\n        options: geometry\n      }).ext;\n      // adjust\n      var adjust = geometry.adjust;\n      if (adjust) {\n        ext.geometry.adjust(adjust);\n      }\n    });\n    // 7. interactions\n    each(interactions, function (interaction) {\n      if (interaction.enable === false) {\n        viewOfG2.removeInteraction(interaction.type);\n      } else {\n        viewOfG2.interaction(interaction.type, interaction.cfg);\n      }\n    });\n    // 8. annotations\n    each(annotations, function (annotation) {\n      viewOfG2.annotation()[annotation.type](__assign({}, annotation));\n    });\n    // 9. animation (先做动画)\n    if (typeof v.animation === 'boolean') {\n      viewOfG2.animate(false);\n    } else {\n      viewOfG2.animate(true);\n      // 9.1 所有的 Geometry 都使用同一动画（各个图形如有区别，todo 自行覆盖）\n      each(viewOfG2.geometries, function (g) {\n        g.animate(v.animation);\n      });\n    }\n    if (tooltip) {\n      // 10. tooltip\n      viewOfG2.interaction('tooltip');\n      viewOfG2.tooltip(tooltip);\n    }\n  });\n  // legend\n  if (!legend) {\n    chart.legend(false);\n  } else {\n    each(legend, function (l, field) {\n      chart.legend(field, l);\n    });\n  }\n  // tooltip\n  chart.tooltip(options.tooltip);\n  return params;\n}\n/**\n * 支持嵌套使用 g2plot 内置图表\n * @param params\n */\nfunction multiPlot(params) {\n  var chart = params.chart,\n    options = params.options;\n  var plots = options.plots,\n    _a = options.data,\n    data = _a === void 0 ? [] : _a;\n  each(plots, function (plot) {\n    var type = plot.type,\n      region = plot.region,\n      _a = plot.options,\n      options = _a === void 0 ? {} : _a,\n      top = plot.top;\n    var tooltip = options.tooltip;\n    if (top) {\n      execPlotAdaptor(type, chart, __assign(__assign({}, options), {\n        data: data\n      }));\n      return;\n    }\n    var viewOfG2 = chart.createView(__assign({\n      region: region\n    }, pick(options, PLOT_CONTAINER_OPTIONS)));\n    if (tooltip) {\n      // 配置 tooltip 交互\n      viewOfG2.interaction('tooltip');\n    }\n    execPlotAdaptor(type, viewOfG2, __assign({\n      data: data\n    }, options));\n  });\n  return params;\n}\n/**\n * 处理缩略轴的 adaptor (mix)\n * @param params\n */\nexport function slider(params) {\n  var chart = params.chart,\n    options = params.options;\n  chart.option('slider', options.slider);\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(animation,\n  // 多 view 的图，动画配置放到最前面\n  multiView, multiPlot, interaction, animation, theme, tooltip, slider, annotation()\n  // ... 其他的 adaptor flow\n  )(params);\n}","map":null,"metadata":{},"sourceType":"module"}