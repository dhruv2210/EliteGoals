{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Line as LineUtil } from '@antv/g-math';\nimport { Polyline as PolylineUtil } from '@antv/g-math';\nimport { each, isNil } from '@antv/util';\nimport ShapeBase from './base';\nimport inPolyline from '../util/in-stroke/polyline';\nimport * as ArrowUtil from '../util/arrow';\nvar PolyLine = /** @class */function (_super) {\n  __extends(PolyLine, _super);\n  function PolyLine() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PolyLine.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      startArrow: false,\n      endArrow: false\n    });\n  };\n  PolyLine.prototype.initAttrs = function (attrs) {\n    this.setArrow();\n  };\n  // 更新属性时，检测是否更改了 points\n  PolyLine.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    this.setArrow();\n    if (['points'].indexOf(name) !== -1) {\n      this._resetCache();\n    }\n  };\n  PolyLine.prototype._resetCache = function () {\n    this.set('totalLength', null);\n    this.set('tCache', null);\n  };\n  PolyLine.prototype.setArrow = function () {\n    var attrs = this.attr();\n    var _a = this.attrs,\n      points = _a.points,\n      startArrow = _a.startArrow,\n      endArrow = _a.endArrow;\n    var length = points.length;\n    var x1 = points[0][0];\n    var y1 = points[0][1];\n    var x2 = points[length - 1][0];\n    var y2 = points[length - 1][1];\n    if (startArrow) {\n      ArrowUtil.addStartArrow(this, attrs, points[1][0], points[1][1], x1, y1);\n    }\n    if (endArrow) {\n      ArrowUtil.addEndArrow(this, attrs, points[length - 2][0], points[length - 2][1], x2, y2);\n    }\n  };\n  // 不允许 fill\n  PolyLine.prototype.isFill = function () {\n    return false;\n  };\n  PolyLine.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    // 没有设置 stroke 不能被拾取, 没有线宽不能被拾取\n    if (!isStroke || !lineWidth) {\n      return false;\n    }\n    var points = this.attr().points;\n    return inPolyline(points, lineWidth, x, y, false);\n  };\n  // 始终填充\n  PolyLine.prototype.isStroke = function () {\n    return true;\n  };\n  PolyLine.prototype.createPath = function (context) {\n    var _a = this.attr(),\n      points = _a.points,\n      startArrow = _a.startArrow,\n      endArrow = _a.endArrow;\n    var length = points.length;\n    if (points.length < 2) {\n      return;\n    }\n    var x1 = points[0][0];\n    var y1 = points[0][1];\n    var x2 = points[length - 1][0];\n    var y2 = points[length - 1][1];\n    // 如果定义了箭头，并且是自定义箭头，线条相应缩进\n    if (startArrow && startArrow.d) {\n      var distance = ArrowUtil.getShortenOffset(x1, y1, points[1][0], points[1][1], startArrow.d);\n      x1 += distance.dx;\n      y1 += distance.dy;\n    }\n    if (endArrow && endArrow.d) {\n      var distance = ArrowUtil.getShortenOffset(points[length - 2][0], points[length - 2][1], x2, y2, endArrow.d);\n      x2 -= distance.dx;\n      y2 -= distance.dy;\n    }\n    context.beginPath();\n    context.moveTo(x1, y1);\n    for (var i = 0; i < length - 1; i++) {\n      var point = points[i];\n      context.lineTo(point[0], point[1]);\n    }\n    context.lineTo(x2, y2);\n  };\n  PolyLine.prototype.afterDrawPath = function (context) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n    if (startArrowShape) {\n      startArrowShape.draw(context);\n    }\n    if (endArrowShape) {\n      endArrowShape.draw(context);\n    }\n  };\n  /**\n   * Get length of polyline\n   * @return {number} length\n   */\n  PolyLine.prototype.getTotalLength = function () {\n    var points = this.attr().points;\n    // get totalLength from cache\n    var totalLength = this.get('totalLength');\n    if (!isNil(totalLength)) {\n      return totalLength;\n    }\n    this.set('totalLength', PolylineUtil.length(points));\n    return this.get('totalLength');\n  };\n  /**\n   * Get point according to ratio\n   * @param {number} ratio\n   * @return {Point} point\n   */\n  PolyLine.prototype.getPoint = function (ratio) {\n    var points = this.attr().points;\n    // get tCache from cache\n    var tCache = this.get('tCache');\n    if (!tCache) {\n      this._setTcache();\n      tCache = this.get('tCache');\n    }\n    var subt;\n    var index;\n    each(tCache, function (v, i) {\n      if (ratio >= v[0] && ratio <= v[1]) {\n        subt = (ratio - v[0]) / (v[1] - v[0]);\n        index = i;\n      }\n    });\n    return LineUtil.pointAt(points[index][0], points[index][1], points[index + 1][0], points[index + 1][1], subt);\n  };\n  PolyLine.prototype._setTcache = function () {\n    var points = this.attr().points;\n    if (!points || points.length === 0) {\n      return;\n    }\n    var totalLength = this.getTotalLength();\n    if (totalLength <= 0) {\n      return;\n    }\n    var tempLength = 0;\n    var tCache = [];\n    var segmentT;\n    var segmentL;\n    each(points, function (p, i) {\n      if (points[i + 1]) {\n        segmentT = [];\n        segmentT[0] = tempLength / totalLength;\n        segmentL = LineUtil.length(p[0], p[1], points[i + 1][0], points[i + 1][1]);\n        tempLength += segmentL;\n        segmentT[1] = tempLength / totalLength;\n        tCache.push(segmentT);\n      }\n    });\n    this.set('tCache', tCache);\n  };\n  /**\n   * Get start tangent vector\n   * @return {Array}\n   */\n  PolyLine.prototype.getStartTangent = function () {\n    var points = this.attr().points;\n    var result = [];\n    result.push([points[1][0], points[1][1]]);\n    result.push([points[0][0], points[0][1]]);\n    return result;\n  };\n  /**\n   * Get end tangent vector\n   * @return {Array}\n   */\n  PolyLine.prototype.getEndTangent = function () {\n    var points = this.attr().points;\n    var l = points.length - 1;\n    var result = [];\n    result.push([points[l - 1][0], points[l - 1][1]]);\n    result.push([points[l][0], points[l][1]]);\n    return result;\n  };\n  return PolyLine;\n}(ShapeBase);\nexport default PolyLine;","map":null,"metadata":{},"sourceType":"module"}