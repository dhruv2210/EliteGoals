{"ast":null,"code":"import { ext, vec2, vec3 } from '@antv/matrix-util';\nvar identityMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\nexport function getMatrixByAngle(point, angle, matrix) {\n  if (matrix === void 0) {\n    matrix = identityMatrix;\n  }\n  if (!angle) {\n    // 角度为 0 或者 null 时返回 null\n    return null;\n  }\n  var m = ext.transform(matrix, [['t', -point.x, -point.y], ['r', angle], ['t', point.x, point.y]]);\n  return m;\n}\nexport function getMatrixByTranslate(point, currentMatrix) {\n  if (!point.x && !point.y) {\n    // 0，0 或者 nan 的情况下返回 null\n    return null;\n  }\n  return ext.transform(currentMatrix || identityMatrix, [['t', point.x, point.y]]);\n}\n// 从矩阵获取旋转的角度\nexport function getAngleByMatrix(matrix) {\n  var xVector = [1, 0, 0];\n  var out = [0, 0, 0];\n  vec3.transformMat3(out, xVector, matrix);\n  return Math.atan2(out[1], out[0]);\n}\n// 矩阵 * 向量\nfunction multiplyVec2(matrix, v) {\n  var out = [0, 0];\n  vec2.transformMat3(out, v, matrix);\n  return out;\n}\nexport function applyMatrix2BBox(matrix, bbox) {\n  var topLeft = multiplyVec2(matrix, [bbox.minX, bbox.minY]);\n  var topRight = multiplyVec2(matrix, [bbox.maxX, bbox.minY]);\n  var bottomLeft = multiplyVec2(matrix, [bbox.minX, bbox.maxY]);\n  var bottomRight = multiplyVec2(matrix, [bbox.maxX, bbox.maxY]);\n  var minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n  var maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n  var minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n  var maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n  return {\n    x: minX,\n    y: minY,\n    minX: minX,\n    minY: minY,\n    maxX: maxX,\n    maxY: maxY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nexport function applyRotate(shape, rotate, x, y) {\n  if (rotate) {\n    var matrix = getMatrixByAngle({\n      x: x,\n      y: y\n    }, rotate, shape.getMatrix());\n    shape.setMatrix(matrix);\n  }\n}\nexport function applyTranslate(shape, x, y) {\n  var translateMatrix = getMatrixByTranslate({\n    x: x,\n    y: y\n  });\n  shape.attr('matrix', translateMatrix);\n}","map":null,"metadata":{},"sourceType":"module"}