{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { isNil, isString, deepMix, each, hasKey } from '@antv/util';\nimport { clearDom, createBBox, hasClass } from '../util/util';\nimport Component from './component';\nvar HtmlComponent = /** @class */function (_super) {\n  __extends(HtmlComponent, _super);\n  function HtmlComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  HtmlComponent.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      container: null,\n      containerTpl: '<div></div>',\n      updateAutoRender: true,\n      containerClassName: '',\n      parent: null\n    });\n  };\n  HtmlComponent.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  /**\n   * 显示组件\n   */\n  HtmlComponent.prototype.show = function () {\n    var container = this.get('container');\n    container.style.display = '';\n    this.set('visible', true);\n  };\n  /**\n   * 隐藏组件\n   */\n  HtmlComponent.prototype.hide = function () {\n    var container = this.get('container');\n    container.style.display = 'none';\n    this.set('visible', false);\n  };\n  /**\n   * 是否允许捕捉事件\n   * @param capture 事件捕捉\n   */\n  HtmlComponent.prototype.setCapture = function (capture) {\n    var container = this.getContainer();\n    var value = capture ? 'auto' : 'none';\n    container.style.pointerEvents = value;\n    this.set('capture', capture);\n  };\n  HtmlComponent.prototype.getBBox = function () {\n    var container = this.getContainer();\n    var x = parseFloat(container.style.left) || 0;\n    var y = parseFloat(container.style.top) || 0;\n    return createBBox(x, y, container.clientWidth, container.clientHeight);\n  };\n  HtmlComponent.prototype.clear = function () {\n    var container = this.get('container');\n    clearDom(container);\n  };\n  HtmlComponent.prototype.destroy = function () {\n    this.removeEvent();\n    this.removeDom();\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 复写 init，主要是初始化 DOM 和事件\n   */\n  HtmlComponent.prototype.init = function () {\n    _super.prototype.init.call(this);\n    this.initContainer();\n    this.initDom();\n    this.resetStyles(); // 初始化样式\n    this.applyStyles(); // 应用样式\n    this.initEvent();\n    this.initCapture();\n    this.initVisible();\n  };\n  HtmlComponent.prototype.initCapture = function () {\n    this.setCapture(this.get('capture'));\n  };\n  HtmlComponent.prototype.initVisible = function () {\n    if (!this.get('visible')) {\n      // 设置初始显示状态\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n  HtmlComponent.prototype.initDom = function () {};\n  HtmlComponent.prototype.initContainer = function () {\n    var container = this.get('container');\n    if (isNil(container)) {\n      // 未指定 container 则创建\n      container = this.createDom();\n      var parent_1 = this.get('parent');\n      if (isString(parent_1)) {\n        parent_1 = document.getElementById(parent_1);\n        this.set('parent', parent_1);\n      }\n      parent_1.appendChild(container);\n      if (this.get('containerId')) {\n        container.setAttribute('id', this.get('containerId'));\n      }\n      this.set('container', container);\n    } else if (isString(container)) {\n      // 用户传入的 id, 作为 container\n      container = document.getElementById(container);\n      this.set('container', container);\n    } // else container 是 DOM\n    if (!this.get('parent')) {\n      this.set('parent', container.parentNode);\n    }\n  };\n  // 样式需要进行合并，不能单纯的替换，否则使用非常不方便\n  HtmlComponent.prototype.resetStyles = function () {\n    var style = this.get('domStyles');\n    var defaultStyles = this.get('defaultStyles');\n    if (!style) {\n      style = defaultStyles;\n    } else {\n      style = deepMix({}, defaultStyles, style);\n    }\n    this.set('domStyles', style);\n  };\n  // 应用所有的样式\n  HtmlComponent.prototype.applyStyles = function () {\n    var domStyles = this.get('domStyles');\n    if (!domStyles) {\n      return;\n    }\n    var container = this.getContainer();\n    this.applyChildrenStyles(container, domStyles);\n    var containerClassName = this.get('containerClassName');\n    if (containerClassName && hasClass(container, containerClassName)) {\n      var containerCss = domStyles[containerClassName];\n      modifyCSS(container, containerCss);\n    }\n  };\n  HtmlComponent.prototype.applyChildrenStyles = function (element, styles) {\n    each(styles, function (style, name) {\n      var elements = element.getElementsByClassName(name);\n      each(elements, function (el) {\n        modifyCSS(el, style);\n      });\n    });\n  };\n  // 应用到单个 DOM\n  HtmlComponent.prototype.applyStyle = function (cssName, dom) {\n    var domStyles = this.get('domStyles');\n    modifyCSS(dom, domStyles[cssName]);\n  };\n  /**\n   * @protected\n   */\n  HtmlComponent.prototype.createDom = function () {\n    var containerTpl = this.get('containerTpl');\n    return createDom(containerTpl);\n  };\n  /**\n   * @protected\n   * 初始化事件\n   */\n  HtmlComponent.prototype.initEvent = function () {};\n  /**\n   * @protected\n   * 清理 DOM\n   */\n  HtmlComponent.prototype.removeDom = function () {\n    var container = this.get('container');\n    // 节点不一定有parentNode\n    container && container.parentNode && container.parentNode.removeChild(container);\n  };\n  /**\n   * @protected\n   * 清理事件\n   */\n  HtmlComponent.prototype.removeEvent = function () {};\n  HtmlComponent.prototype.updateInner = function (cfg) {\n    // 更新样式\n    if (hasKey(cfg, 'domStyles')) {\n      this.resetStyles();\n      this.applyStyles();\n    }\n    // 只要属性发生变化，都调整一些位置\n    this.resetPosition();\n  };\n  HtmlComponent.prototype.resetPosition = function () {};\n  ;\n  return HtmlComponent;\n}(Component);\nexport default HtmlComponent;","map":null,"metadata":{},"sourceType":"module"}