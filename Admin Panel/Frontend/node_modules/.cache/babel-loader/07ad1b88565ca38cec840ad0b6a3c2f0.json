{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { number as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport BaseSchema from './schema';\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\nexport function create() {\n  return new NumberSchema();\n}\nvar NumberSchema = /*#__PURE__*/function (_BaseSchema) {\n  _inherits(NumberSchema, _BaseSchema);\n  function NumberSchema() {\n    var _this;\n    _classCallCheck(this, NumberSchema);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NumberSchema).call(this, {\n      type: 'number'\n    }));\n    _this.withMutation(function () {\n      _this.transform(function (value) {\n        var parsed = value;\n        if (typeof parsed === 'string') {\n          parsed = parsed.replace(/\\s/g, '');\n          if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n          parsed = +parsed;\n        }\n        if (this.isType(parsed)) return parsed;\n        return parseFloat(parsed);\n      });\n    });\n    return _this;\n  }\n  _createClass(NumberSchema, [{\n    key: \"_typeCheck\",\n    value: function _typeCheck(value) {\n      if (value instanceof Number) value = value.valueOf();\n      return typeof value === 'number' && !isNaN(value);\n    }\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.min;\n      return this.test({\n        message: message,\n        name: 'min',\n        exclusive: true,\n        params: {\n          min: _min\n        },\n        test: function test(value) {\n          return isAbsent(value) || value >= this.resolve(_min);\n        }\n      });\n    }\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.max;\n      return this.test({\n        message: message,\n        name: 'max',\n        exclusive: true,\n        params: {\n          max: _max\n        },\n        test: function test(value) {\n          return isAbsent(value) || value <= this.resolve(_max);\n        }\n      });\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(less) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.lessThan;\n      return this.test({\n        message: message,\n        name: 'max',\n        exclusive: true,\n        params: {\n          less: less\n        },\n        test: function test(value) {\n          return isAbsent(value) || value < this.resolve(less);\n        }\n      });\n    }\n  }, {\n    key: \"moreThan\",\n    value: function moreThan(more) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.moreThan;\n      return this.test({\n        message: message,\n        name: 'min',\n        exclusive: true,\n        params: {\n          more: more\n        },\n        test: function test(value) {\n          return isAbsent(value) || value > this.resolve(more);\n        }\n      });\n    }\n  }, {\n    key: \"positive\",\n    value: function positive() {\n      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.positive;\n      return this.moreThan(0, msg);\n    }\n  }, {\n    key: \"negative\",\n    value: function negative() {\n      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.negative;\n      return this.lessThan(0, msg);\n    }\n  }, {\n    key: \"integer\",\n    value: function integer() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.integer;\n      return this.test({\n        name: 'integer',\n        message: message,\n        test: function test(val) {\n          return isAbsent(val) || Number.isInteger(val);\n        }\n      });\n    }\n  }, {\n    key: \"truncate\",\n    value: function truncate() {\n      return this.transform(function (value) {\n        return !isAbsent(value) ? value | 0 : value;\n      });\n    }\n  }, {\n    key: \"round\",\n    value: function round(method) {\n      var _method;\n      var avail = ['ceil', 'floor', 'round', 'trunc'];\n      method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round'; // this exists for symemtry with the new Math.trunc\n\n      if (method === 'trunc') return this.truncate();\n      if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n      return this.transform(function (value) {\n        return !isAbsent(value) ? Math[method](value) : value;\n      });\n    }\n  }]);\n  return NumberSchema;\n}(BaseSchema);\nexport { NumberSchema as default };\ncreate.prototype = NumberSchema.prototype; //\n// Number Interfaces\n//","map":null,"metadata":{},"sourceType":"module"}