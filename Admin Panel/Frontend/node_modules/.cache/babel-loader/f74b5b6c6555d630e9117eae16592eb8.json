{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Event, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign, findViewById } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { FIRST_AXES_VIEW, SECOND_AXES_VIEW, SERIES_FIELD_KEY } from './constant';\nimport { isHorizontal, syncViewPadding, transformData } from './utils';\nvar BidirectionalBar = /** @class */function (_super) {\n  __extends(BidirectionalBar, _super);\n  function BidirectionalBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'bidirectional-bar';\n    return _this;\n  }\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n  BidirectionalBar.getDefaultOptions = function () {\n    return deepAssign({}, _super.getDefaultOptions.call(this), {\n      syncViewPadding: syncViewPadding\n    });\n  };\n  /**\n   * @override\n   */\n  BidirectionalBar.prototype.changeData = function (data) {\n    if (data === void 0) {\n      data = [];\n    }\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 更新options\n    this.updateOption({\n      data: data\n    });\n    var _a = this.options,\n      xField = _a.xField,\n      yField = _a.yField,\n      layout = _a.layout;\n    // 处理数据\n    var groupData = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    var firstViewData = groupData[0],\n      secondViewData = groupData[1];\n    var firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    var secondView = findViewById(this.chart, SECOND_AXES_VIEW);\n    // 更新对应view的data\n    firstView.data(firstViewData);\n    secondView.data(secondViewData);\n    // 重新渲染\n    this.chart.render(true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  BidirectionalBar.prototype.getDefaultOptions = function () {\n    return BidirectionalBar.getDefaultOptions();\n  };\n  /**\n   * 获取对称条形图的适配器\n   */\n  BidirectionalBar.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /** 对称条形图分类字段 */\n  BidirectionalBar.SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n  return BidirectionalBar;\n}(Plot);\nexport { BidirectionalBar };","map":null,"metadata":{},"sourceType":"module"}