{"ast":null,"code":"import { DAY, HOUR, MINUTE, MONTH, SECOND, YEAR } from '../util/time';\nfunction getYear(date) {\n  return new Date(date).getFullYear();\n}\nfunction createYear(year) {\n  return new Date(year, 0, 1).getTime();\n}\nfunction getMonth(date) {\n  return new Date(date).getMonth();\n}\nfunction diffMonth(min, max) {\n  var minYear = getYear(min);\n  var maxYear = getYear(max);\n  var minMonth = getMonth(min);\n  var maxMonth = getMonth(max);\n  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;\n}\nfunction creatMonth(year, month) {\n  return new Date(year, month, 1).getTime();\n}\nfunction diffDay(min, max) {\n  return Math.ceil((max - min) / DAY);\n}\nfunction diffHour(min, max) {\n  return Math.ceil((max - min) / HOUR);\n}\nfunction diffMinus(min, max) {\n  return Math.ceil((max - min) / (60 * 1000));\n}\n/**\n * 计算 time 的 ticks，对 month, year 进行 pretty 处理\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function timePretty(cfg) {\n  var min = cfg.min,\n    max = cfg.max,\n    minTickInterval = cfg.minTickInterval,\n    tickCount = cfg.tickCount;\n  var tickInterval = cfg.tickInterval;\n  var ticks = [];\n  // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n  if (!tickInterval) {\n    tickInterval = (max - min) / tickCount;\n    // 如果设置了最小间距，则使用最小间距\n    if (minTickInterval && tickInterval < minTickInterval) {\n      tickInterval = minTickInterval;\n    }\n  }\n  tickInterval = Math.max(Math.floor((max - min) / (Math.pow(2, 12) - 1)), tickInterval);\n  var minYear = getYear(min);\n  // 如果间距大于 1 年，则将开始日期从整年开始\n  if (tickInterval > YEAR) {\n    var maxYear = getYear(max);\n    var yearInterval = Math.ceil(tickInterval / YEAR);\n    for (var i = minYear; i <= maxYear + yearInterval; i = i + yearInterval) {\n      ticks.push(createYear(i));\n    }\n  } else if (tickInterval > MONTH) {\n    // 大于月时\n    var monthInterval = Math.ceil(tickInterval / MONTH);\n    var mmMoth = getMonth(min);\n    var dMonths = diffMonth(min, max);\n    for (var i = 0; i <= dMonths + monthInterval; i = i + monthInterval) {\n      ticks.push(creatMonth(minYear, i + mmMoth));\n    }\n  } else if (tickInterval > DAY) {\n    // 大于天\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var mday = date.getDate();\n    var day = Math.ceil(tickInterval / DAY);\n    var ddays = diffDay(min, max);\n    for (var i = 0; i < ddays + day; i = i + day) {\n      ticks.push(new Date(year, month, mday + i).getTime());\n    }\n  } else if (tickInterval > HOUR) {\n    // 大于小时\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var day = date.getDate();\n    var hour = date.getHours();\n    var hours = Math.ceil(tickInterval / HOUR);\n    var dHours = diffHour(min, max);\n    for (var i = 0; i <= dHours + hours; i = i + hours) {\n      ticks.push(new Date(year, month, day, hour + i).getTime());\n    }\n  } else if (tickInterval > MINUTE) {\n    // 大于分钟\n    var dMinus = diffMinus(min, max);\n    var minutes = Math.ceil(tickInterval / MINUTE);\n    for (var i = 0; i <= dMinus + minutes; i = i + minutes) {\n      ticks.push(min + i * MINUTE);\n    }\n  } else {\n    // 小于分钟\n    var interval = tickInterval;\n    if (interval < SECOND) {\n      interval = SECOND;\n    }\n    var minSecond = Math.floor(min / SECOND) * SECOND;\n    var dSeconds = Math.ceil((max - min) / SECOND);\n    var seconds = Math.ceil(interval / SECOND);\n    for (var i = 0; i < dSeconds + seconds; i = i + seconds) {\n      ticks.push(minSecond + i * SECOND);\n    }\n  }\n  // 最好是能从算法能解决这个问题，但是如果指定了 tickInterval，计算 ticks，也只能这么算，所以\n  // 打印警告提示\n  if (ticks.length >= 512) {\n    console.warn(\"Notice: current ticks length(\" + ticks.length + \") >= 512, may cause performance issues, even out of memory. Because of the configure \\\"tickInterval\\\"(in milliseconds, current is \" + tickInterval + \") is too small, increase the value to solve the problem!\");\n  }\n  return ticks;\n}","map":null,"metadata":{},"sourceType":"module"}