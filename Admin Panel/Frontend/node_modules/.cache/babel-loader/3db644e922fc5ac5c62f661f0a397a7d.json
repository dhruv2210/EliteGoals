{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport Adjust from './adjust';\nvar Cache = _.Cache;\nvar Stack = /** @class */function (_super) {\n  __extends(Stack, _super);\n  function Stack(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    var _a = cfg.adjustNames,\n      adjustNames = _a === void 0 ? ['y'] : _a,\n      _b = cfg.height,\n      height = _b === void 0 ? NaN : _b,\n      _c = cfg.size,\n      size = _c === void 0 ? 10 : _c,\n      _d = cfg.reverseOrder,\n      reverseOrder = _d === void 0 ? false : _d;\n    _this.adjustNames = adjustNames;\n    _this.height = height;\n    _this.size = size;\n    _this.reverseOrder = reverseOrder;\n    return _this;\n  }\n  /**\n   * 方法入参是经过数据分组、数据数字化之后的二维数组\n   * @param groupDataArray 分组之后的数据\n   */\n  Stack.prototype.process = function (groupDataArray) {\n    var _a = this,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 如果有指定 y 字段，那么按照 y 字段来 stack\n    // 否则，按照高度均分\n    var d = yField ? this.processStack(groupDataArray) : this.processOneDimStack(groupDataArray);\n    return reverseOrder ? this.reverse(d) : d;\n  };\n  Stack.prototype.reverse = function (groupedDataArray) {\n    return groupedDataArray.slice(0).reverse();\n  };\n  Stack.prototype.processStack = function (groupDataArray) {\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 层叠顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 用来缓存，正数和负数的堆叠问题\n    var positive = new Cache();\n    var negative = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var x = _.get(data, xField, 0);\n        var y = _.get(data, [yField]);\n        var xKey = x.toString();\n        // todo 是否应该取 _origin？因为 y 可能取到的值不正确，比如先 symmetric，再 stack！\n        y = _.isArray(y) ? y[1] : y;\n        if (!_.isNil(y)) {\n          var cache = y >= 0 ? positive : negative;\n          if (!cache.has(xKey)) {\n            cache.set(xKey, 0);\n          }\n          var xValue = cache.get(xKey);\n          var newXValue = y + xValue;\n          // 存起来\n          cache.set(xKey, newXValue);\n          return __assign(__assign({}, data), (_a = {}, _a[yField] = [xValue, newXValue], _a));\n        }\n        // 没有修改，则直接返回\n        return data;\n      });\n    });\n  };\n  Stack.prototype.processOneDimStack = function (groupDataArray) {\n    var _this = this;\n    var _a = this,\n      xField = _a.xField,\n      height = _a.height,\n      reverseOrder = _a.reverseOrder;\n    var yField = 'y';\n    // 如果层叠的顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 缓存累加数据\n    var cache = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var size = _this.size;\n        var xValue = data[xField];\n        // todo 没有看到这个 stack 计算原理\n        var stackHeight = size * 2 / height;\n        if (!cache.has(xValue)) {\n          cache.set(xValue, stackHeight / 2); // 初始值大小\n        }\n\n        var stackValue = cache.get(xValue);\n        // 增加一层 stackHeight\n        cache.set(xValue, stackValue + stackHeight);\n        return __assign(__assign({}, data), (_a = {}, _a[yField] = stackValue, _a));\n      });\n    });\n  };\n  return Stack;\n}(Adjust);\nexport default Stack;","map":null,"metadata":{},"sourceType":"module"}