{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { filter, getRange, head, isNil, last } from '@antv/util';\nimport Base from '../base';\n/**\n * 连续度量的基类\n * @class\n */\nvar Continuous = /** @class */function (_super) {\n  __extends(Continuous, _super);\n  function Continuous() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.isContinuous = true;\n    return _this;\n  }\n  Continuous.prototype.scale = function (value) {\n    if (isNil(value)) {\n      return NaN;\n    }\n    var rangeMin = this.rangeMin();\n    var rangeMax = this.rangeMax();\n    var max = this.max;\n    var min = this.min;\n    if (max === min) {\n      return rangeMin;\n    }\n    var percent = this.getScalePercent(value);\n    return rangeMin + percent * (rangeMax - rangeMin);\n  };\n  Continuous.prototype.init = function () {\n    _super.prototype.init.call(this);\n    // init 完成后保证 min, max 包含 ticks 的范围\n    var ticks = this.ticks;\n    var firstTick = head(ticks);\n    var lastTick = last(ticks);\n    if (firstTick < this.min) {\n      this.min = firstTick;\n    }\n    if (lastTick > this.max) {\n      this.max = lastTick;\n    }\n    // strict-limit 方式\n    if (!isNil(this.minLimit)) {\n      this.min = firstTick;\n    }\n    if (!isNil(this.maxLimit)) {\n      this.max = lastTick;\n    }\n  };\n  Continuous.prototype.setDomain = function () {\n    var _a = getRange(this.values),\n      min = _a.min,\n      max = _a.max;\n    if (isNil(this.min)) {\n      this.min = min;\n    }\n    if (isNil(this.max)) {\n      this.max = max;\n    }\n    if (this.min > this.max) {\n      this.min = min;\n      this.max = max;\n    }\n  };\n  Continuous.prototype.calculateTicks = function () {\n    var _this = this;\n    var ticks = _super.prototype.calculateTicks.call(this);\n    if (!this.nice) {\n      ticks = filter(ticks, function (tick) {\n        return tick >= _this.min && tick <= _this.max;\n      });\n    }\n    return ticks;\n  };\n  // 计算原始值值占的百分比\n  Continuous.prototype.getScalePercent = function (value) {\n    var max = this.max;\n    var min = this.min;\n    return (value - min) / (max - min);\n  };\n  Continuous.prototype.getInvertPercent = function (value) {\n    return (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());\n  };\n  return Continuous;\n}(Base);\nexport default Continuous;","map":null,"metadata":{},"sourceType":"module"}