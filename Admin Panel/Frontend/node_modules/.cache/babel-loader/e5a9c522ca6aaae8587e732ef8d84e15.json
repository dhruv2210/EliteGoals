{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { get } from '@antv/util';\nimport { animation, annotation, interaction, scale, state, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { getLocale } from '../../core/locale';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { ABSOLUTE_FIELD, DIFF_FIELD, IS_TOTAL, Y_FIELD } from './constant';\nimport './shape';\nimport { transformData } from './utils';\n/**\n *  处理默认配置项\n * @param params\n * @returns\n */\nfunction defaultOptions(params) {\n  var _a = params.options,\n    locale = _a.locale,\n    total = _a.total;\n  var localeTotalLabel = getLocale(locale).get(['waterfall', 'total']);\n  if (total && typeof total.label !== 'string' && localeTotalLabel) {\n    // @ts-ignore\n    params.options.total.label = localeTotalLabel;\n  }\n  return params;\n}\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    xField = options.xField,\n    yField = options.yField,\n    total = options.total,\n    leaderLine = options.leaderLine,\n    columnWidthRatio = options.columnWidthRatio,\n    waterfallStyle = options.waterfallStyle,\n    risingFill = options.risingFill,\n    fallingFill = options.fallingFill,\n    color = options.color;\n  // 数据处理\n  chart.data(transformData(data, xField, yField, total));\n  // 瀑布图自带的 colorMapping\n  var colorMapping = color || function (datum) {\n    if (get(datum, [IS_TOTAL])) {\n      return get(total, ['style', 'fill'], '');\n    }\n    return get(datum, [Y_FIELD, 1]) - get(datum, [Y_FIELD, 0]) > 0 ? risingFill : fallingFill;\n  };\n  var p = deepAssign({}, params, {\n    options: {\n      xField: xField,\n      yField: Y_FIELD,\n      seriesField: xField,\n      rawFields: [yField, DIFF_FIELD, IS_TOTAL, Y_FIELD],\n      widthRatio: columnWidthRatio,\n      interval: {\n        style: waterfallStyle,\n        shape: 'waterfall',\n        color: colorMapping\n      }\n    }\n  });\n  var ext = interval(p).ext;\n  var geometry = ext.geometry;\n  // 将 waterfall leaderLineCfg 传入到自定义 shape 中\n  geometry.customInfo({\n    leaderLine: leaderLine\n  });\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a, _b;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField,\n    meta = options.meta;\n  var Y_FIELD_META = deepAssign({}, {\n    alias: yField\n  }, get(meta, yField));\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a[Y_FIELD] = yAxis, _a), deepAssign({}, meta, (_b = {}, _b[Y_FIELD] = Y_FIELD_META, _b[DIFF_FIELD] = Y_FIELD_META, _b[ABSOLUTE_FIELD] = Y_FIELD_META, _b))))(params);\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(yField, false);\n    chart.axis(Y_FIELD, false);\n  } else {\n    chart.axis(yField, yAxis);\n    chart.axis(Y_FIELD, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置 todo 添加 hover 交互\n * @param params\n */\nfunction legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    total = options.total,\n    risingFill = options.risingFill,\n    fallingFill = options.fallingFill,\n    locale = options.locale;\n  var i18n = getLocale(locale);\n  if (legend === false) {\n    chart.legend(false);\n  } else {\n    var items = [{\n      name: i18n.get(['general', 'increase']),\n      value: 'increase',\n      marker: {\n        symbol: 'square',\n        style: {\n          r: 5,\n          fill: risingFill\n        }\n      }\n    }, {\n      name: i18n.get(['general', 'decrease']),\n      value: 'decrease',\n      marker: {\n        symbol: 'square',\n        style: {\n          r: 5,\n          fill: fallingFill\n        }\n      }\n    }];\n    if (total) {\n      items.push({\n        name: total.label || '',\n        value: 'total',\n        marker: {\n          symbol: 'square',\n          style: deepAssign({}, {\n            r: 5\n          }, get(total, 'style'))\n        }\n      });\n    }\n    chart.legend(deepAssign({}, {\n      custom: true,\n      position: 'top',\n      items: items\n    }, legend));\n    chart.removeInteraction('legend-filter');\n  }\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    labelMode = options.labelMode,\n    xField = options.xField;\n  var geometry = findGeometry(chart, 'interval');\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    geometry.label({\n      fields: labelMode === 'absolute' ? [ABSOLUTE_FIELD, xField] : [DIFF_FIELD, xField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  return params;\n}\n/**\n * tooltip 配置\n * @param params\n */\nexport function tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip,\n    xField = options.xField,\n    yField = options.yField;\n  if (tooltip !== false) {\n    chart.tooltip(__assign({\n      showCrosshairs: false,\n      showMarkers: false,\n      shared: true,\n      // tooltip 默认展示 y 字段值\n      fields: [yField]\n    }, tooltip));\n    // 瀑布图默认以 yField 作为 tooltip 内容\n    var geometry_1 = chart.geometries[0];\n    (tooltip === null || tooltip === void 0 ? void 0 : tooltip.formatter) ? geometry_1.tooltip(xField + \"*\" + yField, tooltip.formatter) : geometry_1.tooltip(yField);\n  } else {\n    chart.tooltip(false);\n  }\n  return params;\n}\n/**\n * 瀑布图适配器\n * @param params\n */\nexport function adaptor(params) {\n  return flow(defaultOptions, theme, geometry, meta, axis, legend, tooltip, label, state, interaction, animation, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}