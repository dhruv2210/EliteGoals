{"ast":null,"code":"import { isArray } from '@antv/util';\n/**\n * 根据 edges 获取对应的 node 结构\n */\nexport function getNodes(edges, sourceField, targetField) {\n  var nodes = [];\n  edges.forEach(function (e) {\n    var source = e[sourceField];\n    var target = e[targetField];\n    if (!nodes.includes(source)) {\n      nodes.push(source);\n    }\n    if (!nodes.includes(target)) {\n      nodes.push(target);\n    }\n  });\n  return nodes;\n}\n/**\n * 根据 edges 获取对应的 dfs 邻接矩阵\n */\nexport function getMatrix(edges, nodes, sourceField, targetField) {\n  var graphMatrix = {};\n  nodes.forEach(function (pre) {\n    graphMatrix[pre] = {};\n    nodes.forEach(function (next) {\n      graphMatrix[pre][next] = 0;\n    });\n  });\n  edges.forEach(function (edge) {\n    graphMatrix[edge[sourceField]][edge[targetField]] = 1;\n  });\n  return graphMatrix;\n}\n/**\n * 使用 DFS 思路切断桑基图数据中的环（会丢失数据），保证顺序\n * @param data\n * @param sourceField\n * @param targetField\n */\nexport function cutoffCircle(edges, sourceField, targetField) {\n  if (!isArray(edges)) return [];\n  // 待删除的环状结构\n  var removedData = [];\n  // 获取所有的节点\n  var nodes = getNodes(edges, sourceField, targetField);\n  // 获取节点与边的邻接矩阵\n  var graphMatrix = getMatrix(edges, nodes, sourceField, targetField);\n  // visited：标记节点访问状态, 0：未访问,1：访问中, -1：已访问\n  var visited = {};\n  // 初始化visited\n  nodes.forEach(function (node) {\n    visited[node] = 0;\n  });\n  // 图的深度遍历函数\n  function DFS(dfsNode) {\n    // 节点状态置为正在访问\n    visited[dfsNode] = 1;\n    nodes.forEach(function (node) {\n      if (graphMatrix[dfsNode][node] != 0) {\n        // 当前节点在访问中，再次被访问，证明有环，移动到 removeData\n        if (visited[node] == 1) {\n          // 拼接为字符串，方便最后过滤\n          removedData.push(dfsNode + \"_\" + node);\n        } else if (visited[node] == -1) {\n          // 当前结点及后边的结点都被访问过，直接跳至下一个结点\n          return;\n        } else {\n          DFS(node); // 否则递归访问\n        }\n      }\n    });\n    //遍历过所有相连的结点后，把本节点标记为-1\n    visited[dfsNode] = -1;\n  }\n  // 对每个节点执行 dfs 操作\n  nodes.forEach(function (node) {\n    //该结点后边的结点都被访问过了，跳过它\n    if (visited[node] == -1) {\n      return;\n    }\n    DFS(node);\n  });\n  if (removedData.length !== 0) {\n    console.warn(\"sankey data contains circle, \" + removedData.length + \" records removed.\", removedData);\n  }\n  // 过滤 remove 路径\n  return edges.filter(function (edge) {\n    return removedData.findIndex(function (i) {\n      return i === edge[sourceField] + \"_\" + edge[targetField];\n    }) < 0;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}