{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport Checkbox from '../checkbox';\nimport Dropdown from '../dropdown';\nimport { isValidElement } from '../_util/reactNode';\nimport DefaultListBody, { OmitProps } from './ListBody';\nimport Search from './search';\nvar defaultRender = function defaultRender() {\n  return null;\n};\nfunction isRenderResultPlainObject(result) {\n  return !!(result && !isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]');\n}\nfunction getEnabledItemKeys(items) {\n  return items.filter(function (data) {\n    return !data.disabled;\n  }).map(function (data) {\n    return data.key;\n  });\n}\nvar TransferList = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(TransferList, _React$PureComponent);\n  var _super = _createSuper(TransferList);\n  function TransferList(props) {\n    var _this;\n    _classCallCheck(this, TransferList);\n    _this = _super.call(this, props);\n    _this.defaultListBodyRef = /*#__PURE__*/React.createRef();\n    // =============================== Filter ===============================\n    _this.handleFilter = function (e) {\n      var handleFilter = _this.props.handleFilter;\n      var filterValue = e.target.value;\n      _this.setState({\n        filterValue: filterValue\n      });\n      handleFilter(e);\n    };\n    _this.handleClear = function () {\n      var handleClear = _this.props.handleClear;\n      _this.setState({\n        filterValue: ''\n      });\n      handleClear();\n    };\n    _this.matchFilter = function (text, item) {\n      var filterValue = _this.state.filterValue;\n      var filterOption = _this.props.filterOption;\n      if (filterOption) {\n        return filterOption(filterValue, item);\n      }\n      return text.includes(filterValue);\n    };\n    // =============================== Render ===============================\n    _this.renderListBody = function (renderList, props) {\n      var bodyContent = renderList ? renderList(props) : null;\n      var customize = !!bodyContent;\n      if (!customize) {\n        bodyContent = /*#__PURE__*/React.createElement(DefaultListBody, _extends({\n          ref: _this.defaultListBodyRef\n        }, props));\n      }\n      return {\n        customize: customize,\n        bodyContent: bodyContent\n      };\n    };\n    _this.renderItem = function (item) {\n      var _this$props$render = _this.props.render,\n        render = _this$props$render === void 0 ? defaultRender : _this$props$render;\n      var renderResult = render(item);\n      var isRenderResultPlain = isRenderResultPlainObject(renderResult);\n      return {\n        renderedText: isRenderResultPlain ? renderResult.value : renderResult,\n        renderedEl: isRenderResultPlain ? renderResult.label : renderResult,\n        item: item\n      };\n    };\n    _this.getSelectAllLabel = function (selectedCount, totalCount) {\n      var _this$props = _this.props,\n        itemsUnit = _this$props.itemsUnit,\n        itemUnit = _this$props.itemUnit,\n        selectAllLabel = _this$props.selectAllLabel;\n      if (selectAllLabel) {\n        return typeof selectAllLabel === 'function' ? selectAllLabel({\n          selectedCount: selectedCount,\n          totalCount: totalCount\n        }) : selectAllLabel;\n      }\n      var unit = totalCount > 1 ? itemsUnit : itemUnit;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, (selectedCount > 0 ? selectedCount + \"/\" : '') + totalCount, \" \", unit);\n    };\n    _this.state = {\n      filterValue: ''\n    };\n    return _this;\n  }\n  _createClass(TransferList, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.triggerScrollTimer);\n    }\n  }, {\n    key: \"getCheckStatus\",\n    value: function getCheckStatus(filteredItems) {\n      var checkedKeys = this.props.checkedKeys;\n      if (checkedKeys.length === 0) {\n        return 'none';\n      }\n      if (filteredItems.every(function (item) {\n        return checkedKeys.includes(item.key) || !!item.disabled;\n      })) {\n        return 'all';\n      }\n      return 'part';\n    }\n    // ================================ Item ================================\n  }, {\n    key: \"getFilteredItems\",\n    value: function getFilteredItems(dataSource, filterValue) {\n      var _this2 = this;\n      var filteredItems = [];\n      var filteredRenderItems = [];\n      dataSource.forEach(function (item) {\n        var renderedItem = _this2.renderItem(item);\n        var renderedText = renderedItem.renderedText;\n        // Filter skip\n        if (filterValue && !_this2.matchFilter(renderedText, item)) {\n          return null;\n        }\n        filteredItems.push(item);\n        filteredRenderItems.push(renderedItem);\n      });\n      return {\n        filteredItems: filteredItems,\n        filteredRenderItems: filteredRenderItems\n      };\n    }\n  }, {\n    key: \"getListBody\",\n    value: function getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, filteredRenderItems, checkedKeys, renderList, showSearch, disabled) {\n      var _this3 = this;\n      var search = showSearch ? /*#__PURE__*/React.createElement(\"div\", {\n        className: prefixCls + \"-body-search-wrapper\"\n      }, /*#__PURE__*/React.createElement(Search, {\n        prefixCls: prefixCls + \"-search\",\n        onChange: this.handleFilter,\n        handleClear: this.handleClear,\n        placeholder: searchPlaceholder,\n        value: filterValue,\n        disabled: disabled\n      })) : null;\n      var _this$renderListBody = this.renderListBody(renderList, _extends(_extends({}, omit(this.props, OmitProps)), {\n          filteredItems: filteredItems,\n          filteredRenderItems: filteredRenderItems,\n          selectedKeys: checkedKeys\n        })),\n        bodyContent = _this$renderListBody.bodyContent,\n        customize = _this$renderListBody.customize;\n      var getNotFoundContent = function getNotFoundContent() {\n        var contentIndex = _this3.props.direction === 'left' ? 0 : 1;\n        return Array.isArray(notFoundContent) ? notFoundContent[contentIndex] : notFoundContent;\n      };\n      var bodyNode;\n      // We should wrap customize list body in a classNamed div to use flex layout.\n      if (customize) {\n        bodyNode = /*#__PURE__*/React.createElement(\"div\", {\n          className: prefixCls + \"-body-customize-wrapper\"\n        }, bodyContent);\n      } else {\n        bodyNode = filteredItems.length ? bodyContent : /*#__PURE__*/React.createElement(\"div\", {\n          className: prefixCls + \"-body-not-found\"\n        }, getNotFoundContent());\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames(showSearch ? prefixCls + \"-body \" + prefixCls + \"-body-with-search\" : prefixCls + \"-body\")\n      }, search, bodyNode);\n    }\n  }, {\n    key: \"getCheckBox\",\n    value: function getCheckBox(_ref) {\n      var filteredItems = _ref.filteredItems,\n        onItemSelectAll = _ref.onItemSelectAll,\n        disabled = _ref.disabled,\n        prefixCls = _ref.prefixCls;\n      var checkStatus = this.getCheckStatus(filteredItems);\n      var checkedAll = checkStatus === 'all';\n      var checkAllCheckbox = /*#__PURE__*/React.createElement(Checkbox, {\n        disabled: disabled,\n        checked: checkedAll,\n        indeterminate: checkStatus === 'part',\n        className: prefixCls + \"-checkbox\",\n        onChange: function onChange() {\n          // Only select enabled items\n          onItemSelectAll(filteredItems.filter(function (item) {\n            return !item.disabled;\n          }).map(function (_ref2) {\n            var key = _ref2.key;\n            return key;\n          }), !checkedAll);\n        }\n      });\n      return checkAllCheckbox;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n        _this4 = this;\n      var filterValue = this.state.filterValue;\n      var _this$props2 = this.props,\n        prefixCls = _this$props2.prefixCls,\n        _this$props2$dataSour = _this$props2.dataSource,\n        dataSource = _this$props2$dataSour === void 0 ? [] : _this$props2$dataSour,\n        _this$props2$titleTex = _this$props2.titleText,\n        titleText = _this$props2$titleTex === void 0 ? '' : _this$props2$titleTex,\n        checkedKeys = _this$props2.checkedKeys,\n        disabled = _this$props2.disabled,\n        footer = _this$props2.footer,\n        _this$props2$showSear = _this$props2.showSearch,\n        showSearch = _this$props2$showSear === void 0 ? false : _this$props2$showSear,\n        style = _this$props2.style,\n        searchPlaceholder = _this$props2.searchPlaceholder,\n        notFoundContent = _this$props2.notFoundContent,\n        selectAll = _this$props2.selectAll,\n        selectCurrent = _this$props2.selectCurrent,\n        selectInvert = _this$props2.selectInvert,\n        removeAll = _this$props2.removeAll,\n        removeCurrent = _this$props2.removeCurrent,\n        renderList = _this$props2.renderList,\n        onItemSelectAll = _this$props2.onItemSelectAll,\n        onItemRemove = _this$props2.onItemRemove,\n        _this$props2$showSele = _this$props2.showSelectAll,\n        showSelectAll = _this$props2$showSele === void 0 ? true : _this$props2$showSele,\n        showRemove = _this$props2.showRemove,\n        pagination = _this$props2.pagination,\n        direction = _this$props2.direction;\n      // Custom Layout\n      var footerDom = footer && (footer.length < 2 ? footer(this.props) : footer(this.props, {\n        direction: direction\n      }));\n      var listCls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, prefixCls + \"-with-pagination\", !!pagination), _defineProperty(_classNames, prefixCls + \"-with-footer\", !!footerDom), _classNames));\n      // ====================== Get filtered, checked item list ======================\n      var _this$getFilteredItem = this.getFilteredItems(dataSource, filterValue),\n        filteredItems = _this$getFilteredItem.filteredItems,\n        filteredRenderItems = _this$getFilteredItem.filteredRenderItems;\n      // ================================= List Body =================================\n      var listBody = this.getListBody(prefixCls, searchPlaceholder, filterValue, filteredItems, notFoundContent, filteredRenderItems, checkedKeys, renderList, showSearch, disabled);\n      // ================================ List Footer ================================\n      var listFooter = footerDom ? /*#__PURE__*/React.createElement(\"div\", {\n        className: prefixCls + \"-footer\"\n      }, footerDom) : null;\n      var checkAllCheckbox = !showRemove && !pagination && this.getCheckBox({\n        filteredItems: filteredItems,\n        onItemSelectAll: onItemSelectAll,\n        disabled: disabled,\n        prefixCls: prefixCls\n      });\n      var items;\n      if (showRemove) {\n        items = [/* Remove Current Page */\n        pagination ? {\n          key: 'removeCurrent',\n          onClick: function onClick() {\n            var _a;\n            var pageKeys = getEnabledItemKeys((((_a = _this4.defaultListBodyRef.current) === null || _a === void 0 ? void 0 : _a.getItems()) || []).map(function (entity) {\n              return entity.item;\n            }));\n            onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(pageKeys);\n          },\n          label: removeCurrent\n        } : null, /* Remove All */\n        {\n          key: 'removeAll',\n          onClick: function onClick() {\n            onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(getEnabledItemKeys(filteredItems));\n          },\n          label: removeAll\n        }].filter(function (item) {\n          return item;\n        });\n      } else {\n        items = [{\n          key: 'selectAll',\n          onClick: function onClick() {\n            var keys = getEnabledItemKeys(filteredItems);\n            onItemSelectAll(keys, keys.length !== checkedKeys.length);\n          },\n          label: selectAll\n        }, pagination ? {\n          key: 'selectCurrent',\n          onClick: function onClick() {\n            var _a;\n            var pageItems = ((_a = _this4.defaultListBodyRef.current) === null || _a === void 0 ? void 0 : _a.getItems()) || [];\n            onItemSelectAll(getEnabledItemKeys(pageItems.map(function (entity) {\n              return entity.item;\n            })), true);\n          },\n          label: selectCurrent\n        } : null, {\n          key: 'selectInvert',\n          onClick: function onClick() {\n            var _a;\n            var availableKeys;\n            if (pagination) {\n              availableKeys = getEnabledItemKeys((((_a = _this4.defaultListBodyRef.current) === null || _a === void 0 ? void 0 : _a.getItems()) || []).map(function (entity) {\n                return entity.item;\n              }));\n            } else {\n              availableKeys = getEnabledItemKeys(filteredItems);\n            }\n            var checkedKeySet = new Set(checkedKeys);\n            var newCheckedKeys = [];\n            var newUnCheckedKeys = [];\n            availableKeys.forEach(function (key) {\n              if (checkedKeySet.has(key)) {\n                newUnCheckedKeys.push(key);\n              } else {\n                newCheckedKeys.push(key);\n              }\n            });\n            onItemSelectAll(newCheckedKeys, true);\n            onItemSelectAll(newUnCheckedKeys, false);\n          },\n          label: selectInvert\n        }];\n      }\n      var dropdown = /*#__PURE__*/React.createElement(Dropdown, {\n        className: prefixCls + \"-header-dropdown\",\n        menu: {\n          items: items\n        },\n        disabled: disabled\n      }, /*#__PURE__*/React.createElement(DownOutlined, null));\n      // ================================== Render ===================================\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: listCls,\n        style: style\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: prefixCls + \"-header\"\n      }, showSelectAll ? /*#__PURE__*/React.createElement(React.Fragment, null, checkAllCheckbox, dropdown) : null, /*#__PURE__*/React.createElement(\"span\", {\n        className: prefixCls + \"-header-selected\"\n      }, this.getSelectAllLabel(checkedKeys.length, filteredItems.length)), /*#__PURE__*/React.createElement(\"span\", {\n        className: prefixCls + \"-header-title\"\n      }, titleText)), listBody, listFooter);\n    }\n  }]);\n  return TransferList;\n}(React.PureComponent);\nexport { TransferList as default };","map":null,"metadata":{},"sourceType":"module"}