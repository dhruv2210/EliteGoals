{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getElements, getElementValue, getCurrentElement } from '../util';\nimport Highlight, { STATUS_ACTIVE, STATUS_UNACTIVE } from './highlight';\n/**\n * Highlight x\n * @ignore\n */\nvar HighlightX = /** @class */function (_super) {\n  __extends(HighlightX, _super);\n  function HighlightX() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // 不允许多选\n  HighlightX.prototype.setElementHighlight = function (el, callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else {\n      el.setState(STATUS_UNACTIVE, true);\n      if (el.hasState(STATUS_ACTIVE)) {\n        el.setState(STATUS_ACTIVE, false);\n      }\n    }\n  };\n  HighlightX.prototype.setStateByElement = function (element, enable) {\n    var view = this.context.view;\n    var scale = view.getXScale();\n    var value = getElementValue(element, scale.field);\n    var elements = getElements(view);\n    var highlightElements = elements.filter(function (el) {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, function (el) {\n      return highlightElements.includes(el);\n    }, enable);\n  };\n  /**\n   * 切换状态\n   */\n  HighlightX.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      var hasState = element.hasState(this.stateName);\n      this.setStateByElement(element, !hasState);\n    }\n  };\n  return HighlightX;\n}(Highlight);\nexport default HighlightX;","map":null,"metadata":{},"sourceType":"module"}