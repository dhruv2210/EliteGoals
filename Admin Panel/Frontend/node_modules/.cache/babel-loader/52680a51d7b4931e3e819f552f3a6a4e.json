{"ast":null,"code":"import colorUtil from '@antv/color-util';\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\nvar each = function each(f) {\n  return function (c0, c1) {\n    var out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n  };\n};\n/**\n * 混合方法集合\n */\nvar blendObject = {\n  normal: function normal(a) {\n    return a;\n  },\n  multiply: function multiply(a, b) {\n    return a * b / 255;\n  },\n  screen: function screen(a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  },\n  overlay: function overlay(a, b) {\n    return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n  },\n  darken: function darken(a, b) {\n    return a > b ? b : a;\n  },\n  lighten: function lighten(a, b) {\n    return a > b ? a : b;\n  },\n  dodge: function dodge(a, b) {\n    if (a === 255) return 255;\n    a = 255 * (b / 255) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n  },\n  burn: function burn(a, b) {\n    // 参考 w3c 的写法，考虑除数为 0 的情况\n    if (b === 255) return 255;else if (a === 0) return 0;else return 255 * (1 - Math.min(1, (1 - b / 255) / (a / 255)));\n  }\n};\n/**\n * 获取混合方法\n */\nexport var innerBlend = function innerBlend(mode) {\n  if (!blendObject[mode]) {\n    throw new Error('unknown blend mode ' + mode);\n  }\n  return blendObject[mode];\n};\n/**\n * 混合颜色，并处理透明度情况\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c0\n * @param c1\n * @param mode 混合模式\n * @return rbga\n */\nexport function blend(c0, c1, mode) {\n  if (mode === void 0) {\n    mode = 'normal';\n  }\n  // blendRgbArr: 生成不考虑透明度的 blend color: [r, g, b]\n  var blendRgbArr = each(innerBlend(mode))(colorToArr(c0), colorToArr(c1));\n  var _a = colorToArr(c0),\n    r0 = _a[0],\n    g0 = _a[1],\n    b0 = _a[2],\n    a0 = _a[3];\n  var _b = colorToArr(c1),\n    r1 = _b[0],\n    g1 = _b[1],\n    b1 = _b[2],\n    a1 = _b[3];\n  var a = Number((a0 + a1 * (1 - a0)).toFixed(2));\n  var r = Math.round((a0 * (1 - a1) * (r0 / 255) + a0 * a1 * (blendRgbArr[0] / 255) + (1 - a0) * a1 * (r1 / 255)) / a * 255);\n  var g = Math.round((a0 * (1 - a1) * (g0 / 255) + a0 * a1 * (blendRgbArr[1] / 255) + (1 - a0) * a1 * (g1 / 255)) / a * 255);\n  var b = Math.round((a0 * (1 - a1) * (b0 / 255) + a0 * a1 * (blendRgbArr[2] / 255) + (1 - a0) * a1 * (b1 / 255)) / a * 255);\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\n/**\n * 统一颜色输入的格式 [r, g, b, a]\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c color\n * @return [r, g, b, a]\n */\nexport function colorToArr(c) {\n  var color = c.replace('/s+/g', ''); // 去除所有空格\n  var rgbaArr;\n  // 'red' -> [r, g, b, 1]\n  if (typeof color === 'string' && !color.startsWith('rgba') && !color.startsWith('#')) {\n    return rgbaArr = colorUtil.rgb2arr(colorUtil.toRGB(color)).concat([1]);\n  }\n  // rgba(255, 200, 125, 0.5) -> [r, g, b, a]\n  if (color.startsWith('rgba')) rgbaArr = color.replace('rgba(', '').replace(')', '').split(',');\n  // '#fff000' -> [r, g, b, 1]\n  if (color.startsWith('#')) rgbaArr = colorUtil.rgb2arr(color).concat([1]); // 如果是 16 进制（6 位数），默认透明度 1\n  // [r, g, b, a] 前三位取整\n  return rgbaArr.map(function (item, index) {\n    return index === 3 ? Number(item) : item | 0;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}