{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { resetComponent } from '../../style';\nvar genBaseStyle = function genBaseStyle(token) {\n  var _extends2, _extends3;\n  var antCls = token.antCls,\n    componentCls = token.componentCls,\n    iconCls = token.iconCls,\n    avatarBg = token.avatarBg,\n    avatarColor = token.avatarColor,\n    avatarSizeBase = token.avatarSizeBase,\n    avatarSizeLG = token.avatarSizeLG,\n    avatarSizeSM = token.avatarSizeSM,\n    avatarFontSizeBase = token.avatarFontSizeBase,\n    avatarFontSizeLG = token.avatarFontSizeLG,\n    avatarFontSizeSM = token.avatarFontSizeSM,\n    borderRadius = token.borderRadius,\n    borderRadiusLG = token.borderRadiusLG,\n    borderRadiusSM = token.borderRadiusSM,\n    lineWidth = token.lineWidth,\n    lineType = token.lineType;\n  // Avatar size style\n  var avatarSizeStyle = function avatarSizeStyle(size, fontSize, radius) {\n    var _ref2;\n    return _ref2 = {\n      width: size,\n      height: size,\n      lineHeight: size - lineWidth * 2 + \"px\",\n      borderRadius: '50%'\n    }, _defineProperty(_ref2, \"&\" + componentCls + \"-square\", {\n      borderRadius: radius\n    }), _defineProperty(_ref2, componentCls + \"-string\", {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    }), _defineProperty(_ref2, \"&\" + componentCls + \"-icon\", _defineProperty({\n      fontSize: fontSize\n    }, \"> \" + iconCls, {\n      margin: 0\n    })), _ref2;\n  };\n  return _defineProperty({}, componentCls, _extends(_extends(_extends(_extends({}, resetComponent(token)), (_extends2 = {\n    position: 'relative',\n    display: 'inline-block',\n    overflow: 'hidden',\n    color: avatarColor,\n    whiteSpace: 'nowrap',\n    textAlign: 'center',\n    verticalAlign: 'middle',\n    background: avatarBg,\n    border: lineWidth + \"px \" + lineType + \" transparent\"\n  }, _defineProperty(_extends2, \"&-image\", {\n    background: 'transparent'\n  }), _defineProperty(_extends2, antCls + \"-image-img\", {\n    display: 'block'\n  }), _extends2)), avatarSizeStyle(avatarSizeBase, avatarFontSizeBase, borderRadius)), (_extends3 = {}, _defineProperty(_extends3, \"&-lg\", _extends({}, avatarSizeStyle(avatarSizeLG, avatarFontSizeLG, borderRadiusLG))), _defineProperty(_extends3, \"&-sm\", _extends({}, avatarSizeStyle(avatarSizeSM, avatarFontSizeSM, borderRadiusSM))), _defineProperty(_extends3, '> img', {\n    display: 'block',\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover'\n  }), _extends3)));\n};\nvar genGroupStyle = function genGroupStyle(token) {\n  var _ref5;\n  var componentCls = token.componentCls,\n    avatarGroupBorderColor = token.avatarGroupBorderColor,\n    avatarGroupOverlapping = token.avatarGroupOverlapping,\n    avatarGroupSpace = token.avatarGroupSpace;\n  return _defineProperty({}, componentCls + \"-group\", (_ref5 = {\n    display: 'inline-flex'\n  }, _defineProperty(_ref5, \"\" + componentCls, _defineProperty({\n    borderColor: avatarGroupBorderColor\n  }, \"&:not(:first-child)\", {\n    marginInlineStart: -avatarGroupOverlapping\n  })), _defineProperty(_ref5, \"&-popover\", _defineProperty({}, componentCls + \" + \" + componentCls, {\n    marginInlineStart: avatarGroupSpace\n  })), _ref5));\n};\nexport default genComponentStyleHook('Avatar', function (token) {\n  var colorTextLightSolid = token.colorTextLightSolid,\n    controlHeight = token.controlHeight,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    fontSize = token.fontSize,\n    fontSizeLG = token.fontSizeLG,\n    fontSizeXL = token.fontSizeXL,\n    fontSizeHeading3 = token.fontSizeHeading3,\n    marginXS = token.marginXS,\n    colorBorderBg = token.colorBorderBg,\n    colorTextPlaceholder = token.colorTextPlaceholder;\n  var avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid,\n    avatarSizeBase: controlHeight,\n    avatarSizeLG: controlHeightLG,\n    avatarSizeSM: controlHeightSM,\n    avatarFontSizeBase: Math.round((fontSizeLG + fontSizeXL) / 2),\n    avatarFontSizeLG: fontSizeHeading3,\n    avatarFontSizeSM: fontSize,\n    avatarGroupOverlapping: marginXS,\n    avatarGroupSpace: marginXS,\n    avatarGroupBorderColor: colorBorderBg\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n});","map":null,"metadata":{},"sourceType":"module"}