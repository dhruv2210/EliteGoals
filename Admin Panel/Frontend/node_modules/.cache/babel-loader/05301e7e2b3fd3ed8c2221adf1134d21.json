{"ast":null,"code":"/**\n * @fileoverview 文本\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isNil, isString, each } from '../util/util';\nimport { getTextHeight, assembleFont } from '@antv/g-base';\nvar Text = /** @class */function (_super) {\n  __extends(Text, _super);\n  function Text() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // 默认文本属性\n  Text.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      text: null,\n      fontSize: 12,\n      fontFamily: 'sans-serif',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      fontVariant: 'normal',\n      textAlign: 'start',\n      textBaseline: 'bottom'\n    });\n  };\n  // 仅仅使用包围盒检测来进行拾取\n  Text.prototype.isOnlyHitBox = function () {\n    return true;\n  };\n  // 初始化时组合 font，同时判断 text 是否换行\n  Text.prototype.initAttrs = function (attrs) {\n    this._assembleFont();\n    if (attrs.text) {\n      this._setText(attrs.text);\n    }\n  };\n  // 组装字体\n  Text.prototype._assembleFont = function () {\n    var attrs = this.attrs;\n    attrs.font = assembleFont(attrs);\n  };\n  // 如果文本换行，则缓存数组\n  Text.prototype._setText = function (text) {\n    var textArr = null;\n    if (isString(text) && text.indexOf('\\n') !== -1) {\n      textArr = text.split('\\n');\n    }\n    this.set('textArr', textArr);\n  };\n  // 更新属性时，检测是否更改了 font、text\n  Text.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    if (name.startsWith('font')) {\n      this._assembleFont();\n    }\n    if (name === 'text') {\n      this._setText(value);\n    }\n  };\n  // 这个方法在 text 时没有可以做的事情，如果要支持文字背景时可以考虑\n  // createPath(context) {\n  // }\n  // 如果文本多行，需要获取文本间距\n  Text.prototype._getSpaceingY = function () {\n    var attrs = this.attrs;\n    var lineHeight = attrs.lineHeight;\n    var fontSize = attrs.fontSize * 1;\n    return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n  };\n  // 绘制文本，考虑多行的场景\n  Text.prototype._drawTextArr = function (context, textArr, isFill) {\n    var attrs = this.attrs;\n    var textBaseline = attrs.textBaseline;\n    var x = attrs.x;\n    var y = attrs.y;\n    var fontSize = attrs.fontSize * 1;\n    var spaceingY = this._getSpaceingY();\n    var height = getTextHeight(attrs.text, attrs.fontSize, attrs.lineHeight);\n    var subY;\n    each(textArr, function (subText, index) {\n      subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;\n      if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;\n      if (textBaseline === 'top') subY += height - fontSize;\n      if (!isNil(subText)) {\n        if (isFill) {\n          context.fillText(subText, x, subY);\n        } else {\n          context.strokeText(subText, x, subY);\n        }\n      }\n    });\n  };\n  // 绘制文本，同时考虑填充和绘制边框\n  Text.prototype._drawText = function (context, isFill) {\n    var attrs = this.attr();\n    var x = attrs.x;\n    var y = attrs.y;\n    var textArr = this.get('textArr');\n    if (textArr) {\n      this._drawTextArr(context, textArr, isFill);\n    } else {\n      var text = attrs.text;\n      if (!isNil(text)) {\n        if (isFill) {\n          context.fillText(text, x, y);\n        } else {\n          context.strokeText(text, x, y);\n        }\n      }\n    }\n  };\n  // 复写绘制和填充的逻辑：对于文本，应该先绘制边框，再进行填充\n  Text.prototype.strokeAndFill = function (context) {\n    var _a = this.attrs,\n      lineWidth = _a.lineWidth,\n      opacity = _a.opacity,\n      strokeOpacity = _a.strokeOpacity,\n      fillOpacity = _a.fillOpacity;\n    if (this.isStroke()) {\n      if (lineWidth > 0) {\n        if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = opacity;\n        }\n        this.stroke(context);\n      }\n    }\n    if (this.isFill()) {\n      if (!isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        this.fill(context);\n        context.globalAlpha = opacity;\n      } else {\n        this.fill(context);\n      }\n    }\n    this.afterDrawPath(context);\n  };\n  // 复写填充逻辑\n  Text.prototype.fill = function (context) {\n    this._drawText(context, true);\n  };\n  // 复写绘制边框的逻辑\n  Text.prototype.stroke = function (context) {\n    this._drawText(context, false);\n  };\n  return Text;\n}(ShapeBase);\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}