{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport GroupComponent from '../abstract/group-component';\nexport var DEFAULT_HANDLER_STYLE = {\n  fill: '#F7F7F7',\n  stroke: '#BFBFBF',\n  radius: 2,\n  opacity: 1,\n  cursor: 'ew-resize',\n  // 高亮的颜色\n  highLightFill: '#FFF'\n};\nvar Handler = /** @class */function (_super) {\n  __extends(Handler, _super);\n  function Handler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Handler.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'handler',\n      x: 0,\n      y: 0,\n      width: 10,\n      height: 24,\n      style: DEFAULT_HANDLER_STYLE\n    });\n  };\n  Handler.prototype.renderInner = function (group) {\n    var _a = this.cfg,\n      width = _a.width,\n      height = _a.height,\n      style = _a.style;\n    var fill = style.fill,\n      stroke = style.stroke,\n      radius = style.radius,\n      opacity = style.opacity,\n      cursor = style.cursor;\n    // 按钮框框\n    this.addShape(group, {\n      type: 'rect',\n      id: this.getElementId('background'),\n      attrs: {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        fill: fill,\n        stroke: stroke,\n        radius: radius,\n        opacity: opacity,\n        cursor: cursor\n      }\n    });\n    // 两根竖线\n    var x1 = 1 / 3 * width;\n    var x2 = 2 / 3 * width;\n    var y1 = 1 / 4 * height;\n    var y2 = 3 / 4 * height;\n    this.addShape(group, {\n      id: this.getElementId('line-left'),\n      type: 'line',\n      attrs: {\n        x1: x1,\n        y1: y1,\n        x2: x1,\n        y2: y2,\n        stroke: stroke,\n        cursor: cursor\n      }\n    });\n    this.addShape(group, {\n      id: this.getElementId('line-right'),\n      type: 'line',\n      attrs: {\n        x1: x2,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        stroke: stroke,\n        cursor: cursor\n      }\n    });\n  };\n  Handler.prototype.applyOffset = function () {\n    this.moveElementTo(this.get('group'), {\n      x: this.get('x'),\n      y: this.get('y')\n    });\n  };\n  Handler.prototype.initEvent = function () {\n    this.bindEvents();\n  };\n  Handler.prototype.bindEvents = function () {\n    var _this = this;\n    this.get('group').on('mouseenter', function () {\n      var highLightFill = _this.get('style').highLightFill;\n      _this.getElementByLocalId('background').attr('fill', highLightFill);\n      _this.draw();\n    });\n    this.get('group').on('mouseleave', function () {\n      var fill = _this.get('style').fill;\n      _this.getElementByLocalId('background').attr('fill', fill);\n      _this.draw();\n    });\n  };\n  Handler.prototype.draw = function () {\n    var canvas = this.get('container').get('canvas');\n    if (canvas) {\n      canvas.draw();\n    }\n  };\n  return Handler;\n}(GroupComponent);\nexport { Handler };\nexport default Handler;","map":null,"metadata":{},"sourceType":"module"}