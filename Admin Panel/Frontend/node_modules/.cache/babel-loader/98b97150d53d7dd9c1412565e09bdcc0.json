{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { cutoffCircle } from './circle';\nimport { sankeyLayout } from './layout';\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\nfunction isNodeLink(dataType) {\n  return dataType === 'node-link';\n}\nexport function getNodeWidthRatio(nodeWidth, nodeWidthRatio, width) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\nexport function getNodePaddingRatio(nodePadding, nodePaddingRatio, height) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\nexport function transformToViewsData(options, width, height) {\n  var dataType = options.dataType,\n    data = options.data,\n    sourceField = options.sourceField,\n    targetField = options.targetField,\n    weightField = options.weightField,\n    nodeAlign = options.nodeAlign,\n    nodeSort = options.nodeSort,\n    nodePadding = options.nodePadding,\n    nodePaddingRatio = options.nodePaddingRatio,\n    nodeWidth = options.nodeWidth,\n    nodeWidthRatio = options.nodeWidthRatio,\n    nodeDepth = options.nodeDepth,\n    _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a;\n  var sankeyLayoutInputData;\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(cutoffCircle(data, sourceField, targetField), sourceField, targetField, weightField, rawFields);\n  } else {\n    sankeyLayoutInputData = data;\n  }\n  // 3. layout 之后的数据\n  var _b = sankeyLayout({\n      nodeAlign: nodeAlign,\n      nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n      nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n      nodeSort: nodeSort,\n      nodeDepth: nodeDepth\n    }, sankeyLayoutInputData),\n    nodes = _b.nodes,\n    links = _b.links;\n  // 4. 生成绘图数据\n  return {\n    nodes: nodes.map(function (node) {\n      return __assign(__assign({}, pick(node, __spreadArrays(['x', 'y', 'name'], rawFields))), {\n        isNode: true\n      });\n    }),\n    edges: links.map(function (link) {\n      return __assign(__assign({\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name\n      }, pick(link, __spreadArrays(['x', 'y', 'value'], rawFields))), {\n        isNode: false\n      });\n    })\n  };\n}","map":null,"metadata":{},"sourceType":"module"}