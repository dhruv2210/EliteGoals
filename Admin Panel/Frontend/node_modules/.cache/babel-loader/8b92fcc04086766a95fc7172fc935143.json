{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { drawBackground, getPixelRatio, getSymbolsPosition, getUnitPatternSize, initCanvas, transformMatrix } from './util';\n/**\n * dotPattern的默认配置\n */\nexport var defaultDotPatternCfg = {\n  size: 6,\n  padding: 2,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0,\n  isStagger: true\n};\n/**\n * 绘制圆点\n *\n * @param context\n * @param cfg\n * @param x 圆点中心坐标x\n * @param y 圆点中心坐标y\n */\nexport function drawDot(context, cfg, x, y) {\n  var size = cfg.size,\n    fill = cfg.fill,\n    lineWidth = cfg.lineWidth,\n    stroke = cfg.stroke,\n    fillOpacity = cfg.fillOpacity;\n  context.beginPath();\n  context.globalAlpha = fillOpacity;\n  context.fillStyle = fill;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.arc(x, y, size / 2, 0, 2 * Math.PI, false);\n  context.fill();\n  if (lineWidth) {\n    context.stroke();\n  }\n  context.closePath();\n}\n/**\n * 创建 dot pattern，返回 HTMLCanvasElement\n *\n * @param cfg\n * @returns HTMLCanvasElement\n */\nexport function createDotPattern(cfg) {\n  var dotCfg = deepAssign({}, defaultDotPatternCfg, cfg);\n  var size = dotCfg.size,\n    padding = dotCfg.padding,\n    isStagger = dotCfg.isStagger,\n    rotation = dotCfg.rotation;\n  // 计算 画布大小，dots的位置\n  var unitSize = getUnitPatternSize(size, padding, isStagger);\n  var dots = getSymbolsPosition(unitSize, isStagger);\n  // 初始化 patternCanvas\n  var canvas = initCanvas(unitSize, unitSize);\n  var ctx = canvas.getContext('2d');\n  // 绘制 background，dots\n  drawBackground(ctx, dotCfg, unitSize);\n  for (var _i = 0, dots_1 = dots; _i < dots_1.length; _i++) {\n    var _a = dots_1[_i],\n      x = _a[0],\n      y = _a[1];\n    drawDot(ctx, dotCfg, x, y);\n  }\n  var pattern = ctx.createPattern(canvas, 'repeat');\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n  return pattern;\n}","map":null,"metadata":{},"sourceType":"module"}