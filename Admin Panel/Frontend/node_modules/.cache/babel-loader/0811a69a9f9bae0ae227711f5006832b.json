{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useRef, memo, useContext } from 'react';\nimport CloseOutlined from \"@ant-design/icons/es/icons/CloseOutlined\";\nimport FileTextOutlined from \"@ant-design/icons/es/icons/FileTextOutlined\";\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport FloatButton, { floatButtonPrefixCls } from './FloatButton';\nimport { ConfigContext } from '../config-provider';\nimport { FloatButtonGroupProvider } from './context';\nimport useStyle from './style';\nvar FloatButtonGroup = function FloatButtonGroup(props) {\n  var _classNames;\n  var customizePrefixCls = props.prefixCls,\n    className = props.className,\n    style = props.style,\n    _props$shape = props.shape,\n    shape = _props$shape === void 0 ? 'circle' : _props$shape,\n    _props$type = props.type,\n    type = _props$type === void 0 ? 'default' : _props$type,\n    _props$icon = props.icon,\n    icon = _props$icon === void 0 ? /*#__PURE__*/React.createElement(FileTextOutlined, null) : _props$icon,\n    _props$closeIcon = props.closeIcon,\n    closeIcon = _props$closeIcon === void 0 ? /*#__PURE__*/React.createElement(CloseOutlined, null) : _props$closeIcon,\n    description = props.description,\n    trigger = props.trigger,\n    children = props.children,\n    onOpenChange = props.onOpenChange;\n  var _useContext = useContext(ConfigContext),\n    direction = _useContext.direction,\n    getPrefixCls = _useContext.getPrefixCls;\n  var prefixCls = getPrefixCls(floatButtonPrefixCls, customizePrefixCls);\n  var _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  var groupPrefixCls = prefixCls + \"-group\";\n  var groupCls = classNames(groupPrefixCls, hashId, className, (_classNames = {}, _defineProperty(_classNames, groupPrefixCls + \"-rtl\", direction === 'rtl'), _defineProperty(_classNames, groupPrefixCls + \"-\" + shape, shape), _defineProperty(_classNames, groupPrefixCls + \"-\" + shape + \"-shadow\", !trigger), _classNames));\n  var wrapperCls = classNames(hashId, groupPrefixCls + \"-wrap\");\n  var _useMergedState = useMergedState(false, {\n      value: props.open\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    open = _useMergedState2[0],\n    setOpen = _useMergedState2[1];\n  var clickAction = useRef({});\n  var hoverAction = useRef({});\n  if (trigger === 'click') {\n    clickAction.current = {\n      onClick: function onClick() {\n        setOpen(function (prevState) {\n          onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(!prevState);\n          return !prevState;\n        });\n      }\n    };\n  }\n  if (trigger === 'hover') {\n    hoverAction.current = {\n      onMouseEnter: function onMouseEnter() {\n        setOpen(true);\n        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        setOpen(false);\n        onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(false);\n      }\n    };\n  }\n  return wrapSSR( /*#__PURE__*/React.createElement(FloatButtonGroupProvider, {\n    value: shape\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: groupCls,\n    style: style\n  }, hoverAction.current), trigger && ['click', 'hover'].includes(trigger) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CSSMotion, {\n    visible: open,\n    motionName: groupPrefixCls + \"-wrap\"\n  }, function (_ref) {\n    var motionClassName = _ref.className;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(motionClassName, wrapperCls)\n    }, children);\n  }), /*#__PURE__*/React.createElement(FloatButton, _extends({\n    type: type,\n    shape: shape,\n    icon: open ? closeIcon : icon,\n    description: description\n  }, clickAction.current))) : children)));\n};\nexport default /*#__PURE__*/memo(FloatButtonGroup);","map":null,"metadata":{},"sourceType":"module"}