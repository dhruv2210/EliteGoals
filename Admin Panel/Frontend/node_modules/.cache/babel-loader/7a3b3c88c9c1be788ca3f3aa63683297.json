{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\nimport { enableInteraction, resetDrillDown, transformData } from './utils';\nvar Treemap = /** @class */function (_super) {\n  __extends(Treemap, _super);\n  function Treemap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'treemap';\n    return _this;\n  }\n  /**\n   * 获取 矩阵树图 默认配置项\n   * 供外部使用\n   */\n  Treemap.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * changeData\n   */\n  Treemap.prototype.changeData = function (data) {\n    var _a = this.options,\n      colorField = _a.colorField,\n      interactions = _a.interactions,\n      hierarchyConfig = _a.hierarchyConfig;\n    this.updateOption({\n      data: data\n    });\n    var transData = transformData({\n      data: data,\n      colorField: colorField,\n      enableDrillDown: enableInteraction(interactions, 'treemap-drill-down'),\n      hierarchyConfig: hierarchyConfig\n    });\n    this.chart.changeData(transData);\n    resetDrillDown(this.chart);\n  };\n  /**\n   * 获取 矩阵树图 默认配置\n   */\n  Treemap.prototype.getDefaultOptions = function () {\n    return Treemap.getDefaultOptions();\n  };\n  Treemap.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  return Treemap;\n}(Plot);\nexport { Treemap };","map":null,"metadata":{},"sourceType":"module"}