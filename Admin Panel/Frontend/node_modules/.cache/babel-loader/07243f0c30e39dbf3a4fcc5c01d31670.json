{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields) {\n  var excludedEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var edges = [];\n  var nodes = new Set();\n  var excludes = new Set(excludedEdges.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      a = _ref2[0],\n      b = _ref2[1];\n    return \"\".concat(a, \"-\").concat(b);\n  }));\n  function addNode(depPath, key) {\n    var node = split(depPath)[0];\n    nodes.add(node);\n    if (!excludes.has(\"\".concat(key, \"-\").concat(node))) edges.push([key, node]);\n  }\n  var _loop = function _loop(key) {\n    if (has(fields, key)) {\n      var value = fields[key];\n      nodes.add(key);\n      if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(function (path) {\n        return addNode(path, key);\n      });\n    }\n  };\n  for (var key in fields) {\n    _loop(key);\n  }\n  return toposort.array(Array.from(nodes), edges).reverse();\n}","map":null,"metadata":{},"sourceType":"module"}