{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { animation, interaction, pattern, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { getLiquidData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var percent = options.percent,\n    liquidStyle = options.liquidStyle,\n    radius = options.radius,\n    outline = options.outline,\n    wave = options.wave,\n    shape = options.shape,\n    shapeStyle = options.shapeStyle,\n    animation = options.animation;\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1\n    }\n  });\n  chart.data(getLiquidData(percent));\n  var color = options.color || chart.getTheme().defaultColor;\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color: color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge'\n      }\n    }\n  });\n  var ext = interval(p).ext;\n  var geometry = ext.geometry;\n  var background = chart.getTheme().background;\n  var customInfo = {\n    radius: radius,\n    outline: outline,\n    wave: wave,\n    shape: shape,\n    shapeStyle: shapeStyle,\n    background: background,\n    animation: animation\n  };\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo(customInfo);\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var statistic = options.statistic,\n    percent = options.percent,\n    meta = options.meta;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n    return (v * 100).toFixed(2) + \"%\";\n  };\n  var contentOpt = statistic.content;\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n    });\n  }\n  renderStatistic(chart, {\n    statistic: __assign(__assign({}, statistic), {\n      content: contentOpt\n    }),\n    plotType: 'liquid'\n  }, {\n    percent: percent\n  });\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}","map":null,"metadata":{},"sourceType":"module"}