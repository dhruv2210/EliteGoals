{"ast":null,"code":"import { Event as GEvent } from '../dependents';\n/**\n * @todo Whether it can(or necessary to) keep consistent with the structure of G.Event or directly use the structure of G.Event\n * G2 事件的事件包装类，基于 G.Event\n */\nvar Event = /** @class */function () {\n  function Event(view, gEvent, data) {\n    this.view = view;\n    this.gEvent = gEvent;\n    this.data = data;\n    this.type = gEvent.type;\n  }\n  /**\n   * 非交互产生的事件\n   * @param view\n   * @param type\n   * @param data\n   */\n  Event.fromData = function (view, type, data) {\n    return new Event(view, new GEvent(type, {}), data);\n  };\n  Object.defineProperty(Event.prototype, \"target\", {\n    // below props are proxy props of G.event convenient\n    /** the real trigger shape of the event */\n    get: function get() {\n      // @todo G 中事件定义为 object 不正确，这里先 ignore\n      // @ts-ignore\n      return this.gEvent.target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"event\", {\n    /** 获取对应的 dom 原生时间 */\n    get: function get() {\n      return this.gEvent.originalEvent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"x\", {\n    /** x 画布坐标 */\n    get: function get() {\n      return this.gEvent.x;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"y\", {\n    /** y 画布坐标 */\n    get: function get() {\n      return this.gEvent.y;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"clientX\", {\n    /** x 窗口坐标 */\n    get: function get() {\n      return this.gEvent.clientX;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Event.prototype, \"clientY\", {\n    /** y 窗口坐标 */\n    get: function get() {\n      return this.gEvent.clientY;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // end for proxy events\n  /**\n   * event string\n   * @returns string\n   */\n  Event.prototype.toString = function () {\n    return \"[Event (type=\".concat(this.type, \")]\");\n  };\n  /**\n   * clone a new event with same attributes\n   * @returns [[Event]]\n   */\n  Event.prototype.clone = function () {\n    return new Event(this.view, this.gEvent, this.data);\n  };\n  return Event;\n}();\nexport default Event;","map":null,"metadata":{},"sourceType":"module"}