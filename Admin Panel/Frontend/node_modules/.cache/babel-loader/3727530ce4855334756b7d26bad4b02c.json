{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, omit } from '@antv/util';\nimport { animation, annotation, interaction, limitInPlot, pattern, slider, theme, tooltip, transformations } from '../../adaptor/common';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { getDataWhetherPercentage } from '../../utils/transform/percent';\nimport { axis, legend, meta } from '../line/adaptor';\nexport { meta };\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    areaStyle = options.areaStyle,\n    color = options.color,\n    pointMapping = options.point,\n    lineMapping = options.line,\n    isPercent = options.isPercent,\n    xField = options.xField,\n    yField = options.yField,\n    tooltip = options.tooltip,\n    seriesField = options.seriesField,\n    startOnZero = options.startOnZero;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var chartData = getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n  chart.data(chartData);\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  var tooltipOptions = isPercent ? __assign({\n    formatter: function formatter(datum) {\n      return {\n        name: datum[seriesField] || datum[xField],\n        value: (Number(datum[yField]) * 100).toFixed(2) + '%'\n      };\n    }\n  }, tooltip) : tooltip;\n  var primary = deepAssign({}, params, {\n    options: {\n      area: {\n        color: color,\n        style: areaStyle\n      },\n      point: pointMapping && __assign({\n        color: color\n      }, pointMapping),\n      tooltip: tooltipOptions,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero: startOnZero\n      }\n    }\n  });\n  // 线默认 2px (折线不能复用面积图的 state，因为 fill 和 stroke 不匹配)\n  var lineParams = {\n    chart: chart,\n    options: deepAssign({\n      line: {\n        size: 2\n      }\n    }, omit(options, ['state']), {\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      line: lineMapping && __assign({\n        color: color\n      }, lineMapping),\n      sizeField: seriesField,\n      state: lineMapping === null || lineMapping === void 0 ? void 0 : lineMapping.state,\n      tooltip: false,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined,\n      args: {\n        startOnZero: startOnZero\n      }\n    })\n  };\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  // area geometry 处理\n  area(primary);\n  line(lineParams);\n  point(pointParams);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField;\n  var areaGeometry = findGeometry(chart, 'area');\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    areaGeometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    areaGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        layout: [{\n          type: 'limit-in-plot'\n        }, {\n          type: 'path-adjust-position'\n        }, {\n          type: 'point-adjust-position'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(cfg))\n    });\n  }\n  return params;\n}\n/**\n * 处理 adjust\n * @param params\n */\nfunction adjust(params) {\n  var chart = params.chart,\n    options = params.options;\n  var isStack = options.isStack,\n    isPercent = options.isPercent,\n    seriesField = options.seriesField;\n  if ((isPercent || isStack) && seriesField) {\n    each(chart.geometries, function (g) {\n      g.adjust('stack');\n    });\n  }\n  return params;\n}\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('areaStyle'), transformations('rect'), geometry, meta, adjust, axis, legend, tooltip, label, slider, annotation(), interaction, animation, limitInPlot)(params);\n}","map":null,"metadata":{},"sourceType":"module"}