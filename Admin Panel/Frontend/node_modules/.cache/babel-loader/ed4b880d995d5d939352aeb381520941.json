{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { drawBackground, getPixelRatio, initCanvas, transformMatrix } from './util';\n/**\n * linePattern 的 默认配置\n */\nexport var defaultLinePatternCfg = {\n  rotation: 45,\n  spacing: 5,\n  opacity: 1,\n  backgroundColor: 'transparent',\n  strokeOpacity: 0.5,\n  stroke: '#fff',\n  lineWidth: 2\n};\n/**\n * 绘制line\n *\n * @param context canvasContext\n * @param cfg linePattern 的配置\n * @param d 绘制 path 所需的 d\n */\nexport function drawLine(context, cfg, d) {\n  var stroke = cfg.stroke,\n    lineWidth = cfg.lineWidth,\n    strokeOpacity = cfg.strokeOpacity;\n  var path = new Path2D(d);\n  context.globalAlpha = strokeOpacity;\n  context.lineCap = 'square';\n  context.strokeStyle = lineWidth ? stroke : 'transparent';\n  context.lineWidth = lineWidth;\n  context.stroke(path);\n}\n/**\n * 创建 linePattern\n */\nexport function createLinePattern(cfg) {\n  var lineCfg = deepAssign({}, defaultLinePatternCfg, cfg);\n  var spacing = lineCfg.spacing,\n    rotation = lineCfg.rotation,\n    lineWidth = lineCfg.lineWidth;\n  // 计算 pattern 画布的大小， path 所需的 d\n  var width = spacing + lineWidth || 1;\n  var height = spacing + lineWidth || 1;\n  var d = \"\\n            M 0 0 L \" + width + \" 0\\n            M 0 \" + height + \" L \" + width + \" \" + height + \"\\n            \";\n  // 初始化 patternCanvas\n  var canvas = initCanvas(width, height);\n  var ctx = canvas.getContext('2d');\n  // 绘制 background，line\n  drawBackground(ctx, lineCfg, width, height);\n  drawLine(ctx, lineCfg, d);\n  var pattern = ctx.createPattern(canvas, 'repeat');\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n  // 返回 Pattern 对象\n  return pattern;\n}","map":null,"metadata":{},"sourceType":"module"}