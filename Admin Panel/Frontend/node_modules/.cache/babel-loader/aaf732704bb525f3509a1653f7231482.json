{"ast":null,"code":"import { deepAssign } from '../../utils';\nimport { drawBackground, getPixelRatio, getSymbolsPosition, getUnitPatternSize, initCanvas, transformMatrix } from './util';\n/**\n * squarePattern 的 默认配置\n */\nexport var defaultSquarePatternCfg = {\n  size: 6,\n  padding: 1,\n  isStagger: true,\n  backgroundColor: 'transparent',\n  opacity: 1,\n  rotation: 0,\n  fill: '#fff',\n  fillOpacity: 0.5,\n  stroke: 'transparent',\n  lineWidth: 0\n};\n/**\n * 绘制square\n *\n * @param context canvasContext\n * @param cfg squarePattern 的配置\n * @param x和y square的中心位置\n */\nexport function drawSquare(context, cfg, x, y) {\n  var stroke = cfg.stroke,\n    size = cfg.size,\n    fill = cfg.fill,\n    lineWidth = cfg.lineWidth,\n    fillOpacity = cfg.fillOpacity;\n  context.globalAlpha = fillOpacity;\n  context.strokeStyle = stroke;\n  context.lineWidth = lineWidth;\n  context.fillStyle = fill;\n  // 因为正方形绘制从左上角开始，所以x，y做个偏移\n  context.strokeRect(x - size / 2, y - size / 2, size, size);\n  context.fillRect(x - size / 2, y - size / 2, size, size);\n}\n/**\n * 创建 squarePattern\n */\nexport function createSquarePattern(cfg) {\n  var squareCfg = deepAssign({}, defaultSquarePatternCfg, cfg);\n  var size = squareCfg.size,\n    padding = squareCfg.padding,\n    isStagger = squareCfg.isStagger,\n    rotation = squareCfg.rotation;\n  // 计算 画布大小，squares的位置\n  var unitSize = getUnitPatternSize(size, padding, isStagger);\n  var squares = getSymbolsPosition(unitSize, isStagger); // 计算方法与 dots 一样\n  // 初始化 patternCanvas\n  var canvas = initCanvas(unitSize, unitSize);\n  var ctx = canvas.getContext('2d');\n  // 绘制 background，squares\n  drawBackground(ctx, squareCfg, unitSize);\n  for (var _i = 0, squares_1 = squares; _i < squares_1.length; _i++) {\n    var _a = squares_1[_i],\n      x = _a[0],\n      y = _a[1];\n    drawSquare(ctx, squareCfg, x, y);\n  }\n  var pattern = ctx.createPattern(canvas, 'repeat');\n  if (pattern) {\n    var dpr = getPixelRatio();\n    var matrix = transformMatrix(dpr, rotation);\n    pattern.setTransform(matrix);\n  }\n  return pattern;\n}","map":null,"metadata":{},"sourceType":"module"}