{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { calBase } from '../util/math';\nimport Continuous from './base';\n/**\n * Pow 度量，处理非均匀分布\n */\nvar Pow = /** @class */function (_super) {\n  __extends(Pow, _super);\n  function Pow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'pow';\n    return _this;\n  }\n  /**\n   * @override\n   */\n  Pow.prototype.invert = function (value) {\n    var percent = this.getInvertPercent(value);\n    var exponent = this.exponent;\n    var max = calBase(exponent, this.max);\n    var min = calBase(exponent, this.min);\n    var tmp = percent * (max - min) + min;\n    var factor = tmp >= 0 ? 1 : -1;\n    return Math.pow(tmp, exponent) * factor;\n  };\n  Pow.prototype.initCfg = function () {\n    this.tickMethod = 'pow';\n    this.exponent = 2;\n    this.tickCount = 5;\n    this.nice = true;\n  };\n  // 获取度量计算时，value占的定义域百分比\n  Pow.prototype.getScalePercent = function (value) {\n    var max = this.max;\n    var min = this.min;\n    if (max === min) {\n      return 0;\n    }\n    var exponent = this.exponent;\n    var percent = (calBase(exponent, value) - calBase(exponent, min)) / (calBase(exponent, max) - calBase(exponent, min));\n    return percent;\n  };\n  return Pow;\n}(Continuous);\nexport default Pow;","map":null,"metadata":{},"sourceType":"module"}