{"ast":null,"code":"import { each, isFunction } from '@antv/util';\n/**\n * 在 Chart 中查找特定 id 的子 View\n * @param chart\n * @param id\n */\nexport function findViewById(chart, id) {\n  return chart.views.find(function (view) {\n    return view.id === id;\n  });\n}\n/**\n * 获取同 view 同一级的所有 views\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getViews(view) {\n  var parent = view.parent;\n  return parent ? parent.views : [];\n}\n/**\n * 获取同 view 同一级的 views，不包括自身\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getSiblingViews(view) {\n  return getViews(view).filter(function (sub) {\n    return sub !== view;\n  });\n}\n/**\n * 所有的 Geometries 都使用同一动画（各个图形如有区别，自行覆盖）并添加处理动画回调\n * @param view View\n * @param animation 动画配置\n */\nexport function addViewAnimation(view, animation, geometries) {\n  if (geometries === void 0) {\n    geometries = view.geometries;\n  }\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    view.animate(animation);\n  } else {\n    view.animate(true);\n  }\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  each(geometries, function (g) {\n    var animationCfg;\n    if (isFunction(animation)) {\n      animationCfg = animation(g.type || g.shapeType, g) || true;\n    } else {\n      animationCfg = animation;\n    }\n    g.animate(animationCfg);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}