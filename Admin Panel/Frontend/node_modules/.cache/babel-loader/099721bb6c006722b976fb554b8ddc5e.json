{"ast":null,"code":"import line from './line';\nimport { distance, isNumberEqual, getBBoxByArray, piMod } from './util';\nimport { nearestPoint as _nearestPoint } from './bezier';\n// 差值公式\nfunction quadraticAt(p0, p1, p2, t) {\n  var onet = 1 - t;\n  return onet * onet * p0 + 2 * t * onet * p1 + t * t * p2;\n}\n// 求极值\nfunction extrema(p0, p1, p2) {\n  var a = p0 + p2 - 2 * p1;\n  if (isNumberEqual(a, 0)) {\n    return [0.5];\n  }\n  var rst = (p0 - p1) / a;\n  if (rst <= 1 && rst >= 0) {\n    return [rst];\n  }\n  return [];\n}\nfunction derivativeAt(p0, p1, p2, t) {\n  return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n}\n// 分割贝塞尔曲线\nfunction divideQuadratic(x1, y1, x2, y2, x3, y3, t) {\n  // 划分点\n  var xt = quadraticAt(x1, x2, x3, t);\n  var yt = quadraticAt(y1, y2, y3, t);\n  // 分割的第一条曲线的控制点\n  var controlPoint1 = line.pointAt(x1, y1, x2, y2, t);\n  // 分割的第二条曲线的控制点\n  var controlPoint2 = line.pointAt(x2, y2, x3, y3, t);\n  return [[x1, y1, controlPoint1.x, controlPoint1.y, xt, yt], [xt, yt, controlPoint2.x, controlPoint2.y, x3, y3]];\n}\n// 使用迭代法取贝塞尔曲线的长度\nfunction quadraticLength(x1, y1, x2, y2, x3, y3, iterationCount) {\n  if (iterationCount === 0) {\n    return (distance(x1, y1, x2, y2) + distance(x2, y2, x3, y3) + distance(x1, y1, x3, y3)) / 2;\n  }\n  var quadratics = divideQuadratic(x1, y1, x2, y2, x3, y3, 0.5);\n  var left = quadratics[0];\n  var right = quadratics[1];\n  left.push(iterationCount - 1);\n  right.push(iterationCount - 1);\n  return quadraticLength.apply(null, left) + quadraticLength.apply(null, right);\n}\nexport default {\n  box: function box(x1, y1, x2, y2, x3, y3) {\n    var xExtrema = extrema(x1, x2, x3)[0];\n    var yExtrema = extrema(y1, y2, y3)[0];\n    // 控制点不加入 box 的计算\n    var xArr = [x1, x3];\n    var yArr = [y1, y3];\n    if (xExtrema !== undefined) {\n      xArr.push(quadraticAt(x1, x2, x3, xExtrema));\n    }\n    if (yExtrema !== undefined) {\n      yArr.push(quadraticAt(y1, y2, y3, yExtrema));\n    }\n    return getBBoxByArray(xArr, yArr);\n  },\n  length: function length(x1, y1, x2, y2, x3, y3) {\n    return quadraticLength(x1, y1, x2, y2, x3, y3, 3);\n  },\n  nearestPoint: function nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0) {\n    return _nearestPoint([x1, x2, x3], [y1, y2, y3], x0, y0, quadraticAt);\n  },\n  pointDistance: function pointDistance(x1, y1, x2, y2, x3, y3, x0, y0) {\n    var point = this.nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0);\n    return distance(point.x, point.y, x0, y0);\n  },\n  interpolationAt: quadraticAt,\n  pointAt: function pointAt(x1, y1, x2, y2, x3, y3, t) {\n    return {\n      x: quadraticAt(x1, x2, x3, t),\n      y: quadraticAt(y1, y2, y3, t)\n    };\n  },\n  divide: function divide(x1, y1, x2, y2, x3, y3, t) {\n    return divideQuadratic(x1, y1, x2, y2, x3, y3, t);\n  },\n  tangentAngle: function tangentAngle(x1, y1, x2, y2, x3, y3, t) {\n    var dx = derivativeAt(x1, x2, x3, t);\n    var dy = derivativeAt(y1, y2, y3, t);\n    var angle = Math.atan2(dy, dx);\n    return piMod(angle);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}