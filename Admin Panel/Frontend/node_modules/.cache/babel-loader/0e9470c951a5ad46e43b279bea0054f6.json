{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { deepMix, each, find, get, head, isBoolean, last } from '@antv/util';\nimport { COMPONENT_MAX_VIEW_PERCENTAGE, COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { CategoryLegend, ContinuousLegend } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { omit } from '../../util/helper';\nimport { getCustomLegendItems, getLegendItems, getLegendLayout, getLegendThemeCfg } from '../../util/legend';\nimport { getName } from '../../util/scale';\nimport { Controller } from './base';\n/**\n * 从配置中获取单个字段的 legend 配置\n * @param legends\n * @param field\n * @returns the option of one legend field\n */\nfunction getLegendOption(legends, field) {\n  if (isBoolean(legends)) {\n    return legends === false ? false : {};\n  }\n  return get(legends, [field], legends);\n}\nfunction getDirection(legendOption) {\n  return get(legendOption, 'position', DIRECTION.BOTTOM);\n}\n/**\n * @ignore\n * legend Controller\n */\nvar Legend = /** @class */function (_super) {\n  __extends(Legend, _super);\n  function Legend(view) {\n    var _this = _super.call(this, view) || this;\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    return _this;\n  }\n  Object.defineProperty(Legend.prototype, \"name\", {\n    get: function get() {\n      return 'legend';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Legend.prototype.init = function () {};\n  /**\n   * render the legend component by legend options\n   */\n  Legend.prototype.render = function () {\n    // 和 update 逻辑保持一致\n    this.update();\n  };\n  /**\n   * layout legend\n   * 计算出 legend 的 direction 位置 x, y\n   */\n  Legend.prototype.layout = function () {\n    var _this = this;\n    this.layoutBBox = this.view.viewBBox;\n    each(this.components, function (co) {\n      var component = co.component,\n        direction = co.direction;\n      var layout = getLegendLayout(direction);\n      var maxWidthRatio = component.get('maxWidthRatio');\n      var maxHeightRatio = component.get('maxHeightRatio');\n      var maxSize = _this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n      var maxWidth = component.get('maxWidth');\n      var maxHeight = component.get('maxHeight');\n      // 先更新 maxSize，更新 layoutBBox，以便计算正确的 x y\n      component.update({\n        maxWidth: Math.min(maxSize.maxWidth, maxWidth || 0),\n        maxHeight: Math.min(maxSize.maxHeight, maxHeight || 0)\n      });\n      var padding = component.get('padding');\n      var bboxObject = component.getLayoutBBox(); // 这里只需要他的 width、height 信息做位置调整\n      var bbox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(padding);\n      var _a = __read(directionToPosition(_this.view.viewBBox, bbox, direction), 2),\n        x1 = _a[0],\n        y1 = _a[1];\n      var _b = __read(directionToPosition(_this.layoutBBox, bbox, direction), 2),\n        x2 = _b[0],\n        y2 = _b[1];\n      var x = 0;\n      var y = 0;\n      // 因为 legend x y 要和 coordinateBBox 对齐，所以要做一个简单的判断\n      if (direction.startsWith('top') || direction.startsWith('bottom')) {\n        x = x1;\n        y = y2;\n      } else {\n        x = x2;\n        y = y1;\n      }\n      // 更新位置\n      component.setLocation({\n        x: x + padding[3],\n        y: y + padding[0]\n      });\n      _this.layoutBBox = _this.layoutBBox.cut(bbox, direction);\n    });\n  };\n  /**\n   * legend 的更新逻辑\n   */\n  Legend.prototype.update = function () {\n    var _this = this;\n    this.option = this.view.getOptions().legends;\n    // 已经处理过的 legend\n    var updated = {};\n    var eachLegend = function eachLegend(geometry, attr, scale) {\n      var id = _this.getId(scale.field);\n      var existCo = _this.getComponentById(id);\n      // 存在则 update\n      if (existCo) {\n        var cfg = void 0;\n        var legendOption = getLegendOption(_this.option, scale.field);\n        // if the legend option is not false, means legend should be created.\n        if (legendOption !== false) {\n          if (get(legendOption, 'custom')) {\n            cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n          } else {\n            if (scale.isLinear) {\n              // linear field, create continuous legend\n              cfg = _this.getContinuousCfg(geometry, attr, scale, legendOption);\n            } else if (scale.isCategory) {\n              // category field, create category legend\n              cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption);\n            }\n          }\n        }\n        // 如果 cfg 为空，则不在 updated 标记，那么会在后面逻辑中删除\n        if (cfg) {\n          // omit 掉一些属性，比如 container 等\n          omit(cfg, ['container']);\n          existCo.direction = getDirection(legendOption);\n          existCo.component.update(cfg);\n          // 标记为新的\n          updated[id] = true;\n        }\n      } else {\n        // 不存在则 create\n        var legend = _this.createFieldLegend(geometry, attr, scale);\n        if (legend) {\n          legend.component.init();\n          _this.components.push(legend);\n          // 标记为新的\n          updated[id] = true;\n        }\n      }\n    };\n    // 全局自定义图例\n    if (get(this.option, 'custom')) {\n      var id = 'global-custom';\n      var existCo = this.getComponentById(id);\n      if (existCo) {\n        var customCfg = this.getCategoryCfg(undefined, undefined, undefined, this.option, true);\n        omit(customCfg, ['container']);\n        existCo.component.update(customCfg);\n        updated[id] = true;\n      } else {\n        var component = this.createCustomLegend(undefined, undefined, undefined, this.option);\n        if (component) {\n          component.init();\n          var layer = LAYER.FORE;\n          var direction = getDirection(this.option);\n          this.components.push({\n            id: id,\n            component: component,\n            layer: layer,\n            direction: direction,\n            type: COMPONENT_TYPE.LEGEND,\n            extra: undefined\n          });\n          // 标记为更新\n          updated[id] = true;\n        }\n      }\n    } else {\n      // 遍历处理每一个创建逻辑\n      this.loopLegends(eachLegend);\n    }\n    // 处理完成之后，销毁删除的\n    // 不在处理中的\n    var components = [];\n    each(this.getComponents(), function (co) {\n      if (updated[co.id]) {\n        components.push(co);\n      } else {\n        co.component.destroy();\n      }\n    });\n    // 更新当前已有的 components\n    this.components = components;\n  };\n  Legend.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.container.clear();\n  };\n  Legend.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.container.remove(true);\n  };\n  /**\n   * 递归获取所有的 Geometry\n   */\n  Legend.prototype.getGeometries = function (view) {\n    var _this = this;\n    var geometries = view.geometries;\n    each(view.views, function (v) {\n      geometries = geometries.concat(_this.getGeometries(v));\n    });\n    return geometries;\n  };\n  /**\n   * 遍历 Geometry，处理 legend 逻辑\n   * @param doEach 每个 loop 中的处理方法\n   */\n  Legend.prototype.loopLegends = function (doEach) {\n    var isRootView = this.view.getRootView() === this.view;\n    // 非根 view，不处理 legend\n    if (!isRootView) {\n      return;\n    }\n    // 递归 view 中所有的 Geometry，进行创建 legend\n    var geometries = this.getGeometries(this.view);\n    var looped = {}; // 防止一个字段创建两个 legend\n    each(geometries, function (geometry) {\n      var attributes = geometry.getGroupAttributes();\n      each(attributes, function (attr) {\n        var scale = attr.getScale(attr.type);\n        // 如果在视觉通道上映射常量值，如 size(2) shape('circle') 不创建 legend\n        if (!scale || scale.type === 'identity' || looped[scale.field]) {\n          return;\n        }\n        doEach(geometry, attr, scale);\n        looped[scale.field] = true;\n      });\n    });\n  };\n  /**\n   * 创建一个 legend\n   * @param geometry\n   * @param attr\n   * @param scale\n   */\n  Legend.prototype.createFieldLegend = function (geometry, attr, scale) {\n    var component;\n    var legendOption = getLegendOption(this.option, scale.field);\n    var layer = LAYER.FORE;\n    var direction = getDirection(legendOption);\n    // if the legend option is not false, means legend should be created.\n    if (legendOption !== false) {\n      if (get(legendOption, 'custom')) {\n        component = this.createCustomLegend(geometry, attr, scale, legendOption);\n      } else {\n        if (scale.isLinear) {\n          // linear field, create continuous legend\n          component = this.createContinuousLegend(geometry, attr, scale, legendOption);\n        } else if (scale.isCategory) {\n          // category field, create category legend\n          component = this.createCategoryLegend(geometry, attr, scale, legendOption);\n        }\n      }\n    }\n    if (component) {\n      component.set('field', scale.field);\n      return {\n        id: this.getId(scale.field),\n        component: component,\n        layer: layer,\n        direction: direction,\n        type: COMPONENT_TYPE.LEGEND,\n        extra: {\n          scale: scale\n        }\n      };\n    }\n  };\n  /**\n   * 自定义图例使用 category 图例去渲染\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createCustomLegend = function (geometry, attr, scale, legendOption) {\n    // 直接使用 分类图例渲染\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 创建连续图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createContinuousLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getContinuousCfg(geometry, attr, scale, omit(legendOption, ['value']));\n    return new ContinuousLegend(cfg);\n  };\n  /**\n   * 创建分类图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createCategoryLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 获得连续图例的配置\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.getContinuousCfg = function (geometry, attr, scale, legendOption) {\n    var ticks = scale.getTicks();\n    var containMin = find(ticks, function (tick) {\n      return tick.value === 0;\n    });\n    var containMax = find(ticks, function (tick) {\n      return tick.value === 1;\n    });\n    var items = ticks.map(function (tick) {\n      var value = tick.value,\n        tickValue = tick.tickValue;\n      var attrValue = attr.mapping(scale.invert(value)).join('');\n      return {\n        value: tickValue,\n        attrValue: attrValue,\n        color: attrValue,\n        scaleValue: value\n      };\n    });\n    if (!containMin) {\n      items.push({\n        value: scale.min,\n        attrValue: attr.mapping(scale.invert(0)).join(''),\n        color: attr.mapping(scale.invert(0)).join(''),\n        scaleValue: 0\n      });\n    }\n    if (!containMax) {\n      items.push({\n        value: scale.max,\n        attrValue: attr.mapping(scale.invert(1)).join(''),\n        color: attr.mapping(scale.invert(1)).join(''),\n        scaleValue: 1\n      });\n    }\n    // 排序\n    items.sort(function (a, b) {\n      return a.value - b.value;\n    });\n    // 跟 attr 相关的配置\n    // size color 区别的配置\n    var attrLegendCfg = {\n      min: head(items).value,\n      max: last(items).value,\n      colors: [],\n      rail: {\n        type: attr.type\n      },\n      track: {}\n    };\n    if (attr.type === 'size') {\n      attrLegendCfg.track = {\n        style: {\n          // size 的选中前景色，对于 color，则直接使用 color 标识\n          // @ts-ignore\n          fill: attr.type === 'size' ? this.view.getTheme().defaultColor : undefined\n        }\n      };\n    }\n    if (attr.type === 'color') {\n      attrLegendCfg.colors = items.map(function (item) {\n        return item.attrValue;\n      });\n    }\n    var container = this.container;\n    // if position is not set, use top as default\n    var direction = getDirection(legendOption);\n    var layout = getLegendLayout(direction);\n    var title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix({\n        text: getName(scale)\n      }, title);\n    }\n    // 基础配置，从当前数据中读到的配置\n    attrLegendCfg.container = container;\n    attrLegendCfg.layout = layout;\n    attrLegendCfg.title = title;\n    attrLegendCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    // @ts-ignore\n    return this.mergeLegendCfg(attrLegendCfg, legendOption, 'continuous');\n  };\n  /**\n   * 获取分类图例的配置项\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param custom\n   * @param legendOption\n   */\n  Legend.prototype.getCategoryCfg = function (geometry, attr, scale, legendOption, custom) {\n    var container = this.container;\n    // if position is not set, use top as default\n    var direction = get(legendOption, 'position', DIRECTION.BOTTOM);\n    var legendTheme = getLegendThemeCfg(this.view.getTheme(), direction);\n    // the default marker style\n    var themeMarker = get(legendTheme, ['marker']);\n    var userMarker = get(legendOption, 'marker');\n    var layout = getLegendLayout(direction);\n    var themePageNavigator = get(legendTheme, ['pageNavigator']);\n    var userPageNavigator = get(legendOption, 'pageNavigator');\n    var items = custom ? getCustomLegendItems(themeMarker, userMarker, legendOption.items) : getLegendItems(this.view, geometry, attr, themeMarker, userMarker);\n    var title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix({\n        text: scale ? getName(scale) : ''\n      }, title);\n    }\n    var maxWidthRatio = get(legendOption, 'maxWidthRatio');\n    var maxHeightRatio = get(legendOption, 'maxHeightRatio');\n    var baseCfg = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n    baseCfg.container = container;\n    baseCfg.layout = layout;\n    baseCfg.items = items;\n    baseCfg.title = title;\n    baseCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    baseCfg.pageNavigator = deepMix({}, themePageNavigator, userPageNavigator);\n    var categoryCfg = this.mergeLegendCfg(baseCfg, legendOption, direction);\n    if (categoryCfg.reversed) {\n      // 图例项需要逆序\n      categoryCfg.items.reverse();\n    }\n    var maxItemWidth = get(categoryCfg, 'maxItemWidth');\n    if (maxItemWidth && maxItemWidth <= 1) {\n      // 转换成像素值\n      categoryCfg.maxItemWidth = this.view.viewBBox.width * maxItemWidth;\n    }\n    return categoryCfg;\n  };\n  /**\n   * get legend config, use option > suggestion > theme\n   * @param baseCfg\n   * @param legendOption\n   * @param direction\n   */\n  Legend.prototype.mergeLegendCfg = function (baseCfg, legendOption, direction) {\n    var position = direction.split('-')[0];\n    var themeObject = getLegendThemeCfg(this.view.getTheme(), position);\n    return deepMix({}, themeObject, baseCfg, legendOption);\n  };\n  /**\n   * 生成 id\n   * @param key\n   */\n  Legend.prototype.getId = function (key) {\n    return \"\".concat(this.name, \"-\").concat(key);\n  };\n  /**\n   * 根据 id 来获取组件\n   * @param id\n   */\n  Legend.prototype.getComponentById = function (id) {\n    return find(this.components, function (co) {\n      return co.id === id;\n    });\n  };\n  Legend.prototype.getCategoryLegendSizeCfg = function (layout, maxWidthRatio, maxHeightRatio) {\n    if (maxWidthRatio === void 0) {\n      maxWidthRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n    if (maxHeightRatio === void 0) {\n      maxHeightRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n    var _a = this.view.viewBBox,\n      vw = _a.width,\n      vh = _a.height;\n    // 目前 legend 的布局是以 viewBBox 为参照\n    // const { width: cw, height: ch } = this.view.coordinateBBox;\n    return layout === 'vertical' ? {\n      maxWidth: vw * maxWidthRatio,\n      maxHeight: vh\n    } : {\n      maxWidth: vw,\n      maxHeight: vh * maxHeightRatio\n    };\n  };\n  return Legend;\n}(Controller);\nexport default Legend;","map":null,"metadata":{},"sourceType":"module"}