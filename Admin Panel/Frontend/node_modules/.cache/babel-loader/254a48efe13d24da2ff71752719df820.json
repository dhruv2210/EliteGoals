{"ast":null,"code":"/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n/** @ignore */\nvar ScalePool = /** @class */function () {\n  function ScalePool() {\n    /** 所有的 scales */\n    this.scales = new Map();\n    /** 需要同步的 scale 分组， key: scaleKeyArray */\n    this.syncScales = new Map();\n  }\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n    var finalScaleDef = scaleDef;\n    var cacheScaleMeta = this.getScaleMeta(key);\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      var cacheScale = cacheScaleMeta.scale;\n      var cacheScaleDef = {\n        type: cacheScale.type\n      };\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n    var scale = createScaleByField(field, data, finalScaleDef);\n    // 缓存起来\n    this.cacheScale(scale, scaleDef, key);\n    return scale;\n  };\n  /**\n   * 同步 scale\n   */\n  ScalePool.prototype.sync = function (coordinate, theme) {\n    var _this = this;\n    // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      // min, max, values, ranges\n      var min = Number.MAX_SAFE_INTEGER;\n      var max = Number.MIN_SAFE_INTEGER;\n      var values = [];\n      // 1. 遍历求得最大最小值，values 等\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n        // 去重\n        each(scale.values, function (v) {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      });\n      // 2. 同步\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        if (scale.isContinuous) {\n          scale.change({\n            min: min,\n            max: max,\n            values: values\n          });\n        } else if (scale.isCategory) {\n          var range = scale.range;\n          var cacheScaleMeta = _this.getScaleMeta(key);\n          // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(deepMix({}, scale, {\n              values: values\n            }), coordinate, theme);\n          }\n          scale.change({\n            values: values,\n            range: range\n          });\n        }\n      });\n    });\n  };\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n    // 1. 缓存到 scales\n    var sm = this.getScaleMeta(key);\n    // 存在则更新，同时检测类型是否一致\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef;\n      // 更新 scaleDef\n    } else {\n      sm = {\n        key: key,\n        scale: scale,\n        scaleDef: scaleDef\n      };\n      this.scales.set(key, sm);\n    }\n    // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n    var syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n    this.removeFromSyncScales(key);\n    // 存在 sync 标记才进行 sync\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      var scaleKeys = this.syncScales.get(syncKey);\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n      scaleKeys.push(key);\n    }\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (!scaleMeta) {\n      var field = last(key.split('-'));\n      var scaleKeys = this.syncScales.get(field);\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n    return scaleMeta && scaleMeta.scale;\n  };\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n  ScalePool.prototype.deleteScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (scaleMeta) {\n      var syncKey = scaleMeta.syncKey;\n      var scaleKeys = this.syncScales.get(syncKey);\n      // 移除同步的关系\n      if (scaleKeys && scaleKeys.length) {\n        var idx = scaleKeys.indexOf(key);\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    }\n    // 删除 scale 实例\n    this.scales.delete(key);\n  };\n  /**\n   * 清空\n   */\n  ScalePool.prototype.clear = function () {\n    this.scales.clear();\n    this.syncScales.clear();\n  };\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n  ScalePool.prototype.removeFromSyncScales = function (key) {\n    var _this = this;\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      var idx = scaleKeys.indexOf(key);\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1);\n        // 删除空数组值\n        if (scaleKeys.length === 0) {\n          _this.syncScales.delete(syncKey);\n        }\n        return false; // 跳出循环\n      }\n    });\n  };\n  /**\n   * get sync key\n   * @param sm\n   */\n  ScalePool.prototype.getSyncKey = function (sm) {\n    var scale = sm.scale,\n      scaleDef = sm.scaleDef;\n    var field = scale.field;\n    var sync = get(scaleDef, ['sync']);\n    // 如果 sync = true，则直接使用字段名作为 syncKey\n    return sync === true ? field : sync === false ? undefined : sync;\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScaleMeta = function (key) {\n    return this.scales.get(key);\n  };\n  return ScalePool;\n}();\nexport { ScalePool };","map":null,"metadata":{},"sourceType":"module"}