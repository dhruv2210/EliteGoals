{"ast":null,"code":"import { filter, isArray, isString } from '@antv/util';\n/** export 一些字段常量 */\n/** 在同层级，同一父节点下的节点索引顺序 */\nexport var NODE_INDEX_FIELD = 'nodeIndex';\n/** child 节点数量 */\nexport var CHILD_NODE_COUNT = 'childNodeCount';\n/** 节点的祖先节点 */\nexport var NODE_ANCESTORS_FIELD = 'nodeAncestor';\nvar INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\nexport function getField(options, defaultField) {\n  var field = options.field,\n    fields = options.fields;\n  if (isString(field)) {\n    return field;\n  }\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n  console.warn(INVALID_FIELD_ERR_MSG + \" will try to get fields instead.\");\n  if (isString(fields)) {\n    return fields;\n  }\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n  if (defaultField) {\n    return defaultField;\n  }\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\nexport function getAllNodes(root) {\n  var nodes = [];\n  if (root && root.each) {\n    var parent_1;\n    var index_1;\n    // d3-hierarchy: Invokes the specified function for node and each descendant in **breadth-first order**\n    root.each(function (node) {\n      var _a, _b;\n      if (node.parent !== parent_1) {\n        parent_1 = node.parent;\n        index_1 = 0;\n      } else {\n        index_1 += 1;\n      }\n      var ancestors = filter((((_a = node.ancestors) === null || _a === void 0 ? void 0 : _a.call(node)) || []).map(function (d) {\n        return nodes.find(function (n) {\n          return n.name === d.name;\n        }) || d;\n      }), function (_a) {\n        var depth = _a.depth;\n        return depth > 0 && depth < node.depth;\n      });\n      node[NODE_ANCESTORS_FIELD] = ancestors;\n      node[CHILD_NODE_COUNT] = ((_b = node.children) === null || _b === void 0 ? void 0 : _b.length) || 0;\n      node[NODE_INDEX_FIELD] = index_1;\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode(function (node) {\n      nodes.push(node);\n    });\n  }\n  return nodes;\n}","map":null,"metadata":{},"sourceType":"module"}