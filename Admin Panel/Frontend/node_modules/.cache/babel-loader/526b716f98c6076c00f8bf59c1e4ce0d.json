{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Action, Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { deepAssign, normalPadding } from '../../utils';\nvar PADDING_RIGHT = 10;\nvar PADDING_TOP = 5;\n/**\n * Action 中的 Button 按钮配置\n *\n * 可能的使用场景：brush filter\n */\nexport var BUTTON_ACTION_CONFIG = {\n  padding: [8, 10],\n  text: 'reset',\n  textStyle: {\n    default: {\n      x: 0,\n      y: 0,\n      fontSize: 12,\n      fill: '#333333',\n      cursor: 'pointer'\n    }\n  },\n  buttonStyle: {\n    default: {\n      fill: '#f7f7f7',\n      stroke: '#cccccc',\n      cursor: 'pointer'\n    },\n    active: {\n      fill: '#e6e6e6'\n    }\n  }\n};\n/**\n * @override 复写 G2 Button Action, 后续直接使用 GUI\n */\nvar ButtonAction = /** @class */function (_super) {\n  __extends(ButtonAction, _super);\n  function ButtonAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.buttonGroup = null;\n    _this.buttonCfg = __assign({\n      name: 'button'\n    }, BUTTON_ACTION_CONFIG);\n    return _this;\n  }\n  /**\n   * 获取 mix 默认的配置和用户配置\n   */\n  ButtonAction.prototype.getButtonCfg = function () {\n    var view = this.context.view;\n    var buttonCfg = get(view, ['interactions', 'filter-action', 'cfg', 'buttonConfig']);\n    return deepAssign(this.buttonCfg, buttonCfg, this.cfg);\n  };\n  /**\n   * 绘制 Button 和 文本\n   */\n  ButtonAction.prototype.drawButton = function () {\n    var config = this.getButtonCfg();\n    var group = this.context.view.foregroundGroup.addGroup({\n      name: config.name\n    });\n    var textShape = this.drawText(group);\n    this.drawBackground(group, textShape.getBBox());\n    this.buttonGroup = group;\n  };\n  /**\n   * 绘制文本\n   */\n  ButtonAction.prototype.drawText = function (group) {\n    var _a;\n    var config = this.getButtonCfg();\n    // 添加文本\n    return group.addShape({\n      type: 'text',\n      name: 'button-text',\n      attrs: __assign({\n        text: config.text\n      }, (_a = config.textStyle) === null || _a === void 0 ? void 0 : _a.default)\n    });\n  };\n  ButtonAction.prototype.drawBackground = function (group, bbox) {\n    var _a;\n    var config = this.getButtonCfg();\n    var padding = normalPadding(config.padding);\n    // 添加背景按钮\n    var buttonShape = group.addShape({\n      type: 'rect',\n      name: 'button-rect',\n      attrs: __assign({\n        x: bbox.x - padding[3],\n        y: bbox.y - padding[0],\n        width: bbox.width + padding[1] + padding[3],\n        height: bbox.height + padding[0] + padding[2]\n      }, (_a = config.buttonStyle) === null || _a === void 0 ? void 0 : _a.default)\n    });\n    buttonShape.toBack(); // 在后面\n    // active 效果内置\n    group.on('mouseenter', function () {\n      var _a;\n      buttonShape.attr((_a = config.buttonStyle) === null || _a === void 0 ? void 0 : _a.active);\n    });\n    group.on('mouseleave', function () {\n      var _a;\n      buttonShape.attr((_a = config.buttonStyle) === null || _a === void 0 ? void 0 : _a.default);\n    });\n    return buttonShape;\n  };\n  // 重置位置\n  ButtonAction.prototype.resetPosition = function () {\n    var view = this.context.view;\n    var coord = view.getCoordinate();\n    var point = coord.convert({\n      x: 1,\n      y: 1\n    }); // 后面直接改成左上角\n    var buttonGroup = this.buttonGroup;\n    var bbox = buttonGroup.getBBox();\n    var matrix = Util.transform(null, [['t', point.x - bbox.width - PADDING_RIGHT, point.y + bbox.height + PADDING_TOP]]);\n    buttonGroup.setMatrix(matrix);\n  };\n  /**\n   * 显示\n   */\n  ButtonAction.prototype.show = function () {\n    if (!this.buttonGroup) {\n      this.drawButton();\n    }\n    this.resetPosition();\n    this.buttonGroup.show();\n  };\n  /**\n   * 隐藏\n   */\n  ButtonAction.prototype.hide = function () {\n    if (this.buttonGroup) {\n      this.buttonGroup.hide();\n    }\n  };\n  /**\n   * 销毁\n   */\n  ButtonAction.prototype.destroy = function () {\n    var buttonGroup = this.buttonGroup;\n    if (buttonGroup) {\n      buttonGroup.remove();\n    }\n    _super.prototype.destroy.call(this);\n  };\n  return ButtonAction;\n}(Action);\nexport { ButtonAction };","map":null,"metadata":{},"sourceType":"module"}