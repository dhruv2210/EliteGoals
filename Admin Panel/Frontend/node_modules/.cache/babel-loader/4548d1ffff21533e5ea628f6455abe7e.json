{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { interaction, state, theme } from '../../adaptor/common';\nimport { edge, polygon } from '../../adaptor/geometries';\nimport { addViewAnimation, flow, getAllGeometriesRecursively, pick, transformDataToNodeLinkData } from '../../utils';\nimport { chordLayout } from '../../utils/transform/chord';\nimport { EDGE_COLOR_FIELD, NODE_COLOR_FIELD, X_FIELD, Y_FIELD } from './constant';\nfunction transformData(params) {\n  // 将弦图数据放到ext中，nodeGeometry edgeGeometry使用\n  var options = params.options;\n  var data = options.data,\n    sourceField = options.sourceField,\n    targetField = options.targetField,\n    weightField = options.weightField,\n    nodePaddingRatio = options.nodePaddingRatio,\n    nodeWidthRatio = options.nodeWidthRatio,\n    _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a;\n  // 将数据转换为node link格式\n  var chordLayoutInputData = transformDataToNodeLinkData(data, sourceField, targetField, weightField);\n  var _b = chordLayout({\n      weight: true,\n      nodePaddingRatio: nodePaddingRatio,\n      nodeWidthRatio: nodeWidthRatio\n    }, chordLayoutInputData),\n    nodes = _b.nodes,\n    links = _b.links;\n  // 1. 生成绘制node使用数据\n  var nodesData = nodes.map(function (node) {\n    return __assign(__assign({}, pick(node, __spreadArrays(['id', 'x', 'y', 'name'], rawFields))), {\n      isNode: true\n    });\n  });\n  // 2. 生成 edge 使用数据 （同桑基图）\n  var edgesData = links.map(function (link) {\n    return __assign(__assign({\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name\n    }, pick(link, __spreadArrays(['x', 'y', 'value'], rawFields))), {\n      isNode: false\n    });\n  });\n  return __assign(__assign({}, params), {\n    ext: __assign(__assign({}, params.ext), {\n      // 将chordData放到ext中，方便下面的geometry使用\n      chordData: {\n        nodesData: nodesData,\n        edgesData: edgesData\n      }\n    })\n  });\n}\n/**\n * scale配置\n * @param params 参数\n */\nfunction scale(params) {\n  var _a;\n  var chart = params.chart;\n  chart.scale((_a = {\n    x: {\n      sync: true,\n      nice: true\n    },\n    y: {\n      sync: true,\n      nice: true,\n      max: 1\n    }\n  }, _a[NODE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a[EDGE_COLOR_FIELD] = {\n    sync: 'color'\n  }, _a));\n  return params;\n}\n/**\n * axis配置\n * @param params 参数\n */\nfunction axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n/**\n * legend配置\n * @param params 参数\n */\nfunction legend(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * tooltip配置\n * @param params 参数\n */\nfunction tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip;\n  chart.tooltip(tooltip);\n  return params;\n}\n/**\n * coordinate配置\n * @param params 参数\n */\nfunction coordinate(params) {\n  var chart = params.chart;\n  chart.coordinate('polar').reflect('y');\n  return params;\n}\n/**\n * nodeGeometry配置\n * @param params 参数\n */\nfunction nodeGeometry(params) {\n  // node view\n  var chart = params.chart,\n    options = params.options;\n  var nodesData = params.ext.chordData.nodesData;\n  var nodeStyle = options.nodeStyle,\n    label = options.label,\n    tooltip = options.tooltip;\n  var nodeView = chart.createView();\n  nodeView.data(nodesData);\n  // 面\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: NODE_COLOR_FIELD,\n      polygon: {\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip\n    }\n  });\n  return params;\n}\n/**\n * edgeGeometry配置\n * @param params 参数\n */\nfunction edgeGeometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var edgesData = params.ext.chordData.edgesData;\n  var edgeStyle = options.edgeStyle,\n    tooltip = options.tooltip;\n  var edgeView = chart.createView();\n  edgeView.data(edgesData);\n  // edge\n  var edgeOptions = {\n    xField: X_FIELD,\n    yField: Y_FIELD,\n    seriesField: EDGE_COLOR_FIELD,\n    edge: {\n      style: edgeStyle,\n      shape: 'arc'\n    },\n    tooltip: tooltip\n  };\n  edge({\n    chart: edgeView,\n    options: edgeOptions\n  });\n  return params;\n}\nfunction animation(params) {\n  var chart = params.chart,\n    options = params.options;\n  var animation = options.animation;\n  addViewAnimation(chart, animation, getAllGeometriesRecursively(chart));\n  return params;\n}\n/**\n * 弦图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, transformData, coordinate, scale, axis, legend, tooltip, edgeGeometry, nodeGeometry, interaction, state, animation)(params);\n}","map":null,"metadata":{},"sourceType":"module"}