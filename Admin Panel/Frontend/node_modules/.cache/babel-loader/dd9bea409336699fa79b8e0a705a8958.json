{"ast":null,"code":"import { each } from '@antv/util';\n/**\n * Component Controller 规范需要定义的基类\n * 1. 规范的 option 输入\n * 2. 统一的信息获取 API\n * 3. 明确定义的组件事件（名称、数据）\n */\nvar Controller = /** @class */function () {\n  function Controller(view) {\n    /** 是否可见 */\n    this.visible = true;\n    /** 所有的 component */\n    this.components = [];\n    this.view = view;\n  }\n  /**\n   * clear\n   * @param includeOption 是否清空 option 配置项（used in annotation）\n   */\n  Controller.prototype.clear = function (includeOption) {\n    // destroy all components\n    each(this.components, function (co) {\n      co.component.destroy();\n    });\n    // clear all component instance\n    this.components = [];\n  };\n  /**\n   * destroy the component\n   */\n  Controller.prototype.destroy = function () {\n    this.clear();\n  };\n  /**\n   * get all components\n   * @returns components array\n   */\n  Controller.prototype.getComponents = function () {\n    return this.components;\n  };\n  /**\n   * change visibility of component\n   * @param visible\n   */\n  Controller.prototype.changeVisible = function (visible) {\n    if (this.visible === visible) {\n      return;\n    }\n    this.components.forEach(function (co) {\n      if (visible) {\n        co.component.show();\n      } else {\n        co.component.hide();\n      }\n    });\n    this.visible = visible;\n  };\n  return Controller;\n}();\nexport { Controller };","map":null,"metadata":{},"sourceType":"module"}