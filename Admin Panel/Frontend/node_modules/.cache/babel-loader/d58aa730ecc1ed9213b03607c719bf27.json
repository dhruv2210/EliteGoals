{"ast":null,"code":"/**\n * @fileoverview Marker\n * @author dxq613@gmail.com\n */\nimport { __extends } from \"tslib\";\nimport { isNil } from '@antv/util';\nimport { path2Absolute } from '@antv/path-util';\nimport ShapeBase from './base';\nimport { isFunction } from '../util/util';\nimport { drawPath } from '../util/draw';\nvar Symbols = {\n  // 圆\n  circle: function circle(x, y, r) {\n    return [['M', x - r, y], ['A', r, r, 0, 1, 0, x + r, y], ['A', r, r, 0, 1, 0, x - r, y]];\n  },\n  // 正方形\n  square: function square(x, y, r) {\n    return [['M', x - r, y - r], ['L', x + r, y - r], ['L', x + r, y + r], ['L', x - r, y + r], ['Z']];\n  },\n  // 菱形\n  diamond: function diamond(x, y, r) {\n    return [['M', x - r, y], ['L', x, y - r], ['L', x + r, y], ['L', x, y + r], ['Z']];\n  },\n  // 三角形\n  triangle: function triangle(x, y, r) {\n    var diffY = r * Math.sin(1 / 3 * Math.PI);\n    return [['M', x - r, y + diffY], ['L', x, y - diffY], ['L', x + r, y + diffY], ['Z']];\n  },\n  // 倒三角形\n  'triangle-down': function triangleDown(x, y, r) {\n    var diffY = r * Math.sin(1 / 3 * Math.PI);\n    return [['M', x - r, y - diffY], ['L', x + r, y - diffY], ['L', x, y + diffY], ['Z']];\n  }\n};\nvar Marker = /** @class */function (_super) {\n  __extends(Marker, _super);\n  function Marker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Marker.prototype.initAttrs = function (attrs) {\n    this._resetParamsCache();\n  };\n  // 重置绘制 path 存储的缓存\n  Marker.prototype._resetParamsCache = function () {\n    // 为了加速 path 的绘制、拾取和计算，这个地方可以缓存很多东西\n    // 这些缓存都是第一次需要时计算和存储，虽然增加了复杂度，但是频繁调用的方法，性能有很大提升\n    this.set('paramsCache', {}); // 清理缓存\n  };\n  // 更新属性时，检测是否更改了 path\n  Marker.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    if (['symbol', 'x', 'y', 'r', 'radius'].indexOf(name) !== -1) {\n      // path 相关属性更改时，清理缓存\n      this._resetParamsCache();\n    }\n  };\n  // 仅仅使用包围盒检测来进行拾取\n  // 所以不需要复写 isInStrokeOrPath 的方法\n  Marker.prototype.isOnlyHitBox = function () {\n    return true;\n  };\n  Marker.prototype._getR = function (attrs) {\n    // 兼容 r 和 radius 两种写法，推荐使用 r\n    return isNil(attrs.r) ? attrs.radius : attrs.r;\n  };\n  Marker.prototype._getPath = function () {\n    var attrs = this.attr();\n    var x = attrs.x,\n      y = attrs.y;\n    var symbol = attrs.symbol || 'circle';\n    var r = this._getR(attrs);\n    var method;\n    var path;\n    if (isFunction(symbol)) {\n      method = symbol;\n      path = method(x, y, r);\n      // 将 path 转成绝对路径\n      path = path2Absolute(path);\n    } else {\n      // 内置 symbol 的 path 都是绝对路径，直接绘制即可，不需要对 path 进行特殊处理\n      method = Marker.Symbols[symbol];\n      if (!method) {\n        console.warn(symbol + \" marker is not supported.\");\n        return null;\n      }\n      path = method(x, y, r);\n    }\n    return path;\n  };\n  Marker.prototype.createPath = function (context) {\n    var path = this._getPath();\n    var paramsCache = this.get('paramsCache');\n    drawPath(this, context, {\n      path: path\n    }, paramsCache);\n  };\n  Marker.Symbols = Symbols;\n  return Marker;\n}(ShapeBase);\nexport default Marker;","map":null,"metadata":{},"sourceType":"module"}