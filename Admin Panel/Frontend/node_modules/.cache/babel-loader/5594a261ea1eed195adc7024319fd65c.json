{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, get, isArray, isEmpty, isFunction, isNil, isNumber, isString, toString } from '@antv/util';\nimport { animation, annotation, legend, state, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { getMappingFunction } from '../../adaptor/geometries/base';\nimport { pattern } from '../../adaptor/pattern';\nimport { getLocale } from '../../core/locale';\nimport { deepAssign, flow, processIllegalData, renderStatistic, template, transformLabel } from '../../utils';\nimport { DEFAULT_OPTIONS } from './contants';\nimport { PIE_STATISTIC } from './interactions';\nimport { adaptOffset, getTotalValue, isAllZero } from './utils';\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    angleField = options.angleField,\n    colorField = options.colorField,\n    color = options.color,\n    pieStyle = options.pieStyle,\n    shape = options.shape;\n  // 处理不合法的数据\n  var processData = processIllegalData(data, angleField);\n  if (isAllZero(processData, angleField)) {\n    // 数据全 0 处理，调整 position 映射\n    var percentageField_1 = '$$percentage$$';\n    processData = processData.map(function (d) {\n      var _a;\n      return __assign(__assign({}, d), (_a = {}, _a[percentageField_1] = 1 / processData.length, _a));\n    });\n    chart.data(processData);\n    var p = deepAssign({}, params, {\n      options: {\n        xField: '1',\n        yField: percentageField_1,\n        seriesField: colorField,\n        isStack: true,\n        interval: {\n          color: color,\n          shape: shape,\n          style: pieStyle\n        },\n        args: {\n          zIndexReversed: true,\n          sortZIndex: true\n        }\n      }\n    });\n    interval(p);\n  } else {\n    chart.data(processData);\n    var p = deepAssign({}, params, {\n      options: {\n        xField: '1',\n        yField: angleField,\n        seriesField: colorField,\n        isStack: true,\n        interval: {\n          color: color,\n          shape: shape,\n          style: pieStyle\n        },\n        args: {\n          zIndexReversed: true,\n          sortZIndex: true\n        }\n      }\n    });\n    interval(p);\n  }\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a;\n  var chart = params.chart,\n    options = params.options;\n  var meta = options.meta,\n    colorField = options.colorField;\n  // meta 直接是 scale 的信息\n  var scales = deepAssign({}, meta);\n  chart.scale(scales, (_a = {}, _a[colorField] = {\n    type: 'cat'\n  }, _a));\n  return params;\n}\n/**\n * coord 配置\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var radius = options.radius,\n    innerRadius = options.innerRadius,\n    startAngle = options.startAngle,\n    endAngle = options.endAngle;\n  chart.coordinate({\n    type: 'theta',\n    cfg: {\n      radius: radius,\n      innerRadius: innerRadius,\n      startAngle: startAngle,\n      endAngle: endAngle\n    }\n  });\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    colorField = options.colorField,\n    angleField = options.angleField;\n  var geometry = chart.geometries[0];\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    var labelCfg = transformLabel(cfg);\n    // ① 提供模板字符串的 label content 配置\n    if (labelCfg.content) {\n      var content_1 = labelCfg.content;\n      labelCfg.content = function (data, dataum, index) {\n        var name = data[colorField];\n        var value = data[angleField];\n        // dymatic get scale, scale is ready this time\n        var angleScale = chart.getScaleByField(angleField);\n        var percent = angleScale === null || angleScale === void 0 ? void 0 : angleScale.scale(value);\n        return isFunction(content_1) ?\n        // append percent (number) to data, users can get origin data from `dataum._origin`\n        content_1(__assign(__assign({}, data), {\n          percent: percent\n        }), dataum, index) : isString(content_1) ? template(content_1, {\n          value: value,\n          name: name,\n          // percentage (string), default keep 2\n          percentage: isNumber(percent) && !isNil(value) ? (percent * 100).toFixed(2) + \"%\" : null\n        }) : content_1;\n      };\n    }\n    var LABEL_LAYOUT_TYPE_MAP = {\n      inner: '',\n      outer: 'pie-outer',\n      spider: 'pie-spider'\n    };\n    var labelLayoutType = labelCfg.type ? LABEL_LAYOUT_TYPE_MAP[labelCfg.type] : 'pie-outer';\n    var labelLayoutCfg = labelCfg.layout ? !isArray(labelCfg.layout) ? [labelCfg.layout] : labelCfg.layout : [];\n    labelCfg.layout = (labelLayoutType ? [{\n      type: labelLayoutType\n    }] : []).concat(labelLayoutCfg);\n    geometry.label({\n      // fix: could not create scale, when field is undefined（attributes 中的 fields 定义都会被用来创建 scale）\n      fields: colorField ? [angleField, colorField] : [angleField],\n      callback: callback,\n      cfg: __assign(__assign({}, labelCfg), {\n        offset: adaptOffset(labelCfg.type, labelCfg.offset),\n        type: 'pie'\n      })\n    });\n  }\n  return params;\n}\n/**\n * statistic options 处理\n * 1. 默认继承 default options 的样式\n * 2. 默认使用 meta 的 formatter\n */\nexport function transformStatisticOptions(options) {\n  var innerRadius = options.innerRadius,\n    statistic = options.statistic,\n    angleField = options.angleField,\n    colorField = options.colorField,\n    meta = options.meta,\n    locale = options.locale;\n  var i18n = getLocale(locale);\n  if (innerRadius && statistic) {\n    var _a = deepAssign({}, DEFAULT_OPTIONS.statistic, statistic),\n      titleOpt_1 = _a.title,\n      contentOpt_1 = _a.content;\n    if (titleOpt_1 !== false) {\n      titleOpt_1 = deepAssign({}, {\n        formatter: function formatter(datum) {\n          // 交互中, datum existed.\n          var text = datum ? datum[colorField] : !isNil(titleOpt_1.content) ? titleOpt_1.content : i18n.get(['statistic', 'total']);\n          var metaFormatter = get(meta, [colorField, 'formatter']) || function (v) {\n            return v;\n          };\n          return metaFormatter(text);\n        }\n      }, titleOpt_1);\n    }\n    if (contentOpt_1 !== false) {\n      contentOpt_1 = deepAssign({}, {\n        formatter: function formatter(datum, data) {\n          var dataValue = datum ? datum[angleField] : getTotalValue(data, angleField);\n          var metaFormatter = get(meta, [angleField, 'formatter']) || function (v) {\n            return v;\n          };\n          // 交互中\n          if (datum) {\n            return metaFormatter(dataValue);\n          }\n          return !isNil(contentOpt_1.content) ? contentOpt_1.content : metaFormatter(dataValue);\n        }\n      }, contentOpt_1);\n    }\n    return deepAssign({}, {\n      statistic: {\n        title: titleOpt_1,\n        content: contentOpt_1\n      }\n    }, options);\n  }\n  return options;\n}\n/**\n * statistic 中心文本配置\n * @param params\n */\nexport function pieAnnotation(params) {\n  var chart = params.chart,\n    options = params.options;\n  var _a = transformStatisticOptions(options),\n    innerRadius = _a.innerRadius,\n    statistic = _a.statistic;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  // 先进行其他 annotations，再去渲染统计文本\n  flow(annotation())(params);\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    renderStatistic(chart, {\n      statistic: statistic,\n      plotType: 'pie'\n    });\n  }\n  return params;\n}\n/**\n * 饼图 tooltip 配置\n * 1. 强制 tooltip.shared 为 false\n * @param params\n */\nfunction tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip,\n    colorField = options.colorField,\n    angleField = options.angleField,\n    data = options.data;\n  if (tooltip === false) {\n    chart.tooltip(tooltip);\n  } else {\n    chart.tooltip(deepAssign({}, tooltip, {\n      shared: false\n    }));\n    // 主要解决 all zero， 对于非 all zero 不再适用\n    if (isAllZero(data, angleField)) {\n      var fields = get(tooltip, 'fields');\n      var formatter = get(tooltip, 'formatter');\n      if (isEmpty(get(tooltip, 'fields'))) {\n        fields = [colorField, angleField];\n        formatter = formatter || function (datum) {\n          return {\n            name: datum[colorField],\n            value: toString(datum[angleField])\n          };\n        };\n      }\n      chart.geometries[0].tooltip(fields.join('*'), getMappingFunction(fields, formatter));\n    }\n  }\n  return params;\n}\n/**\n * Interaction 配置 (饼图特殊的 interaction, 中心文本变更的时候，需要将一些配置参数传进去）\n * @param params\n */\nexport function interaction(params) {\n  var chart = params.chart,\n    options = params.options;\n  var _a = transformStatisticOptions(options),\n    interactions = _a.interactions,\n    statistic = _a.statistic,\n    annotations = _a.annotations;\n  each(interactions, function (i) {\n    var _a, _b;\n    if (i.enable === false) {\n      chart.removeInteraction(i.type);\n    } else if (i.type === 'pie-statistic-active') {\n      // 只针对 start 阶段的配置，进行添加参数信息\n      var startStages_1 = [];\n      if (!((_a = i.cfg) === null || _a === void 0 ? void 0 : _a.start)) {\n        startStages_1 = [{\n          trigger: 'element:mouseenter',\n          action: PIE_STATISTIC + \":change\",\n          arg: {\n            statistic: statistic,\n            annotations: annotations\n          }\n        }];\n      }\n      each((_b = i.cfg) === null || _b === void 0 ? void 0 : _b.start, function (stage) {\n        startStages_1.push(__assign(__assign({}, stage), {\n          arg: {\n            statistic: statistic,\n            annotations: annotations\n          }\n        }));\n      });\n      chart.interaction(i.type, deepAssign({}, i.cfg, {\n        start: startStages_1\n      }));\n    } else {\n      chart.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 饼图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(pattern('pieStyle'), geometry, meta, theme, coordinate, legend, tooltip, label, state, /** 指标卡中心文本 放在下层 */\n  pieAnnotation, interaction, animation)(params);\n}","map":null,"metadata":{},"sourceType":"module"}