{"ast":null,"code":"import { __assign, __rest, __spreadArrays } from \"tslib\";\nimport { get, isFunction, uniq } from '@antv/util';\nimport { animation, annotation, interaction as baseInteraction, legend, pattern, scale, theme } from '../../adaptor/common';\nimport { polygon as polygonAdaptor } from '../../adaptor/geometries';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { getAdjustAppendPadding } from '../../utils/padding';\nimport { RAW_FIELDS, SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD, SUNBURST_Y_FIELD } from './constant';\nimport { transformData } from './utils';\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var color = options.color,\n    _a = options.colorField,\n    colorField = _a === void 0 ? SUNBURST_ANCESTOR_FIELD : _a,\n    sunburstStyle = options.sunburstStyle,\n    _b = options.rawFields,\n    rawFields = _b === void 0 ? [] : _b;\n  var data = transformData(options);\n  chart.data(data);\n  // 特殊处理下样式，如果没有设置 fillOpacity 的时候，默认根据层级进行填充透明度\n  var style;\n  if (sunburstStyle) {\n    style = function style(datum) {\n      return deepAssign({}, {\n        fillOpacity: Math.pow(0.85, datum.depth)\n      }, isFunction(sunburstStyle) ? sunburstStyle(datum) : sunburstStyle);\n    };\n  }\n  // geometry\n  polygonAdaptor(deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField,\n      rawFields: uniq(__spreadArrays(RAW_FIELDS, rawFields)),\n      polygon: {\n        color: color,\n        style: style\n      }\n    }\n  }));\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label;\n  var geometry = findGeometry(chart, 'polygon');\n  // 默认不展示，undefined 也不展示\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var _a = label.fields,\n      fields = _a === void 0 ? ['name'] : _a,\n      callback = label.callback,\n      cfg = __rest(label, [\"fields\", \"callback\"]);\n    geometry.label({\n      fields: fields,\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  return params;\n}\n/**\n * coord 配置\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var innerRadius = options.innerRadius,\n    radius = options.radius,\n    reflect = options.reflect;\n  var coord = chart.coordinate({\n    type: 'polar',\n    cfg: {\n      innerRadius: innerRadius,\n      radius: radius\n    }\n  });\n  if (reflect) {\n    coord.reflect(reflect);\n  }\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a;\n  var options = params.options;\n  var hierarchyConfig = options.hierarchyConfig,\n    meta = options.meta;\n  return flow(scale({}, (_a = {}, _a[SUNBURST_Y_FIELD] = get(meta, get(hierarchyConfig, ['field'], 'value')), _a)))(params);\n}\n/**\n * tooltip 配置\n * @param params\n */\nexport function tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip;\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    var tooltipOptions = tooltip;\n    // 设置了 fields，就不进行 customItems 了; 设置 formatter 时，需要搭配 fields\n    if (!get(tooltip, 'fields')) {\n      tooltipOptions = deepAssign({}, {\n        customItems: function customItems(items) {\n          return items.map(function (item) {\n            var scales = get(chart.getOptions(), 'scales');\n            var pathFormatter = get(scales, [SUNBURST_PATH_FIELD, 'formatter'], function (v) {\n              return v;\n            });\n            var valueFormatter = get(scales, [SUNBURST_Y_FIELD, 'formatter'], function (v) {\n              return v;\n            });\n            return __assign(__assign({}, item), {\n              name: pathFormatter(item.data[SUNBURST_PATH_FIELD]),\n              value: valueFormatter(item.data.value)\n            });\n          });\n        }\n      }, tooltipOptions);\n    }\n    chart.tooltip(tooltipOptions);\n  }\n  return params;\n}\nfunction adaptorInteraction(options) {\n  var drilldown = options.drilldown,\n    _a = options.interactions,\n    interactions = _a === void 0 ? [] : _a;\n  if (drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled) {\n    return deepAssign({}, options, {\n      interactions: __spreadArrays(interactions, [{\n        type: 'drill-down',\n        cfg: {\n          drillDownConfig: drilldown,\n          transformData: transformData\n        }\n      }])\n    });\n  }\n  return options;\n}\n/**\n * 交互配置\n * @param params\n * @returns\n */\nfunction interaction(params) {\n  var chart = params.chart,\n    options = params.options;\n  var drilldown = options.drilldown;\n  baseInteraction({\n    chart: chart,\n    options: adaptorInteraction(options)\n  });\n  // 适应下钻交互面包屑\n  if (drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled) {\n    // 为面包屑留出 25px 的空间\n    chart.appendPadding = getAdjustAppendPadding(chart.appendPadding, get(drilldown, ['breadCrumb', 'position']));\n  }\n  return params;\n}\n/**\n * 旭日图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('sunburstStyle'), geometry, axis, meta, legend, coordinate, tooltip, label, interaction, animation, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}