{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { tooltip } from '../../adaptor/common';\nimport { deepAssign, flow } from '../../utils';\nimport { adaptor as columnAdaptor } from '../column/adaptor';\nexport { meta } from '../column/adaptor';\n/**\n * 处理默认配置项\n * 1. switch xField、 yField\n * 2. switch xAxis、 yAxis and adjust axis.position configuration\n */\nfunction defaultOptions(params) {\n  var options = params.options;\n  var xField = options.xField,\n    yField = options.yField,\n    xAxis = options.xAxis,\n    yAxis = options.yAxis;\n  var position = {\n    left: 'bottom',\n    right: 'top',\n    top: 'left',\n    bottom: 'right'\n  };\n  var verticalAxis = yAxis !== false ? __assign({\n    position: position[(yAxis === null || yAxis === void 0 ? void 0 : yAxis.position) || 'left']\n  }, yAxis) : false;\n  var horizontalAxis = xAxis !== false ? __assign({\n    position: position[(xAxis === null || xAxis === void 0 ? void 0 : xAxis.position) || 'bottom']\n  }, xAxis) : false;\n  return __assign(__assign({}, params), {\n    options: __assign(__assign({}, options), {\n      xField: yField,\n      yField: xField,\n      // 条形图 xAxis，yAxis 不可以做 deepAssign\n      xAxis: verticalAxis,\n      yAxis: horizontalAxis\n    })\n  });\n}\n/**\n * label 适配器\n * @param params\n */\nfunction label(params) {\n  var options = params.options;\n  var label = options.label;\n  // label of bar charts default position is left, if plot has label\n  if (label && !label.position) {\n    label.position = 'left';\n    // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n    if (!label.layout) {\n      label.layout = [{\n        type: 'interval-adjust-position'\n      }, {\n        type: 'interval-hide-overlap'\n      }, {\n        type: 'adjust-color'\n      }, {\n        type: 'limit-in-plot',\n        cfg: {\n          action: 'hide'\n        }\n      }];\n    }\n  }\n  return deepAssign({}, params, {\n    options: {\n      label: label\n    }\n  });\n}\n/**\n * legend 适配器\n * @param params\n */\nfunction legend(params) {\n  var options = params.options;\n  // 默认 legend 位置\n  var seriesField = options.seriesField,\n    isStack = options.isStack;\n  var legend = options.legend;\n  if (seriesField) {\n    if (legend !== false) {\n      legend = __assign({\n        position: isStack ? 'top-left' : 'right-top'\n      }, legend || {});\n    }\n  } else {\n    legend = false;\n  }\n  return deepAssign({}, params, {\n    options: {\n      legend: legend\n    }\n  });\n}\n/**\n * coordinate 适配器\n * @param params\n */\nfunction coordinate(params) {\n  // transpose column to bar 对角变换 & y 方向镜像变换\n  var options = params.options;\n  var coordinateOptions = [{\n    type: 'transpose'\n  }, {\n    type: 'reflectY'\n  }].concat(options.coordinate || []);\n  return deepAssign({}, params, {\n    options: {\n      coordinate: coordinateOptions\n    }\n  });\n}\n/**\n * 柱形图适配器\n * @param params\n */\nexport function geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var barStyle = options.barStyle,\n    barWidthRatio = options.barWidthRatio,\n    minBarWidth = options.minBarWidth,\n    maxBarWidth = options.maxBarWidth,\n    barBackground = options.barBackground;\n  return columnAdaptor({\n    chart: chart,\n    options: __assign(__assign({}, options), {\n      // rename attrs as column\n      columnStyle: barStyle,\n      columnWidthRatio: barWidthRatio,\n      minColumnWidth: minBarWidth,\n      maxColumnWidth: maxBarWidth,\n      columnBackground: barBackground\n    })\n  }, true);\n}\n/**\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(defaultOptions, label, legend, tooltip, coordinate, geometry)(params);\n}","map":null,"metadata":{},"sourceType":"module"}