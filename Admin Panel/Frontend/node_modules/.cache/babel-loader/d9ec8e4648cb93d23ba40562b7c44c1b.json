{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  function Circle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Circle.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'circle',\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n  Circle.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n  Circle.prototype.getRegion = function (count, index) {\n    var r = 1 / 2; // 画布半径\n    // 画布圆心\n    var center = {\n      x: 0.5,\n      y: 0.5\n    };\n    // 每隔分面间隔的弧度\n    var avgAngle = Math.PI * 2 / count;\n    // 当前分面所在的弧度\n    var angle = -1 * Math.PI / 2 + avgAngle * index;\n    // TODO 没看懂\n    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2));\n    // 分面的中心点\n    var middle = getAnglePoint(center, r - facetR, angle);\n    var startAngle = Math.PI * 5 / 4; // 右上角\n    var endAngle = Math.PI * 1 / 4; // 左下角\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle)\n    };\n  };\n  Circle.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  Circle.prototype.beforeEachView = function (view, facet) {};\n  Circle.prototype.generateFacets = function (data) {\n    var _this = this;\n    var _a = this.cfg,\n      fields = _a.fields,\n      type = _a.type;\n    var _b = __read(fields, 1),\n      field = _b[0];\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n    var values = this.getFieldValues(data, field);\n    var count = values.length;\n    var rst = [];\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var facetData = filter(data, _this.getFacetDataFilter(conditions));\n      var facet = {\n        type: type,\n        data: facetData,\n        region: _this.getRegion(count, index),\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1\n      };\n      rst.push(facet);\n    });\n    return rst;\n  };\n  Circle.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  Circle.prototype.getYAxisOption = function (y, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * facet title\n   */\n  Circle.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n        view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  return Circle;\n}(Facet);\nexport default Circle;","map":null,"metadata":{},"sourceType":"module"}