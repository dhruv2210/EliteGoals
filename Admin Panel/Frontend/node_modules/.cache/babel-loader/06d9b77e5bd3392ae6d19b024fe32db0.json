{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { initZoomMotion } from '../../style/motion';\nimport { genComponentStyleHook, mergeToken, PresetColors } from '../../theme/internal';\nimport { resetComponent } from '../../style';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nvar generatorTooltipPresetColor = function generatorTooltipPresetColor(token) {\n  var componentCls = token.componentCls;\n  return PresetColors.reduce(function (previousValue, currentValue) {\n    var _previousValue;\n    var lightColor = token[currentValue + \"-6\"];\n    previousValue[\"&\" + componentCls + \"-\" + currentValue] = (_previousValue = {}, _defineProperty(_previousValue, componentCls + \"-inner\", {\n      backgroundColor: lightColor\n    }), _defineProperty(_previousValue, componentCls + \"-arrow\", {\n      '--antd-arrow-background-color': lightColor\n    }), _previousValue);\n    return previousValue;\n  }, {});\n};\nvar genTooltipStyle = function genTooltipStyle(token) {\n  var _extends2;\n  var componentCls = token.componentCls,\n    tooltipMaxWidth = token.tooltipMaxWidth,\n    tooltipColor = token.tooltipColor,\n    tooltipBg = token.tooltipBg,\n    tooltipBorderRadius = token.tooltipBorderRadius,\n    zIndexPopup = token.zIndexPopup,\n    controlHeight = token.controlHeight,\n    boxShadowSecondary = token.boxShadowSecondary,\n    paddingSM = token.paddingSM,\n    paddingXS = token.paddingXS,\n    tooltipRadiusOuter = token.tooltipRadiusOuter;\n  return [_defineProperty({}, componentCls, _extends(_extends(_extends(_extends({}, resetComponent(token)), (_extends2 = {\n    position: 'absolute',\n    zIndex: zIndexPopup,\n    display: 'block',\n    '&': [{\n      width: 'max-content'\n    }, {\n      width: 'intrinsic'\n    }],\n    maxWidth: tooltipMaxWidth,\n    visibility: 'visible',\n    '&-hidden': {\n      display: 'none'\n    },\n    '--antd-arrow-background-color': tooltipBg\n  }, _defineProperty(_extends2, componentCls + \"-inner\", {\n    minWidth: controlHeight,\n    minHeight: controlHeight,\n    padding: paddingSM / 2 + \"px \" + paddingXS + \"px\",\n    color: tooltipColor,\n    textAlign: 'start',\n    textDecoration: 'none',\n    wordWrap: 'break-word',\n    backgroundColor: tooltipBg,\n    borderRadius: tooltipBorderRadius,\n    boxShadow: boxShadowSecondary\n  }), _defineProperty(_extends2, [\"&-placement-left\", \"&-placement-leftTop\", \"&-placement-leftBottom\", \"&-placement-right\", \"&-placement-rightTop\", \"&-placement-rightBottom\"].join(','), _defineProperty({}, componentCls + \"-inner\", {\n    borderRadius: tooltipBorderRadius > MAX_VERTICAL_CONTENT_RADIUS ? MAX_VERTICAL_CONTENT_RADIUS : tooltipBorderRadius\n  })), _defineProperty(_extends2, componentCls + \"-content\", {\n    position: 'relative'\n  }), _extends2)), generatorTooltipPresetColor(token)), {\n    // RTL\n    '&-rtl': {\n      direction: 'rtl'\n    }\n  })),\n  // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    showArrowCls: '',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }),\n  // Pure Render\n  _defineProperty({}, componentCls + \"-pure\", {\n    position: 'relative',\n    maxWidth: 'none'\n  })];\n};\n// ============================== Export ==============================\nexport default (function (prefixCls, injectStyle) {\n  var useOriginHook = genComponentStyleHook('Tooltip', function (token) {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if (injectStyle === false) {\n      return [];\n    }\n    var borderRadius = token.borderRadius,\n      colorTextLightSolid = token.colorTextLightSolid,\n      colorBgDefault = token.colorBgDefault,\n      borderRadiusOuter = token.borderRadiusOuter;\n    var TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, function (_ref3) {\n    var zIndexPopupBase = _ref3.zIndexPopupBase,\n      colorBgSpotlight = _ref3.colorBgSpotlight;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  });\n  return useOriginHook(prefixCls);\n});","map":null,"metadata":{},"sourceType":"module"}