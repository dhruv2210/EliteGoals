{"ast":null,"code":"import { isArray, isNumber } from '@antv/util';\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\nexport function normalPadding(padding) {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n  if (isArray(padding)) {\n    var length_1 = padding.length;\n    if (length_1 === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n    if (length_1 === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n    if (length_1 === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n    if (length_1 === 4) {\n      return padding;\n    }\n  }\n  return [0, 0, 0, 0];\n}\n/**\n * 获取调整的 appendPadding\n */\nexport function getAdjustAppendPadding(padding, position, append) {\n  if (position === void 0) {\n    position = 'bottom';\n  }\n  if (append === void 0) {\n    append = 25;\n  }\n  var currentAppendPadding = normalPadding(padding);\n  var PADDING = [position.startsWith('top') ? append : 0, position.startsWith('right') ? append : 0, position.startsWith('bottom') ? append : 0, position.startsWith('left') ? append : 0];\n  return [currentAppendPadding[0] + PADDING[0], currentAppendPadding[1] + PADDING[1], currentAppendPadding[2] + PADDING[2], currentAppendPadding[3] + PADDING[3]];\n}\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\nexport function resolveAllPadding(paddings) {\n  // 先把数组里的 padding 全部转换成 normal\n  var normalPaddings = paddings.map(function (item) {\n    return normalPadding(item);\n  });\n  var finalPadding = [0, 0, 0, 0];\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map(function (item, index) {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach(function (d, i) {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n  return finalPadding;\n}","map":null,"metadata":{},"sourceType":"module"}