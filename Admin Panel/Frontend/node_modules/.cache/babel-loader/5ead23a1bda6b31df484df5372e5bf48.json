{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, isArray } from '@antv/util';\nimport { animation, annotation, interaction, limitInPlot, scale, scrollbar, slider, theme, tooltip } from '../../adaptor/common';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { adjustYMetaByZero } from '../../utils/data';\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    color = options.color,\n    lineStyle = options.lineStyle,\n    lineShape = options.lineShape,\n    pointMapping = options.point,\n    areaMapping = options.area,\n    seriesField = options.seriesField;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var areaState = areaMapping === null || areaMapping === void 0 ? void 0 : areaMapping.state;\n  chart.data(data);\n  // line geometry 处理\n  var primary = deepAssign({}, params, {\n    options: {\n      shapeField: seriesField,\n      line: {\n        color: color,\n        style: lineStyle,\n        shape: lineShape\n      },\n      // 颜色保持一致，因为如果颜色不一致，会导致 tooltip 中元素重复。\n      // 如果存在，才设置，否则为空\n      point: pointMapping && __assign({\n        color: color,\n        shape: 'circle'\n      }, pointMapping),\n      // 面积配置\n      area: areaMapping && __assign({\n        color: color\n      }, areaMapping),\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined\n    }\n  });\n  var second = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  var areaParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: areaState\n    }\n  });\n  line(primary);\n  point(second);\n  area(areaParams);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a, _b;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField,\n    data = options.data;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a), (_b = {}, _b[xField] = {\n    type: 'cat'\n  }, _b[yField] = adjustYMetaByZero(data, yField), _b)))(params);\n}\n/**\n * 坐标系配置. 支持 reflect 镜像处理\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var reflect = options.reflect;\n  if (reflect) {\n    var p = reflect;\n    if (!isArray(p)) {\n      p = [p];\n    }\n    var actions = p.map(function (d) {\n      return ['reflect', d];\n    });\n    chart.coordinate({\n      type: 'rect',\n      actions: actions\n    });\n  }\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    seriesField = options.seriesField;\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField;\n  var lineGeometry = findGeometry(chart, 'line');\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    lineGeometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    lineGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        layout: [{\n          type: 'limit-in-plot'\n        }, {\n          type: 'path-adjust-position'\n        }, {\n          type: 'point-adjust-position'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(cfg))\n    });\n  }\n  return params;\n}\n/**\n * 统一处理 adjust\n * @param params\n */\nexport function adjust(params) {\n  var chart = params.chart,\n    options = params.options;\n  var isStack = options.isStack;\n  if (isStack) {\n    each(chart.geometries, function (g) {\n      g.adjust('stack');\n    });\n  }\n  return params;\n}\n/**\n * 折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, meta, adjust, theme, coordinate, axis, legend, tooltip, label, slider, scrollbar, interaction, animation, annotation(), limitInPlot)(params);\n}","map":null,"metadata":{},"sourceType":"module"}