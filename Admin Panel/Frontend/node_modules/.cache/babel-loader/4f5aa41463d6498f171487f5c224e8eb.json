{"ast":null,"code":"// export function getPointAtSegLength(p1x: number, p1y: number, c1x: number, c1y: number, c2x: number, c2y: number, p2x: number, p2y: number, t: number) {\n//   const t1 = 1 - t;\n//   return {\n//     x: (t1 ** 3) * p1x\n//       + t1 * t1 * 3 * t * c1x\n//       + t1 * 3 * t * t * c2x\n//       + (t ** 3) * p2x,\n//     y: (t1 ** 3) * p1y\n//       + t1 * t1 * 3 * t * c1y\n//       + t1 * 3 * t * t * c2y\n//       + (t ** 3) * p2y,\n//   };\n// }\n// export function midPoint(a: number[], b: number[], t: number) {\n//   const ax = a[0];\n//   const ay = a[1];\n//   const bx = b[0];\n//   const by = b[1];\n//   return [ax + (bx - ax) * t, ay + (by - ay) * t];\n// }\nexport function lineToCubic(x1, y1, x2, y2) {\n  return [x1, y1, x2, y2, x2, y2];\n  // const t = 0.5;\n  // const p0 = [x1, y1];\n  // const p1 = [x2, y2];\n  // const p2 = midPoint(p0, p1, t);\n  // const p3 = midPoint(p1, p2, t);\n  // const p4 = midPoint(p2, p3, t);\n  // const p5 = midPoint(p3, p4, t);\n  // const p6 = midPoint(p4, p5, t);\n  // const cp1 = getPointAtSegLength.apply(0, p0.concat(p2, p4, p6, t));\n  // const cp2 = getPointAtSegLength.apply(0, p6.concat(p5, p3, p1, 0));\n  // return [cp1.x, cp1.y, cp2.x, cp2.y, x2, y2];\n}","map":null,"metadata":{},"sourceType":"module"}