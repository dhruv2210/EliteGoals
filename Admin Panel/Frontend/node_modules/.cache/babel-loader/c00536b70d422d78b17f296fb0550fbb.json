{"ast":null,"code":"/**\n * @fileoverview 事件处理器\n * @author dxq613@gmail.com\n */\nimport GraphEvent from './graph-event';\nimport { each, isParent } from '../util/util';\nvar CLICK_OFFSET = 40;\nvar LEFT_BTN_CODE = 0;\nvar DELEGATION_SPLIT = ':';\nvar EVENTS = ['mousedown', 'mouseup', 'dblclick', 'mouseout', 'mouseover', 'mousemove', 'mouseleave', 'mouseenter', 'touchstart', 'touchmove', 'touchend', 'dragenter', 'dragover', 'dragleave', 'drop', 'contextmenu', 'mousewheel'];\n// 是否有委托事件监听\nfunction hasDelegation(events, type) {\n  for (var key in events) {\n    if (events.hasOwnProperty(key) && key.indexOf(DELEGATION_SPLIT + type) >= 0) {\n      return true;\n    }\n  }\n  return false;\n}\n// 触发目标事件，目标只能是 shape 或 canvas\nfunction emitTargetEvent(target, type, eventObj) {\n  eventObj.name = type;\n  eventObj.target = target;\n  eventObj.currentTarget = target;\n  eventObj.delegateTarget = target;\n  target.emit(type, eventObj);\n}\n// 事件冒泡, enter 和 leave 需要对 fromShape 和 toShape 进行判同\nfunction bubbleEvent(container, type, eventObj) {\n  if (eventObj.bubbles) {\n    var relativeShape = void 0;\n    var isOverEvent = false;\n    if (type === 'mouseenter') {\n      relativeShape = eventObj.fromShape;\n      isOverEvent = true;\n    } else if (type === 'mouseleave') {\n      isOverEvent = true;\n      relativeShape = eventObj.toShape;\n    }\n    // canvas 上的 mouseenter， mouseleave 事件，仅当进入或者移出 canvas 时触发\n    if (container.isCanvas() && isOverEvent) {\n      return;\n    }\n    // 如果相关图形同当前图形在同一个容器内，不触发事件\n    if (relativeShape && isParent(container, relativeShape)) {\n      // 阻止继续向上冒泡\n      eventObj.bubbles = false;\n      return;\n    }\n    // 事件名称可能在委托过程中被修改，因此事件冒泡时需要重新设置事件名称\n    eventObj.name = type;\n    eventObj.currentTarget = container;\n    eventObj.delegateTarget = container;\n    container.emit(type, eventObj);\n  }\n}\nvar EventController = /** @class */function () {\n  function EventController(cfg) {\n    var _this = this;\n    // 正在被拖拽的图形\n    this.draggingShape = null;\n    this.dragging = false;\n    // 当前鼠标/touch所在位置的图形\n    this.currentShape = null;\n    this.mousedownShape = null;\n    this.mousedownPoint = null;\n    // 统一处理所有的回调\n    this._eventCallback = function (ev) {\n      var type = ev.type;\n      _this._triggerEvent(type, ev);\n    };\n    // 在 document 处理拖拽到画布外的事件，处理从图形上移除画布未被捕捉的问题\n    this._onDocumentMove = function (ev) {\n      var canvas = _this.canvas;\n      var el = canvas.get('el');\n      if (el !== ev.target) {\n        // 不在 canvas 上移动\n        if (_this.dragging || _this.currentShape) {\n          var pointInfo = _this._getPointInfo(ev);\n          // 还在拖拽过程中\n          if (_this.dragging) {\n            _this._emitEvent('drag', ev, pointInfo, _this.draggingShape);\n          }\n          // 说明从某个图形直接移动到了画布外面，\n          // 修复了 mouseleave 的 bug 后不再出现这种情况\n          // if (this.currentShape) {\n          //   this._emitEvent('mouseleave', ev, pointInfo, this.currentShape, this.currentShape, null);\n          //   this.currentShape = null;\n          // }\n        }\n      }\n    };\n    // 在 document 上处理拖拽到外面，释放鼠标时触发 dragend\n    this._onDocumentMouseUp = function (ev) {\n      var canvas = _this.canvas;\n      var el = canvas.get('el');\n      if (el !== ev.target) {\n        // 不在 canvas 上移动\n        if (_this.dragging) {\n          var pointInfo = _this._getPointInfo(ev);\n          if (_this.draggingShape) {\n            // 如果存在拖拽的图形，则也触发 drop 事件\n            _this._emitEvent('drop', ev, pointInfo, null);\n          }\n          _this._emitEvent('dragend', ev, pointInfo, _this.draggingShape);\n          _this._afterDrag(_this.draggingShape, pointInfo, ev);\n        }\n      }\n    };\n    this.canvas = cfg.canvas;\n  }\n  EventController.prototype.init = function () {\n    this._bindEvents();\n  };\n  // 注册事件\n  EventController.prototype._bindEvents = function () {\n    var _this = this;\n    var el = this.canvas.get('el');\n    each(EVENTS, function (eventName) {\n      el.addEventListener(eventName, _this._eventCallback);\n    });\n    if (document) {\n      // 处理移动到外面没有触发 shape mouse leave 的事件\n      // 处理拖拽到外部的问题\n      document.addEventListener('mousemove', this._onDocumentMove);\n      // 处理拖拽过程中在外部释放鼠标的问题\n      document.addEventListener('mouseup', this._onDocumentMouseUp);\n    }\n  };\n  // 清理事件\n  EventController.prototype._clearEvents = function () {\n    var _this = this;\n    var el = this.canvas.get('el');\n    each(EVENTS, function (eventName) {\n      el.removeEventListener(eventName, _this._eventCallback);\n    });\n    if (document) {\n      document.removeEventListener('mousemove', this._onDocumentMove);\n      document.removeEventListener('mouseup', this._onDocumentMouseUp);\n    }\n  };\n  EventController.prototype._getEventObj = function (type, event, point, target, fromShape, toShape) {\n    var eventObj = new GraphEvent(type, event);\n    eventObj.fromShape = fromShape;\n    eventObj.toShape = toShape;\n    eventObj.x = point.x;\n    eventObj.y = point.y;\n    eventObj.clientX = point.clientX;\n    eventObj.clientY = point.clientY;\n    eventObj.propagationPath.push(target);\n    // 事件的x,y应该是基于画布左上角的，与canvas的matrix无关\n    return eventObj;\n  };\n  // 根据点获取图形，提取成独立方法，便于后续优化\n  EventController.prototype._getShape = function (point, ev) {\n    return this.canvas.getShape(point.x, point.y, ev);\n  };\n  // 获取事件的当前点的信息\n  EventController.prototype._getPointInfo = function (ev) {\n    var canvas = this.canvas;\n    var clientPoint = canvas.getClientByEvent(ev);\n    var point = canvas.getPointByEvent(ev);\n    return {\n      x: point.x,\n      y: point.y,\n      clientX: clientPoint.x,\n      clientY: clientPoint.y\n    };\n  };\n  // 触发事件\n  EventController.prototype._triggerEvent = function (type, ev) {\n    var pointInfo = this._getPointInfo(ev);\n    // 每次都获取图形有一定成本，后期可以考虑进行缓存策略\n    var shape = this._getShape(pointInfo, ev);\n    var method = this[\"_on\" + type];\n    var leaveCanvas = false;\n    if (method) {\n      method.call(this, pointInfo, shape, ev);\n    } else {\n      var preShape = this.currentShape;\n      // 如果进入、移出画布时存在图形，则要分别触发事件\n      if (type === 'mouseenter' || type === 'dragenter' || type === 'mouseover') {\n        this._emitEvent(type, ev, pointInfo, null, null, shape); // 先进入画布\n        if (shape) {\n          this._emitEvent(type, ev, pointInfo, shape, null, shape); // 再触发图形的事件\n        }\n\n        if (type === 'mouseenter' && this.draggingShape) {\n          // 如果正在拖拽图形, 则触发 dragleave\n          this._emitEvent('dragenter', ev, pointInfo, null);\n        }\n      } else if (type === 'mouseleave' || type === 'dragleave' || type === 'mouseout') {\n        leaveCanvas = true;\n        if (preShape) {\n          this._emitEvent(type, ev, pointInfo, preShape, preShape, null); // 先触发图形的事件\n        }\n\n        this._emitEvent(type, ev, pointInfo, null, preShape, null); // 再触发离开画布事件\n        if (type === 'mouseleave' && this.draggingShape) {\n          this._emitEvent('dragleave', ev, pointInfo, null);\n        }\n      } else {\n        this._emitEvent(type, ev, pointInfo, shape, null, null); // 一般事件中不需要考虑 from, to\n      }\n    }\n\n    if (!leaveCanvas) {\n      this.currentShape = shape;\n    }\n    // 当鼠标从画布移动到 shape 或者从 preShape 移动到 shape 时，应用 shape 上的鼠标样式\n    if (shape && !shape.get('destroyed')) {\n      var canvas = this.canvas;\n      var el = canvas.get('el');\n      el.style.cursor = shape.attr('cursor') || canvas.get('cursor');\n    }\n  };\n  // 记录下点击的位置、图形，便于拖拽事件、click 事件的判定\n  EventController.prototype._onmousedown = function (pointInfo, shape, event) {\n    // 只有鼠标左键的 mousedown 事件才会设置 mousedownShape 等属性，避免鼠标右键的 mousedown 事件引起其他事件发生\n    if (event.button === LEFT_BTN_CODE) {\n      this.mousedownShape = shape;\n      this.mousedownPoint = pointInfo;\n      this.mousedownTimeStamp = event.timeStamp;\n    }\n    this._emitEvent('mousedown', event, pointInfo, shape, null, null); // mousedown 不考虑fromShape, toShape\n  };\n  // mouseleave 和 mouseenter 都是成对存在的\n  // mouseenter 和 mouseover 同时触发\n  EventController.prototype._emitMouseoverEvents = function (event, pointInfo, fromShape, toShape) {\n    var el = this.canvas.get('el');\n    if (fromShape !== toShape) {\n      if (fromShape) {\n        this._emitEvent('mouseout', event, pointInfo, fromShape, fromShape, toShape);\n        this._emitEvent('mouseleave', event, pointInfo, fromShape, fromShape, toShape);\n        // 当鼠标从 fromShape 移动到画布上时，重置鼠标样式\n        if (!toShape || toShape.get('destroyed')) {\n          el.style.cursor = this.canvas.get('cursor');\n        }\n      }\n      if (toShape) {\n        this._emitEvent('mouseover', event, pointInfo, toShape, fromShape, toShape);\n        this._emitEvent('mouseenter', event, pointInfo, toShape, fromShape, toShape);\n      }\n    }\n  };\n  // dragover 不等同于 mouseover，而等同于 mousemove\n  EventController.prototype._emitDragoverEvents = function (event, pointInfo, fromShape, toShape, isCanvasEmit) {\n    if (toShape) {\n      if (toShape !== fromShape) {\n        if (fromShape) {\n          this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n        }\n        this._emitEvent('dragenter', event, pointInfo, toShape, fromShape, toShape);\n      }\n      if (!isCanvasEmit) {\n        this._emitEvent('dragover', event, pointInfo, toShape);\n      }\n    } else if (fromShape) {\n      // TODO: 此处判断有问题，当 drag 图形时，也会触发一次 dragleave 事件，因为此时 toShape 为 null，这不是所期望的\n      // 经过空白区域\n      this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);\n    }\n    if (isCanvasEmit) {\n      this._emitEvent('dragover', event, pointInfo, toShape);\n    }\n  };\n  // drag 完成后，需要做一些清理工作\n  EventController.prototype._afterDrag = function (draggingShape, pointInfo, event) {\n    if (draggingShape) {\n      draggingShape.set('capture', true); // 恢复可以拾取\n      this.draggingShape = null;\n    }\n    this.dragging = false;\n    // drag 完成后，有可能 draggingShape 已经移动到了当前位置，所以不能直接取当前图形\n    var shape = this._getShape(pointInfo, event);\n    // 拖拽完成后，进行 enter，leave 的判定\n    if (shape !== draggingShape) {\n      this._emitMouseoverEvents(event, pointInfo, draggingShape, shape);\n    }\n    this.currentShape = shape; // 更新当前 shape，如果不处理当前图形的 mouseleave 事件可能会出问题\n  };\n  // 按键抬起时，会终止拖拽、触发点击\n  EventController.prototype._onmouseup = function (pointInfo, shape, event) {\n    // eevent.button === 0 表示鼠标左键事件，此处加上判断主要是为了避免右键鼠标会触发 mouseup 和 click 事件\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n    if (event.button === LEFT_BTN_CODE) {\n      var draggingShape = this.draggingShape;\n      if (this.dragging) {\n        // 存在可以拖拽的图形，同时拖拽到其他图形上时触发 drag 事件\n        if (draggingShape) {\n          this._emitEvent('drop', event, pointInfo, shape);\n        }\n        this._emitEvent('dragend', event, pointInfo, draggingShape);\n        this._afterDrag(draggingShape, pointInfo, event);\n      } else {\n        this._emitEvent('mouseup', event, pointInfo, shape); // 先触发 mouseup 再触发 click\n        if (shape === this.mousedownShape) {\n          this._emitEvent('click', event, pointInfo, shape);\n        }\n        this.mousedownShape = null;\n        this.mousedownPoint = null;\n      }\n    }\n  };\n  // 当触发浏览器的 dragover 事件时，不会再触发 mousemove ，所以这时候的 dragenter, dragleave 事件需要重新处理\n  EventController.prototype._ondragover = function (pointInfo, shape, event) {\n    event.preventDefault(); // 如果不对 dragover 进行 preventDefault，则不会在 canvas 上触发 drop 事件\n    var preShape = this.currentShape;\n    this._emitDragoverEvents(event, pointInfo, preShape, shape, true);\n  };\n  // 大量的图形事件，都通过 mousemove 模拟\n  EventController.prototype._onmousemove = function (pointInfo, shape, event) {\n    var canvas = this.canvas;\n    var preShape = this.currentShape;\n    var draggingShape = this.draggingShape;\n    // 正在拖拽时\n    if (this.dragging) {\n      // 正在拖拽中\n      if (draggingShape) {\n        // 如果拖拽了 shape 会触发 dragenter, dragleave, dragover 和 drag 事件\n        this._emitDragoverEvents(event, pointInfo, preShape, shape, false);\n      }\n      // 如果存在 draggingShape 则会在 draggingShape 上触发 drag 事件，冒泡到 canvas 上\n      // 否则在 canvas 上触发 drag 事件\n      this._emitEvent('drag', event, pointInfo, draggingShape);\n    } else {\n      var mousedownPoint = this.mousedownPoint;\n      if (mousedownPoint) {\n        // 当鼠标点击下去，同时移动时，进行 drag 判定\n        var mousedownShape = this.mousedownShape;\n        var now = event.timeStamp;\n        var timeWindow = now - this.mousedownTimeStamp;\n        var dx = mousedownPoint.clientX - pointInfo.clientX;\n        var dy = mousedownPoint.clientY - pointInfo.clientY;\n        var dist = dx * dx + dy * dy;\n        if (timeWindow > 120 || dist > CLICK_OFFSET) {\n          if (mousedownShape && mousedownShape.get('draggable')) {\n            // 设置了 draggable 的 shape 才能触发 drag 相关的事件\n            draggingShape = this.mousedownShape; // 拖动鼠标点下时的 shape\n            draggingShape.set('capture', false); // 禁止继续拾取，否则无法进行 dragover,dragenter,dragleave,drop的判定\n            this.draggingShape = draggingShape;\n            this.dragging = true;\n            this._emitEvent('dragstart', event, pointInfo, draggingShape);\n            // 清理按下鼠标时缓存的值\n            this.mousedownShape = null;\n            this.mousedownPoint = null;\n          } else if (!mousedownShape && canvas.get('draggable')) {\n            // 设置了 draggable 的 canvas 才能触发 drag 相关的事件\n            this.dragging = true;\n            this._emitEvent('dragstart', event, pointInfo, null);\n            // 清理按下鼠标时缓存的值\n            this.mousedownShape = null;\n            this.mousedownPoint = null;\n          } else {\n            this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n            this._emitEvent('mousemove', event, pointInfo, shape);\n          }\n        } else {\n          this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n          this._emitEvent('mousemove', event, pointInfo, shape);\n        }\n      } else {\n        // 没有按键按下时，则直接触发 mouse over 相关的各种事件\n        this._emitMouseoverEvents(event, pointInfo, preShape, shape);\n        // 始终触发移动\n        this._emitEvent('mousemove', event, pointInfo, shape);\n      }\n    }\n  };\n  // 触发事件\n  EventController.prototype._emitEvent = function (type, event, pointInfo, shape, fromShape, toShape) {\n    var eventObj = this._getEventObj(type, event, pointInfo, shape, fromShape, toShape);\n    // 存在 shape 触发，则进行冒泡处理\n    if (shape) {\n      eventObj.shape = shape;\n      // 触发 shape 上的事件\n      emitTargetEvent(shape, type, eventObj);\n      var parent_1 = shape.getParent();\n      // 执行冒泡\n      while (parent_1) {\n        // 委托事件要先触发\n        parent_1.emitDelegation(type, eventObj);\n        // 事件冒泡停止，不能妨碍委托事件\n        if (!eventObj.propagationStopped) {\n          bubbleEvent(parent_1, type, eventObj);\n        }\n        eventObj.propagationPath.push(parent_1);\n        parent_1 = parent_1.getParent();\n      }\n    } else {\n      // 如果没有 shape 直接在 canvas 上触发\n      var canvas = this.canvas;\n      // 直接触发 canvas 上的事件\n      emitTargetEvent(canvas, type, eventObj);\n    }\n  };\n  EventController.prototype.destroy = function () {\n    // 清理事件\n    this._clearEvents();\n    // 清理缓存的对象\n    this.canvas = null;\n    this.currentShape = null;\n    this.draggingShape = null;\n    this.mousedownPoint = null;\n    this.mousedownShape = null;\n    this.mousedownTimeStamp = null;\n  };\n  return EventController;\n}();\nexport default EventController;","map":null,"metadata":{},"sourceType":"module"}