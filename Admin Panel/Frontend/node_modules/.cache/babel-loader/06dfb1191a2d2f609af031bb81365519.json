{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\nimport { each, head, isEqual, last, get, flatten, isArray, uniq, isNil } from '@antv/util';\nimport { findItemsFromViewRecurisive } from '../../util/tooltip';\nimport { getAngle, getSectorPath } from '../../util/graphics';\nimport Action from './base';\nvar DEFAULT_REGION_PATH_STYLE = {\n  fill: '#CCD6EC',\n  opacity: 0.3\n};\nexport function getItemsOfView(view, point, tooltipCfg) {\n  var e_1, _a, e_2, _b, e_3, _c;\n  var items = findItemsFromViewRecurisive(view, point, tooltipCfg);\n  if (items.length) {\n    // 三层\n    items = flatten(items);\n    try {\n      for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n        var itemArr = items_1_1.value;\n        try {\n          for (var itemArr_1 = (e_2 = void 0, __values(itemArr)), itemArr_1_1 = itemArr_1.next(); !itemArr_1_1.done; itemArr_1_1 = itemArr_1.next()) {\n            var item = itemArr_1_1.value;\n            var _d = item.mappingData,\n              x = _d.x,\n              y = _d.y;\n            item.x = isArray(x) ? x[x.length - 1] : x;\n            item.y = isArray(y) ? y[y.length - 1] : y;\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (itemArr_1_1 && !itemArr_1_1.done && (_b = itemArr_1.return)) _b.call(itemArr_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var shared = tooltipCfg.shared;\n    // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n    if (shared === false && items.length > 1) {\n      var snapItem = items[0];\n      var min = Math.abs(point.y - snapItem[0].y);\n      try {\n        for (var items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n          var aItem = items_2_1.value;\n          var yDistance = Math.abs(point.y - aItem[0].y);\n          if (yDistance <= min) {\n            snapItem = aItem;\n            min = yDistance;\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (items_2_1 && !items_2_1.done && (_c = items_2.return)) _c.call(items_2);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      items = [snapItem];\n    }\n    return uniq(flatten(items));\n  }\n  return [];\n}\n/**\n * 背景框的 Action. 只作用于 interval 和 schema geometry\n * @ignore\n */\nvar ActiveRegion = /** @class */function (_super) {\n  __extends(ActiveRegion, _super);\n  function ActiveRegion() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 显示\n   * @param {ShapeAttrs} style region-path 的样式\n   * @param {number} appendRatio 适用于笛卡尔坐标系. 对于 x 轴非 linear 类型: 默认：0.25, x 轴 linear 类型: 默认 0\n   * @param {number} appendWidth  适用于笛卡尔坐标系. 像素级别，优先级 > appendRatio\n   */\n  ActiveRegion.prototype.show = function (args) {\n    var view = this.context.view;\n    var ev = this.context.event;\n    var tooltipCfg = view.getController('tooltip').getTooltipCfg();\n    var tooltipItems = getItemsOfView(view, {\n      x: ev.x,\n      y: ev.y\n    }, tooltipCfg);\n    if (isEqual(tooltipItems, this.items)) {\n      // 如果拾取数据同上次相同，则不重复绘制\n      return;\n    }\n    this.items = tooltipItems;\n    if (tooltipItems.length) {\n      var xField_1 = view.getXScale().field;\n      var xValue_1 = tooltipItems[0].data[xField_1];\n      // 根据 x 对应的值查找 elements\n      var elements_1 = [];\n      var geometries = view.geometries;\n      each(geometries, function (geometry) {\n        if (geometry.type === 'interval' || geometry.type === 'schema') {\n          var result = geometry.getElementsBy(function (ele) {\n            var eleData = ele.getData();\n            return eleData[xField_1] === xValue_1;\n          });\n          elements_1 = elements_1.concat(result);\n        }\n      });\n      // 根据 bbox 计算背景框的面积区域\n      if (elements_1.length) {\n        var coordinate_1 = view.getCoordinate();\n        var firstBBox_1 = elements_1[0].shape.getCanvasBBox();\n        var lastBBox_1 = elements_1[0].shape.getCanvasBBox();\n        var groupBBox_1 = firstBBox_1;\n        each(elements_1, function (ele) {\n          var bbox = ele.shape.getCanvasBBox();\n          if (coordinate_1.isTransposed) {\n            if (bbox.minY < firstBBox_1.minY) {\n              firstBBox_1 = bbox;\n            }\n            if (bbox.maxY > lastBBox_1.maxY) {\n              lastBBox_1 = bbox;\n            }\n          } else {\n            if (bbox.minX < firstBBox_1.minX) {\n              firstBBox_1 = bbox;\n            }\n            if (bbox.maxX > lastBBox_1.maxX) {\n              lastBBox_1 = bbox;\n            }\n          }\n          groupBBox_1.x = Math.min(bbox.minX, groupBBox_1.minX);\n          groupBBox_1.y = Math.min(bbox.minY, groupBBox_1.minY);\n          groupBBox_1.width = Math.max(bbox.maxX, groupBBox_1.maxX) - groupBBox_1.x;\n          groupBBox_1.height = Math.max(bbox.maxY, groupBBox_1.maxY) - groupBBox_1.y;\n        });\n        var backgroundGroup = view.backgroundGroup,\n          coordinateBBox = view.coordinateBBox;\n        var path = void 0;\n        if (coordinate_1.isRect) {\n          var xScale = view.getXScale();\n          var _a = args || {},\n            appendRatio = _a.appendRatio,\n            appendWidth = _a.appendWidth;\n          if (isNil(appendWidth)) {\n            appendRatio = isNil(appendRatio) ? xScale.isLinear ? 0 : 0.25 : appendRatio; // 如果 x 轴是数值类型，如直方图，默认不需要加额外的宽度\n            appendWidth = coordinate_1.isTransposed ? appendRatio * lastBBox_1.height : appendRatio * firstBBox_1.width;\n          }\n          var minX = void 0;\n          var minY = void 0;\n          var width = void 0;\n          var height = void 0;\n          if (coordinate_1.isTransposed) {\n            minX = coordinateBBox.minX;\n            minY = Math.min(lastBBox_1.minY, firstBBox_1.minY) - appendWidth;\n            width = coordinateBBox.width;\n            height = groupBBox_1.height + appendWidth * 2;\n          } else {\n            minX = Math.min(firstBBox_1.minX, lastBBox_1.minX) - appendWidth;\n            // 直角坐标系 非转置：最小值直接取 坐标系 minY\n            minY = coordinateBBox.minY;\n            width = groupBBox_1.width + appendWidth * 2;\n            height = coordinateBBox.height;\n          }\n          path = [['M', minX, minY], ['L', minX + width, minY], ['L', minX + width, minY + height], ['L', minX, minY + height], ['Z']];\n        } else {\n          var firstElement = head(elements_1);\n          var lastElement = last(elements_1);\n          var startAngle = getAngle(firstElement.getModel(), coordinate_1).startAngle;\n          var endAngle = getAngle(lastElement.getModel(), coordinate_1).endAngle;\n          var center = coordinate_1.getCenter();\n          var radius = coordinate_1.getRadius();\n          var innterRadius = coordinate_1.innerRadius * radius;\n          path = getSectorPath(center.x, center.y, radius, startAngle, endAngle, innterRadius);\n        }\n        if (this.regionPath) {\n          this.regionPath.attr('path', path);\n          this.regionPath.show();\n        } else {\n          var style = get(args, 'style', DEFAULT_REGION_PATH_STYLE);\n          this.regionPath = backgroundGroup.addShape({\n            type: 'path',\n            name: 'active-region',\n            capture: false,\n            attrs: __assign(__assign({}, style), {\n              path: path\n            })\n          });\n        }\n      }\n    }\n  };\n  /**\n   * 隐藏\n   */\n  ActiveRegion.prototype.hide = function () {\n    if (this.regionPath) {\n      this.regionPath.hide();\n    }\n    // this.regionPath = null;\n    this.items = null;\n  };\n  /**\n   * 销毁\n   */\n  ActiveRegion.prototype.destroy = function () {\n    this.hide();\n    if (this.regionPath) {\n      this.regionPath.remove(true);\n    }\n    _super.prototype.destroy.call(this);\n  };\n  return ActiveRegion;\n}(Action);\nexport default ActiveRegion;","map":null,"metadata":{},"sourceType":"module"}