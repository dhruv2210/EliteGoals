{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { clamp, deepMix, each, get, isArray, isNil, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { Trend } from '../trend/trend';\nimport { DEFAULT_HANDLER_STYLE, Handler } from './handler';\nimport { BACKGROUND_STYLE, DEFAULT_HANDLER_WIDTH, FOREGROUND_STYLE, HANDLER_STYLE, SLIDER_CHANGE, TEXT_STYLE } from './constant';\nvar Slider = /** @class */function (_super) {\n  __extends(Slider, _super);\n  function Slider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.onMouseDown = function (target) {\n      return function (e) {\n        _this.currentTarget = target;\n        // 取出原生事件\n        var event = e.originalEvent;\n        // 2. 存储当前点击位置\n        event.stopPropagation();\n        event.preventDefault();\n        // 兼容移动端获取数据\n        _this.prevX = get(event, 'touches.0.pageX', event.pageX);\n        _this.prevY = get(event, 'touches.0.pageY', event.pageY);\n        // 3. 开始滑动的时候，绑定 move 和 up 事件\n        var containerDOM = _this.getContainerDOM();\n        containerDOM.addEventListener('mousemove', _this.onMouseMove);\n        containerDOM.addEventListener('mouseup', _this.onMouseUp);\n        containerDOM.addEventListener('mouseleave', _this.onMouseUp);\n        // 移动端事件\n        containerDOM.addEventListener('touchmove', _this.onMouseMove);\n        containerDOM.addEventListener('touchend', _this.onMouseUp);\n        containerDOM.addEventListener('touchcancel', _this.onMouseUp);\n      };\n    };\n    _this.onMouseMove = function (event) {\n      var width = _this.cfg.width;\n      var originValue = [_this.get('start'), _this.get('end')];\n      // 滑动过程中，计算偏移，更新滑块，然后 emit 数据出去\n      event.stopPropagation();\n      event.preventDefault();\n      var x = get(event, 'touches.0.pageX', event.pageX);\n      var y = get(event, 'touches.0.pageY', event.pageY);\n      // 横向的 slider 只处理 x\n      var offsetX = x - _this.prevX;\n      var offsetXRange = _this.adjustOffsetRange(offsetX / width);\n      // 更新 start end range 范围\n      _this.updateStartEnd(offsetXRange);\n      // 更新 ui\n      _this.updateUI(_this.getElementByLocalId('foreground'), _this.getElementByLocalId('minText'), _this.getElementByLocalId('maxText'));\n      _this.prevX = x;\n      _this.prevY = y;\n      _this.draw();\n      // 因为存储的 start、end 可能不一定是按大小存储的，所以排序一下，对外是 end >= start\n      _this.emit(SLIDER_CHANGE, [_this.get('start'), _this.get('end')].sort());\n      _this.delegateEmit('valuechanged', {\n        originValue: originValue,\n        value: [_this.get('start'), _this.get('end')]\n      });\n    };\n    _this.onMouseUp = function () {\n      // 结束之后，取消绑定的事件\n      if (_this.currentTarget) {\n        _this.currentTarget = undefined;\n      }\n      var containerDOM = _this.getContainerDOM();\n      if (containerDOM) {\n        containerDOM.removeEventListener('mousemove', _this.onMouseMove);\n        containerDOM.removeEventListener('mouseup', _this.onMouseUp);\n        // 防止滑动到 canvas 外部之后，状态丢失\n        containerDOM.removeEventListener('mouseleave', _this.onMouseUp);\n        // 移动端事件\n        containerDOM.removeEventListener('touchmove', _this.onMouseMove);\n        containerDOM.removeEventListener('touchend', _this.onMouseUp);\n        containerDOM.removeEventListener('touchcancel', _this.onMouseUp);\n      }\n    };\n    return _this;\n  }\n  Slider.prototype.setRange = function (min, max) {\n    this.set('minLimit', min);\n    this.set('maxLimit', max);\n    var oldStart = this.get('start');\n    var oldEnd = this.get('end');\n    var newStart = clamp(oldStart, min, max);\n    var newEnd = clamp(oldEnd, min, max);\n    if (!this.get('isInit') && (oldStart !== newStart || oldEnd !== newEnd)) {\n      this.setValue([newStart, newEnd]);\n    }\n  };\n  Slider.prototype.getRange = function () {\n    return {\n      min: this.get('minLimit') || 0,\n      max: this.get('maxLimit') || 1\n    };\n  };\n  Slider.prototype.setValue = function (value) {\n    var range = this.getRange();\n    if (isArray(value) && value.length === 2) {\n      var originValue = [this.get('start'), this.get('end')];\n      this.update({\n        start: clamp(value[0], range.min, range.max),\n        end: clamp(value[1], range.min, range.max)\n      });\n      if (!this.get('updateAutoRender')) {\n        this.render();\n      }\n      this.delegateEmit('valuechanged', {\n        originValue: originValue,\n        value: value\n      });\n    }\n  };\n  Slider.prototype.getValue = function () {\n    return [this.get('start'), this.get('end')];\n  };\n  Slider.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'slider',\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 16,\n      backgroundStyle: {},\n      foregroundStyle: {},\n      handlerStyle: {},\n      textStyle: {},\n      defaultCfg: {\n        backgroundStyle: BACKGROUND_STYLE,\n        foregroundStyle: FOREGROUND_STYLE,\n        handlerStyle: HANDLER_STYLE,\n        textStyle: TEXT_STYLE\n      }\n    });\n  };\n  Slider.prototype.update = function (cfg) {\n    var start = cfg.start,\n      end = cfg.end;\n    var validCfg = __assign({}, cfg);\n    if (!isNil(start)) {\n      validCfg.start = clamp(start, 0, 1);\n    }\n    if (!isNil(end)) {\n      validCfg.end = clamp(end, 0, 1);\n    }\n    _super.prototype.update.call(this, validCfg);\n    this.minHandler = this.getChildComponentById(this.getElementId('minHandler'));\n    this.maxHandler = this.getChildComponentById(this.getElementId('maxHandler'));\n    this.trend = this.getChildComponentById(this.getElementId('trend'));\n  };\n  Slider.prototype.init = function () {\n    this.set('start', clamp(this.get('start'), 0, 1));\n    this.set('end', clamp(this.get('end'), 0, 1));\n    _super.prototype.init.call(this);\n  };\n  Slider.prototype.render = function () {\n    _super.prototype.render.call(this);\n    this.updateUI(this.getElementByLocalId('foreground'), this.getElementByLocalId('minText'), this.getElementByLocalId('maxText'));\n  };\n  Slider.prototype.renderInner = function (group) {\n    var _a = this.cfg,\n      start = _a.start,\n      end = _a.end,\n      width = _a.width,\n      height = _a.height,\n      _b = _a.trendCfg,\n      trendCfg = _b === void 0 ? {} : _b,\n      minText = _a.minText,\n      maxText = _a.maxText,\n      _c = _a.backgroundStyle,\n      backgroundStyle = _c === void 0 ? {} : _c,\n      _d = _a.foregroundStyle,\n      foregroundStyle = _d === void 0 ? {} : _d,\n      _e = _a.textStyle,\n      textStyle = _e === void 0 ? {} : _e;\n    var handlerStyle = deepMix({}, DEFAULT_HANDLER_STYLE, this.cfg.handlerStyle);\n    var min = start * width;\n    var max = end * width;\n    // 趋势图数据\n    if (size(get(trendCfg, 'data'))) {\n      this.trend = this.addComponent(group, __assign({\n        component: Trend,\n        id: this.getElementId('trend'),\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      }, trendCfg));\n    }\n    // 1. 背景\n    this.addShape(group, {\n      id: this.getElementId('background'),\n      type: 'rect',\n      attrs: __assign({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      }, backgroundStyle)\n    });\n    // 2. 左右文字\n    var minTextShape = this.addShape(group, {\n      id: this.getElementId('minText'),\n      type: 'text',\n      attrs: __assign({\n        // x: 0,\n        y: height / 2,\n        textAlign: 'right',\n        text: minText,\n        silent: false\n      }, textStyle)\n    });\n    var maxTextShape = this.addShape(group, {\n      id: this.getElementId('maxText'),\n      type: 'text',\n      attrs: __assign({\n        // x: 0,\n        y: height / 2,\n        textAlign: 'left',\n        text: maxText,\n        silent: false\n      }, textStyle)\n    });\n    // 3. 前景 选中背景框\n    var foregroundShape = this.addShape(group, {\n      id: this.getElementId('foreground'),\n      name: 'foreground',\n      type: 'rect',\n      attrs: __assign({\n        // x: 0,\n        y: 0,\n        // width: 0,\n        height: height\n      }, foregroundStyle)\n    });\n    // 滑块相关的大小信息\n    var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n    var handlerHeight = get(handlerStyle, 'height', 24);\n    // 4. 左右滑块\n    this.minHandler = this.addComponent(group, {\n      component: Handler,\n      id: this.getElementId('minHandler'),\n      name: 'handler-min',\n      x: 0,\n      y: (height - handlerHeight) / 2,\n      width: handlerWidth,\n      height: handlerHeight,\n      cursor: 'ew-resize',\n      style: handlerStyle\n    });\n    this.maxHandler = this.addComponent(group, {\n      component: Handler,\n      id: this.getElementId('maxHandler'),\n      name: 'handler-max',\n      x: 0,\n      y: (height - handlerHeight) / 2,\n      width: handlerWidth,\n      height: handlerHeight,\n      cursor: 'ew-resize',\n      style: handlerStyle\n    });\n  };\n  Slider.prototype.applyOffset = function () {\n    this.moveElementTo(this.get('group'), {\n      x: this.get('x'),\n      y: this.get('y')\n    });\n  };\n  Slider.prototype.initEvent = function () {\n    this.bindEvents();\n  };\n  Slider.prototype.updateUI = function (foregroundShape, minTextShape, maxTextShape) {\n    var _a = this.cfg,\n      start = _a.start,\n      end = _a.end,\n      width = _a.width,\n      minText = _a.minText,\n      maxText = _a.maxText,\n      handlerStyle = _a.handlerStyle,\n      height = _a.height;\n    var min = start * width;\n    var max = end * width;\n    if (this.trend) {\n      this.trend.update({\n        width: width,\n        height: height\n      });\n      if (!this.get('updateAutoRender')) {\n        this.trend.render();\n      }\n    }\n    // 1. foreground\n    foregroundShape.attr('x', min);\n    foregroundShape.attr('width', max - min);\n    // 滑块相关的大小信息\n    var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n    // 设置文本\n    minTextShape.attr('text', minText);\n    maxTextShape.attr('text', maxText);\n    var _b = this._dodgeText([min, max], minTextShape, maxTextShape),\n      minAttrs = _b[0],\n      maxAttrs = _b[1];\n    // 2. 左侧滑块和文字位置\n    if (this.minHandler) {\n      this.minHandler.update({\n        x: min - handlerWidth / 2\n      });\n      if (!this.get('updateAutoRender')) {\n        this.minHandler.render();\n      }\n    }\n    each(minAttrs, function (v, k) {\n      return minTextShape.attr(k, v);\n    });\n    // 3. 右侧滑块和文字位置\n    if (this.maxHandler) {\n      this.maxHandler.update({\n        x: max - handlerWidth / 2\n      });\n      if (!this.get('updateAutoRender')) {\n        this.maxHandler.render();\n      }\n    }\n    each(maxAttrs, function (v, k) {\n      return maxTextShape.attr(k, v);\n    });\n  };\n  Slider.prototype.bindEvents = function () {\n    var group = this.get('group');\n    group.on('handler-min:mousedown', this.onMouseDown('minHandler'));\n    group.on('handler-min:touchstart', this.onMouseDown('minHandler'));\n    // 2. 右滑块的滑动\n    group.on('handler-max:mousedown', this.onMouseDown('maxHandler'));\n    group.on('handler-max:touchstart', this.onMouseDown('maxHandler'));\n    // 3. 前景选中区域\n    var foreground = group.findById(this.getElementId('foreground'));\n    foreground.on('mousedown', this.onMouseDown('foreground'));\n    foreground.on('touchstart', this.onMouseDown('foreground'));\n  };\n  /**\n   * 调整 offsetRange，因为一些范围的限制\n   * @param offsetRange\n   */\n  Slider.prototype.adjustOffsetRange = function (offsetRange) {\n    var _a = this.cfg,\n      start = _a.start,\n      end = _a.end;\n    // 针对不同的滑动组件，处理的方式不同\n    switch (this.currentTarget) {\n      case 'minHandler':\n        {\n          var min = 0 - start;\n          var max = 1 - start;\n          return Math.min(max, Math.max(min, offsetRange));\n        }\n      case 'maxHandler':\n        {\n          var min = 0 - end;\n          var max = 1 - end;\n          return Math.min(max, Math.max(min, offsetRange));\n        }\n      case 'foreground':\n        {\n          var min = 0 - start;\n          var max = 1 - end;\n          return Math.min(max, Math.max(min, offsetRange));\n        }\n    }\n  };\n  Slider.prototype.updateStartEnd = function (offsetRange) {\n    var _a = this.cfg,\n      start = _a.start,\n      end = _a.end;\n    // 操作不同的组件，反馈不一样\n    switch (this.currentTarget) {\n      case 'minHandler':\n        start += offsetRange;\n        break;\n      case 'maxHandler':\n        end += offsetRange;\n        break;\n      case 'foreground':\n        start += offsetRange;\n        end += offsetRange;\n        break;\n    }\n    this.set('start', start);\n    this.set('end', end);\n  };\n  /**\n   * 调整 text 的位置，自动躲避\n   * 根据位置，调整返回新的位置\n   * @param range\n   */\n  Slider.prototype._dodgeText = function (range, minTextShape, maxTextShape) {\n    var _a, _b;\n    var _c = this.cfg,\n      handlerStyle = _c.handlerStyle,\n      width = _c.width;\n    var PADDING = 2;\n    var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n    var min = range[0],\n      max = range[1];\n    var sorted = false;\n    // 如果交换了位置，则对应的 min max 也交互\n    if (min > max) {\n      _a = [max, min], min = _a[0], max = _a[1];\n      _b = [maxTextShape, minTextShape], minTextShape = _b[0], maxTextShape = _b[1];\n      sorted = true;\n    }\n    // 避让规则，优先显示在两侧，只有显示不下的时候，才显示在中间\n    var minBBox = minTextShape.getBBox();\n    var maxBBox = maxTextShape.getBBox();\n    var minAttrs = minBBox.width > min - PADDING ? {\n      x: min + handlerWidth / 2 + PADDING,\n      textAlign: 'left'\n    } : {\n      x: min - handlerWidth / 2 - PADDING,\n      textAlign: 'right'\n    };\n    var maxAttrs = maxBBox.width > width - max - PADDING ? {\n      x: max - handlerWidth / 2 - PADDING,\n      textAlign: 'right'\n    } : {\n      x: max + handlerWidth / 2 + PADDING,\n      textAlign: 'left'\n    };\n    return !sorted ? [minAttrs, maxAttrs] : [maxAttrs, minAttrs];\n  };\n  Slider.prototype.draw = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n    if (canvas) {\n      canvas.draw();\n    }\n  };\n  Slider.prototype.getContainerDOM = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n    return canvas && canvas.get('container');\n  };\n  return Slider;\n}(GroupComponent);\nexport { Slider };\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}