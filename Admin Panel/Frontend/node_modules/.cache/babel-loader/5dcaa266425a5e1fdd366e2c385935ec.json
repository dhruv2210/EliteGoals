{"ast":null,"code":"import path2Absolute from './path-2-absolute';\nimport { segmentToCubic } from './process/segment-2-cubic';\nexport default function pathToCurve(path, needZCommandIndexes) {\n  if (needZCommandIndexes === void 0) {\n    needZCommandIndexes = false;\n  }\n  var pathArray = path2Absolute(path);\n  var params = {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    x: 0,\n    y: 0,\n    qx: null,\n    qy: null\n  };\n  var allPathCommands = [];\n  var pathCommand = '';\n  var ii = pathArray.length;\n  var segment;\n  var seglen;\n  var zCommandIndexes = [];\n  for (var i = 0; i < ii; i += 1) {\n    if (pathArray[i]) pathCommand = pathArray[i][0];\n    allPathCommands[i] = pathCommand;\n    pathArray[i] = segmentToCubic(pathArray[i], params);\n    fixArc(pathArray, allPathCommands, i);\n    ii = pathArray.length; // solves curveArrays ending in Z\n    // keep Z command account for lineJoin\n    // @see https://github.com/antvis/util/issues/68\n    if (pathCommand === 'Z') {\n      zCommandIndexes.push(i);\n    }\n    segment = pathArray[i];\n    seglen = segment.length;\n    params.x1 = +segment[seglen - 2];\n    params.y1 = +segment[seglen - 1];\n    params.x2 = +segment[seglen - 4] || params.x1;\n    params.y2 = +segment[seglen - 3] || params.y1;\n  }\n  if (needZCommandIndexes) {\n    return [pathArray, zCommandIndexes];\n  } else {\n    return pathArray;\n  }\n}\nfunction fixArc(pathArray, allPathCommands, i) {\n  if (pathArray[i].length > 7) {\n    pathArray[i].shift();\n    var pi = pathArray[i];\n    // const ni = i + 1;\n    var ni = i;\n    while (pi.length) {\n      // if created multiple C:s, their original seg is saved\n      allPathCommands[i] = 'A';\n      // @ts-ignore\n      pathArray.splice(ni += 1, 0, ['C'].concat(pi.splice(0, 6)));\n    }\n    pathArray.splice(i, 1);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}