{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, filter, isMatch } from '@antv/util';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { animation, annotation, interaction, limitInPlot, scale, scrollbar, slider, state, theme, transformations } from '../../adaptor/common';\nimport { connectedArea } from '../../adaptor/connected-area';\nimport { conversionTag } from '../../adaptor/conversion-tag';\nimport { interval } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { adjustYMetaByZero, deepAssign, findGeometry, flow, pick, transformLabel } from '../../utils';\nimport { getDataWhetherPercentage, getDeepPercent } from '../../utils/transform/percent';\n/**\n * defaultOptions\n * @param params\n */\nfunction defaultOptions(params) {\n  var options = params.options;\n  // 默认 legend 位置\n  var legend = options.legend;\n  var seriesField = options.seriesField,\n    isStack = options.isStack;\n  if (seriesField) {\n    if (legend !== false) {\n      legend = __assign({\n        position: isStack ? 'right-top' : 'top-left'\n      }, legend);\n    }\n  } else {\n    legend = false;\n  }\n  // @ts-ignore 直接改值\n  params.options.legend = legend;\n  return params;\n}\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    columnStyle = options.columnStyle,\n    color = options.color,\n    columnWidthRatio = options.columnWidthRatio,\n    isPercent = options.isPercent,\n    isGroup = options.isGroup,\n    isStack = options.isStack,\n    xField = options.xField,\n    yField = options.yField,\n    seriesField = options.seriesField,\n    groupField = options.groupField,\n    tooltip = options.tooltip,\n    shape = options.shape;\n  var percentData = isPercent && isGroup && isStack ? getDeepPercent(data, yField, [xField, groupField], yField) : getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n  var chartData = [];\n  // 存在堆叠,并且存在堆叠seriesField分类，并且不存在分组的时候 进行堆叠\n  if (isStack && seriesField && !isGroup) {\n    percentData.forEach(function (item) {\n      var stackedItem = chartData.find(function (v) {\n        return v[xField] === item[xField] && v[seriesField] === item[seriesField];\n      });\n      if (stackedItem) {\n        stackedItem[yField] += item[yField] || 0;\n      } else {\n        chartData.push(__assign({}, item));\n      }\n    });\n  } else {\n    chartData = percentData;\n  }\n  chart.data(chartData);\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  var tooltipOptions = isPercent ? __assign({\n    formatter: function formatter(datum) {\n      return {\n        name: isGroup && isStack ? datum[seriesField] + \" - \" + datum[groupField] : datum[seriesField] || datum[xField],\n        value: (Number(datum[yField]) * 100).toFixed(2) + '%'\n      };\n    }\n  }, tooltip) : tooltip;\n  var p = deepAssign({}, params, {\n    options: {\n      data: chartData,\n      widthRatio: columnWidthRatio,\n      tooltip: tooltipOptions,\n      interval: {\n        shape: shape,\n        style: columnStyle,\n        color: color\n      }\n    }\n  });\n  interval(p);\n  return p;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a, _b;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField,\n    data = options.data,\n    isPercent = options.isPercent;\n  var percentYMeta = isPercent ? {\n    max: 1,\n    min: 0,\n    minLimit: 0,\n    maxLimit: 1\n  } : {};\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a), (_b = {}, _b[xField] = {\n    type: 'cat'\n  }, _b[yField] = __assign(__assign({}, adjustYMetaByZero(data, yField)), percentYMeta), _b)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    seriesField = options.seriesField;\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField,\n    isRange = options.isRange;\n  var geometry = findGeometry(chart, 'interval');\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    geometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n        layout: (cfg === null || cfg === void 0 ? void 0 : cfg.position) ? undefined : [{\n          type: 'interval-adjust-position'\n        }, {\n          type: 'interval-hide-overlap'\n        }, {\n          type: 'adjust-color'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(isRange ? __assign({\n        content: function content(item) {\n          var _a;\n          return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');\n        }\n      }, cfg) : cfg))\n    });\n  }\n  return params;\n}\n/**\n * 柱形图 tooltip 配置 (对堆叠、分组做特殊处理)\n * @param params\n */\nfunction columnTooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip,\n    isGroup = options.isGroup,\n    isStack = options.isStack,\n    groupField = options.groupField,\n    data = options.data,\n    xField = options.xField,\n    yField = options.yField,\n    seriesField = options.seriesField;\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    var tooltipOptions = tooltip;\n    // fix: https://github.com/antvis/G2Plot/issues/2572\n    if (isGroup && isStack) {\n      var customItems_1 = tooltipOptions.customItems;\n      var tooltipFormatter_1 = (tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.formatter) || function (datum) {\n        return {\n          name: datum[seriesField] + \" - \" + datum[groupField],\n          value: datum[yField]\n        };\n      };\n      tooltipOptions = __assign(__assign({}, tooltipOptions), {\n        customItems: function customItems(originalItems) {\n          var items = [];\n          each(originalItems, function (item) {\n            // Find datas in same cluster\n            var datas = filter(data, function (d) {\n              return isMatch(d, pick(item.data, [xField, seriesField]));\n            });\n            datas.forEach(function (datum) {\n              items.push(__assign(__assign(__assign({}, item), {\n                value: datum[yField],\n                data: datum,\n                mappingData: {\n                  _origin: datum\n                }\n              }), tooltipFormatter_1(datum)));\n            });\n          });\n          // fix https://github.com/antvis/G2Plot/issues/3367\n          return customItems_1 ? customItems_1(items) : items;\n        }\n      });\n    }\n    chart.tooltip(tooltipOptions);\n  }\n  return params;\n}\n/**\n * 柱形图适配器\n * @param params\n */\nexport function adaptor(params, isBar) {\n  if (isBar === void 0) {\n    isBar = false;\n  }\n  var options = params.options;\n  var seriesField = options.seriesField;\n  return flow(defaultOptions,\n  // 处理默认配置\n  theme,\n  // theme 需要在 geometry 之前\n  pattern('columnStyle'), state, transformations('rect'), geometry, meta, axis, legend, columnTooltip, slider, scrollbar, label, brushInteraction, interaction, animation, annotation(), conversionTag(options.yField, !isBar, !!seriesField),\n  // 有拆分的时候禁用转化率\n  connectedArea(!options.isStack), limitInPlot)(params);\n}","map":null,"metadata":{},"sourceType":"module"}