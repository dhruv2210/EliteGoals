{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n// @ts-ignore\nimport isoParse from './util/isodate';\nimport { date as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport Ref from './Reference';\nimport BaseSchema from './schema';\nvar invalidDate = new Date('');\nvar isDate = function isDate(obj) {\n  return Object.prototype.toString.call(obj) === '[object Date]';\n};\nexport function create() {\n  return new DateSchema();\n}\nvar DateSchema = /*#__PURE__*/function (_BaseSchema) {\n  _inherits(DateSchema, _BaseSchema);\n  function DateSchema() {\n    var _this;\n    _classCallCheck(this, DateSchema);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateSchema).call(this, {\n      type: 'date'\n    }));\n    _this.withMutation(function () {\n      _this.transform(function (value) {\n        if (this.isType(value)) return value;\n        value = isoParse(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.\n\n        return !isNaN(value) ? new Date(value) : invalidDate;\n      });\n    });\n    return _this;\n  }\n  _createClass(DateSchema, [{\n    key: \"_typeCheck\",\n    value: function _typeCheck(v) {\n      return isDate(v) && !isNaN(v.getTime());\n    }\n  }, {\n    key: \"prepareParam\",\n    value: function prepareParam(ref, name) {\n      var param;\n      if (!Ref.isRef(ref)) {\n        var cast = this.cast(ref);\n        if (!this._typeCheck(cast)) throw new TypeError(\"`\".concat(name, \"` must be a Date or a value that can be `cast()` to a Date\"));\n        param = cast;\n      } else {\n        param = ref;\n      }\n      return param;\n    }\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.min;\n      var limit = this.prepareParam(_min, 'min');\n      return this.test({\n        message: message,\n        name: 'min',\n        exclusive: true,\n        params: {\n          min: _min\n        },\n        test: function test(value) {\n          return isAbsent(value) || value >= this.resolve(limit);\n        }\n      });\n    }\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.max;\n      var limit = this.prepareParam(_max, 'max');\n      return this.test({\n        message: message,\n        name: 'max',\n        exclusive: true,\n        params: {\n          max: _max\n        },\n        test: function test(value) {\n          return isAbsent(value) || value <= this.resolve(limit);\n        }\n      });\n    }\n  }]);\n  return DateSchema;\n}(BaseSchema);\nexport { DateSchema as default };\nDateSchema.INVALID_DATE = invalidDate;\ncreate.prototype = DateSchema.prototype;\ncreate.INVALID_DATE = invalidDate;","map":null,"metadata":{},"sourceType":"module"}