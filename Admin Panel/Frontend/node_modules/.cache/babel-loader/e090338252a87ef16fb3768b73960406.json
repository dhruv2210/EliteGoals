{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { get } from '@antv/util';\nimport { animation, annotation, interaction as baseInteraction, legend, pattern, scale, theme } from '../../adaptor/common';\nimport { point } from '../../adaptor/geometries/point';\nimport { deepAssign, flow } from '../../utils';\nimport { getAdjustAppendPadding, resolveAllPadding } from '../../utils/padding';\nimport { RAW_FIELDS } from './constant';\nimport { resolvePaddingForCircle, transformData } from './utils';\n/**\n * 获取默认 option\n * @param params\n */\nfunction defaultOptions(params) {\n  var chart = params.chart;\n  var diameter = Math.min(chart.viewBBox.width, chart.viewBBox.height);\n  return deepAssign({\n    options: {\n      size: function size(_a) {\n        var r = _a.r;\n        return r * diameter;\n      }\n    }\n  }, params);\n}\n/**\n * padding 配置\n * @param params\n */\nfunction padding(params) {\n  var options = params.options,\n    chart = params.chart;\n  // 通过改变 padding，修改 coordinate 的绘制区域\n  var containerSize = chart.viewBBox;\n  var padding = options.padding,\n    appendPadding = options.appendPadding,\n    drilldown = options.drilldown;\n  var tempAppendPadding = appendPadding;\n  if (drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled) {\n    var appendPaddingByDrilldown = getAdjustAppendPadding(chart.appendPadding, get(drilldown, ['breadCrumb', 'position']));\n    tempAppendPadding = resolveAllPadding([appendPaddingByDrilldown, appendPadding]);\n  }\n  var finalPadding = resolvePaddingForCircle(padding, tempAppendPadding, containerSize).finalPadding;\n  chart.padding = finalPadding;\n  chart.appendPadding = 0;\n  return params;\n}\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var padding = chart.padding,\n    appendPadding = chart.appendPadding;\n  var color = options.color,\n    colorField = options.colorField,\n    pointStyle = options.pointStyle,\n    hierarchyConfig = options.hierarchyConfig,\n    sizeField = options.sizeField,\n    _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a,\n    drilldown = options.drilldown;\n  var data = transformData({\n    data: options.data,\n    hierarchyConfig: hierarchyConfig,\n    enableDrillDown: drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled,\n    rawFields: rawFields\n  });\n  chart.data(data);\n  var containerSize = chart.viewBBox;\n  var finalSize = resolvePaddingForCircle(padding, appendPadding, containerSize).finalSize;\n  // 有sizeField的时候，例如 value ，可以选择映射 size 函数，自己计算出映射的半径\n  var circleSize = function circleSize(_a) {\n    var r = _a.r;\n    return r * finalSize;\n  }; // 默认配置\n  if (sizeField) {\n    circleSize = function circleSize(d) {\n      return d[sizeField] * finalSize;\n    }; // 目前只有 r 通道映射效果会正常\n  }\n  // geometry\n  point(deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField,\n      sizeField: sizeField,\n      rawFields: __spreadArrays(RAW_FIELDS, rawFields),\n      point: {\n        color: color,\n        style: pointStyle,\n        shape: 'circle',\n        size: circleSize\n      }\n    }\n  }));\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  return flow(scale({}, {\n    // 必须强制为 nice\n    x: {\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1,\n      nice: true\n    },\n    y: {\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1,\n      nice: true\n    }\n  }))(params);\n}\n/**\n * tooltip 配置\n * @param params\n */\nfunction tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip;\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    var tooltipOptions = tooltip;\n    // 设置了 fields，就不进行 customItems 了; 设置 formatter 时，需要搭配 fields\n    if (!get(tooltip, 'fields')) {\n      tooltipOptions = deepAssign({}, {\n        customItems: function customItems(items) {\n          return items.map(function (item) {\n            var scales = get(chart.getOptions(), 'scales');\n            var nameFormatter = get(scales, ['name', 'formatter'], function (v) {\n              return v;\n            });\n            var valueFormatter = get(scales, ['value', 'formatter'], function (v) {\n              return v;\n            });\n            return __assign(__assign({}, item), {\n              name: nameFormatter(item.data.name),\n              value: valueFormatter(item.data.value)\n            });\n          });\n        }\n      }, tooltipOptions);\n    }\n    chart.tooltip(tooltipOptions);\n  }\n  return params;\n}\n/**\n * 坐标轴, 默认关闭\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\nfunction adaptorInteraction(options) {\n  var drilldown = options.drilldown,\n    _a = options.interactions,\n    interactions = _a === void 0 ? [] : _a;\n  if (drilldown === null || drilldown === void 0 ? void 0 : drilldown.enabled) {\n    return deepAssign({}, options, {\n      interactions: __spreadArrays(interactions, [{\n        type: 'drill-down',\n        cfg: {\n          drillDownConfig: drilldown,\n          transformData: transformData,\n          enableDrillDown: true\n        }\n      }])\n    });\n  }\n  return options;\n}\n/**\n * 交互配置\n * @param params\n * @returns\n */\nfunction interaction(params) {\n  var chart = params.chart,\n    options = params.options;\n  baseInteraction({\n    chart: chart,\n    options: adaptorInteraction(options)\n  });\n  return params;\n}\n/**\n * 矩形树图\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(pattern('pointStyle'), defaultOptions, padding, theme, meta, geometry, axis, legend, tooltip, interaction, animation, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}