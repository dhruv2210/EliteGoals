{"ast":null,"code":"import { each, get } from '@antv/util';\nimport { getComponents, isInBox } from './action/util';\n/**\n * 交互的上下文\n */\nvar Context = /** @class */function () {\n  function Context(view) {\n    /** 当前所有的 Action */\n    this.actions = [];\n    /** 当前事件对象 */\n    this.event = null;\n    this.cacheMap = {};\n    this.view = view;\n  }\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n  Context.prototype.cache = function () {\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  };\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n  Context.prototype.getAction = function (name) {\n    return this.actions.find(function (action) {\n      return action.name === name;\n    });\n  };\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n  Context.prototype.addAction = function (action) {\n    this.actions.push(action);\n  };\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n  Context.prototype.removeAction = function (action) {\n    var actions = this.actions;\n    var index = this.actions.indexOf(action);\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  };\n  /**\n   * 获取当前的点\n   */\n  Context.prototype.getCurrentPoint = function () {\n    var event = this.event;\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        var canvas = this.view.getCanvas();\n        var point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y\n        };\n      }\n    }\n    return null;\n  };\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n  Context.prototype.getCurrentShape = function () {\n    return get(this.event, ['gEvent', 'shape']);\n  };\n  /**\n   * 当前的触发是否在 View 内\n   */\n  Context.prototype.isInPlot = function () {\n    var point = this.getCurrentPoint();\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n    return false;\n  };\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n  Context.prototype.isInShape = function (name) {\n    var shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n    if (shape) {\n      return shape.get('name') === name;\n    }\n    return false;\n  };\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n  Context.prototype.isInComponent = function (name) {\n    var components = getComponents(this.view);\n    var point = this.getCurrentPoint();\n    if (point) {\n      return !!components.find(function (component) {\n        var bbox = component.getBBox();\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n    return false;\n  };\n  /**\n   * 销毁\n   */\n  Context.prototype.destroy = function () {\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), function (action) {\n      action.destroy();\n    });\n    this.view = null;\n    this.event = null;\n    this.actions = null;\n    this.cacheMap = null;\n  };\n  return Context;\n}();\nexport default Context;","map":null,"metadata":{},"sourceType":"module"}