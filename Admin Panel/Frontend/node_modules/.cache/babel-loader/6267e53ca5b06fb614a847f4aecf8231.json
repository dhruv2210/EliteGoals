{"ast":null,"code":"// ES6 Map\nvar map;\ntry {\n  map = Map;\n} catch (_) {}\nvar set;\n\n// ES6 Set\ntry {\n  set = Set;\n} catch (_) {}\nfunction baseClone(src, circulars, clones) {\n  // Null/undefined/functions/etc\n  if (!src || typeof src !== 'object' || typeof src === 'function') {\n    return src;\n  }\n\n  // DOM Node\n  if (src.nodeType && 'cloneNode' in src) {\n    return src.cloneNode(true);\n  }\n\n  // Date\n  if (src instanceof Date) {\n    return new Date(src.getTime());\n  }\n\n  // RegExp\n  if (src instanceof RegExp) {\n    return new RegExp(src);\n  }\n\n  // Arrays\n  if (Array.isArray(src)) {\n    return src.map(clone);\n  }\n\n  // ES6 Maps\n  if (map && src instanceof map) {\n    return new Map(Array.from(src.entries()));\n  }\n\n  // ES6 Sets\n  if (set && src instanceof set) {\n    return new Set(Array.from(src.values()));\n  }\n\n  // Object\n  if (src instanceof Object) {\n    circulars.push(src);\n    var obj = Object.create(src);\n    clones.push(obj);\n    for (var key in src) {\n      var idx = circulars.findIndex(function (i) {\n        return i === src[key];\n      });\n      obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones);\n    }\n    return obj;\n  }\n\n  // ???\n  return src;\n}\nexport default function clone(src) {\n  return baseClone(src, [], []);\n}","map":null,"metadata":{},"sourceType":"module"}