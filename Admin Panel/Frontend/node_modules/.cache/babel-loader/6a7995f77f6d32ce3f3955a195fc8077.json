{"ast":null,"code":"import { animation, annotation, pattern, theme, tooltip } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { deepAssign, flow } from '../../utils';\nimport { meta } from '../tiny-area/adaptor';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nexport { meta };\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    color = options.color,\n    columnStyle = options.columnStyle,\n    columnWidthRatio = options.columnWidthRatio;\n  var seriesData = getTinyData(data);\n  chart.data(seriesData);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      widthRatio: columnWidthRatio,\n      interval: {\n        style: columnStyle,\n        color: color\n      }\n    }\n  });\n  interval(p);\n  chart.axis(false);\n  chart.legend(false);\n  chart.interaction('element-active');\n  return params;\n}\n/**\n * 迷你柱形图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(theme, pattern('columnStyle'), geometry, meta, tooltip, animation, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}