{"ast":null,"code":"import * as _ from '@antv/util';\nimport { DEFAULT_Y } from '../constant';\nvar Adjust = /** @class */function () {\n  function Adjust(cfg) {\n    var xField = cfg.xField,\n      yField = cfg.yField,\n      _a = cfg.adjustNames,\n      adjustNames = _a === void 0 ? ['x', 'y'] : _a,\n      dimValuesMap = cfg.dimValuesMap;\n    this.adjustNames = adjustNames;\n    this.xField = xField;\n    this.yField = yField;\n    this.dimValuesMap = dimValuesMap;\n  }\n  /**\n   * 查看维度是否是 adjust 字段\n   * @param dim\n   */\n  Adjust.prototype.isAdjust = function (dim) {\n    return this.adjustNames.indexOf(dim) >= 0;\n  };\n  Adjust.prototype.getAdjustRange = function (dim, dimValue, values) {\n    var yField = this.yField;\n    var index = values.indexOf(dimValue);\n    var length = values.length;\n    var pre;\n    var next;\n    // 没有 y 字段，但是需要根据 y 调整\n    if (!yField && this.isAdjust('y')) {\n      pre = 0;\n      next = 1;\n    } else if (length > 1) {\n      // 如果以其开头，则取之，否则取他前面一个\n      pre = values[index === 0 ? 0 : index - 1];\n      // 如果以其结尾，则取之，否则取他后面一个\n      next = values[index === length - 1 ? length - 1 : index + 1];\n      if (index !== 0) {\n        pre += (dimValue - pre) / 2;\n      } else {\n        pre -= (next - dimValue) / 2;\n      }\n      if (index !== length - 1) {\n        next -= (next - dimValue) / 2;\n      } else {\n        next += (dimValue - values[length - 2]) / 2;\n      }\n    } else {\n      pre = dimValue === 0 ? 0 : dimValue - 0.5;\n      next = dimValue === 0 ? 1 : dimValue + 0.5;\n    }\n    return {\n      pre: pre,\n      next: next\n    };\n  };\n  Adjust.prototype.adjustData = function (groupedDataArray, mergedData) {\n    var _this = this;\n    // 所有调整维度的值数组\n    var dimValuesMap = this.getDimValues(mergedData);\n    // 按照每一个分组来进行调整\n    _.each(groupedDataArray, function (dataArray, index) {\n      // 遍历所有数据集合\n      // 每个分组中，分别按照不同的 dim 进行调整\n      _.each(dimValuesMap, function (values, dim) {\n        // 根据不同的度量分别调整位置\n        _this.adjustDim(dim, values, dataArray, index);\n      });\n    });\n  };\n  /**\n   * 对数据进行分组adjustData\n   * @param data 数据\n   * @param dim 分组的字段\n   * @return 分组结果\n   */\n  Adjust.prototype.groupData = function (data, dim) {\n    // 补齐数据空数据为默认值\n    _.each(data, function (record) {\n      if (record[dim] === undefined) {\n        record[dim] = DEFAULT_Y;\n      }\n    });\n    // 按照 dim 维度分组\n    return _.groupBy(data, dim);\n  };\n  /** @override */\n  Adjust.prototype.adjustDim = function (dim, values, data, index) {};\n  /**\n   * 获取可调整度量对应的值\n   * @param mergedData 数据\n   * @return 值的映射\n   */\n  Adjust.prototype.getDimValues = function (mergedData) {\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField;\n    var dimValuesMap = _.assign({}, this.dimValuesMap);\n    // 所有的维度\n    var dims = [];\n    if (xField && this.isAdjust('x')) {\n      dims.push(xField);\n    }\n    if (yField && this.isAdjust('y')) {\n      dims.push(yField);\n    }\n    dims.forEach(function (dim) {\n      if (dimValuesMap && dimValuesMap[dim]) {\n        return;\n      }\n      // 在每个维度上，所有的值\n      dimValuesMap[dim] = _.valuesOfKey(mergedData, dim).sort(function (v1, v2) {\n        return v1 - v2;\n      });\n    });\n    // 只有一维的情况下，同时调整 y，赋予默认值\n    if (!yField && this.isAdjust('y')) {\n      var dim = 'y';\n      dimValuesMap[dim] = [DEFAULT_Y, 1]; // 默认分布在 y 轴的 0 与 1 之间\n    }\n\n    return dimValuesMap;\n  };\n  return Adjust;\n}();\nexport default Adjust;","map":null,"metadata":{},"sourceType":"module"}