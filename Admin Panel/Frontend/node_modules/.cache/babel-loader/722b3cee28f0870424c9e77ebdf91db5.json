{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isNil, get } from '@antv/util';\nimport { getCurrentElement, getDelegationObject, getElements, getElementValue, getScaleByField, isElementChange, isList } from '../util';\nimport StateBase from './state-base';\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\nvar ElementState = /** @class */function (_super) {\n  __extends(ElementState, _super);\n  function ElementState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.ignoreListItemStates = ['unchecked'];\n    return _this;\n  }\n  // 是否忽略触发的列表项\n  ElementState.prototype.isItemIgnore = function (item, list) {\n    var states = this.ignoreListItemStates;\n    var filtered = states.filter(function (state) {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  };\n  // 设置由组件选项导致的状态变化\n  ElementState.prototype.setStateByComponent = function (component, item, enable) {\n    var view = this.context.view;\n    var field = component.get('field');\n    var elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  };\n  // 处理触发源由 element 导致的状态变化\n  ElementState.prototype.setStateByElement = function (element, enable) {\n    this.setElementState(element, enable);\n  };\n  /** 组件的选项是否同 element 匹配 */\n  ElementState.prototype.isMathItem = function (element, field, item) {\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  };\n  ElementState.prototype.setElementsStateByItem = function (elements, field, item, enable) {\n    var _this = this;\n    each(elements, function (el) {\n      if (_this.isMathItem(el, field, item)) {\n        el.setState(_this.stateName, enable);\n      }\n    });\n  };\n  /** 设置状态是否激活 */\n  ElementState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      var delegateObject = getDelegationObject(this.context);\n      // 如果触发源时列表，图例、坐标轴\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n          component = delegateObject.component;\n        if (item && component && !this.isItemIgnore(item, component)) {\n          var event_1 = this.context.event.gEvent;\n          // 防止闪烁\n          if (event_1 && event_1.fromShape && event_1.toShape && getItem(event_1.fromShape) === getItem(event_1.toShape)) {\n            return;\n          }\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  };\n  /**\n   * 切换状态\n   */\n  ElementState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      var hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n  ElementState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  return ElementState;\n}(StateBase);\nexport default ElementState;","map":null,"metadata":{},"sourceType":"module"}