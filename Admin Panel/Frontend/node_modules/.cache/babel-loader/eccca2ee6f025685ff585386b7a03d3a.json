{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { clamp, size, valuesOfKey } from '@antv/util';\nimport { Action } from '..';\nfunction isWheelDown(event) {\n  var wheelEvent = event.gEvent.originalEvent;\n  return wheelEvent.deltaY > 0;\n}\nvar DEFAULT_WHEELDELTA = 1;\nvar MousewheelScroll = /** @class */function (_super) {\n  __extends(MousewheelScroll, _super);\n  function MousewheelScroll() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  MousewheelScroll.prototype.scroll = function (arg) {\n    var _a = this.context,\n      view = _a.view,\n      event = _a.event;\n    if (!view.getOptions().scrollbar) {\n      return;\n    }\n    var wheelDelta = (arg === null || arg === void 0 ? void 0 : arg.wheelDelta) || DEFAULT_WHEELDELTA;\n    var scrollbarController = view.getController('scrollbar');\n    var xScale = view.getXScale();\n    var data = view.getOptions().data;\n    var dataSize = size(valuesOfKey(data, xScale.field));\n    var step = size(xScale.values);\n    var currentRatio = scrollbarController.getValue();\n    var currentStart = Math.floor((dataSize - step) * currentRatio);\n    var nextStart = currentStart + (isWheelDown(event) ? wheelDelta : -wheelDelta);\n    var correction = wheelDelta / (dataSize - step) / 10000;\n    var nextRatio = clamp(nextStart / (dataSize - step) + correction, 0, 1);\n    scrollbarController.setValue(nextRatio);\n  };\n  return MousewheelScroll;\n}(Action);\nexport default MousewheelScroll;","map":null,"metadata":{},"sourceType":"module"}