{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { animation, annotation, interaction, legend, scale, theme, tooltip } from '../../adaptor/common';\nimport { interval, point } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { deepAssign, findGeometry, flow, processIllegalData, transformLabel } from '../../utils';\nimport { getScaleMax, getStackedData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var style = options.barStyle,\n    color = options.color,\n    tooltip = options.tooltip,\n    colorField = options.colorField,\n    type = options.type,\n    xField = options.xField,\n    yField = options.yField,\n    data = options.data;\n  // 处理不合法的数据\n  var processData = processIllegalData(data, yField);\n  chart.data(processData);\n  var p = deepAssign({}, params, {\n    options: {\n      tooltip: tooltip,\n      seriesField: colorField,\n      interval: {\n        style: style,\n        color: color,\n        shape: type === 'line' ? 'line' : 'intervel'\n      },\n      // 柱子的一些样式设置：柱子最小宽度、柱子最大宽度、柱子背景\n      minColumnWidth: options.minBarWidth,\n      maxColumnWidth: options.maxBarWidth,\n      columnBackground: options.barBackground\n    }\n  });\n  interval(p);\n  if (type === 'line') {\n    point({\n      chart: chart,\n      options: {\n        xField: xField,\n        yField: yField,\n        seriesField: colorField,\n        point: {\n          shape: 'circle',\n          color: color\n        }\n      }\n    });\n  }\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a;\n  var options = params.options;\n  var yField = options.yField,\n    xField = options.xField,\n    data = options.data,\n    isStack = options.isStack,\n    isGroup = options.isGroup,\n    colorField = options.colorField,\n    maxAngle = options.maxAngle;\n  var actualData = isStack && !isGroup && colorField ? getStackedData(data, xField, yField) : data;\n  var processData = processIllegalData(actualData, yField);\n  return flow(scale((_a = {}, _a[yField] = {\n    min: 0,\n    max: getScaleMax(maxAngle, yField, processData)\n  }, _a)))(params);\n}\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var radius = options.radius,\n    innerRadius = options.innerRadius,\n    startAngle = options.startAngle,\n    endAngle = options.endAngle;\n  chart.coordinate({\n    type: 'polar',\n    cfg: {\n      radius: radius,\n      innerRadius: innerRadius,\n      startAngle: startAngle,\n      endAngle: endAngle\n    }\n  }).transpose();\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xField = options.xField,\n    xAxis = options.xAxis;\n  chart.axis(xField, xAxis);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField;\n  var intervalGeometry = findGeometry(chart, 'interval');\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    intervalGeometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    intervalGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign(__assign({}, transformLabel(cfg)), {\n        type: 'polar'\n      })\n    });\n  }\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(pattern('barStyle'), geometry, meta, axis, coordinate, interaction, animation, theme, tooltip, legend, annotation(), label)(params);\n}","map":null,"metadata":{},"sourceType":"module"}