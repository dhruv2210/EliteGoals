{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\n// 注册的shape\nimport './shapes/word-cloud';\nimport { processImageMask, transform } from './utils';\nvar WordCloud = /** @class */function (_super) {\n  __extends(WordCloud, _super);\n  function WordCloud() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 词云图 */\n    _this.type = 'word-cloud';\n    return _this;\n  }\n  /**\n   * 获取 词云图 默认配置项\n   * 供外部使用\n   */\n  WordCloud.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n  WordCloud.prototype.changeData = function (data) {\n    this.updateOption({\n      data: data\n    });\n    if (this.options.imageMask) {\n      this.render();\n    } else {\n      this.chart.changeData(transform({\n        chart: this.chart,\n        options: this.options\n      }));\n    }\n  };\n  /**\n   * 获取默认的 options 配置项\n   */\n  WordCloud.prototype.getDefaultOptions = function () {\n    return WordCloud.getDefaultOptions();\n  };\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n  WordCloud.prototype.render = function () {\n    var _this = this;\n    return new Promise(function (res) {\n      var imageMask = _this.options.imageMask;\n      if (!imageMask) {\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n        res();\n        return;\n      }\n      var handler = function handler(img) {\n        _this.options = __assign(__assign({}, _this.options), {\n          imageMask: img || null\n        });\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n        res();\n      };\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  };\n  /**\n   * 获取 词云图 的适配器\n   */\n  WordCloud.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n  WordCloud.prototype.triggerResize = function () {\n    var _this = this;\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor();\n      // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n      window.setTimeout(function () {\n        // 执行父类的方法\n        _super.prototype.triggerResize.call(_this);\n      });\n    }\n  };\n  return WordCloud;\n}(Plot);\nexport { WordCloud };","map":null,"metadata":{},"sourceType":"module"}