{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { omit } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { pick } from '../../utils';\nimport { partition } from '../../utils/hierarchy/partition';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD } from './constant';\n/**\n * sunburst 处理数据\n * @param options\n */\nexport function transformData(options) {\n  var data = options.data,\n    colorField = options.colorField,\n    rawFields = options.rawFields,\n    _a = options.hierarchyConfig,\n    hierarchyConfig = _a === void 0 ? {} : _a;\n  var activeDepth = hierarchyConfig.activeDepth;\n  var transform = {\n    partition: partition,\n    treemap: treemap\n  };\n  // @ts-ignore 兼容旧版本，支持 seriesField 来作为 hierarchyConfig.field\n  var seriesField = options.seriesField;\n  // @ts-ignore 兼容旧版本，支持矩阵树图形状的旭日图\n  var type = options.type || 'partition';\n  var nodes = transform[type](data, __assign(__assign({\n    field: seriesField || 'value'\n  }, omit(hierarchyConfig, ['activeDepth'])), {\n    // @ts-ignore\n    type: \"hierarchy.\" + type,\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    var _a;\n    var _b, _c, _d, _e, _f;\n    if (node.depth === 0) {\n      return null;\n    }\n    if (activeDepth > 0 && node.depth > activeDepth) {\n      return null;\n    }\n    var path = node.data.name;\n    var ancestorNode = __assign({}, node);\n    while (ancestorNode.depth > 1) {\n      path = ((_b = ancestorNode.parent.data) === null || _b === void 0 ? void 0 : _b.name) + \" / \" + path;\n      ancestorNode = ancestorNode.parent;\n    }\n    var nodeInfo = __assign(__assign(__assign({}, pick(node.data, __spreadArrays(rawFields || [], [hierarchyConfig.field]))), (_a = {}, _a[SUNBURST_PATH_FIELD] = path, _a[SUNBURST_ANCESTOR_FIELD] = ancestorNode.data.name, _a)), node);\n    // note: 兼容旧版本\n    if (seriesField) {\n      nodeInfo[seriesField] = node.data[seriesField] || ((_d = (_c = node.parent) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d[seriesField]);\n    }\n    if (colorField) {\n      nodeInfo[colorField] = node.data[colorField] || ((_f = (_e = node.parent) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f[colorField]);\n    }\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      colorField: colorField,\n      rawFields: rawFields\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}