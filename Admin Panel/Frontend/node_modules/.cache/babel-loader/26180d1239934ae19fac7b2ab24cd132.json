{"ast":null,"code":"import { get } from '@antv/util';\nimport { deepAssign } from '../../utils';\nimport { Area } from '../area';\nimport { adaptor as areaAdaptor } from '../area/adaptor';\nimport { Bar } from '../bar';\nimport { adaptor as barAdaptor } from '../bar/adaptor';\nimport { Column } from '../column';\nimport { adaptor as columnAdaptor } from '../column/adaptor';\nimport { Funnel } from '../funnel';\nimport { adaptor as funnelAdaptor } from '../funnel/adaptor';\nimport { Gauge } from '../gauge';\nimport { adaptor as gaugeAdaptor } from '../gauge/adaptor';\nimport { Histogram } from '../histogram';\nimport { adaptor as histogramAdaptor } from '../histogram/adaptor';\nimport { Line } from '../line';\nimport { adaptor as lineAdaptor } from '../line/adaptor';\nimport { Pie } from '../pie';\nimport { adaptor as pieAdaptor } from '../pie/adaptor';\nimport { Progress } from '../progress';\nimport { adaptor as progressAdaptor } from '../progress/adaptor';\nimport { RingProgress } from '../ring-progress';\nimport { adaptor as ringProgressAdaptor } from '../ring-progress/adaptor';\nimport { Scatter } from '../scatter';\nimport { adaptor as scatterAdaptor } from '../scatter/adaptor';\nimport { Stock } from '../stock';\nimport { adaptor as stockAdaptor } from '../stock/adaptor';\nimport { TinyArea } from '../tiny-area';\nimport { adaptor as tinyAreaAdaptor } from '../tiny-area/adaptor';\nimport { TinyColumn } from '../tiny-column';\nimport { adaptor as tinyColumnAdaptor } from '../tiny-column/adaptor';\nimport { TinyLine } from '../tiny-line';\nimport { adaptor as tinyLineAdaptor } from '../tiny-line/adaptor';\n/**\n * 可在 multi-view 中使用的 plots\n */\nvar PLOT_ADAPTORS = {\n  line: lineAdaptor,\n  pie: pieAdaptor,\n  column: columnAdaptor,\n  bar: barAdaptor,\n  area: areaAdaptor,\n  gauge: gaugeAdaptor,\n  'tiny-line': tinyLineAdaptor,\n  'tiny-column': tinyColumnAdaptor,\n  'tiny-area': tinyAreaAdaptor,\n  'ring-progress': ringProgressAdaptor,\n  progress: progressAdaptor,\n  scatter: scatterAdaptor,\n  histogram: histogramAdaptor,\n  funnel: funnelAdaptor,\n  stock: stockAdaptor\n};\n/**\n * 获取指定 plot 的 class contructor\n * @param {string} plot\n */\nvar PLOT_CONSTRUCTOR = {\n  line: Line,\n  pie: Pie,\n  column: Column,\n  bar: Bar,\n  area: Area,\n  gauge: Gauge,\n  'tiny-line': TinyLine,\n  'tiny-column': TinyColumn,\n  'tiny-area': TinyArea,\n  'ring-progress': RingProgress,\n  progress: Progress,\n  scatter: Scatter,\n  histogram: Histogram,\n  funnel: Funnel,\n  stock: Stock\n};\n/**\n * 在 mix 图表以及 facet 图表中，defaultOptions 进行复写简化\n */\nvar DEFAULT_OPTIONS_MAP = {\n  pie: {\n    label: false\n  },\n  column: {\n    tooltip: {\n      showMarkers: false\n    }\n  },\n  bar: {\n    tooltip: {\n      showMarkers: false\n    }\n  }\n};\n/**\n * 执行 plot 的 adaptor, 默认都带上 defaultOptions\n * @param {string} plot\n */\nexport function execPlotAdaptor(plot, view, options) {\n  var cls = PLOT_CONSTRUCTOR[plot];\n  if (!cls) {\n    console.error(\"could not find \" + plot + \" plot\");\n    return;\n  }\n  var module = PLOT_ADAPTORS[plot];\n  module({\n    chart: view,\n    options: deepAssign({}, cls.getDefaultOptions(), get(DEFAULT_OPTIONS_MAP, plot, {}), options)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}