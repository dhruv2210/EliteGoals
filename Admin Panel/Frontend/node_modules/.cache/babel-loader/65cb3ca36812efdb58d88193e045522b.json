{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport UpOutlined from \"@ant-design/icons/es/icons/UpOutlined\";\nimport classNames from 'classnames';\nimport RcInputNumber from 'rc-input-number';\nimport * as React from 'react';\nimport ConfigProvider, { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport SizeContext from '../config-provider/SizeContext';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport { NoCompactStyle, useCompactItemContext } from '../space/Compact';\nimport { cloneElement } from '../_util/reactNode';\nimport { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';\nimport useStyle from './style';\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n  var _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls,\n    direction = _React$useContext.direction;\n  var size = React.useContext(SizeContext);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focused = _React$useState2[0],\n    setFocus = _React$useState2[1];\n  var inputRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return inputRef.current;\n  });\n  var className = props.className,\n    customizeSize = props.size,\n    customDisabled = props.disabled,\n    customizePrefixCls = props.prefixCls,\n    addonBefore = props.addonBefore,\n    addonAfter = props.addonAfter,\n    prefix = props.prefix,\n    _props$bordered = props.bordered,\n    bordered = _props$bordered === void 0 ? true : _props$bordered,\n    readOnly = props.readOnly,\n    customStatus = props.status,\n    controls = props.controls,\n    others = __rest(props, [\"className\", \"size\", \"disabled\", \"prefixCls\", \"addonBefore\", \"addonAfter\", \"prefix\", \"bordered\", \"readOnly\", \"status\", \"controls\"]);\n  var prefixCls = getPrefixCls('input-number', customizePrefixCls);\n  // Style\n  var _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  var _useCompactItemContex = useCompactItemContext(prefixCls, direction),\n    compactSize = _useCompactItemContex.compactSize,\n    compactItemClassnames = _useCompactItemContex.compactItemClassnames;\n  var upIcon = /*#__PURE__*/React.createElement(UpOutlined, {\n    className: prefixCls + \"-handler-up-inner\"\n  });\n  var downIcon = /*#__PURE__*/React.createElement(DownOutlined, {\n    className: prefixCls + \"-handler-down-inner\"\n  });\n  var controlsTemp = typeof controls === 'boolean' ? controls : undefined;\n  if (_typeof(controls) === 'object') {\n    upIcon = typeof controls.upIcon === 'undefined' ? upIcon : /*#__PURE__*/React.createElement(\"span\", {\n      className: prefixCls + \"-handler-up-inner\"\n    }, controls.upIcon);\n    downIcon = typeof controls.downIcon === 'undefined' ? downIcon : /*#__PURE__*/React.createElement(\"span\", {\n      className: prefixCls + \"-handler-down-inner\"\n    }, controls.downIcon);\n  }\n  var _React$useContext2 = React.useContext(FormItemInputContext),\n    hasFeedback = _React$useContext2.hasFeedback,\n    contextStatus = _React$useContext2.status,\n    isFormItemInput = _React$useContext2.isFormItemInput,\n    feedbackIcon = _React$useContext2.feedbackIcon;\n  var mergedStatus = getMergedStatus(contextStatus, customStatus);\n  var mergeSize = compactSize || customizeSize || size;\n  // ===================== Disabled =====================\n  var disabled = React.useContext(DisabledContext);\n  var mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n  var inputNumberClass = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls + \"-lg\", mergeSize === 'large'), _defineProperty(_classNames, prefixCls + \"-sm\", mergeSize === 'small'), _defineProperty(_classNames, prefixCls + \"-rtl\", direction === 'rtl'), _defineProperty(_classNames, prefixCls + \"-borderless\", !bordered), _defineProperty(_classNames, prefixCls + \"-in-form-item\", isFormItemInput), _classNames), getStatusClassNames(prefixCls, mergedStatus), compactItemClassnames, hashId, className);\n  var element = /*#__PURE__*/React.createElement(RcInputNumber, _extends({\n    ref: inputRef,\n    disabled: mergedDisabled,\n    className: inputNumberClass,\n    upHandler: upIcon,\n    downHandler: downIcon,\n    prefixCls: prefixCls,\n    readOnly: readOnly,\n    controls: controlsTemp\n  }, others));\n  if (prefix != null || hasFeedback) {\n    var _classNames2;\n    var affixWrapperCls = classNames(prefixCls + \"-affix-wrapper\", getStatusClassNames(prefixCls + \"-affix-wrapper\", mergedStatus, hasFeedback), (_classNames2 = {}, _defineProperty(_classNames2, prefixCls + \"-affix-wrapper-focused\", focused), _defineProperty(_classNames2, prefixCls + \"-affix-wrapper-disabled\", props.disabled), _defineProperty(_classNames2, prefixCls + \"-affix-wrapper-sm\", mergeSize === 'small'), _defineProperty(_classNames2, prefixCls + \"-affix-wrapper-lg\", mergeSize === 'large'), _defineProperty(_classNames2, prefixCls + \"-affix-wrapper-rtl\", direction === 'rtl'), _defineProperty(_classNames2, prefixCls + \"-affix-wrapper-readonly\", readOnly), _defineProperty(_classNames2, prefixCls + \"-affix-wrapper-borderless\", !bordered), _defineProperty(_classNames2, \"\" + className, !(addonBefore || addonAfter) && className), _classNames2), hashId);\n    element = /*#__PURE__*/React.createElement(\"div\", {\n      className: affixWrapperCls,\n      style: props.style,\n      onMouseUp: function onMouseUp() {\n        return inputRef.current.focus();\n      }\n    }, prefix && /*#__PURE__*/React.createElement(\"span\", {\n      className: prefixCls + \"-prefix\"\n    }, prefix), cloneElement(element, {\n      style: null,\n      value: props.value,\n      onFocus: function onFocus(event) {\n        var _a;\n        setFocus(true);\n        (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, event);\n      },\n      onBlur: function onBlur(event) {\n        var _a;\n        setFocus(false);\n        (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, event);\n      }\n    }), hasFeedback && /*#__PURE__*/React.createElement(\"span\", {\n      className: prefixCls + \"-suffix\"\n    }, feedbackIcon));\n  }\n  if (addonBefore != null || addonAfter != null) {\n    var _classNames4;\n    var wrapperClassName = prefixCls + \"-group\";\n    var addonClassName = wrapperClassName + \"-addon\";\n    var addonBeforeNode = addonBefore ? /*#__PURE__*/React.createElement(\"div\", {\n      className: addonClassName\n    }, addonBefore) : null;\n    var addonAfterNode = addonAfter ? /*#__PURE__*/React.createElement(\"div\", {\n      className: addonClassName\n    }, addonAfter) : null;\n    var mergedWrapperClassName = classNames(prefixCls + \"-wrapper\", wrapperClassName, hashId, _defineProperty({}, wrapperClassName + \"-rtl\", direction === 'rtl'));\n    var mergedGroupClassName = classNames(prefixCls + \"-group-wrapper\", (_classNames4 = {}, _defineProperty(_classNames4, prefixCls + \"-group-wrapper-sm\", mergeSize === 'small'), _defineProperty(_classNames4, prefixCls + \"-group-wrapper-lg\", mergeSize === 'large'), _defineProperty(_classNames4, prefixCls + \"-group-wrapper-rtl\", direction === 'rtl'), _classNames4), getStatusClassNames(prefixCls + \"-group-wrapper\", mergedStatus, hasFeedback), hashId, className);\n    element = /*#__PURE__*/React.createElement(\"div\", {\n      className: mergedGroupClassName,\n      style: props.style\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: mergedWrapperClassName\n    }, addonBeforeNode && /*#__PURE__*/React.createElement(NoCompactStyle, null, /*#__PURE__*/React.createElement(NoFormStyle, {\n      status: true,\n      override: true\n    }, addonBeforeNode)), cloneElement(element, {\n      style: null,\n      disabled: mergedDisabled\n    }), addonAfterNode && /*#__PURE__*/React.createElement(NoCompactStyle, null, /*#__PURE__*/React.createElement(NoFormStyle, {\n      status: true,\n      override: true\n    }, addonAfterNode))));\n  }\n  return wrapSSR(element);\n});\nvar TypedInputNumber = InputNumber;\nvar PureInputNumber = function PureInputNumber(props) {\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    theme: {\n      components: {\n        InputNumber: {\n          handleVisible: true\n        }\n      }\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, _extends({}, props)));\n};\nTypedInputNumber._InternalPanelDoNotUseOrYouWillBeFired = PureInputNumber;\nexport default TypedInputNumber;","map":null,"metadata":{},"sourceType":"module"}