{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Dhruv\\\\Desktop\\\\sdp\\\\InvestInGoals\\\\Admin Panel\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport has from 'lodash/has';\nimport _snakeCase from 'lodash/snakeCase';\nimport _camelCase from 'lodash/camelCase';\nimport mapKeys from 'lodash/mapKeys';\nimport mapValues from 'lodash/mapValues';\nimport { getter } from 'property-expr';\nimport { object as locale } from './locale';\nimport sortFields from './util/sortFields';\nimport sortByKeyOrder from './util/sortByKeyOrder';\nimport runTests from './util/runTests';\nimport ValidationError from './ValidationError';\nimport BaseSchema from './schema';\nvar isObject = function isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n};\nfunction unknown(ctx, value) {\n  var known = Object.keys(ctx.fields);\n  return Object.keys(value).filter(function (key) {\n    return known.indexOf(key) === -1;\n  });\n}\nvar defaultSort = sortByKeyOrder([]);\nvar ObjectSchema = /*#__PURE__*/function (_BaseSchema) {\n  _inherits(ObjectSchema, _BaseSchema);\n  function ObjectSchema(spec) {\n    var _this;\n    _classCallCheck(this, ObjectSchema);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ObjectSchema).call(this, {\n      type: 'object'\n    }));\n    _this.fields = Object.create(null);\n    _this._sortErrors = defaultSort;\n    _this._nodes = [];\n    _this._excludedEdges = [];\n    _this.withMutation(function () {\n      _this.transform(function coerce(value) {\n        if (typeof value === 'string') {\n          try {\n            value = JSON.parse(value);\n          } catch (err) {\n            value = null;\n          }\n        }\n        if (this.isType(value)) return value;\n        return null;\n      });\n      if (spec) {\n        _this.shape(spec);\n      }\n    });\n    return _this;\n  }\n  _createClass(ObjectSchema, [{\n    key: \"_typeCheck\",\n    value: function _typeCheck(value) {\n      return isObject(value) || typeof value === 'function';\n    }\n  }, {\n    key: \"_cast\",\n    value: function _cast(_value) {\n      var _this2 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$stripUnknown;\n      var value = _get(_getPrototypeOf(ObjectSchema.prototype), \"_cast\", this).call(this, _value, options); //should ignore nulls here\n\n      if (value === undefined) return this.getDefault();\n      if (!this._typeCheck(value)) return value;\n      var fields = this.fields;\n      var strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;\n      var props = this._nodes.concat(Object.keys(value).filter(function (v) {\n        return _this2._nodes.indexOf(v) === -1;\n      }));\n      var intermediateValue = {}; // is filled during the transform below\n\n      var innerOptions = _extends({}, options, {\n        parent: intermediateValue,\n        __validating: options.__validating || false\n      });\n      var isChanged = false;\n      var _iterator = _createForOfIteratorHelper(props),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var prop = _step.value;\n          var field = fields[prop];\n          var exists = has(value, prop);\n          if (field) {\n            var fieldValue = void 0;\n            var inputValue = value[prop]; // safe to mutate since this is fired in sequence\n\n            innerOptions.path = (options.path ? \"\".concat(options.path, \".\") : '') + prop; // innerOptions.value = value[prop];\n\n            field = field.resolve({\n              value: inputValue,\n              context: options.context,\n              parent: intermediateValue\n            });\n            var fieldSpec = 'spec' in field ? field.spec : undefined;\n            var strict = fieldSpec == null ? void 0 : fieldSpec.strict;\n            if (fieldSpec == null ? void 0 : fieldSpec.strip) {\n              isChanged = isChanged || prop in value;\n              continue;\n            }\n            fieldValue = !options.__validating || !strict ?\n            // TODO: use _cast, this is double resolving\n            field.cast(value[prop], innerOptions) : value[prop];\n            if (fieldValue !== undefined) {\n              intermediateValue[prop] = fieldValue;\n            }\n          } else if (exists && !strip) {\n            intermediateValue[prop] = value[prop];\n          }\n          if (intermediateValue[prop] !== value[prop]) {\n            isChanged = true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return isChanged ? intermediateValue : value;\n    }\n  }, {\n    key: \"_validate\",\n    value: function _validate(_value) {\n      var _this3 = this;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var errors = [];\n      var sync = opts.sync,\n        _opts$from = opts.from,\n        from = _opts$from === void 0 ? [] : _opts$from,\n        _opts$originalValue = opts.originalValue,\n        originalValue = _opts$originalValue === void 0 ? _value : _opts$originalValue,\n        _opts$abortEarly = opts.abortEarly,\n        abortEarly = _opts$abortEarly === void 0 ? this.spec.abortEarly : _opts$abortEarly,\n        _opts$recursive = opts.recursive,\n        recursive = _opts$recursive === void 0 ? this.spec.recursive : _opts$recursive;\n      from = [{\n        schema: this,\n        value: originalValue\n      }].concat(_toConsumableArray(from)); // this flag is needed for handling `strict` correctly in the context of\n      // validation vs just casting. e.g strict() on a field is only used when validating\n\n      opts.__validating = true;\n      opts.originalValue = originalValue;\n      opts.from = from;\n      _get(_getPrototypeOf(ObjectSchema.prototype), \"_validate\", this).call(this, _value, opts, function (err, value) {\n        if (err) {\n          if (!ValidationError.isError(err) || abortEarly) {\n            return void callback(err, value);\n          }\n          errors.push(err);\n        }\n        if (!recursive || !isObject(value)) {\n          callback(errors[0] || null, value);\n          return;\n        }\n        originalValue = originalValue || value;\n        var tests = _this3._nodes.map(function (key) {\n          return function (_, cb) {\n            var path = key.indexOf('.') === -1 ? (opts.path ? \"\".concat(opts.path, \".\") : '') + key : \"\".concat(opts.path || '', \"[\\\"\").concat(key, \"\\\"]\");\n            var field = _this3.fields[key];\n            if (field && 'validate' in field) {\n              field.validate(value[key], _extends({}, opts, {\n                // @ts-ignore\n                path: path,\n                from: from,\n                // inner fields are always strict:\n                // 1. this isn't strict so the casting will also have cast inner values\n                // 2. this is strict in which case the nested values weren't cast either\n                strict: true,\n                parent: value,\n                originalValue: originalValue[key]\n              }), cb);\n              return;\n            }\n            cb(null);\n          };\n        });\n        runTests({\n          sync: sync,\n          tests: tests,\n          value: value,\n          errors: errors,\n          endEarly: abortEarly,\n          sort: _this3._sortErrors,\n          path: opts.path\n        }, callback);\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(spec) {\n      var next = _get(_getPrototypeOf(ObjectSchema.prototype), \"clone\", this).call(this, spec);\n      next.fields = _extends({}, this.fields);\n      next._nodes = this._nodes;\n      next._excludedEdges = this._excludedEdges;\n      next._sortErrors = this._sortErrors;\n      return next;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(schema) {\n      var _this4 = this;\n      var next = _get(_getPrototypeOf(ObjectSchema.prototype), \"concat\", this).call(this, schema);\n      var nextFields = next.fields;\n      for (var _i = 0, _Object$entries = Object.entries(this.fields); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          field = _Object$entries$_i[0],\n          schemaOrRef = _Object$entries$_i[1];\n        var target = nextFields[field];\n        if (target === undefined) {\n          nextFields[field] = schemaOrRef;\n        } else if (target instanceof BaseSchema && schemaOrRef instanceof BaseSchema) {\n          nextFields[field] = schemaOrRef.concat(target);\n        }\n      }\n      return next.withMutation(function () {\n        return next.shape(nextFields, _this4._excludedEdges);\n      });\n    }\n  }, {\n    key: \"getDefaultFromShape\",\n    value: function getDefaultFromShape() {\n      var _this5 = this;\n      var dft = {};\n      this._nodes.forEach(function (key) {\n        var field = _this5.fields[key];\n        dft[key] = 'default' in field ? field.getDefault() : undefined;\n      });\n      return dft;\n    }\n  }, {\n    key: \"_getDefault\",\n    value: function _getDefault() {\n      if ('default' in this.spec) {\n        return _get(_getPrototypeOf(ObjectSchema.prototype), \"_getDefault\", this).call(this);\n      } // if there is no default set invent one\n\n      if (!this._nodes.length) {\n        return undefined;\n      }\n      return this.getDefaultFromShape();\n    }\n  }, {\n    key: \"shape\",\n    value: function shape(additions) {\n      var excludes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var next = this.clone();\n      var fields = Object.assign(next.fields, additions);\n      next.fields = fields;\n      next._sortErrors = sortByKeyOrder(Object.keys(fields));\n      if (excludes.length) {\n        // this is a convenience for when users only supply a single pair\n        if (!Array.isArray(excludes[0])) excludes = [excludes];\n        next._excludedEdges = [].concat(_toConsumableArray(next._excludedEdges), _toConsumableArray(excludes));\n      }\n      next._nodes = sortFields(fields, next._excludedEdges);\n      return next;\n    }\n  }, {\n    key: \"pick\",\n    value: function pick(keys) {\n      var picked = {};\n      var _iterator2 = _createForOfIteratorHelper(keys),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n          if (this.fields[key]) picked[key] = this.fields[key];\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return this.clone().withMutation(function (next) {\n        next.fields = {};\n        return next.shape(picked);\n      });\n    }\n  }, {\n    key: \"omit\",\n    value: function omit(keys) {\n      var next = this.clone();\n      var fields = next.fields;\n      next.fields = {};\n      var _iterator3 = _createForOfIteratorHelper(keys),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var key = _step3.value;\n          delete fields[key];\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return next.withMutation(function () {\n        return next.shape(fields);\n      });\n    }\n  }, {\n    key: \"from\",\n    value: function from(_from, to, alias) {\n      var fromGetter = getter(_from, true);\n      return this.transform(function (obj) {\n        if (obj == null) return obj;\n        var newObj = obj;\n        if (has(obj, _from)) {\n          newObj = _extends({}, obj);\n          if (!alias) delete newObj[_from];\n          newObj[to] = fromGetter(obj);\n        }\n        return newObj;\n      });\n    }\n  }, {\n    key: \"noUnknown\",\n    value: function noUnknown() {\n      var noAllow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.noUnknown;\n      if (typeof noAllow === 'string') {\n        message = noAllow;\n        noAllow = true;\n      }\n      var next = this.test({\n        name: 'noUnknown',\n        exclusive: true,\n        message: message,\n        test: function test(value) {\n          if (value == null) return true;\n          var unknownKeys = unknown(this.schema, value);\n          return !noAllow || unknownKeys.length === 0 || this.createError({\n            params: {\n              unknown: unknownKeys.join(', ')\n            }\n          });\n        }\n      });\n      next.spec.noUnknown = noAllow;\n      return next;\n    }\n  }, {\n    key: \"unknown\",\n    value: function unknown() {\n      var allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.noUnknown;\n      return this.noUnknown(!allow, message);\n    }\n  }, {\n    key: \"transformKeys\",\n    value: function transformKeys(fn) {\n      return this.transform(function (obj) {\n        return obj && mapKeys(obj, function (_, key) {\n          return fn(key);\n        });\n      });\n    }\n  }, {\n    key: \"camelCase\",\n    value: function camelCase() {\n      return this.transformKeys(_camelCase);\n    }\n  }, {\n    key: \"snakeCase\",\n    value: function snakeCase() {\n      return this.transformKeys(_snakeCase);\n    }\n  }, {\n    key: \"constantCase\",\n    value: function constantCase() {\n      return this.transformKeys(function (key) {\n        return _snakeCase(key).toUpperCase();\n      });\n    }\n  }, {\n    key: \"describe\",\n    value: function describe() {\n      var base = _get(_getPrototypeOf(ObjectSchema.prototype), \"describe\", this).call(this);\n      base.fields = mapValues(this.fields, function (value) {\n        return value.describe();\n      });\n      return base;\n    }\n  }]);\n  return ObjectSchema;\n}(BaseSchema);\nexport { ObjectSchema as default };\nexport function create(spec) {\n  return new ObjectSchema(spec);\n}\ncreate.prototype = ObjectSchema.prototype;","map":null,"metadata":{},"sourceType":"module"}