{"ast":null,"code":"import { __assign, __extends, __read, __rest, __spreadArray } from \"tslib\";\nimport { Controller } from './base';\nimport { Scrollbar as ScrollbarComponent } from '../../dependents';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { isObject, clamp, size, throttle, noop, get, valuesOfKey, deepMix } from '@antv/util';\nimport { isBetween } from '../../util/helper';\nvar DEFAULT_PADDING = 0;\nvar DEFAULT_SIZE = 8;\nvar DEFAULT_CATEGORY_SIZE = 32;\nvar MIN_THUMB_LENGTH = 20;\nvar Scrollbar = /** @class */function (_super) {\n  __extends(Scrollbar, _super);\n  function Scrollbar(view) {\n    var _this = _super.call(this, view) || this;\n    _this.onChangeFn = noop;\n    _this.resetMeasure = function () {\n      _this.clear();\n    };\n    _this.onValueChange = function (_a) {\n      var ratio = _a.ratio;\n      var animate = _this.getValidScrollbarCfg().animate;\n      _this.ratio = clamp(ratio, 0, 1);\n      var originalAnimate = _this.view.getOptions().animate;\n      if (!animate) {\n        _this.view.animate(false);\n      }\n      _this.changeViewData(_this.getScrollRange(), true);\n      _this.view.animate(originalAnimate);\n    };\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.onChangeFn = throttle(_this.onValueChange, 20, {\n      leading: true\n    });\n    _this.trackLen = 0;\n    _this.thumbLen = 0;\n    _this.ratio = 0;\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, _this.resetMeasure);\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, _this.resetMeasure);\n    return _this;\n  }\n  Object.defineProperty(Scrollbar.prototype, \"name\", {\n    get: function get() {\n      return 'scrollbar';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Scrollbar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  };\n  Scrollbar.prototype.init = function () {};\n  /**\n   * 渲染\n   */\n  Scrollbar.prototype.render = function () {\n    this.option = this.view.getOptions().scrollbar;\n    if (this.option) {\n      if (this.scrollbar) {\n        // exist, update\n        this.scrollbar = this.updateScrollbar();\n      } else {\n        // not exist, create\n        this.scrollbar = this.createScrollbar();\n        this.scrollbar.component.on('scrollchange', this.onChangeFn);\n      }\n    } else {\n      if (this.scrollbar) {\n        // exist, destroy\n        this.scrollbar.component.destroy();\n        this.scrollbar = undefined;\n      }\n    }\n  };\n  /**\n   * 布局\n   */\n  Scrollbar.prototype.layout = function () {\n    var _this = this;\n    if (this.option && !this.trackLen) {\n      this.measureScrollbar();\n      setTimeout(function () {\n        if (!_this.view.destroyed) {\n          _this.changeViewData(_this.getScrollRange(), true);\n        }\n      });\n    }\n    if (this.scrollbar) {\n      var width = this.view.coordinateBBox.width;\n      var padding = this.scrollbar.component.get('padding');\n      var bboxObject = this.scrollbar.component.getLayoutBBox();\n      var bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(padding);\n      var cfg = this.getScrollbarComponentCfg();\n      var x = void 0;\n      var y = void 0;\n      if (cfg.isHorizontal) {\n        var _a = __read(directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM), 2),\n          x1 = _a[0],\n          y1 = _a[1];\n        var _b = __read(directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM), 2),\n          x2 = _b[0],\n          y2 = _b[1];\n        x = x2;\n        y = y1;\n      } else {\n        var _c = __read(directionToPosition(this.view.viewBBox, bbox, DIRECTION.RIGHT), 2),\n          x1 = _c[0],\n          y1 = _c[1];\n        var _d = __read(directionToPosition(this.view.viewBBox, bbox, DIRECTION.RIGHT), 2),\n          x2 = _d[0],\n          y2 = _d[1];\n        x = x2;\n        y = y1;\n      }\n      x += padding[3];\n      y += padding[0];\n      // 默认放在 bottom\n      if (this.trackLen) {\n        this.scrollbar.component.update(__assign(__assign({}, cfg), {\n          x: x,\n          y: y,\n          trackLen: this.trackLen,\n          thumbLen: this.thumbLen,\n          thumbOffset: (this.trackLen - this.thumbLen) * this.ratio\n        }));\n      } else {\n        this.scrollbar.component.update(__assign(__assign({}, cfg), {\n          x: x,\n          y: y\n        }));\n      }\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, cfg.isHorizontal ? DIRECTION.BOTTOM : DIRECTION.RIGHT);\n    }\n  };\n  /**\n   * 更新\n   */\n  Scrollbar.prototype.update = function () {\n    // 逻辑和 render 保持一致\n    this.render();\n  };\n  Scrollbar.prototype.getComponents = function () {\n    return this.scrollbar ? [this.scrollbar] : [];\n  };\n  Scrollbar.prototype.clear = function () {\n    if (this.scrollbar) {\n      this.scrollbar.component.destroy();\n      this.scrollbar = undefined;\n    }\n    this.trackLen = 0;\n    this.thumbLen = 0;\n    this.ratio = 0;\n    this.cnt = 0;\n    this.step = 0;\n    this.data = undefined;\n    this.xScaleCfg = undefined;\n    this.yScalesCfg = [];\n  };\n  /** 设置滚动条位置  */\n  Scrollbar.prototype.setValue = function (ratio) {\n    this.onValueChange({\n      ratio: ratio\n    });\n  };\n  /** 获得滚动条位置  */\n  Scrollbar.prototype.getValue = function () {\n    return this.ratio;\n  };\n  /**\n   * 获取 scrollbar 的主题配置\n   */\n  Scrollbar.prototype.getThemeOptions = function () {\n    var theme = this.view.getTheme();\n    return get(theme, ['components', 'scrollbar', 'common'], {});\n  };\n  /**\n   * 获取 scrollbar 组件的主题样式\n   */\n  Scrollbar.prototype.getScrollbarTheme = function (style) {\n    var theme = get(this.view.getTheme(), ['components', 'scrollbar']);\n    var _a = style || {},\n      thumbHighlightColor = _a.thumbHighlightColor,\n      restStyles = __rest(_a, [\"thumbHighlightColor\"]);\n    return {\n      default: deepMix({}, get(theme, ['default', 'style'], {}), restStyles),\n      hover: deepMix({}, get(theme, ['hover', 'style'], {}), {\n        thumbColor: thumbHighlightColor\n      })\n    };\n  };\n  Scrollbar.prototype.measureScrollbar = function () {\n    var xScale = this.view.getXScale();\n    var yScales = this.view.getYScales().slice();\n    this.data = this.getScrollbarData();\n    this.step = this.getStep();\n    this.cnt = this.getCnt();\n    var _a = this.getScrollbarComponentCfg(),\n      trackLen = _a.trackLen,\n      thumbLen = _a.thumbLen;\n    this.trackLen = trackLen;\n    this.thumbLen = thumbLen;\n    this.xScaleCfg = {\n      field: xScale.field,\n      values: xScale.values || []\n    };\n    this.yScalesCfg = yScales;\n  };\n  Scrollbar.prototype.getScrollRange = function () {\n    var startIdx = Math.floor((this.cnt - this.step) * clamp(this.ratio, 0, 1));\n    var endIdx = Math.min(startIdx + this.step - 1, this.cnt - 1);\n    return [startIdx, endIdx];\n  };\n  Scrollbar.prototype.changeViewData = function (_a, render) {\n    var _this = this;\n    var _b = __read(_a, 2),\n      startIdx = _b[0],\n      endIdx = _b[1];\n    var type = this.getValidScrollbarCfg().type;\n    var isHorizontal = type !== 'vertical';\n    var values = valuesOfKey(this.data, this.xScaleCfg.field);\n    // 如果是 xScale 数值类型，则进行排序\n    var xScaleValues = this.view.getXScale().isLinear ? values.sort(function (a, b) {\n      return Number(a) - Number(b);\n    }) : values;\n    var xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    this.yScalesCfg.forEach(function (cfg) {\n      _this.view.scale(cfg.field, {\n        formatter: cfg.formatter,\n        type: cfg.type,\n        min: cfg.min,\n        max: cfg.max,\n        tickMethod: cfg.tickMethod\n      });\n    });\n    this.view.filter(this.xScaleCfg.field, function (val) {\n      var idx = xValues.indexOf(val);\n      return idx > -1 ? isBetween(idx, startIdx, endIdx) : true;\n    });\n    this.view.render(true);\n  };\n  Scrollbar.prototype.createScrollbar = function () {\n    var type = this.getValidScrollbarCfg().type;\n    var isHorizontal = type !== 'vertical';\n    var component = new ScrollbarComponent(__assign(__assign({\n      container: this.container\n    }, this.getScrollbarComponentCfg()), {\n      x: 0,\n      y: 0\n    }));\n    component.init();\n    return {\n      component: component,\n      layer: LAYER.FORE,\n      direction: isHorizontal ? DIRECTION.BOTTOM : DIRECTION.RIGHT,\n      type: COMPONENT_TYPE.SCROLLBAR\n    };\n  };\n  Scrollbar.prototype.updateScrollbar = function () {\n    var config = this.getScrollbarComponentCfg();\n    var realConfig = this.trackLen ? __assign(__assign({}, config), {\n      trackLen: this.trackLen,\n      thumbLen: this.thumbLen,\n      thumbOffset: (this.trackLen - this.thumbLen) * this.ratio\n    }) : __assign({}, config);\n    this.scrollbar.component.update(realConfig);\n    return this.scrollbar;\n  };\n  Scrollbar.prototype.getStep = function () {\n    if (this.step) {\n      return this.step;\n    }\n    var coordinateBBox = this.view.coordinateBBox;\n    var _a = this.getValidScrollbarCfg(),\n      type = _a.type,\n      categorySize = _a.categorySize;\n    var isHorizontal = type !== 'vertical';\n    return Math.floor((isHorizontal ? coordinateBBox.width : coordinateBBox.height) / categorySize);\n  };\n  Scrollbar.prototype.getCnt = function () {\n    if (this.cnt) {\n      return this.cnt;\n    }\n    var xScale = this.view.getXScale();\n    var data = this.getScrollbarData();\n    var values = valuesOfKey(data, xScale.field);\n    return size(values);\n  };\n  Scrollbar.prototype.getScrollbarComponentCfg = function () {\n    var _a = this.view,\n      coordinateBBox = _a.coordinateBBox,\n      viewBBox = _a.viewBBox;\n    var _b = this.getValidScrollbarCfg(),\n      type = _b.type,\n      padding = _b.padding,\n      width = _b.width,\n      height = _b.height,\n      style = _b.style;\n    var isHorizontal = type !== 'vertical';\n    var _c = __read(padding, 4),\n      paddingTop = _c[0],\n      paddingRight = _c[1],\n      paddingBottom = _c[2],\n      paddingLeft = _c[3];\n    var position = isHorizontal ? {\n      x: coordinateBBox.minX + paddingLeft,\n      y: viewBBox.maxY - height - paddingBottom\n    } : {\n      x: viewBBox.maxX - width - paddingRight,\n      y: coordinateBBox.minY + paddingTop\n    };\n    var step = this.getStep();\n    var cnt = this.getCnt();\n    var trackLen = isHorizontal ? coordinateBBox.width - paddingLeft - paddingRight : coordinateBBox.height - paddingTop - paddingBottom;\n    var thumbLen = Math.max(trackLen * clamp(step / cnt, 0, 1), MIN_THUMB_LENGTH);\n    return __assign(__assign({}, this.getThemeOptions()), {\n      x: position.x,\n      y: position.y,\n      size: isHorizontal ? height : width,\n      isHorizontal: isHorizontal,\n      trackLen: trackLen,\n      thumbLen: thumbLen,\n      thumbOffset: 0,\n      theme: this.getScrollbarTheme(style)\n    });\n  };\n  /**\n   * 填充一些默认的配置项目\n   */\n  Scrollbar.prototype.getValidScrollbarCfg = function () {\n    var cfg = {\n      type: 'horizontal',\n      categorySize: DEFAULT_CATEGORY_SIZE,\n      width: DEFAULT_SIZE,\n      height: DEFAULT_SIZE,\n      padding: [0, 0, 0, 0],\n      animate: true,\n      style: {}\n    };\n    if (isObject(this.option)) {\n      cfg = __assign(__assign({}, cfg), this.option);\n    }\n    if (!isObject(this.option) || !this.option.padding) {\n      cfg.padding = cfg.type === 'horizontal' ? [DEFAULT_PADDING, 0, DEFAULT_PADDING, 0] : [0, DEFAULT_PADDING, 0, DEFAULT_PADDING];\n    }\n    return cfg;\n  };\n  /**\n   * 获取数据\n   */\n  Scrollbar.prototype.getScrollbarData = function () {\n    var coordinate = this.view.getCoordinate();\n    var cfg = this.getValidScrollbarCfg();\n    var data = this.view.getOptions().data || [];\n    // 纵向做了 y 轴镜像之后，数据也需要镜像反转\n    if (coordinate.isReflect('y') && cfg.type === 'vertical') {\n      data = __spreadArray([], __read(data), false).reverse();\n    }\n    return data;\n  };\n  return Scrollbar;\n}(Controller);\nexport default Scrollbar;","map":null,"metadata":{},"sourceType":"module"}