{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nvar ElementSingleState = /** @class */function (_super) {\n  __extends(ElementSingleState, _super);\n  function ElementSingleState() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ElementSingleState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  };\n  /**\n   * 切换选中，只允许选中一个\n   */\n  ElementSingleState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      var hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n  ElementSingleState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  return ElementSingleState;\n}(StateBase);\nexport default ElementSingleState;","map":null,"metadata":{},"sourceType":"module"}