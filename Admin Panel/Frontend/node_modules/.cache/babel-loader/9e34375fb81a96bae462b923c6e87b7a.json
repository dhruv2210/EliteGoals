{"ast":null,"code":"/**\n * @fileoverview 多边形\n * @author dxq613@gmail.com\n */\nimport { __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport inPolyline from '../util/in-stroke/polyline';\nimport isInPolygon from '../util/in-path/polygon';\nvar Polygon = /** @class */function (_super) {\n  __extends(Polygon, _super);\n  function Polygon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Polygon.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    var points = this.attr().points;\n    var isHit = false;\n    if (isStroke) {\n      isHit = inPolyline(points, lineWidth, x, y, true);\n    }\n    if (!isHit && isFill) {\n      isHit = isInPolygon(points, x, y); // isPointInPath(shape, x, y);\n    }\n\n    return isHit;\n  };\n  Polygon.prototype.createPath = function (context) {\n    var attrs = this.attr();\n    var points = attrs.points;\n    if (points.length < 2) {\n      return;\n    }\n    context.beginPath();\n    for (var i = 0; i < points.length; i++) {\n      var point = points[i];\n      if (i === 0) {\n        context.moveTo(point[0], point[1]);\n      } else {\n        context.lineTo(point[0], point[1]);\n      }\n    }\n    context.closePath();\n  };\n  return Polygon;\n}(ShapeBase);\nexport default Polygon;","map":null,"metadata":{},"sourceType":"module"}