{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, omit } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { execPlotAdaptor } from '../mix/utils';\nimport { execViewAdaptor } from './utils';\nfunction facetAdaptor(params) {\n  var chart = params.chart,\n    options = params.options;\n  var facetType = options.type,\n    data = options.data,\n    fields = options.fields,\n    _eachView = options.eachView;\n  var restFacetCfg = omit(options, ['type', 'data', 'fields', 'eachView', 'axes', 'meta', 'tooltip', 'coordinate', 'theme', 'legend', 'interactions', 'annotations']);\n  // 1. data\n  chart.data(data);\n  // 2. facet\n  chart.facet(facetType, __assign(__assign({}, restFacetCfg), {\n    fields: fields,\n    eachView: function eachView(viewOfG2, facet) {\n      var viewOptions = _eachView(viewOfG2, facet);\n      if (viewOptions.geometries) {\n        execViewAdaptor(viewOfG2, viewOptions);\n      } else {\n        var plot = viewOptions;\n        var plotOptions = plot.options;\n        // @ts-ignore 仪表盘没 tooltip\n        if (plotOptions.tooltip) {\n          // 配置 tooltip 交互\n          viewOfG2.interaction('tooltip');\n        }\n        execPlotAdaptor(plot.type, viewOfG2, plotOptions);\n      }\n    }\n  }));\n  return params;\n}\nfunction component(params) {\n  var chart = params.chart,\n    options = params.options;\n  var axes = options.axes,\n    meta = options.meta,\n    tooltip = options.tooltip,\n    coordinate = options.coordinate,\n    theme = options.theme,\n    legend = options.legend,\n    interactions = options.interactions,\n    annotations = options.annotations;\n  // 3. meta 配置\n  var scales = {};\n  if (axes) {\n    each(axes, function (axis, field) {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n  }\n  scales = deepAssign({}, meta, scales);\n  chart.scale(scales);\n  // 4. coordinate 配置\n  chart.coordinate(coordinate);\n  // 5. axis 轴配置 (默认不展示)\n  if (!axes) {\n    chart.axis(false);\n  } else {\n    each(axes, function (axis, field) {\n      chart.axis(field, axis);\n    });\n  }\n  // 6. tooltip 配置\n  if (tooltip) {\n    chart.interaction('tooltip');\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.removeInteraction('tooltip');\n  }\n  // 7. legend 配置（默认展示）\n  chart.legend(legend);\n  // theme 配置\n  if (theme) {\n    chart.theme(theme);\n  }\n  // 8. interactions\n  each(interactions, function (interaction) {\n    if (interaction.enable === false) {\n      chart.removeInteraction(interaction.type);\n    } else {\n      chart.interaction(interaction.type, interaction.cfg);\n    }\n  });\n  // 9. annotations\n  each(annotations, function (annotation) {\n    chart.annotation()[annotation.type](__assign({}, annotation));\n  });\n  return params;\n}\n/**\n * 分面图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, facetAdaptor, component)(params);\n}","map":null,"metadata":{},"sourceType":"module"}