{"ast":null,"code":"/* eslint-disable no-restricted-syntax */\n// 类型检测\nexport var isType = function isType(value, type) {\n  var toString = {}.toString;\n  return toString.call(value) === \"[object \".concat(type, \"]\");\n};\nexport var clone = function clone(source) {\n  if (!source) {\n    return source;\n  }\n  var target = {};\n  // eslint-disable-next-line guard-for-in\n  for (var k in source) {\n    target[k] = source[k];\n  }\n  return target;\n};\nexport var getType = function getType(n) {\n  return Object.prototype.toString.call(n).slice(8, -1);\n};\n/**\n * 深克隆\n * @param source 要深克隆的目标对象\n */\nexport var deepClone = function deepClone(source) {\n  if (!source || typeof source !== 'object') {\n    return source;\n  }\n  var target;\n  if (Array.isArray(source)) {\n    target = source.map(function (item) {\n      return deepClone(item);\n    });\n  } else {\n    target = {};\n    Object.keys(source).forEach(function (key) {\n      return target[key] = deepClone(source[key]);\n    });\n  }\n  return target;\n};\n/**\n * 存在时返回路径值，不存在时返回 undefined\n */\nexport var hasPath = function hasPath(source, path) {\n  var current = source;\n  for (var i = 0; i < path.length; i += 1) {\n    if (current === null || current === void 0 ? void 0 : current[path[i]]) {\n      current = current[path[i]];\n    } else {\n      current = undefined;\n      break;\n    }\n  }\n  return current;\n};\n/**\n * 内部指定 params ，不考虑复杂情况\n */\nexport var setPath = function setPath(source, path, value) {\n  if (!source) {\n    return source;\n  }\n  var o = source;\n  path.forEach(function (key, idx) {\n    // 不是最后一个\n    if (idx < path.length - 1) {\n      o = o[key];\n    } else {\n      o[key] = value;\n    }\n  });\n  return source;\n};","map":null,"metadata":{},"sourceType":"module"}