{"ast":null,"code":"import { assign, isFunction, isString } from '@antv/util';\nimport { center, justify, left, right, sankey } from './sankey';\nvar ALIGN_METHOD = {\n  left: left,\n  right: right,\n  center: center,\n  justify: justify\n};\n/**\n * 默认值\n */\nvar DEFAULT_OPTIONS = {\n  nodeId: function nodeId(node) {\n    return node.index;\n  },\n  nodeAlign: 'justify',\n  nodeWidth: 0.008,\n  nodePadding: 0.03,\n  nodeSort: undefined\n};\n/**\n * 获得 align function\n * @param nodeAlign\n * @param nodeDepth\n */\nexport function getNodeAlignFunction(nodeAlign) {\n  var func = isString(nodeAlign) ? ALIGN_METHOD[nodeAlign] : isFunction(nodeAlign) ? nodeAlign : null;\n  return func || justify;\n}\nexport function getDefaultOptions(sankeyLayoutOptions) {\n  return assign({}, DEFAULT_OPTIONS, sankeyLayoutOptions);\n}\n/**\n * 桑基图利用数据进行布局的函数，最终返回节点、边的位置（0 - 1 的信息）\n * 将会修改 data 数据\n * @param sankeyLayoutOptions\n * @param data\n */\nexport function sankeyLayout(sankeyLayoutOptions, data) {\n  var options = getDefaultOptions(sankeyLayoutOptions);\n  var nodeId = options.nodeId,\n    nodeSort = options.nodeSort,\n    nodeAlign = options.nodeAlign,\n    nodeWidth = options.nodeWidth,\n    nodePadding = options.nodePadding,\n    nodeDepth = options.nodeDepth;\n  var sankeyProcessor = sankey()\n  // .links((d: any) => d.links)\n  // .nodes((d: any) => d.nodes)\n  .nodeSort(nodeSort).nodeWidth(nodeWidth).nodePadding(nodePadding).nodeDepth(nodeDepth).nodeAlign(getNodeAlignFunction(nodeAlign)).extent([[0, 0], [1, 1]]).nodeId(nodeId);\n  // 进行桑基图布局处理\n  var layoutData = sankeyProcessor(data);\n  // post process (x, y), etc.\n  var nodes = layoutData.nodes.map(function (node) {\n    var x0 = node.x0,\n      x1 = node.x1,\n      y0 = node.y0,\n      y1 = node.y1;\n    /* points\n     * 3---2\n     * |   |\n     * 0---1\n     */\n    node.x = [x0, x1, x1, x0];\n    node.y = [y0, y0, y1, y1];\n    return node;\n  }).filter(function (node) {\n    return node.name !== null;\n  });\n  var links = layoutData.links.map(function (edge) {\n    var source = edge.source,\n      target = edge.target;\n    var sx = source.x1;\n    var tx = target.x0;\n    edge.x = [sx, sx, tx, tx];\n    var offset = edge.width / 2;\n    edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];\n    return edge;\n  }).filter(function (edge) {\n    var source = edge.source,\n      target = edge.target;\n    return source.name !== null && target.name !== null;\n  });\n  return {\n    nodes: nodes,\n    links: links\n  };\n}","map":null,"metadata":{},"sourceType":"module"}