{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { deepAssign } from '../utils';\nimport { getCanvasPattern } from '../utils/pattern';\n/**\n * Pattern 通道，处理图案填充\n * 🚀 目前支持图表类型：饼图、柱状图、条形图、玉珏图等（不支持在多 view 图表中，后续按需扩展）\n *\n * @param key key of style property\n * @returns\n */\nexport function pattern(key) {\n  var _this = this;\n  return function (params) {\n    var _a;\n    var options = params.options,\n      chart = params.chart;\n    var patternOption = options.pattern;\n    // 没有 pattern 配置，则直接返回\n    if (!patternOption) {\n      return params;\n    }\n    /** ~~~~~~~ 进行贴图图案处理 ~~~~~~~ */\n    var style = function style(datum) {\n      var _a, _b, _c;\n      var args = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n      var defaultColor = chart.getTheme().defaultColor;\n      var color = defaultColor;\n      var colorAttribute = (_b = (_a = chart.geometries) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getAttribute('color');\n      if (colorAttribute) {\n        var colorField = colorAttribute.getFields()[0];\n        var seriesValue = get(datum, colorField);\n        color = Util.getMappingValue(colorAttribute, seriesValue, ((_c = colorAttribute.values) === null || _c === void 0 ? void 0 : _c[0]) || defaultColor);\n      }\n      var pattern = patternOption;\n      // 1. 如果 patternOption 是一个回调，则获取回调结果。`(datum: Datum, color: string) => CanvasPattern`\n      if (typeof patternOption === 'function') {\n        pattern = patternOption.call(_this, datum, color);\n      }\n      // 2. 如果 pattern 不是 CanvasPattern，则进一步处理，否则直接赋予给 fill\n      if (pattern instanceof CanvasPattern === false) {\n        // 通过 createPattern(PatternStyle) 转换为 CanvasPattern\n        pattern = getCanvasPattern(deepAssign({}, {\n          cfg: {\n            backgroundColor: color\n          }\n        }, pattern));\n      }\n      var styleOption = options[key];\n      return __assign(__assign({}, typeof styleOption === 'function' ? styleOption.call.apply(styleOption, __spreadArrays([_this, datum], args)) : styleOption || {}), {\n        fill: pattern || color\n      });\n    };\n    return deepAssign({}, params, {\n      options: (_a = {}, _a[key] = style, _a)\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}