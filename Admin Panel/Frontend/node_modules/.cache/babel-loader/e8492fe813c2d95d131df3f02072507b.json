{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isString } from '@antv/util';\nimport { animation, annotation, interaction, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick, renderGaugeStatistic } from '../../utils';\nimport { DEFAULT_COLOR, INDICATEOR_VIEW_ID, PERCENT, RANGE_TYPE, RANGE_VALUE, RANGE_VIEW_ID } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var percent = options.percent,\n    range = options.range,\n    radius = options.radius,\n    innerRadius = options.innerRadius,\n    startAngle = options.startAngle,\n    endAngle = options.endAngle,\n    axis = options.axis,\n    indicator = options.indicator,\n    gaugeStyle = options.gaugeStyle,\n    type = options.type,\n    meter = options.meter;\n  var color = range.color,\n    rangeWidth = range.width;\n  // 指标 & 指针\n  // 如果开启在应用\n  if (indicator) {\n    var indicatorData = getIndicatorData(percent);\n    var v1 = chart.createView({\n      id: INDICATEOR_VIEW_ID\n    });\n    v1.data(indicatorData);\n    v1.point().position(PERCENT + \"*1\").shape(indicator.shape || 'gauge-indicator')\n    // 传入指针的样式到自定义 shape 中\n    .customInfo({\n      defaultColor: chart.getTheme().defaultColor,\n      indicator: indicator\n    });\n    v1.coordinate('polar', {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radius: innerRadius * radius\n    });\n    v1.axis(PERCENT, axis);\n    // 一部分应用到 scale 中\n    v1.scale(PERCENT, pick(axis, AXIS_META_CONFIG_KEYS));\n  }\n  // 辅助 range\n  // [{ range: 1, type: '0', percent: 原始进度百分比 }]\n  var rangeData = getRangeData(percent, options.range);\n  var v2 = chart.createView({\n    id: RANGE_VIEW_ID\n  });\n  v2.data(rangeData);\n  var rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n  var ext = interval({\n    chart: v2,\n    options: {\n      xField: '1',\n      yField: RANGE_VALUE,\n      seriesField: RANGE_TYPE,\n      rawFields: [PERCENT],\n      isStack: true,\n      interval: {\n        color: rangeColor,\n        style: gaugeStyle,\n        shape: type === 'meter' ? 'meter-gauge' : null\n      },\n      args: {\n        zIndexReversed: true,\n        sortZIndex: true\n      },\n      minColumnWidth: rangeWidth,\n      maxColumnWidth: rangeWidth\n    }\n  }).ext;\n  var geometry = ext.geometry;\n  // 传入到自定义 shape 中\n  geometry.customInfo({\n    meter: meter\n  });\n  v2.coordinate('polar', {\n    innerRadius: innerRadius,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  }).transpose();\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a;\n  return flow(scale((_a = {\n    range: {\n      min: 0,\n      max: 1,\n      maxLimit: 1,\n      minLimit: 0\n    }\n  }, _a[PERCENT] = {}, _a)))(params);\n}\n/**\n * 统计指标文档\n * @param params\n */\nfunction statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var statistic = options.statistic,\n    percent = options.percent;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  if (statistic) {\n    var contentOption = statistic.content;\n    var transformContent = void 0;\n    // 当设置 content 的时候，设置默认样式\n    if (contentOption) {\n      transformContent = deepAssign({}, {\n        content: (percent * 100).toFixed(2) + \"%\",\n        style: {\n          opacity: 0.75,\n          fontSize: '30px',\n          lineHeight: 1,\n          textAlign: 'center',\n          color: 'rgba(44,53,66,0.85)'\n        }\n      }, contentOption);\n    }\n    renderGaugeStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: transformContent\n      })\n    }, {\n      percent: percent\n    });\n  }\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * tooltip 配置\n */\nfunction tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip;\n  if (tooltip) {\n    chart.tooltip(deepAssign({\n      showTitle: false,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><div class=\"g2-tooltip-list\"></div></div>',\n      domStyles: {\n        'g2-tooltip': {\n          padding: '4px 8px',\n          fontSize: '10px'\n        }\n      },\n      customContent: function customContent(x, data) {\n        var percent = get(data, [0, 'data', PERCENT], 0);\n        return (percent * 100).toFixed(2) + \"%\";\n      }\n    }, tooltip));\n  } else {\n    // 默认，不展示 tooltip\n    chart.tooltip(false);\n  }\n  return params;\n}\n/**\n * other 配置\n * @param params\n */\nfunction other(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * 对外暴露的 adaptor\n */\nexport { statistic };\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme,\n  // animation 配置必须在 createView 之前，不然无法让子 View 生效\n  animation, geometry, meta, tooltip, statistic, interaction, annotation(), other\n  // ... 其他的 adaptor flow\n  )(params);\n}","map":null,"metadata":{},"sourceType":"module"}