{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Action, registerAction, registerInteraction } from '@antv/g2';\nimport { each, get, isArray, map } from '@antv/util';\nimport { getAllElements, getSiblingViews, getViews } from '../../../utils';\nimport { clearHighlight, getElementValue } from './utils';\n/**\n * 存在多个 view 时，view 之间的联动交互\n *\n * 提供四个反馈 action，均接受参数：linkField 关联字段，dim 维度\n * 1. showTooltip\n * 2. active\n * 3. highlight\n * 4. selected\n *\n * 附加，两个结束反馈 action：\n * 1. hidetooltip\n * 2. reset 清除激活和高亮状态\n */\nvar Association = /** @class */function (_super) {\n  __extends(Association, _super);\n  function Association() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 获取关联的 elements\n   *\n   * - 如果 dim 参数存在，根据 dim 获取相应的 field。与 linkField 不匹配则 return\n   * - 否则 dim 参数不存在，且 linkField 存在，则作为关联字段\n   * - 否则若 linkField 不存在，则获取第一个分类字段\n   * @returns EventItem[]\n   */\n  Association.prototype.getAssociationItems = function (views, params) {\n    var _a;\n    var event = this.context.event;\n    var _b = params || {},\n      linkField = _b.linkField,\n      dim = _b.dim;\n    var items = [];\n    if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.data) {\n      var data_1 = event.data.data;\n      each(views, function (v) {\n        var _a, _b;\n        var field = linkField;\n        if (dim === 'x') {\n          field = v.getXScale().field;\n        } else if (dim === 'y') {\n          field = (_a = v.getYScales().find(function (s) {\n            return s.field === field;\n          })) === null || _a === void 0 ? void 0 : _a.field;\n        } else if (!field) {\n          field = (_b = v.getGroupScales()[0]) === null || _b === void 0 ? void 0 : _b.field;\n        }\n        if (!field) {\n          return;\n        }\n        var elements = map(getAllElements(v), function (ele) {\n          var active = false;\n          var inactive = false;\n          var dataValue = isArray(data_1) ? get(data_1[0], field) : get(data_1, field);\n          if (getElementValue(ele, field) === dataValue) {\n            active = true;\n          } else {\n            inactive = true;\n          }\n          return {\n            element: ele,\n            view: v,\n            active: active,\n            inactive: inactive\n          };\n        });\n        items.push.apply(items, elements);\n      });\n    }\n    return items;\n  };\n  /**\n   * 所有同一层级的 tooltip 显示\n   */\n  Association.prototype.showTooltip = function (params) {\n    var siblings = getSiblingViews(this.context.view);\n    var elements = this.getAssociationItems(siblings, params);\n    each(elements, function (ele) {\n      if (ele.active) {\n        var box = ele.element.shape.getCanvasBBox();\n        ele.view.showTooltip({\n          x: box.minX + box.width / 2,\n          y: box.minY + box.height / 2\n        });\n      }\n    });\n  };\n  /**\n   * 隐藏同一层级的 tooltip\n   */\n  Association.prototype.hideTooltip = function () {\n    var siblings = getSiblingViews(this.context.view);\n    each(siblings, function (sibling) {\n      sibling.hideTooltip();\n    });\n  };\n  /**\n   * 设置 active 状态\n   */\n  Association.prototype.active = function (params) {\n    var views = getViews(this.context.view);\n    var items = this.getAssociationItems(views, params);\n    each(items, function (item) {\n      var active = item.active,\n        element = item.element;\n      if (active) {\n        element.setState('active', true);\n      }\n    });\n  };\n  /**\n   * 设置 selected 状态\n   */\n  Association.prototype.selected = function (params) {\n    var views = getViews(this.context.view);\n    var items = this.getAssociationItems(views, params);\n    each(items, function (item) {\n      var active = item.active,\n        element = item.element;\n      if (active) {\n        element.setState('selected', true);\n      }\n    });\n  };\n  /**\n   * 进行高亮 => 设置 inactive 状态\n   */\n  Association.prototype.highlight = function (params) {\n    var views = getViews(this.context.view);\n    var items = this.getAssociationItems(views, params);\n    each(items, function (item) {\n      var inactive = item.inactive,\n        element = item.element;\n      if (inactive) {\n        element.setState('inactive', true);\n      }\n    });\n  };\n  Association.prototype.reset = function () {\n    var views = getViews(this.context.view);\n    each(views, function (v) {\n      clearHighlight(v);\n    });\n  };\n  return Association;\n}(Action);\nregisterAction('association', Association);\n/**\n * 相邻 view 的 active 联动（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-active', {\n  start: [{\n    trigger: 'element:mouseenter',\n    action: 'association:active'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:reset'\n  }]\n});\n/**\n * 相邻 view 的 active 联动（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-selected', {\n  start: [{\n    trigger: 'element:mouseenter',\n    action: 'association:selected'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:reset'\n  }]\n});\n/**\n * 相邻 view 的 highlight 联动, 突出当前 element\n */\nregisterInteraction('association-highlight', {\n  start: [{\n    trigger: 'element:mouseenter',\n    action: 'association:highlight'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:reset'\n  }]\n});\n/**\n * 相邻 view 的 tooltip 联动，根据 groupField 进行关联（相同维值的 tooltip 联动）\n */\nregisterInteraction('association-tooltip', {\n  start: [{\n    trigger: 'element:mousemove',\n    action: 'association:showTooltip'\n  }],\n  end: [{\n    trigger: 'element:mouseleave',\n    action: 'association:hideTooltip'\n  }]\n});","map":null,"metadata":{},"sourceType":"module"}