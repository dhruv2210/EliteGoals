{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { assign, memoize } from '@antv/util';\nimport { LEVEL, log } from '../../utils';\nimport { blend } from '../../utils/color/blend';\nimport { ID_FIELD, PATH_FIELD } from './constant';\nimport { computeTextCentres, intersectionAreaPath } from './layout/diagram';\nimport { scaleSolution, venn } from './layout/layout';\n/**\n * 获取 颜色映射\n * @usage colorMap.get(id) => color\n *\n * @returns Map<string, string>\n */\nexport var getColorMap = memoize(function (colorPalette, data, blendMode, setsField) {\n  var colorMap = new Map();\n  var colorPaletteLen = colorPalette.length;\n  data.forEach(function (d, idx) {\n    if (d[setsField].length === 1) {\n      colorMap.set(d[ID_FIELD], colorPalette[(idx + colorPaletteLen) % colorPaletteLen]);\n    } else {\n      /** 一般都是可以获取到颜色的，如果不正确 就是输入了非法数据 */\n      var colorArr = d[setsField].map(function (id) {\n        return colorMap.get(id);\n      });\n      colorMap.set(d[ID_FIELD], colorArr.slice(1).reduce(function (a, b) {\n        return blend(a, b, blendMode);\n      }, colorArr[0]));\n    }\n  });\n  return colorMap;\n}, function () {\n  var params = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    params[_i] = arguments[_i];\n  }\n  return JSON.stringify(params);\n});\n/**\n * 给韦恩图数据进行布局\n *\n * @param data\n * @param width\n * @param height\n * @param padding\n * @returns 韦恩图数据\n */\nexport function layoutVennData(options, width, height, padding) {\n  if (padding === void 0) {\n    padding = 0;\n  }\n  var data = options.data,\n    setsField = options.setsField,\n    sizeField = options.sizeField;\n  // 处理空数据的情况\n  if (data.length === 0) {\n    log(LEVEL.WARN, false, 'warn: %s', '数据不能为空');\n    return [];\n  }\n  var vennData = data.map(function (d) {\n    var _a;\n    return __assign(__assign({}, d), (_a = {\n      sets: d[setsField] || [],\n      size: d[sizeField]\n    }, _a[PATH_FIELD] = '', _a[ID_FIELD] = '', _a));\n  });\n  // 1. 进行排序，避免图形元素遮挡\n  vennData.sort(function (a, b) {\n    return a.sets.length - b.sets.length;\n  });\n  // todo 2. 可以在这里处理下非法数据输入，避免直接 crash\n  var solution = venn(vennData);\n  var circles = scaleSolution(solution, width, height, padding);\n  var textCenters = computeTextCentres(circles, vennData);\n  vennData.forEach(function (row) {\n    var sets = row.sets;\n    var id = sets.join(',');\n    row[ID_FIELD] = id;\n    // 保留 vennText 布局方法\n    var setCircles = sets.map(function (set) {\n      return circles[set];\n    });\n    var path = intersectionAreaPath(setCircles);\n    if (!/[zZ]$/.test(path)) {\n      path += ' Z';\n    }\n    row[PATH_FIELD] = path;\n    var center = textCenters[id] || {\n      x: 0,\n      y: 0\n    };\n    assign(row, center);\n  });\n  return vennData;\n}\n/**\n * 检查是否存在 非法元素\n * @param legalArr 合法集合：['A', 'B']\n * @param testArr 检查集合：['A', 'B', 'C'] or ['A', 'C']（存在非法 'C'）\n * @return boolean\n */\nexport function islegalSets(legalArr, testArr) {\n  for (var i = 0; i < testArr.length; i++) {\n    if (!legalArr.includes(testArr[i])) {\n      return false;\n    }\n  }\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}