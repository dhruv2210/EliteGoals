{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { getElements, getElementsByState } from '../util';\nimport { clearHighlight } from './highlight-util';\nimport StateAction from './state';\nimport { ELEMENT_STATE } from '../../../constant';\nexport var STATUS_UNACTIVE = ELEMENT_STATE.INACTIVE;\nexport var STATUS_ACTIVE = ELEMENT_STATE.ACTIVE;\n/**\n * @ignore\n * highlight，指定图形高亮，其他图形变暗\n */\nvar ElementHighlight = /** @class */function (_super) {\n  __extends(ElementHighlight, _super);\n  function ElementHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_ACTIVE;\n    return _this;\n  }\n  // 多个元素设置、取消 highlight\n  ElementHighlight.prototype.setElementsStateByItem = function (elements, field, item, enable) {\n    var _this = this;\n    var callback = function callback(el) {\n      return _this.isMathItem(el, field, item);\n    };\n    this.setHighlightBy(elements, callback, enable);\n  };\n  // 设置元素的 highlight\n  ElementHighlight.prototype.setElementHighlight = function (el, callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else if (!el.hasState(STATUS_ACTIVE)) {\n      el.setState(STATUS_UNACTIVE, true);\n    }\n  };\n  ElementHighlight.prototype.setHighlightBy = function (elements, callback, enable) {\n    var _this = this;\n    if (enable) {\n      // 如果是设置 highlight ，则将匹配的 element 设置成 active，\n      // 其他如果不是 active，则设置成 unactive\n      each(elements, function (el) {\n        _this.setElementHighlight(el, callback);\n      });\n    } else {\n      // 如果取消 highlight，则要检测是否全部取消 highlight\n      var activeElements = getElementsByState(this.context.view, STATUS_ACTIVE);\n      var allCancel_1 = true;\n      // 检测所有 activeElements 都要取消 highlight\n      each(activeElements, function (el) {\n        if (!callback(el)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n      if (allCancel_1) {\n        // 都要取消，则取消所有的 active，unactive 状态\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(elements, function (el) {\n          if (callback(el)) {\n            if (el.hasState(STATUS_ACTIVE)) {\n              el.setState(STATUS_ACTIVE, false);\n            }\n            el.setState(STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  // 单个元素设置和取消 highlight\n  ElementHighlight.prototype.setElementState = function (element, enable) {\n    var view = this.context.view;\n    var elements = getElements(view);\n    this.setHighlightBy(elements, function (el) {\n      return element === el;\n    }, enable);\n  };\n  ElementHighlight.prototype.highlight = function () {\n    this.setState();\n  };\n  // 清理掉所有的 active， unactive 状态\n  ElementHighlight.prototype.clear = function () {\n    var view = this.context.view;\n    clearHighlight(view);\n  };\n  return ElementHighlight;\n}(StateAction);\nexport default ElementHighlight;","map":null,"metadata":{},"sourceType":"module"}