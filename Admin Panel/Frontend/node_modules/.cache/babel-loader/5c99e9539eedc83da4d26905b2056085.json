{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport panelRender from './panelRender';\nimport { RawPurePanel as PopoverRawPurePanel } from '../popover/PurePanel';\nimport useStyle from './style';\nvar PurePanel = function PurePanel(props) {\n  var customizePrefixCls = props.prefixCls,\n    _props$current = props.current,\n    current = _props$current === void 0 ? 0 : _props$current,\n    _props$total = props.total,\n    total = _props$total === void 0 ? 6 : _props$total,\n    className = props.className,\n    style = props.style,\n    type = props.type,\n    restProps = __rest(props, [\"prefixCls\", \"current\", \"total\", \"className\", \"style\", \"type\"]);\n  var _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls;\n  var prefixCls = getPrefixCls('tour', customizePrefixCls);\n  var _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  var node = panelRender(_extends(_extends({}, restProps), {\n    prefixCls: prefixCls,\n    total: total\n  }), current, type);\n  return wrapSSR( /*#__PURE__*/React.createElement(PopoverRawPurePanel, {\n    prefixCls: prefixCls,\n    hashId: hashId,\n    className: classNames(className, prefixCls + \"-pure\", type && prefixCls + \"-\" + type),\n    style: style\n  }, node));\n  // return node as React.ReactElement;\n};\n\nexport default PurePanel;","map":null,"metadata":{},"sourceType":"module"}