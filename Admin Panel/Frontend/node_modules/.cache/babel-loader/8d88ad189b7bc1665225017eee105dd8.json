{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isEqual, get, deepMix } from '@antv/util';\nimport { TOOLTIP_CSS_CONST } from '@antv/component';\nimport Action from '../../base';\nimport { HtmlTooltip } from '../../../../dependents';\n/**\n * 用于组件文本省略后需要展示完整信息的 Tooltip Action\n * @ignore\n */\nvar EllipsisText = /** @class */function (_super) {\n  __extends(EllipsisText, _super);\n  function EllipsisText() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.timeStamp = 0;\n    return _this;\n  }\n  EllipsisText.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.tooltip && this.tooltip.destroy();\n  };\n  /**\n   * 显示 Tooltip\n   * @returns\n   */\n  EllipsisText.prototype.show = function () {\n    var context = this.context;\n    var ev = context.event;\n    var lastTimeStamp = this.timeStamp;\n    var timeStamp = +new Date();\n    if (timeStamp - lastTimeStamp > 16) {\n      var preLoc = this.location;\n      var curLoc = {\n        x: ev.x,\n        y: ev.y\n      };\n      if (!preLoc || !isEqual(preLoc, curLoc)) {\n        this.showTooltip(curLoc);\n      }\n      this.timeStamp = timeStamp;\n      this.location = curLoc;\n    }\n  };\n  /**\n   * 隐藏 Tooltip。\n   * @returns\n   */\n  EllipsisText.prototype.hide = function () {\n    this.hideTooltip();\n    this.location = null;\n  };\n  EllipsisText.prototype.showTooltip = function (curLoc) {\n    var context = this.context;\n    var ev = context.event;\n    var target = ev.target;\n    if (target && target.get('tip')) {\n      if (!this.tooltip) {\n        this.renderTooltip(); // 延迟生成\n      }\n\n      var tipContent = target.get('tip');\n      // 展示 tooltip\n      this.tooltip.update(__assign({\n        title: tipContent\n      }, curLoc));\n      this.tooltip.show();\n    }\n  };\n  EllipsisText.prototype.hideTooltip = function () {\n    this.tooltip && this.tooltip.hide();\n  };\n  EllipsisText.prototype.renderTooltip = function () {\n    var _a;\n    var view = this.context.view;\n    var canvas = view.canvas;\n    var region = {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: canvas.get('width'),\n        y: canvas.get('height')\n      }\n    };\n    var theme = view.getTheme();\n    var tooltipStyles = get(theme, ['components', 'tooltip', 'domStyles'], {}); // 获取 tooltip 样式\n    var tooltip = new HtmlTooltip({\n      parent: canvas.get('el').parentNode,\n      region: region,\n      visible: false,\n      crosshairs: null,\n      domStyles: __assign({}, deepMix({}, tooltipStyles, (_a = {},\n      // 超长的时候，tooltip tip 最大宽度为 50%，然后可以换行\n      _a[TOOLTIP_CSS_CONST.CONTAINER_CLASS] = {\n        'max-width': '50%'\n      }, _a[TOOLTIP_CSS_CONST.TITLE_CLASS] = {\n        'word-break': 'break-all'\n      }, _a)))\n    });\n    tooltip.init();\n    tooltip.setCapture(false); // 不允许捕获事件\n    this.tooltip = tooltip;\n  };\n  return EllipsisText;\n}(Action);\nexport default EllipsisText;","map":null,"metadata":{},"sourceType":"module"}