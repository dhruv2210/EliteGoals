{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getTheme } from '@antv/g2';\nimport { each, find, isObject, map } from '@antv/util';\nimport { deepAssign } from '../utils';\nimport { conversionTagFormatter } from '../utils/conversion';\nfunction getConversionTagOptionsWithDefaults(options, horizontal) {\n  return deepAssign({\n    size: horizontal ? 32 : 80,\n    spacing: horizontal ? 8 : 12,\n    offset: horizontal ? 32 : 0,\n    arrow: options.arrow !== false && {\n      headSize: 12,\n      style: {\n        fill: 'rgba(0, 0, 0, 0.05)'\n      }\n    },\n    text: options.text !== false && {\n      style: {\n        fontSize: 12,\n        fill: 'rgba(0, 0, 0, 0.85)',\n        textAlign: 'center',\n        textBaseline: 'middle'\n      },\n      formatter: conversionTagFormatter\n    }\n  }, options);\n}\nfunction parsePoints(coordinate, element) {\n  // @ts-ignore\n  return map(element.getModel().points, function (point) {\n    return coordinate.convertPoint(point);\n  });\n}\nfunction renderArrowTag(config, elemPrev, elemNext) {\n  var view = config.view,\n    geometry = config.geometry,\n    group = config.group,\n    options = config.options,\n    horizontal = config.horizontal;\n  var offset = options.offset,\n    size = options.size,\n    arrow = options.arrow;\n  var coordinate = view.getCoordinate();\n  var pointPrev = parsePoints(coordinate, elemPrev)[3];\n  var pointNext = parsePoints(coordinate, elemNext)[0];\n  var totalHeight = pointNext.y - pointPrev.y;\n  var totalWidth = pointNext.x - pointPrev.x;\n  if (typeof arrow === 'boolean') {\n    return;\n  }\n  var headSize = arrow.headSize;\n  var spacing = options.spacing;\n  var points;\n  if (horizontal) {\n    if ((totalWidth - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalWidth - headSize) / 2);\n      points = [[pointPrev.x + spacing, pointPrev.y - offset], [pointPrev.x + spacing, pointPrev.y - offset - size], [pointNext.x - spacing, pointNext.y - offset - size / 2]];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [[pointPrev.x + spacing, pointPrev.y - offset], [pointPrev.x + spacing, pointPrev.y - offset - size], [pointNext.x - spacing - headSize, pointNext.y - offset - size], [pointNext.x - spacing, pointNext.y - offset - size / 2], [pointNext.x - spacing - headSize, pointNext.y - offset]];\n    }\n  } else {\n    if ((totalHeight - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalHeight - headSize) / 2);\n      points = [[pointPrev.x + offset, pointPrev.y + spacing], [pointPrev.x + offset + size, pointPrev.y + spacing], [pointNext.x + offset + size / 2, pointNext.y - spacing]];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [[pointPrev.x + offset, pointPrev.y + spacing], [pointPrev.x + offset + size, pointPrev.y + spacing], [pointNext.x + offset + size, pointNext.y - spacing - headSize], [pointNext.x + offset + size / 2, pointNext.y - spacing], [pointNext.x + offset, pointNext.y - spacing - headSize]];\n    }\n  }\n  group.addShape('polygon', {\n    id: view.id + \"-conversion-tag-arrow-\" + geometry.getElementId(elemPrev.getModel().mappingData),\n    name: 'conversion-tag-arrow',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext\n    },\n    attrs: __assign(__assign({}, arrow.style || {}), {\n      points: points\n    })\n  });\n}\nfunction renderTextTag(config, elemPrev, elemNext) {\n  var _a, _b, _c;\n  var view = config.view,\n    geometry = config.geometry,\n    group = config.group,\n    options = config.options,\n    field = config.field,\n    horizontal = config.horizontal;\n  var offset = options.offset,\n    size = options.size;\n  if (typeof options.text === 'boolean') {\n    return;\n  }\n  var coordinate = view.getCoordinate();\n  var text = ((_a = options.text) === null || _a === void 0 ? void 0 : _a.formatter) && ((_b = options.text) === null || _b === void 0 ? void 0 : _b.formatter(elemPrev.getData()[field], elemNext.getData()[field]));\n  var pointPrev = parsePoints(coordinate, elemPrev)[horizontal ? 3 : 0];\n  var pointNext = parsePoints(coordinate, elemNext)[horizontal ? 0 : 3];\n  var textShape = group.addShape('text', {\n    id: view.id + \"-conversion-tag-text-\" + geometry.getElementId(elemPrev.getModel().mappingData),\n    name: 'conversion-tag-text',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext\n    },\n    attrs: __assign(__assign({}, ((_c = options.text) === null || _c === void 0 ? void 0 : _c.style) || {}), {\n      text: text,\n      x: horizontal ? (pointPrev.x + pointNext.x) / 2 : pointPrev.x + offset + size / 2,\n      y: horizontal ? pointPrev.y - offset - size / 2 : (pointPrev.y + pointNext.y) / 2\n    })\n  });\n  if (horizontal) {\n    var totalWidth = pointNext.x - pointPrev.x;\n    var textWidth = textShape.getBBox().width;\n    if (textWidth > totalWidth) {\n      var cWidth = textWidth / text.length;\n      var cEnd = Math.max(1, Math.ceil(totalWidth / cWidth) - 1);\n      var textAdjusted = text.slice(0, cEnd) + \"...\";\n      textShape.attr('text', textAdjusted);\n    }\n  }\n}\nfunction renderTag(options, elemPrev, elemNext) {\n  renderArrowTag(options, elemPrev, elemNext);\n  renderTextTag(options, elemPrev, elemNext);\n}\n/**\n * 返回支持转化率组件的 adaptor，适用于柱形图/条形图\n * @param field 用户转化率计算的字段\n * @param horizontal 是否水平方向的转化率\n * @param disabled 是否禁用\n */\nexport function conversionTag(field, horizontal, disabled) {\n  if (horizontal === void 0) {\n    horizontal = true;\n  }\n  if (disabled === void 0) {\n    disabled = false;\n  }\n  return function (params) {\n    var options = params.options,\n      chart = params.chart;\n    var conversionTag = options.conversionTag,\n      theme = options.theme;\n    if (conversionTag && !disabled) {\n      // 有转化率组件时，柱子宽度占比自动为 1/3\n      chart.theme(deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n        columnWidthRatio: 1 / 3\n      }));\n      // 使用  shape annotation 绘制转化率组件\n      chart.annotation().shape({\n        render: function render(container, view) {\n          var group = container.addGroup({\n            id: chart.id + \"-conversion-tag-group\",\n            name: 'conversion-tag-group'\n          });\n          var interval = find(chart.geometries, function (geom) {\n            return geom.type === 'interval';\n          });\n          var config = {\n            view: view,\n            geometry: interval,\n            group: group,\n            field: field,\n            horizontal: horizontal,\n            options: getConversionTagOptionsWithDefaults(conversionTag, horizontal)\n          };\n          var elements = interval.elements;\n          each(elements, function (elem, idx) {\n            if (idx > 0) {\n              renderTag(config, elements[idx - 1], elem);\n            }\n          });\n        }\n      });\n    }\n    return params;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}