{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { substitute, hasKey } from '@antv/util';\nimport { toPx, getTextPoint } from '../util/util';\nimport HtmlComponent from '../abstract/html-component';\nimport * as CssConst from './css-const';\nimport HtmlTheme from './html-theme';\nvar HtmlCrosshair = /** @class */function (_super) {\n  __extends(HtmlCrosshair, _super);\n  function HtmlCrosshair() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  HtmlCrosshair.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'crosshair',\n      type: 'html',\n      locationType: 'region',\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: 0,\n        y: 0\n      },\n      capture: false,\n      text: null,\n      containerTpl: \"<div class=\\\"\" + CssConst.CONTAINER_CLASS + \"\\\"></div>\",\n      crosshairTpl: \"<div class=\\\"\" + CssConst.CROSSHAIR_LINE + \"\\\"></div>\",\n      textTpl: \"<span class=\\\"\" + CssConst.CROSSHAIR_TEXT + \"\\\">{content}</span>\",\n      domStyles: null,\n      containerClassName: CssConst.CONTAINER_CLASS,\n      defaultStyles: HtmlTheme,\n      defaultCfg: {\n        text: {\n          position: 'start',\n          content: null,\n          align: 'center',\n          offset: 10\n        }\n      }\n    });\n  };\n  HtmlCrosshair.prototype.render = function () {\n    this.resetText();\n    this.resetPosition();\n  };\n  // 绘制 crosshair\n  HtmlCrosshair.prototype.initCrossHair = function () {\n    var container = this.getContainer();\n    var crosshairTpl = this.get('crosshairTpl');\n    var crosshairEl = createDom(crosshairTpl);\n    container.appendChild(crosshairEl);\n    this.applyStyle(CssConst.CROSSHAIR_LINE, crosshairEl);\n    this.set('crosshairEl', crosshairEl);\n  };\n  // 获取文本的位置\n  HtmlCrosshair.prototype.getTextPoint = function () {\n    var _a = this.getLocation(),\n      start = _a.start,\n      end = _a.end;\n    var _b = this.get('text'),\n      position = _b.position,\n      offset = _b.offset;\n    return getTextPoint(start, end, position, offset);\n  };\n  // 设置 text\n  HtmlCrosshair.prototype.resetText = function () {\n    var text = this.get('text');\n    var textEl = this.get('textEl');\n    if (text) {\n      var content = text.content;\n      if (!textEl) {\n        var container = this.getContainer();\n        var textTpl = substitute(this.get('textTpl'), text);\n        textEl = createDom(textTpl);\n        container.appendChild(textEl);\n        this.applyStyle(CssConst.CROSSHAIR_TEXT, textEl);\n        this.set('textEl', textEl);\n      }\n      textEl.innerHTML = content;\n    } else if (textEl) {\n      textEl.remove();\n    }\n  };\n  // 是否垂直\n  HtmlCrosshair.prototype.isVertical = function (start, end) {\n    return start.x === end.x;\n  };\n  // 重新调整位置\n  HtmlCrosshair.prototype.resetPosition = function () {\n    var crosshairEl = this.get('crosshairEl');\n    if (!crosshairEl) {\n      this.initCrossHair();\n      crosshairEl = this.get('crosshairEl');\n    }\n    var start = this.get('start');\n    var end = this.get('end');\n    var minX = Math.min(start.x, end.x);\n    var minY = Math.min(start.y, end.y);\n    if (this.isVertical(start, end)) {\n      modifyCSS(crosshairEl, {\n        width: '1px',\n        height: toPx(Math.abs(end.y - start.y))\n      });\n    } else {\n      modifyCSS(crosshairEl, {\n        height: '1px',\n        width: toPx(Math.abs(end.x - start.x))\n      });\n    }\n    modifyCSS(crosshairEl, {\n      top: toPx(minY),\n      left: toPx(minX)\n    });\n    this.alignText();\n  };\n  HtmlCrosshair.prototype.alignText = function () {\n    // 重新设置 text 位置\n    var textEl = this.get('textEl');\n    if (textEl) {\n      var align = this.get('text').align;\n      var clientWidth = textEl.clientWidth;\n      var point = this.getTextPoint();\n      switch (align) {\n        case 'center':\n          point.x = point.x - clientWidth / 2;\n          break;\n        case 'right':\n          point.x = point.x - clientWidth;\n        case 'left':\n          break;\n      }\n      modifyCSS(textEl, {\n        top: toPx(point.y),\n        left: toPx(point.x)\n      });\n    }\n  };\n  HtmlCrosshair.prototype.updateInner = function (cfg) {\n    if (hasKey(cfg, 'text')) {\n      this.resetText();\n    }\n    _super.prototype.updateInner.call(this, cfg);\n  };\n  return HtmlCrosshair;\n}(HtmlComponent);\nexport default HtmlCrosshair;","map":null,"metadata":{},"sourceType":"module"}