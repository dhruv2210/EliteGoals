{"ast":null,"code":"import { map, memoize, isString, each } from '@antv/util';\nvar RGB_REG = /rgba?\\(([\\s.,0-9]+)\\)/;\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\nvar isGradientColor = function isGradientColor(val) {\n  return /^[r,R,L,l]{1}[\\s]*\\(/.test(val);\n};\n// 创建辅助 tag 取颜色\nvar createTmp = function createTmp() {\n  var i = document.createElement('i');\n  i.title = 'Web Colour Picker';\n  i.style.display = 'none';\n  document.body.appendChild(i);\n  return i;\n};\n// 获取颜色之间的插值\nvar getValue = function getValue(start, end, percent, index) {\n  return start[index] + (end[index] - start[index]) * percent;\n};\n// 数组转换成颜色\nfunction arr2rgb(arr) {\n  return \"#\" + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);\n}\n// rgb 颜色转换成数组\nvar rgb2arr = function rgb2arr(str) {\n  return [parseInt(str.substr(1, 2), 16), parseInt(str.substr(3, 2), 16), parseInt(str.substr(5, 2), 16)];\n};\n// 将数值从 0-255 转换成16进制字符串\nvar toHex = function toHex(value) {\n  var x16Value = Math.round(value).toString(16);\n  return x16Value.length === 1 ? \"0\" + x16Value : x16Value;\n};\n// 计算颜色\nvar calColor = function calColor(points, percent) {\n  var fixedPercent = isNaN(Number(percent)) || percent < 0 ? 0 : percent > 1 ? 1 : Number(percent);\n  var steps = points.length - 1;\n  var step = Math.floor(steps * fixedPercent);\n  var left = steps * fixedPercent - step;\n  var start = points[step];\n  var end = step === steps ? start : points[step + 1];\n  return arr2rgb([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);\n};\n// 用于给 toRGB 的缓存（使用 memoize 方法替换）\n// const colorCache = {};\nvar iEl;\n/**\n * 将颜色转换到 rgb 的格式\n * @param {color} color 颜色\n * @return 将颜色转换到 '#ffffff' 的格式\n */\nvar toRGB = function toRGB(color) {\n  // 如果已经是 rgb的格式\n  if (color[0] === '#' && color.length === 7) {\n    return color;\n  }\n  if (!iEl) {\n    // 防止防止在页头报错\n    iEl = createTmp();\n  }\n  iEl.style.color = color;\n  var rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');\n  var matches = RGB_REG.exec(rst);\n  var cArray = matches[1].split(/\\s*,\\s*/).map(function (s) {\n    return Number(s);\n  });\n  rst = arr2rgb(cArray);\n  return rst;\n};\n/**\n * 获取渐变函数\n * @param colors 多个颜色\n * @return 颜色值\n */\nvar gradient = function gradient(colors) {\n  var colorArray = isString(colors) ? colors.split('-') : colors;\n  var points = map(colorArray, function (color) {\n    return rgb2arr(color.indexOf('#') === -1 ? toRGB(color) : color);\n  });\n  // 返回一个函数\n  return function (percent) {\n    return calColor(points, percent);\n  };\n};\nvar toCSSGradient = function toCSSGradient(gradientColor) {\n  if (isGradientColor(gradientColor)) {\n    var cssColor_1;\n    var steps = void 0;\n    if (gradientColor[0] === 'l') {\n      // 线性渐变\n      var arr = regexLG.exec(gradientColor);\n      var angle = +arr[1] + 90; // css 和 g 的渐变起始角度不同\n      steps = arr[2];\n      cssColor_1 = \"linear-gradient(\" + angle + \"deg, \";\n    } else if (gradientColor[0] === 'r') {\n      // 径向渐变\n      cssColor_1 = 'radial-gradient(';\n      var arr = regexRG.exec(gradientColor);\n      steps = arr[4];\n    }\n    var colorStops_1 = steps.match(regexColorStop);\n    each(colorStops_1, function (item, index) {\n      var itemArr = item.split(':');\n      cssColor_1 += itemArr[1] + \" \" + itemArr[0] * 100 + \"%\";\n      if (index !== colorStops_1.length - 1) {\n        cssColor_1 += ', ';\n      }\n    });\n    cssColor_1 += ')';\n    return cssColor_1;\n  }\n  return gradientColor;\n};\nexport default {\n  rgb2arr: rgb2arr,\n  gradient: gradient,\n  toRGB: memoize(toRGB),\n  toCSSGradient: toCSSGradient\n};","map":null,"metadata":{},"sourceType":"module"}