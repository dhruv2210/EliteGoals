{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { filter, get, isNumber } from '@antv/util';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\nexport function adjustYMetaByZero(data, field) {\n  if (!data) return {};\n  // 过滤出数字数据\n  var numberData = data.filter(function (datum) {\n    var v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n  var gtZero = numberData.every(function (datum) {\n    return get(datum, [field]) >= 0;\n  });\n  var ltZero = numberData.every(function (datum) {\n    return get(datum, [field]) <= 0;\n  });\n  // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n  if (gtZero) {\n    return {\n      min: 0\n    };\n  }\n  if (ltZero) {\n    return {\n      max: 0\n    };\n  }\n  return {};\n}\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\nexport function transformDataToNodeLinkData(data, sourceField, targetField, weightField, rawFields) {\n  if (rawFields === void 0) {\n    rawFields = [];\n  }\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: []\n    };\n  }\n  //   const nodes = [];\n  var links = [];\n  // 先使用对象方式存储\n  var nodesMap = {};\n  var nodesIndex = -1;\n  // 数组变换成 chord layout 的数据结构\n  data.forEach(function (datum) {\n    var source = datum[sourceField];\n    var target = datum[targetField];\n    var weight = datum[weightField];\n    var rawData = pick(datum, rawFields);\n    // source node\n    if (!nodesMap[source]) {\n      nodesMap[source] = __assign({\n        id: ++nodesIndex,\n        name: source\n      }, rawData);\n    }\n    if (!nodesMap[target]) {\n      nodesMap[target] = __assign({\n        id: ++nodesIndex,\n        name: target\n      }, rawData);\n    }\n    // links\n    links.push(__assign({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight\n    }, rawData));\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort(function (a, b) {\n      return a.id - b.id;\n    }),\n    links: links\n  };\n}\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\nexport function processIllegalData(data, field) {\n  var processData = filter(data, function (d) {\n    var v = d[field];\n    return v === null || typeof v === 'number' && !isNaN(v);\n  });\n  // 打印异常数据情况\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n  return processData;\n}","map":null,"metadata":{},"sourceType":"module"}