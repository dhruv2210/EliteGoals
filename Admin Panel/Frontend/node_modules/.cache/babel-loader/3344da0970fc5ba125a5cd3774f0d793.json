{"ast":null,"code":"/**\n * 获取设备像素比\n */\nexport function getPixelRatio() {\n  return typeof window === 'object' ? window === null || window === void 0 ? void 0 : window.devicePixelRatio : 2;\n}\n/**\n * 初始化 cavnas，设置宽高等\n */\nexport function initCanvas(width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n  var canvas = document.createElement('canvas');\n  var pixelRatio = getPixelRatio();\n  // 画布尺寸\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio;\n  // 显示尺寸\n  canvas.style.width = width + \"px\";\n  canvas.style.height = height + \"px\";\n  var ctx = canvas.getContext('2d');\n  ctx.scale(pixelRatio, pixelRatio);\n  return canvas;\n}\n/**\n * 绘制背景\n *\n * @param context\n * @param cfg\n * @param width\n * @param height\n */\nexport function drawBackground(context, cfg, width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n  var backgroundColor = cfg.backgroundColor,\n    opacity = cfg.opacity;\n  context.globalAlpha = opacity;\n  context.fillStyle = backgroundColor;\n  context.beginPath();\n  context.fillRect(0, 0, width, height);\n  context.closePath();\n}\n/**\n * 计算贴图单元大小\n *\n * @param size 元素大小\n * @param padding 圆点间隔\n * @param isStagger 是否交错\n * @reutrn 返回贴图单元大小\n */\nexport function getUnitPatternSize(size, padding, isStagger) {\n  // 如果交错, unitSize 放大两倍\n  var unitSize = size + padding;\n  return isStagger ? unitSize * 2 : unitSize;\n}\n/**\n * 计算有交错情况的元素坐标\n *\n * @param unitSize 贴图单元大小\n * @param isStagger 是否交错\n * @reutrn 元素中心坐标 x,y 数组集合\n */\nexport function getSymbolsPosition(unitSize, isStagger) {\n  // 如果交错, 交错绘制 dot\n  var symbolsPos = isStagger ? [[unitSize * (1 / 4), unitSize * (1 / 4)], [unitSize * (3 / 4), unitSize * (3 / 4)]] : [[unitSize * (1 / 2), unitSize * (1 / 2)]];\n  return symbolsPos;\n}\n/**\n * 给整个 pattern贴图 做变换, 目前支持旋转\n *\n * @param pattern 整个贴图\n * @param dpr  设备像素比\n * @param rotation 旋转角度\n */\nexport function transformMatrix(dpr, rotation) {\n  var radian = rotation * Math.PI / 180;\n  var matrix = {\n    a: Math.cos(radian) * (1 / dpr),\n    b: Math.sin(radian) * (1 / dpr),\n    c: -Math.sin(radian) * (1 / dpr),\n    d: Math.cos(radian) * (1 / dpr),\n    e: 0,\n    f: 0\n  };\n  return matrix;\n}","map":null,"metadata":{},"sourceType":"module"}