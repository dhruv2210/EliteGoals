{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nvar ListHighlight = /** @class */function (_super) {\n  __extends(ListHighlight, _super);\n  function ListHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_ACTIVE;\n    _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n    return _this;\n  }\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  ListHighlight.prototype.setItemsState = function (list, name, enable) {\n    this.setHighlightBy(list, function (item) {\n      return item.name === name;\n    }, enable);\n  };\n  // 单个 item 设置状态\n  ListHighlight.prototype.setItemState = function (list, item, enable) {\n    var items = list.getItems();\n    this.setHighlightBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 highlight\n  ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      var activeItems = list.getItemsByState(STATUS_ACTIVE);\n      var allCancel_1 = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, function (item) {\n        if (!callback(item)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n      if (allCancel_1) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, function (item) {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  ListHighlight.prototype.highlight = function () {\n    this.setState();\n  };\n  // 需要全部清理 active 和 unactive\n  ListHighlight.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  };\n  return ListHighlight;\n}(ListState);\nexport default ListHighlight;","map":null,"metadata":{},"sourceType":"module"}