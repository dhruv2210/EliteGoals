{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { TOOLTIP_CSS_CONST } from '@antv/component';\nimport { ext } from '@antv/matrix-util';\nimport { deepMix } from '@antv/util';\nimport { getAngle } from '../../util/graphics';\n/**\n * 根据样式表创建 axis 组件主题样式\n * @param styleSheet\n */\nfunction createAxisStyles(styleSheet) {\n  return {\n    title: {\n      autoRotate: true,\n      position: 'center',\n      spacing: styleSheet.axisTitleSpacing,\n      style: {\n        fill: styleSheet.axisTitleTextFillColor,\n        fontSize: styleSheet.axisTitleTextFontSize,\n        lineHeight: styleSheet.axisTitleTextLineHeight,\n        textBaseline: 'middle',\n        fontFamily: styleSheet.fontFamily\n      },\n      iconStyle: {\n        fill: styleSheet.axisDescriptionIconFillColor\n      }\n    },\n    label: {\n      autoRotate: false,\n      autoEllipsis: false,\n      autoHide: {\n        type: 'equidistance',\n        cfg: {\n          minGap: 6\n        }\n      },\n      offset: styleSheet.axisLabelOffset,\n      style: {\n        fill: styleSheet.axisLabelFillColor,\n        fontSize: styleSheet.axisLabelFontSize,\n        lineHeight: styleSheet.axisLabelLineHeight,\n        fontFamily: styleSheet.fontFamily\n      }\n    },\n    line: {\n      style: {\n        lineWidth: styleSheet.axisLineBorder,\n        stroke: styleSheet.axisLineBorderColor\n      }\n    },\n    grid: {\n      line: {\n        type: 'line',\n        style: {\n          stroke: styleSheet.axisGridBorderColor,\n          lineWidth: styleSheet.axisGridBorder,\n          lineDash: styleSheet.axisGridLineDash\n        }\n      },\n      alignTick: true,\n      animate: true\n    },\n    tickLine: {\n      style: {\n        lineWidth: styleSheet.axisTickLineBorder,\n        stroke: styleSheet.axisTickLineBorderColor\n      },\n      alignTick: true,\n      length: styleSheet.axisTickLineLength\n    },\n    subTickLine: null,\n    animate: true\n  };\n}\n/**\n *\n * @param styleSheet\n */\n// export function\n/**\n * 根据样式表创建 legend 组件主题样式\n * @param styleSheet\n */\nfunction createLegendStyles(styleSheet) {\n  return {\n    title: null,\n    marker: {\n      symbol: 'circle',\n      spacing: styleSheet.legendMarkerSpacing,\n      style: {\n        r: styleSheet.legendCircleMarkerSize,\n        fill: styleSheet.legendMarkerColor\n      }\n    },\n    itemName: {\n      spacing: 5,\n      style: {\n        fill: styleSheet.legendItemNameFillColor,\n        fontFamily: styleSheet.fontFamily,\n        fontSize: styleSheet.legendItemNameFontSize,\n        lineHeight: styleSheet.legendItemNameLineHeight,\n        fontWeight: styleSheet.legendItemNameFontWeight,\n        textAlign: 'start',\n        textBaseline: 'middle'\n      }\n    },\n    itemStates: {\n      active: {\n        nameStyle: {\n          opacity: 0.8\n        }\n      },\n      unchecked: {\n        nameStyle: {\n          fill: '#D8D8D8'\n        },\n        markerStyle: {\n          fill: '#D8D8D8',\n          stroke: '#D8D8D8'\n        }\n      },\n      inactive: {\n        nameStyle: {\n          fill: '#D8D8D8'\n        },\n        markerStyle: {\n          opacity: 0.2\n        }\n      }\n    },\n    flipPage: true,\n    pageNavigator: {\n      marker: {\n        style: {\n          size: styleSheet.legendPageNavigatorMarkerSize,\n          inactiveFill: styleSheet.legendPageNavigatorMarkerInactiveFillColor,\n          inactiveOpacity: styleSheet.legendPageNavigatorMarkerInactiveFillOpacity,\n          fill: styleSheet.legendPageNavigatorMarkerFillColor,\n          opacity: styleSheet.legendPageNavigatorMarkerFillOpacity\n        }\n      },\n      text: {\n        style: {\n          fill: styleSheet.legendPageNavigatorTextFillColor,\n          fontSize: styleSheet.legendPageNavigatorTextFontSize\n        }\n      }\n    },\n    animate: false,\n    maxItemWidth: 200,\n    itemSpacing: styleSheet.legendItemSpacing,\n    itemMarginBottom: styleSheet.legendItemMarginBottom,\n    padding: styleSheet.legendPadding // 图例组件自己的外边距\n  };\n}\n/**\n * 根据主题样式表生成主题结构\n * @param styleSheet 主题样式表\n */\nexport function createThemeByStyleSheet(styleSheet) {\n  var _a;\n  var shapeStyles = {\n    point: {\n      default: {\n        fill: styleSheet.pointFillColor,\n        r: styleSheet.pointSize,\n        stroke: styleSheet.pointBorderColor,\n        lineWidth: styleSheet.pointBorder,\n        fillOpacity: styleSheet.pointFillOpacity\n      },\n      active: {\n        stroke: styleSheet.pointActiveBorderColor,\n        lineWidth: styleSheet.pointActiveBorder\n      },\n      selected: {\n        stroke: styleSheet.pointSelectedBorderColor,\n        lineWidth: styleSheet.pointSelectedBorder\n      },\n      inactive: {\n        fillOpacity: styleSheet.pointInactiveFillOpacity,\n        strokeOpacity: styleSheet.pointInactiveBorderOpacity\n      }\n    },\n    hollowPoint: {\n      default: {\n        fill: styleSheet.hollowPointFillColor,\n        lineWidth: styleSheet.hollowPointBorder,\n        stroke: styleSheet.hollowPointBorderColor,\n        strokeOpacity: styleSheet.hollowPointBorderOpacity,\n        r: styleSheet.hollowPointSize\n      },\n      active: {\n        stroke: styleSheet.hollowPointActiveBorderColor,\n        strokeOpacity: styleSheet.hollowPointActiveBorderOpacity\n      },\n      selected: {\n        lineWidth: styleSheet.hollowPointSelectedBorder,\n        stroke: styleSheet.hollowPointSelectedBorderColor,\n        strokeOpacity: styleSheet.hollowPointSelectedBorderOpacity\n      },\n      inactive: {\n        strokeOpacity: styleSheet.hollowPointInactiveBorderOpacity\n      }\n    },\n    area: {\n      default: {\n        fill: styleSheet.areaFillColor,\n        fillOpacity: styleSheet.areaFillOpacity,\n        stroke: null\n      },\n      active: {\n        fillOpacity: styleSheet.areaActiveFillOpacity\n      },\n      selected: {\n        fillOpacity: styleSheet.areaSelectedFillOpacity\n      },\n      inactive: {\n        fillOpacity: styleSheet.areaInactiveFillOpacity\n      }\n    },\n    hollowArea: {\n      default: {\n        fill: null,\n        stroke: styleSheet.hollowAreaBorderColor,\n        lineWidth: styleSheet.hollowAreaBorder,\n        strokeOpacity: styleSheet.hollowAreaBorderOpacity\n      },\n      active: {\n        fill: null,\n        lineWidth: styleSheet.hollowAreaActiveBorder\n      },\n      selected: {\n        fill: null,\n        lineWidth: styleSheet.hollowAreaSelectedBorder\n      },\n      inactive: {\n        strokeOpacity: styleSheet.hollowAreaInactiveBorderOpacity\n      }\n    },\n    interval: {\n      default: {\n        fill: styleSheet.intervalFillColor,\n        fillOpacity: styleSheet.intervalFillOpacity\n      },\n      active: {\n        stroke: styleSheet.intervalActiveBorderColor,\n        lineWidth: styleSheet.intervalActiveBorder\n      },\n      selected: {\n        stroke: styleSheet.intervalSelectedBorderColor,\n        lineWidth: styleSheet.intervalSelectedBorder\n      },\n      inactive: {\n        fillOpacity: styleSheet.intervalInactiveFillOpacity,\n        strokeOpacity: styleSheet.intervalInactiveBorderOpacity\n      }\n    },\n    hollowInterval: {\n      default: {\n        fill: styleSheet.hollowIntervalFillColor,\n        stroke: styleSheet.hollowIntervalBorderColor,\n        lineWidth: styleSheet.hollowIntervalBorder,\n        strokeOpacity: styleSheet.hollowIntervalBorderOpacity\n      },\n      active: {\n        stroke: styleSheet.hollowIntervalActiveBorderColor,\n        lineWidth: styleSheet.hollowIntervalActiveBorder,\n        strokeOpacity: styleSheet.hollowIntervalActiveBorderOpacity\n      },\n      selected: {\n        stroke: styleSheet.hollowIntervalSelectedBorderColor,\n        lineWidth: styleSheet.hollowIntervalSelectedBorder,\n        strokeOpacity: styleSheet.hollowIntervalSelectedBorderOpacity\n      },\n      inactive: {\n        stroke: styleSheet.hollowIntervalInactiveBorderColor,\n        lineWidth: styleSheet.hollowIntervalInactiveBorder,\n        strokeOpacity: styleSheet.hollowIntervalInactiveBorderOpacity\n      }\n    },\n    line: {\n      default: {\n        stroke: styleSheet.lineBorderColor,\n        lineWidth: styleSheet.lineBorder,\n        strokeOpacity: styleSheet.lineBorderOpacity,\n        fill: null,\n        lineAppendWidth: 10,\n        lineCap: 'round',\n        lineJoin: 'round'\n      },\n      active: {\n        lineWidth: styleSheet.lineActiveBorder\n      },\n      selected: {\n        lineWidth: styleSheet.lineSelectedBorder\n      },\n      inactive: {\n        strokeOpacity: styleSheet.lineInactiveBorderOpacity\n      }\n    }\n  };\n  var axisStyles = createAxisStyles(styleSheet);\n  var legendStyles = createLegendStyles(styleSheet);\n  return {\n    background: styleSheet.backgroundColor,\n    defaultColor: styleSheet.brandColor,\n    subColor: styleSheet.subColor,\n    semanticRed: styleSheet.paletteSemanticRed,\n    semanticGreen: styleSheet.paletteSemanticGreen,\n    padding: 'auto',\n    fontFamily: styleSheet.fontFamily,\n    // 兼容Theme配置\n    /** 一般柱状图宽度占比，geometry中已添加默认值，为了geometry配置生效默认值为null */\n    columnWidthRatio: 1 / 2,\n    /** 柱状图最大宽度 */\n    maxColumnWidth: null,\n    /** 柱状图最小宽度 */\n    minColumnWidth: null,\n    /** 玫瑰图占比 */\n    roseWidthRatio: 0.9999999,\n    /** 多层饼图/环图占比 */\n    multiplePieWidthRatio: 1 / 1.3,\n    colors10: styleSheet.paletteQualitative10,\n    colors20: styleSheet.paletteQualitative20,\n    sequenceColors: styleSheet.paletteSequence,\n    shapes: {\n      point: ['hollow-circle', 'hollow-square', 'hollow-bowtie', 'hollow-diamond', 'hollow-hexagon', 'hollow-triangle', 'hollow-triangle-down', 'circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down', 'cross', 'tick', 'plus', 'hyphen', 'line'],\n      line: ['line', 'dash', 'dot', 'smooth'],\n      area: ['area', 'smooth', 'line', 'smooth-line'],\n      interval: ['rect', 'hollow-rect', 'line', 'tick']\n    },\n    sizes: [1, 10],\n    geometries: {\n      interval: {\n        rect: {\n          default: {\n            style: shapeStyles.interval.default\n          },\n          active: {\n            style: shapeStyles.interval.active\n          },\n          inactive: {\n            style: shapeStyles.interval.inactive\n          },\n          selected: {\n            style: function style(element) {\n              var coordinate = element.geometry.coordinate;\n              if (coordinate.isPolar && coordinate.isTransposed) {\n                var _a = getAngle(element.getModel(), coordinate),\n                  startAngle = _a.startAngle,\n                  endAngle = _a.endAngle;\n                var middleAngle = (startAngle + endAngle) / 2;\n                var r = 7.5;\n                var x = r * Math.cos(middleAngle);\n                var y = r * Math.sin(middleAngle);\n                return {\n                  matrix: ext.transform(null, [['t', x, y]])\n                };\n              }\n              return shapeStyles.interval.selected;\n            }\n          }\n        },\n        'hollow-rect': {\n          default: {\n            style: shapeStyles.hollowInterval.default\n          },\n          active: {\n            style: shapeStyles.hollowInterval.active\n          },\n          inactive: {\n            style: shapeStyles.hollowInterval.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowInterval.selected\n          }\n        },\n        line: {\n          default: {\n            style: shapeStyles.hollowInterval.default\n          },\n          active: {\n            style: shapeStyles.hollowInterval.active\n          },\n          inactive: {\n            style: shapeStyles.hollowInterval.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowInterval.selected\n          }\n        },\n        tick: {\n          default: {\n            style: shapeStyles.hollowInterval.default\n          },\n          active: {\n            style: shapeStyles.hollowInterval.active\n          },\n          inactive: {\n            style: shapeStyles.hollowInterval.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowInterval.selected\n          }\n        },\n        funnel: {\n          default: {\n            style: shapeStyles.interval.default\n          },\n          active: {\n            style: shapeStyles.interval.active\n          },\n          inactive: {\n            style: shapeStyles.interval.inactive\n          },\n          selected: {\n            style: shapeStyles.interval.selected\n          }\n        },\n        pyramid: {\n          default: {\n            style: shapeStyles.interval.default\n          },\n          active: {\n            style: shapeStyles.interval.active\n          },\n          inactive: {\n            style: shapeStyles.interval.inactive\n          },\n          selected: {\n            style: shapeStyles.interval.selected\n          }\n        }\n      },\n      line: {\n        line: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        dot: {\n          default: {\n            style: __assign(__assign({}, shapeStyles.line.default), {\n              lineCap: null,\n              lineDash: [1, 1]\n            })\n          },\n          active: {\n            style: __assign(__assign({}, shapeStyles.line.active), {\n              lineCap: null,\n              lineDash: [1, 1]\n            })\n          },\n          inactive: {\n            style: __assign(__assign({}, shapeStyles.line.inactive), {\n              lineCap: null,\n              lineDash: [1, 1]\n            })\n          },\n          selected: {\n            style: __assign(__assign({}, shapeStyles.line.selected), {\n              lineCap: null,\n              lineDash: [1, 1]\n            })\n          }\n        },\n        dash: {\n          default: {\n            style: __assign(__assign({}, shapeStyles.line.default), {\n              lineCap: null,\n              lineDash: [5.5, 1]\n            })\n          },\n          active: {\n            style: __assign(__assign({}, shapeStyles.line.active), {\n              lineCap: null,\n              lineDash: [5.5, 1]\n            })\n          },\n          inactive: {\n            style: __assign(__assign({}, shapeStyles.line.inactive), {\n              lineCap: null,\n              lineDash: [5.5, 1]\n            })\n          },\n          selected: {\n            style: __assign(__assign({}, shapeStyles.line.selected), {\n              lineCap: null,\n              lineDash: [5.5, 1]\n            })\n          }\n        },\n        smooth: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        hv: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        vh: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        hvh: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        vhv: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        }\n      },\n      polygon: {\n        polygon: {\n          default: {\n            style: shapeStyles.interval.default\n          },\n          active: {\n            style: shapeStyles.interval.active\n          },\n          inactive: {\n            style: shapeStyles.interval.inactive\n          },\n          selected: {\n            style: shapeStyles.interval.selected\n          }\n        }\n      },\n      point: {\n        circle: {\n          default: {\n            style: shapeStyles.point.default\n          },\n          active: {\n            style: shapeStyles.point.active\n          },\n          inactive: {\n            style: shapeStyles.point.inactive\n          },\n          selected: {\n            style: shapeStyles.point.selected\n          }\n        },\n        square: {\n          default: {\n            style: shapeStyles.point.default\n          },\n          active: {\n            style: shapeStyles.point.active\n          },\n          inactive: {\n            style: shapeStyles.point.inactive\n          },\n          selected: {\n            style: shapeStyles.point.selected\n          }\n        },\n        bowtie: {\n          default: {\n            style: shapeStyles.point.default\n          },\n          active: {\n            style: shapeStyles.point.active\n          },\n          inactive: {\n            style: shapeStyles.point.inactive\n          },\n          selected: {\n            style: shapeStyles.point.selected\n          }\n        },\n        diamond: {\n          default: {\n            style: shapeStyles.point.default\n          },\n          active: {\n            style: shapeStyles.point.active\n          },\n          inactive: {\n            style: shapeStyles.point.inactive\n          },\n          selected: {\n            style: shapeStyles.point.selected\n          }\n        },\n        hexagon: {\n          default: {\n            style: shapeStyles.point.default\n          },\n          active: {\n            style: shapeStyles.point.active\n          },\n          inactive: {\n            style: shapeStyles.point.inactive\n          },\n          selected: {\n            style: shapeStyles.point.selected\n          }\n        },\n        triangle: {\n          default: {\n            style: shapeStyles.point.default\n          },\n          active: {\n            style: shapeStyles.point.active\n          },\n          inactive: {\n            style: shapeStyles.point.inactive\n          },\n          selected: {\n            style: shapeStyles.point.selected\n          }\n        },\n        'triangle-down': {\n          default: {\n            style: shapeStyles.point.default\n          },\n          active: {\n            style: shapeStyles.point.active\n          },\n          inactive: {\n            style: shapeStyles.point.inactive\n          },\n          selected: {\n            style: shapeStyles.point.selected\n          }\n        },\n        'hollow-circle': {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        'hollow-square': {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        'hollow-bowtie': {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        'hollow-diamond': {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        'hollow-hexagon': {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        'hollow-triangle': {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        'hollow-triangle-down': {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        cross: {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        tick: {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        plus: {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        hyphen: {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        },\n        line: {\n          default: {\n            style: shapeStyles.hollowPoint.default\n          },\n          active: {\n            style: shapeStyles.hollowPoint.active\n          },\n          inactive: {\n            style: shapeStyles.hollowPoint.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowPoint.selected\n          }\n        }\n      },\n      area: {\n        area: {\n          default: {\n            style: shapeStyles.area.default\n          },\n          active: {\n            style: shapeStyles.area.active\n          },\n          inactive: {\n            style: shapeStyles.area.inactive\n          },\n          selected: {\n            style: shapeStyles.area.selected\n          }\n        },\n        smooth: {\n          default: {\n            style: shapeStyles.area.default\n          },\n          active: {\n            style: shapeStyles.area.active\n          },\n          inactive: {\n            style: shapeStyles.area.inactive\n          },\n          selected: {\n            style: shapeStyles.area.selected\n          }\n        },\n        line: {\n          default: {\n            style: shapeStyles.hollowArea.default\n          },\n          active: {\n            style: shapeStyles.hollowArea.active\n          },\n          inactive: {\n            style: shapeStyles.hollowArea.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowArea.selected\n          }\n        },\n        'smooth-line': {\n          default: {\n            style: shapeStyles.hollowArea.default\n          },\n          active: {\n            style: shapeStyles.hollowArea.active\n          },\n          inactive: {\n            style: shapeStyles.hollowArea.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowArea.selected\n          }\n        }\n      },\n      schema: {\n        candle: {\n          default: {\n            style: shapeStyles.hollowInterval.default\n          },\n          active: {\n            style: shapeStyles.hollowInterval.active\n          },\n          inactive: {\n            style: shapeStyles.hollowInterval.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowInterval.selected\n          }\n        },\n        box: {\n          default: {\n            style: shapeStyles.hollowInterval.default\n          },\n          active: {\n            style: shapeStyles.hollowInterval.active\n          },\n          inactive: {\n            style: shapeStyles.hollowInterval.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowInterval.selected\n          }\n        }\n      },\n      edge: {\n        line: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        vhv: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        smooth: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        arc: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        }\n      },\n      violin: {\n        violin: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        smooth: {\n          default: {\n            style: shapeStyles.line.default\n          },\n          active: {\n            style: shapeStyles.line.active\n          },\n          inactive: {\n            style: shapeStyles.line.inactive\n          },\n          selected: {\n            style: shapeStyles.line.selected\n          }\n        },\n        hollow: {\n          default: {\n            style: shapeStyles.hollowArea.default\n          },\n          active: {\n            style: shapeStyles.hollowArea.active\n          },\n          inactive: {\n            style: shapeStyles.hollowArea.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowArea.selected\n          }\n        },\n        'hollow-smooth': {\n          default: {\n            style: shapeStyles.hollowArea.default\n          },\n          active: {\n            style: shapeStyles.hollowArea.active\n          },\n          inactive: {\n            style: shapeStyles.hollowArea.inactive\n          },\n          selected: {\n            style: shapeStyles.hollowArea.selected\n          }\n        }\n      }\n    },\n    components: {\n      axis: {\n        common: axisStyles,\n        top: {\n          position: 'top',\n          grid: null,\n          title: null,\n          verticalLimitLength: 1 / 2\n        },\n        bottom: {\n          position: 'bottom',\n          grid: null,\n          title: null,\n          verticalLimitLength: 1 / 2\n        },\n        left: {\n          position: 'left',\n          title: null,\n          line: null,\n          tickLine: null,\n          verticalLimitLength: 1 / 3\n        },\n        right: {\n          position: 'right',\n          title: null,\n          line: null,\n          tickLine: null,\n          verticalLimitLength: 1 / 3\n        },\n        circle: {\n          title: null,\n          grid: deepMix({}, axisStyles.grid, {\n            line: {\n              type: 'line'\n            }\n          })\n        },\n        radius: {\n          title: null,\n          grid: deepMix({}, axisStyles.grid, {\n            line: {\n              type: 'circle'\n            }\n          })\n        }\n      },\n      legend: {\n        common: legendStyles,\n        right: {\n          layout: 'vertical',\n          padding: styleSheet.legendVerticalPadding\n        },\n        left: {\n          layout: 'vertical',\n          padding: styleSheet.legendVerticalPadding\n        },\n        top: {\n          layout: 'horizontal',\n          padding: styleSheet.legendHorizontalPadding\n        },\n        bottom: {\n          layout: 'horizontal',\n          padding: styleSheet.legendHorizontalPadding\n        },\n        continuous: {\n          title: null,\n          background: null,\n          track: {},\n          rail: {\n            type: 'color',\n            size: styleSheet.sliderRailHeight,\n            defaultLength: styleSheet.sliderRailWidth,\n            style: {\n              fill: styleSheet.sliderRailFillColor,\n              stroke: styleSheet.sliderRailBorderColor,\n              lineWidth: styleSheet.sliderRailBorder\n            }\n          },\n          label: {\n            align: 'rail',\n            spacing: 4,\n            formatter: null,\n            style: {\n              fill: styleSheet.sliderLabelTextFillColor,\n              fontSize: styleSheet.sliderLabelTextFontSize,\n              lineHeight: styleSheet.sliderLabelTextLineHeight,\n              textBaseline: 'middle',\n              fontFamily: styleSheet.fontFamily\n            }\n          },\n          handler: {\n            size: styleSheet.sliderHandlerWidth,\n            style: {\n              fill: styleSheet.sliderHandlerFillColor,\n              stroke: styleSheet.sliderHandlerBorderColor\n            }\n          },\n          slidable: true,\n          padding: legendStyles.padding\n        }\n      },\n      tooltip: {\n        showContent: true,\n        follow: true,\n        showCrosshairs: false,\n        showMarkers: true,\n        shared: false,\n        enterable: false,\n        position: 'auto',\n        marker: {\n          symbol: 'circle',\n          stroke: '#fff',\n          shadowBlur: 10,\n          shadowOffsetX: 0,\n          shadowOffsetY: 0,\n          shadowColor: 'rgba(0,0,0,0.09)',\n          lineWidth: 2,\n          r: 4\n        },\n        crosshairs: {\n          line: {\n            style: {\n              stroke: styleSheet.tooltipCrosshairsBorderColor,\n              lineWidth: styleSheet.tooltipCrosshairsBorder\n            }\n          },\n          text: null,\n          textBackground: {\n            padding: 2,\n            style: {\n              fill: 'rgba(0, 0, 0, 0.25)',\n              lineWidth: 0,\n              stroke: null\n            }\n          },\n          follow: false\n        },\n        // tooltip dom 样式\n        domStyles: (_a = {}, _a[\"\".concat(TOOLTIP_CSS_CONST.CONTAINER_CLASS)] = {\n          position: 'absolute',\n          visibility: 'hidden',\n          zIndex: 8,\n          transition: 'left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s',\n          backgroundColor: styleSheet.tooltipContainerFillColor,\n          opacity: styleSheet.tooltipContainerFillOpacity,\n          boxShadow: styleSheet.tooltipContainerShadow,\n          borderRadius: \"\".concat(styleSheet.tooltipContainerBorderRadius, \"px\"),\n          color: styleSheet.tooltipTextFillColor,\n          fontSize: \"\".concat(styleSheet.tooltipTextFontSize, \"px\"),\n          fontFamily: styleSheet.fontFamily,\n          lineHeight: \"\".concat(styleSheet.tooltipTextLineHeight, \"px\"),\n          padding: '0 12px 0 12px'\n        }, _a[\"\".concat(TOOLTIP_CSS_CONST.TITLE_CLASS)] = {\n          marginBottom: '12px',\n          marginTop: '12px'\n        }, _a[\"\".concat(TOOLTIP_CSS_CONST.LIST_CLASS)] = {\n          margin: 0,\n          listStyleType: 'none',\n          padding: 0\n        }, _a[\"\".concat(TOOLTIP_CSS_CONST.LIST_ITEM_CLASS)] = {\n          listStyleType: 'none',\n          padding: 0,\n          marginBottom: '12px',\n          marginTop: '12px',\n          marginLeft: 0,\n          marginRight: 0\n        }, _a[\"\".concat(TOOLTIP_CSS_CONST.MARKER_CLASS)] = {\n          width: '8px',\n          height: '8px',\n          borderRadius: '50%',\n          display: 'inline-block',\n          marginRight: '8px'\n        }, _a[\"\".concat(TOOLTIP_CSS_CONST.VALUE_CLASS)] = {\n          display: 'inline-block',\n          float: 'right',\n          marginLeft: '30px'\n        }, _a)\n      },\n      annotation: {\n        arc: {\n          style: {\n            stroke: styleSheet.annotationArcBorderColor,\n            lineWidth: styleSheet.annotationArcBorder\n          },\n          animate: true\n        },\n        line: {\n          style: {\n            stroke: styleSheet.annotationLineBorderColor,\n            lineDash: styleSheet.annotationLineDash,\n            lineWidth: styleSheet.annotationLineBorder\n          },\n          text: {\n            position: 'start',\n            autoRotate: true,\n            style: {\n              fill: styleSheet.annotationTextFillColor,\n              stroke: styleSheet.annotationTextBorderColor,\n              lineWidth: styleSheet.annotationTextBorder,\n              fontSize: styleSheet.annotationTextFontSize,\n              textAlign: 'start',\n              fontFamily: styleSheet.fontFamily,\n              textBaseline: 'bottom'\n            }\n          },\n          animate: true\n        },\n        text: {\n          style: {\n            fill: styleSheet.annotationTextFillColor,\n            stroke: styleSheet.annotationTextBorderColor,\n            lineWidth: styleSheet.annotationTextBorder,\n            fontSize: styleSheet.annotationTextFontSize,\n            textBaseline: 'middle',\n            textAlign: 'start',\n            fontFamily: styleSheet.fontFamily\n          },\n          animate: true\n        },\n        region: {\n          top: false,\n          style: {\n            lineWidth: styleSheet.annotationRegionBorder,\n            stroke: styleSheet.annotationRegionBorderColor,\n            fill: styleSheet.annotationRegionFillColor,\n            fillOpacity: styleSheet.annotationRegionFillOpacity\n          },\n          animate: true\n        },\n        image: {\n          top: false,\n          animate: true\n        },\n        dataMarker: {\n          top: true,\n          point: {\n            style: {\n              r: 3,\n              stroke: styleSheet.brandColor,\n              lineWidth: 2\n            }\n          },\n          line: {\n            style: {\n              stroke: styleSheet.annotationLineBorderColor,\n              lineWidth: styleSheet.annotationLineBorder\n            },\n            length: styleSheet.annotationDataMarkerLineLength\n          },\n          text: {\n            style: {\n              textAlign: 'start',\n              fill: styleSheet.annotationTextFillColor,\n              stroke: styleSheet.annotationTextBorderColor,\n              lineWidth: styleSheet.annotationTextBorder,\n              fontSize: styleSheet.annotationTextFontSize,\n              fontFamily: styleSheet.fontFamily\n            }\n          },\n          direction: 'upward',\n          autoAdjust: true,\n          animate: true\n        },\n        dataRegion: {\n          style: {\n            region: {\n              fill: styleSheet.annotationRegionFillColor,\n              fillOpacity: styleSheet.annotationRegionFillOpacity\n            },\n            text: {\n              textAlign: 'center',\n              textBaseline: 'bottom',\n              fill: styleSheet.annotationTextFillColor,\n              stroke: styleSheet.annotationTextBorderColor,\n              lineWidth: styleSheet.annotationTextBorder,\n              fontSize: styleSheet.annotationTextFontSize,\n              fontFamily: styleSheet.fontFamily\n            }\n          },\n          animate: true\n        }\n      },\n      slider: {\n        common: {\n          padding: [8, 8, 8, 8],\n          backgroundStyle: {\n            fill: styleSheet.cSliderBackgroundFillColor,\n            opacity: styleSheet.cSliderBackgroundFillOpacity\n          },\n          foregroundStyle: {\n            fill: styleSheet.cSliderForegroundFillColor,\n            opacity: styleSheet.cSliderForegroundFillOpacity\n          },\n          handlerStyle: {\n            width: styleSheet.cSliderHandlerWidth,\n            height: styleSheet.cSliderHandlerHeight,\n            fill: styleSheet.cSliderHandlerFillColor,\n            opacity: styleSheet.cSliderHandlerFillOpacity,\n            stroke: styleSheet.cSliderHandlerBorderColor,\n            lineWidth: styleSheet.cSliderHandlerBorder,\n            radius: styleSheet.cSliderHandlerBorderRadius,\n            // 高亮的颜色\n            highLightFill: styleSheet.cSliderHandlerHighlightFillColor\n          },\n          textStyle: {\n            fill: styleSheet.cSliderTextFillColor,\n            opacity: styleSheet.cSliderTextFillOpacity,\n            fontSize: styleSheet.cSliderTextFontSize,\n            lineHeight: styleSheet.cSliderTextLineHeight,\n            fontWeight: styleSheet.cSliderTextFontWeight,\n            stroke: styleSheet.cSliderTextBorderColor,\n            lineWidth: styleSheet.cSliderTextBorder\n          }\n        }\n      },\n      scrollbar: {\n        common: {\n          padding: [8, 8, 8, 8]\n        },\n        default: {\n          style: {\n            trackColor: styleSheet.scrollbarTrackFillColor,\n            thumbColor: styleSheet.scrollbarThumbFillColor\n          }\n        },\n        hover: {\n          style: {\n            thumbColor: styleSheet.scrollbarThumbHighlightFillColor\n          }\n        }\n      }\n    },\n    labels: {\n      offset: 12,\n      style: {\n        fill: styleSheet.labelFillColor,\n        fontSize: styleSheet.labelFontSize,\n        fontFamily: styleSheet.fontFamily,\n        stroke: styleSheet.labelBorderColor,\n        lineWidth: styleSheet.labelBorder\n      },\n      fillColorDark: styleSheet.labelFillColorDark,\n      fillColorLight: styleSheet.labelFillColorLight,\n      autoRotate: true\n    },\n    innerLabels: {\n      style: {\n        fill: styleSheet.innerLabelFillColor,\n        fontSize: styleSheet.innerLabelFontSize,\n        fontFamily: styleSheet.fontFamily,\n        stroke: styleSheet.innerLabelBorderColor,\n        lineWidth: styleSheet.innerLabelBorder\n      },\n      autoRotate: true\n    },\n    overflowLabels: {\n      style: {\n        fill: styleSheet.overflowLabelFillColor,\n        fontSize: styleSheet.overflowLabelFontSize,\n        fontFamily: styleSheet.fontFamily,\n        stroke: styleSheet.overflowLabelBorderColor,\n        lineWidth: styleSheet.overflowLabelBorder\n      }\n    },\n    pieLabels: {\n      labelHeight: 14,\n      offset: 10,\n      labelLine: {\n        style: {\n          lineWidth: styleSheet.labelLineBorder\n        }\n      },\n      autoRotate: true\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}