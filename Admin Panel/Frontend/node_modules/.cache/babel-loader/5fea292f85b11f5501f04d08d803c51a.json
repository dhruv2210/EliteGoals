{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport shallowEqual from 'shallowequal';\nimport { defaultConfig } from '../../theme/internal';\nexport default function useTheme(theme, parentTheme) {\n  var themeConfig = theme || {};\n  var parentThemeConfig = themeConfig.inherit === false || !parentTheme ? defaultConfig : parentTheme;\n  var mergedTheme = useMemo(function () {\n    if (!theme) {\n      return parentTheme;\n    }\n    // Override\n    var mergedComponents = _extends({}, parentThemeConfig.components);\n    Object.keys(theme.components || {}).forEach(function (componentName) {\n      mergedComponents[componentName] = _extends(_extends({}, mergedComponents[componentName]), theme.components[componentName]);\n    });\n    // Base token\n    return _extends(_extends(_extends({}, parentThemeConfig), themeConfig), {\n      token: _extends(_extends({}, parentThemeConfig.token), themeConfig.token),\n      components: mergedComponents\n    });\n  }, [themeConfig, parentThemeConfig], function (prev, next) {\n    return prev.some(function (prevTheme, index) {\n      var nextTheme = next[index];\n      return !shallowEqual(prevTheme, nextTheme);\n    });\n  });\n  return mergedTheme;\n}","map":null,"metadata":{},"sourceType":"module"}