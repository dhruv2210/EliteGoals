{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { get } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { renderTag } from '../util/graphic';\nimport { applyTranslate } from '../util/matrix';\nimport Theme from '../util/theme';\nvar DataMarkerAnnotation = /** @class */function (_super) {\n  __extends(DataMarkerAnnotation, _super);\n  function DataMarkerAnnotation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  DataMarkerAnnotation.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'annotation',\n      type: 'dataMarker',\n      locationType: 'point',\n      x: 0,\n      y: 0,\n      point: {},\n      line: {},\n      text: {},\n      direction: 'upward',\n      autoAdjust: true,\n      coordinateBBox: null,\n      defaultCfg: {\n        point: {\n          display: true,\n          style: {\n            r: 3,\n            fill: '#FFFFFF',\n            stroke: '#1890FF',\n            lineWidth: 2\n          }\n        },\n        line: {\n          display: true,\n          length: 20,\n          style: {\n            stroke: Theme.lineColor,\n            lineWidth: 1\n          }\n        },\n        text: {\n          content: '',\n          display: true,\n          style: {\n            fill: Theme.textColor,\n            opacity: 0.65,\n            fontSize: 12,\n            textAlign: 'start',\n            fontFamily: Theme.fontFamily\n          }\n        }\n      }\n    });\n  };\n  DataMarkerAnnotation.prototype.renderInner = function (group) {\n    if (get(this.get('line'), 'display')) {\n      this.renderLine(group);\n    }\n    if (get(this.get('text'), 'display')) {\n      this.renderText(group);\n    }\n    if (get(this.get('point'), 'display')) {\n      this.renderPoint(group);\n    }\n    if (this.get('autoAdjust')) {\n      this.autoAdjust(group);\n    }\n  };\n  DataMarkerAnnotation.prototype.applyOffset = function () {\n    this.moveElementTo(this.get('group'), {\n      x: this.get('x') + this.get('offsetX'),\n      y: this.get('y') + this.get('offsetY')\n    });\n  };\n  DataMarkerAnnotation.prototype.renderPoint = function (group) {\n    var point = this.getShapeAttrs().point;\n    this.addShape(group, {\n      type: 'circle',\n      id: this.getElementId('point'),\n      name: 'annotation-point',\n      attrs: point\n    });\n  };\n  DataMarkerAnnotation.prototype.renderLine = function (group) {\n    var line = this.getShapeAttrs().line;\n    this.addShape(group, {\n      type: 'path',\n      id: this.getElementId('line'),\n      name: 'annotation-line',\n      attrs: line\n    });\n  };\n  DataMarkerAnnotation.prototype.renderText = function (group) {\n    var textAttrs = this.getShapeAttrs().text;\n    var x = textAttrs.x,\n      y = textAttrs.y,\n      text = textAttrs.text,\n      style = __rest(textAttrs, [\"x\", \"y\", \"text\"]);\n    var _a = this.get('text'),\n      background = _a.background,\n      maxLength = _a.maxLength,\n      autoEllipsis = _a.autoEllipsis,\n      isVertival = _a.isVertival,\n      ellipsisPosition = _a.ellipsisPosition;\n    var tagCfg = {\n      x: x,\n      y: y,\n      id: this.getElementId('text'),\n      name: 'annotation-text',\n      content: text,\n      style: style,\n      background: background,\n      maxLength: maxLength,\n      autoEllipsis: autoEllipsis,\n      isVertival: isVertival,\n      ellipsisPosition: ellipsisPosition\n    };\n    renderTag(group, tagCfg);\n  };\n  DataMarkerAnnotation.prototype.autoAdjust = function (group) {\n    var direction = this.get('direction');\n    var x = this.get('x');\n    var y = this.get('y');\n    var lineLength = get(this.get('line'), 'length', 0);\n    var coordinateBBox = this.get('coordinateBBox');\n    var _a = group.getBBox(),\n      minX = _a.minX,\n      maxX = _a.maxX,\n      minY = _a.minY,\n      maxY = _a.maxY;\n    var textGroup = group.findById(this.getElementId('text-group'));\n    var textShape = group.findById(this.getElementId('text'));\n    var lineShape = group.findById(this.getElementId('line'));\n    if (!coordinateBBox) {\n      return;\n    }\n    if (textGroup) {\n      if (x + minX <= coordinateBBox.minX) {\n        // 左侧超出\n        var overflow = coordinateBBox.minX - (x + minX);\n        applyTranslate(textGroup, textGroup.attr('x') + overflow, textGroup.attr('y'));\n      }\n      if (x + maxX >= coordinateBBox.maxX) {\n        // 右侧超出\n        var overflow = x + maxX - coordinateBBox.maxX;\n        applyTranslate(textGroup, textGroup.attr('x') - overflow, textGroup.attr('y'));\n      }\n    }\n    if (direction === 'upward' && y + minY <= coordinateBBox.minY || direction !== 'upward' && y + maxY >= coordinateBBox.maxY) {\n      // 上方或者下方超出\n      var textBaseline = void 0;\n      var factor = void 0;\n      if (direction === 'upward' && y + minY <= coordinateBBox.minY) {\n        textBaseline = 'top';\n        factor = 1;\n      } else {\n        textBaseline = 'bottom';\n        factor = -1;\n      }\n      textShape.attr('textBaseline', textBaseline);\n      if (lineShape) {\n        lineShape.attr('path', [['M', 0, 0], ['L', 0, lineLength * factor]]);\n      }\n      applyTranslate(textGroup, textGroup.attr('x'), (lineLength + 2) * factor);\n    }\n  };\n  DataMarkerAnnotation.prototype.getShapeAttrs = function () {\n    var lineDisplay = get(this.get('line'), 'display');\n    var pointStyle = get(this.get('point'), 'style', {});\n    var lineStyle = get(this.get('line'), 'style', {});\n    var textStyle = get(this.get('text'), 'style', {});\n    var direction = this.get('direction');\n    var lineLength = lineDisplay ? get(this.get('line'), 'length', 0) : 0;\n    var factor = direction === 'upward' ? -1 : 1;\n    return {\n      point: __assign({\n        x: 0,\n        y: 0\n      }, pointStyle),\n      line: __assign({\n        path: [['M', 0, 0], ['L', 0, lineLength * factor]]\n      }, lineStyle),\n      text: __assign({\n        x: 0,\n        y: (lineLength + 2) * factor,\n        text: get(this.get('text'), 'content', ''),\n        textBaseline: direction === 'upward' ? 'bottom' : 'top'\n      }, textStyle)\n    };\n  };\n  return DataMarkerAnnotation;\n}(GroupComponent);\nexport default DataMarkerAnnotation;","map":null,"metadata":{},"sourceType":"module"}