{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"src\", \"alt\", \"onClose\", \"afterClose\", \"visible\", \"icons\", \"rootClassName\", \"getContainer\", \"countRender\", \"scaleStep\", \"transitionName\", \"maskTransitionName\"];\nimport * as React from 'react';\nimport Portal from '@rc-component/portal';\nimport Dialog from 'rc-dialog';\nimport CSSMotion from 'rc-motion';\nimport classnames from 'classnames';\nimport addEventListener from \"rc-util/es/Dom/addEventListener\";\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { warning } from \"rc-util/es/warning\";\nimport useFrameSetState from \"./hooks/useFrameSetState\";\nimport getFixScaleEleTransPosition from \"./getFixScaleEleTransPosition\";\nimport { context } from \"./PreviewGroup\";\nvar useState = React.useState,\n  useEffect = React.useEffect,\n  useCallback = React.useCallback,\n  useRef = React.useRef,\n  useContext = React.useContext;\nvar initialPosition = {\n  x: 0,\n  y: 0\n};\nvar Preview = function Preview(props) {\n  var _countRender;\n  var prefixCls = props.prefixCls,\n    src = props.src,\n    alt = props.alt,\n    onClose = props.onClose,\n    afterClose = props.afterClose,\n    visible = props.visible,\n    _props$icons = props.icons,\n    icons = _props$icons === void 0 ? {} : _props$icons,\n    rootClassName = props.rootClassName,\n    getContainer = props.getContainer,\n    countRender = props.countRender,\n    _props$scaleStep = props.scaleStep,\n    scaleStep = _props$scaleStep === void 0 ? 0.5 : _props$scaleStep,\n    _props$transitionName = props.transitionName,\n    transitionName = _props$transitionName === void 0 ? 'zoom' : _props$transitionName,\n    _props$maskTransition = props.maskTransitionName,\n    maskTransitionName = _props$maskTransition === void 0 ? 'fade' : _props$maskTransition,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var rotateLeft = icons.rotateLeft,\n    rotateRight = icons.rotateRight,\n    zoomIn = icons.zoomIn,\n    zoomOut = icons.zoomOut,\n    close = icons.close,\n    left = icons.left,\n    right = icons.right;\n  var _useState = useState(1),\n    _useState2 = _slicedToArray(_useState, 2),\n    scale = _useState2[0],\n    setScale = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    rotate = _useState4[0],\n    setRotate = _useState4[1];\n  var _useFrameSetState = useFrameSetState(initialPosition),\n    _useFrameSetState2 = _slicedToArray(_useFrameSetState, 2),\n    position = _useFrameSetState2[0],\n    setPosition = _useFrameSetState2[1];\n  var imgRef = useRef();\n  var originPositionRef = useRef({\n    originX: 0,\n    originY: 0,\n    deltaX: 0,\n    deltaY: 0\n  });\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isMoving = _useState6[0],\n    setMoving = _useState6[1];\n  var _useContext = useContext(context),\n    previewUrls = _useContext.previewUrls,\n    current = _useContext.current,\n    isPreviewGroup = _useContext.isPreviewGroup,\n    setCurrent = _useContext.setCurrent;\n  var previewGroupCount = previewUrls.size;\n  var previewUrlsKeys = Array.from(previewUrls.keys());\n  var currentPreviewIndex = previewUrlsKeys.indexOf(current);\n  var combinationSrc = isPreviewGroup ? previewUrls.get(current) : src;\n  var showLeftOrRightSwitches = isPreviewGroup && previewGroupCount > 1;\n  var showOperationsProgress = isPreviewGroup && previewGroupCount >= 1;\n  var _useState7 = useState({\n      wheelDirection: 0\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    lastWheelZoomDirection = _useState8[0],\n    setLastWheelZoomDirection = _useState8[1];\n  var onAfterClose = function onAfterClose() {\n    setScale(1);\n    setRotate(0);\n    setPosition(initialPosition);\n  };\n  var onZoomIn = function onZoomIn() {\n    setScale(function (value) {\n      return value + scaleStep;\n    });\n    setPosition(initialPosition);\n  };\n  var onZoomOut = function onZoomOut() {\n    if (scale > 1) {\n      setScale(function (value) {\n        return value - scaleStep;\n      });\n    }\n    setPosition(initialPosition);\n  };\n  var onRotateRight = function onRotateRight() {\n    setRotate(function (value) {\n      return value + 90;\n    });\n  };\n  var onRotateLeft = function onRotateLeft() {\n    setRotate(function (value) {\n      return value - 90;\n    });\n  };\n  var onSwitchLeft = function onSwitchLeft(event) {\n    event.preventDefault(); // Without this mask close will abnormal\n\n    event.stopPropagation();\n    if (currentPreviewIndex > 0) {\n      setCurrent(previewUrlsKeys[currentPreviewIndex - 1]);\n    }\n  };\n  var onSwitchRight = function onSwitchRight(event) {\n    event.preventDefault(); // Without this mask close will abnormal\n\n    event.stopPropagation();\n    if (currentPreviewIndex < previewGroupCount - 1) {\n      setCurrent(previewUrlsKeys[currentPreviewIndex + 1]);\n    }\n  };\n  var wrapClassName = classnames(_defineProperty({}, \"\".concat(prefixCls, \"-moving\"), isMoving));\n  var toolClassName = \"\".concat(prefixCls, \"-operations-operation\");\n  var iconClassName = \"\".concat(prefixCls, \"-operations-icon\");\n  var tools = [{\n    icon: close,\n    onClick: onClose,\n    type: 'close'\n  }, {\n    icon: zoomIn,\n    onClick: onZoomIn,\n    type: 'zoomIn'\n  }, {\n    icon: zoomOut,\n    onClick: onZoomOut,\n    type: 'zoomOut',\n    disabled: scale === 1\n  }, {\n    icon: rotateRight,\n    onClick: onRotateRight,\n    type: 'rotateRight'\n  }, {\n    icon: rotateLeft,\n    onClick: onRotateLeft,\n    type: 'rotateLeft'\n  }];\n  var onMouseUp = function onMouseUp() {\n    if (visible && isMoving) {\n      var width = imgRef.current.offsetWidth * scale;\n      var height = imgRef.current.offsetHeight * scale; // eslint-disable-next-line @typescript-eslint/no-shadow\n\n      var _imgRef$current$getBo = imgRef.current.getBoundingClientRect(),\n        _left = _imgRef$current$getBo.left,\n        top = _imgRef$current$getBo.top;\n      var isRotate = rotate % 180 !== 0;\n      setMoving(false);\n      var fixState = getFixScaleEleTransPosition(isRotate ? height : width, isRotate ? width : height, _left, top);\n      if (fixState) {\n        setPosition(_objectSpread({}, fixState));\n      }\n    }\n  };\n  var onMouseDown = function onMouseDown(event) {\n    // Only allow main button\n    if (event.button !== 0) return;\n    event.preventDefault(); // Without this mask close will abnormal\n\n    event.stopPropagation();\n    originPositionRef.current.deltaX = event.pageX - position.x;\n    originPositionRef.current.deltaY = event.pageY - position.y;\n    originPositionRef.current.originX = position.x;\n    originPositionRef.current.originY = position.y;\n    setMoving(true);\n  };\n  var onMouseMove = function onMouseMove(event) {\n    if (visible && isMoving) {\n      setPosition({\n        x: event.pageX - originPositionRef.current.deltaX,\n        y: event.pageY - originPositionRef.current.deltaY\n      });\n    }\n  };\n  var onWheelMove = function onWheelMove(event) {\n    if (!visible) return;\n    event.preventDefault();\n    var wheelDirection = event.deltaY;\n    setLastWheelZoomDirection({\n      wheelDirection: wheelDirection\n    });\n  };\n  var onKeyDown = useCallback(function (event) {\n    if (!visible || !showLeftOrRightSwitches) return;\n    if (event.keyCode === KeyCode.LEFT) {\n      if (currentPreviewIndex > 0) {\n        setCurrent(previewUrlsKeys[currentPreviewIndex - 1]);\n      }\n    } else if (event.keyCode === KeyCode.RIGHT) {\n      if (currentPreviewIndex < previewGroupCount - 1) {\n        setCurrent(previewUrlsKeys[currentPreviewIndex + 1]);\n      }\n    }\n  }, [currentPreviewIndex, previewGroupCount, previewUrlsKeys, setCurrent, showLeftOrRightSwitches, visible]);\n  var onDoubleClick = function onDoubleClick() {\n    if (visible) {\n      if (scale !== 1) {\n        setScale(1);\n      }\n      if (position.x !== initialPosition.x || position.y !== initialPosition.y) {\n        setPosition(initialPosition);\n      }\n    }\n  };\n  useEffect(function () {\n    var wheelDirection = lastWheelZoomDirection.wheelDirection;\n    if (wheelDirection > 0) {\n      onZoomOut();\n    } else if (wheelDirection < 0) {\n      onZoomIn();\n    }\n  }, [lastWheelZoomDirection]);\n  useEffect(function () {\n    var onTopMouseUpListener;\n    var onTopMouseMoveListener;\n    var onMouseUpListener = addEventListener(window, 'mouseup', onMouseUp, false);\n    var onMouseMoveListener = addEventListener(window, 'mousemove', onMouseMove, false);\n    var onScrollWheelListener = addEventListener(window, 'wheel', onWheelMove, {\n      passive: false\n    });\n    var onKeyDownListener = addEventListener(window, 'keydown', onKeyDown, false);\n    try {\n      // Resolve if in iframe lost event\n\n      /* istanbul ignore next */\n      if (window.top !== window.self) {\n        onTopMouseUpListener = addEventListener(window.top, 'mouseup', onMouseUp, false);\n        onTopMouseMoveListener = addEventListener(window.top, 'mousemove', onMouseMove, false);\n      }\n    } catch (error) {\n      /* istanbul ignore next */\n      warning(false, \"[rc-image] \".concat(error));\n    }\n    return function () {\n      var _onTopMouseUpListener, _onTopMouseMoveListen;\n      onMouseUpListener.remove();\n      onMouseMoveListener.remove();\n      onScrollWheelListener.remove();\n      onKeyDownListener.remove();\n      /* istanbul ignore next */\n\n      (_onTopMouseUpListener = onTopMouseUpListener) === null || _onTopMouseUpListener === void 0 ? void 0 : _onTopMouseUpListener.remove();\n      /* istanbul ignore next */\n\n      (_onTopMouseMoveListen = onTopMouseMoveListener) === null || _onTopMouseMoveListen === void 0 ? void 0 : _onTopMouseMoveListen.remove();\n    };\n  }, [visible, isMoving, onKeyDown]);\n  var operations = /*#__PURE__*/React.createElement(React.Fragment, null, showLeftOrRightSwitches && /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames(\"\".concat(prefixCls, \"-switch-left\"), _defineProperty({}, \"\".concat(prefixCls, \"-switch-left-disabled\"), currentPreviewIndex === 0)),\n    onClick: onSwitchLeft\n  }, left), showLeftOrRightSwitches && /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames(\"\".concat(prefixCls, \"-switch-right\"), _defineProperty({}, \"\".concat(prefixCls, \"-switch-right-disabled\"), currentPreviewIndex === previewGroupCount - 1)),\n    onClick: onSwitchRight\n  }, right), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"\".concat(prefixCls, \"-operations\")\n  }, showOperationsProgress && /*#__PURE__*/React.createElement(\"li\", {\n    className: \"\".concat(prefixCls, \"-operations-progress\")\n  }, (_countRender = countRender === null || countRender === void 0 ? void 0 : countRender(currentPreviewIndex + 1, previewGroupCount)) !== null && _countRender !== void 0 ? _countRender : \"\".concat(currentPreviewIndex + 1, \" / \").concat(previewGroupCount)), tools.map(function (_ref) {\n    var _classnames4;\n    var icon = _ref.icon,\n      onClick = _ref.onClick,\n      type = _ref.type,\n      disabled = _ref.disabled;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      className: classnames(toolClassName, (_classnames4 = {}, _defineProperty(_classnames4, \"\".concat(prefixCls, \"-operations-operation-\").concat(type), true), _defineProperty(_classnames4, \"\".concat(prefixCls, \"-operations-operation-disabled\"), !!disabled), _classnames4)),\n      onClick: onClick,\n      key: type\n    }, /*#__PURE__*/React.isValidElement(icon) ? /*#__PURE__*/React.cloneElement(icon, {\n      className: iconClassName\n    }) : icon);\n  })));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dialog, _extends({\n    transitionName: transitionName,\n    maskTransitionName: maskTransitionName,\n    closable: false,\n    keyboard: true,\n    prefixCls: prefixCls,\n    onClose: onClose,\n    afterClose: onAfterClose,\n    visible: visible,\n    wrapClassName: wrapClassName,\n    rootClassName: rootClassName,\n    getContainer: getContainer\n  }, restProps), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-img-wrapper\"),\n    style: {\n      transform: \"translate3d(\".concat(position.x, \"px, \").concat(position.y, \"px, 0)\")\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    width: props.width,\n    height: props.height,\n    onMouseDown: onMouseDown,\n    onDoubleClick: onDoubleClick,\n    ref: imgRef,\n    className: \"\".concat(prefixCls, \"-img\"),\n    src: combinationSrc,\n    alt: alt,\n    style: {\n      transform: \"scale3d(\".concat(scale, \", \").concat(scale, \", 1) rotate(\").concat(rotate, \"deg)\")\n    }\n  }))), /*#__PURE__*/React.createElement(CSSMotion, {\n    visible: visible,\n    motionName: maskTransitionName\n  }, function (_ref2) {\n    var className = _ref2.className,\n      style = _ref2.style;\n    return /*#__PURE__*/React.createElement(Portal, {\n      open: true,\n      getContainer: getContainer !== null && getContainer !== void 0 ? getContainer : document.body\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classnames(\"\".concat(prefixCls, \"-operations-wrapper\"), className, rootClassName),\n      style: style\n    }, operations));\n  }));\n};\nexport default Preview;","map":null,"metadata":{},"sourceType":"module"}