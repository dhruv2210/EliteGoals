{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each, isNil, isFunction, isObject } from '@antv/util';\nimport { vec2 } from '@antv/matrix-util';\nimport AxisBase from './base';\nimport * as OverlapUtil from './overlap';\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  function Circle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Circle.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      type: 'circle',\n      locationType: 'circle',\n      center: null,\n      radius: null,\n      startAngle: -Math.PI / 2,\n      endAngle: Math.PI * 3 / 2\n    });\n  };\n  Circle.prototype.getLinePath = function () {\n    var center = this.get('center');\n    var x = center.x;\n    var y = center.y;\n    var rx = this.get('radius');\n    var ry = rx;\n    var startAngle = this.get('startAngle');\n    var endAngle = this.get('endAngle');\n    var path = [];\n    if (Math.abs(endAngle - startAngle) === Math.PI * 2) {\n      path = [['M', x, y - ry], ['A', rx, ry, 0, 1, 1, x, y + ry], ['A', rx, ry, 0, 1, 1, x, y - ry], ['Z']];\n    } else {\n      var startPoint = this.getCirclePoint(startAngle);\n      var endPoint = this.getCirclePoint(endAngle);\n      var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;\n      var sweep = startAngle > endAngle ? 0 : 1;\n      path = [['M', x, y], ['L', startPoint.x, startPoint.y], ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y], ['L', x, y]];\n    }\n    return path;\n  };\n  Circle.prototype.getTickPoint = function (tickValue) {\n    var startAngle = this.get('startAngle');\n    var endAngle = this.get('endAngle');\n    var angle = startAngle + (endAngle - startAngle) * tickValue;\n    return this.getCirclePoint(angle);\n  };\n  // 获取垂直于坐标轴的向量\n  Circle.prototype.getSideVector = function (offset, point) {\n    var center = this.get('center');\n    var vector = [point.x - center.x, point.y - center.y];\n    var factor = this.get('verticalFactor');\n    var vecLen = vec2.length(vector);\n    vec2.scale(vector, vector, factor * offset / vecLen);\n    return vector;\n  };\n  // 获取沿坐标轴方向的向量\n  Circle.prototype.getAxisVector = function (point) {\n    var center = this.get('center');\n    var vector = [point.x - center.x, point.y - center.y];\n    return [vector[1], -1 * vector[0]]; // 获取顺时针方向的向量\n  };\n  // 根据圆心和半径获取点\n  Circle.prototype.getCirclePoint = function (angle, radius) {\n    var center = this.get('center');\n    radius = radius || this.get('radius');\n    return {\n      x: center.x + Math.cos(angle) * radius,\n      y: center.y + Math.sin(angle) * radius\n    };\n  };\n  /**\n   * 是否可以执行某一 overlap\n   * @param name\n   */\n  Circle.prototype.canProcessOverlap = function (name) {\n    var labelCfg = this.get('label');\n    // 对 autoRotate，如果配置了旋转角度，直接进行固定角度旋转\n    if (name === 'autoRotate') {\n      return isNil(labelCfg.rotate);\n    }\n    // 默认所有 overlap 都可执行\n    return true;\n  };\n  Circle.prototype.processOverlap = function (labelGroup) {\n    var _this = this;\n    var labelCfg = this.get('label');\n    var titleCfg = this.get('title');\n    var verticalLimitLength = this.get('verticalLimitLength');\n    var labelOffset = labelCfg.offset;\n    var limitLength = verticalLimitLength;\n    var titleHeight = 0;\n    var titleSpacing = 0;\n    if (titleCfg) {\n      titleHeight = titleCfg.style.fontSize;\n      titleSpacing = titleCfg.spacing;\n    }\n    if (limitLength) {\n      limitLength = limitLength - labelOffset - titleSpacing - titleHeight;\n    }\n    var overlapOrder = this.get('overlapOrder');\n    each(overlapOrder, function (name) {\n      if (labelCfg[name] && _this.canProcessOverlap(name)) {\n        _this.autoProcessOverlap(name, labelCfg[name], labelGroup, limitLength);\n      }\n    });\n    if (titleCfg) {\n      if (isNil(titleCfg.offset)) {\n        // 调整 title 的 offset\n        var length_1 = labelGroup.getCanvasBBox().height;\n        // 如果用户没有设置 offset，则自动计算\n        titleCfg.offset = labelOffset + length_1 + titleSpacing + titleHeight / 2;\n      }\n    }\n  };\n  Circle.prototype.autoProcessOverlap = function (name, value, labelGroup, limitLength) {\n    var _this = this;\n    var hasAdjusted = false;\n    var util = OverlapUtil[name];\n    if (limitLength > 0) {\n      if (value === true) {\n        // true 形式的配置：使用 overlap 默认的的处理方法进行处理\n        hasAdjusted = util.getDefault()(false, labelGroup, limitLength);\n      } else if (isFunction(value)) {\n        // 回调函数形式的配置： 用户可以传入回调函数\n        hasAdjusted = value(false, labelGroup, limitLength);\n      } else if (isObject(value)) {\n        // object 形式的配置方式：包括 处理方法 type， 和可选参数配置 cfg\n        var overlapCfg = value;\n        if (util[overlapCfg.type]) {\n          hasAdjusted = util[overlapCfg.type](false, labelGroup, limitLength, overlapCfg.cfg);\n        }\n      } else if (util[value]) {\n        // 字符串类型的配置：按照名称执行 overlap 处理方法\n        hasAdjusted = util[value](false, labelGroup, limitLength);\n      }\n    }\n    if (name === 'autoRotate') {\n      // 文本旋转后，文本的对齐方式可能就不合适了\n      if (hasAdjusted) {\n        var labels = labelGroup.getChildren();\n        var verticalFactor_1 = this.get('verticalFactor');\n        each(labels, function (label) {\n          var textAlign = label.attr('textAlign');\n          if (textAlign === 'center') {\n            // 居中的文本需要调整旋转度\n            var newAlign = verticalFactor_1 > 0 ? 'end' : 'start';\n            label.attr('textAlign', newAlign);\n          }\n        });\n      }\n    } else if (name === 'autoHide') {\n      var children = labelGroup.getChildren().slice(0); // 复制数组，删除时不会出错\n      each(children, function (label) {\n        if (!label.get('visible')) {\n          if (_this.get('isRegister')) {\n            // 已经注册过了，则删除\n            _this.unregisterElement(label);\n          }\n          label.remove(); // 防止 label 数量太多，所以统一删除\n        }\n      });\n    }\n  };\n\n  return Circle;\n}(AxisBase);\nexport default Circle;","map":null,"metadata":{},"sourceType":"module"}