{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray, map } from '@antv/util';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { findGeometry, flow } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { FUNNEL_CONVERSATION, FUNNEL_MAPPING_VALUE, FUNNEL_PERCENT } from '../constant';\nimport { conversionTagComponent, transformData } from './common';\n/**\n * 处理字段数据\n * @param params\n */\nfunction field(params) {\n  var chart = params.chart,\n    options = params.options;\n  var _a = options.data,\n    data = _a === void 0 ? [] : _a,\n    yField = options.yField,\n    maxSize = options.maxSize,\n    minSize = options.minSize;\n  var formatData = transformData(data, data, {\n    yField: yField,\n    maxSize: maxSize,\n    minSize: minSize\n  });\n  // 绘制漏斗图\n  chart.data(formatData);\n  return params;\n}\n/**\n * geometry处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xField = options.xField,\n    yField = options.yField,\n    color = options.color,\n    tooltip = options.tooltip,\n    label = options.label,\n    _a = options.shape,\n    shape = _a === void 0 ? 'funnel' : _a,\n    funnelStyle = options.funnelStyle,\n    state = options.state;\n  var _b = getTooltipMapping(tooltip, [xField, yField]),\n    fields = _b.fields,\n    formatter = _b.formatter;\n  baseGeometry({\n    chart: chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: FUNNEL_MAPPING_VALUE,\n      colorField: xField,\n      tooltipFields: isArray(fields) && fields.concat([FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      mapping: {\n        shape: shape,\n        tooltip: formatter,\n        color: color,\n        style: funnelStyle\n      },\n      label: label,\n      state: state\n    }\n  });\n  var geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n  return params;\n}\n/**\n * 转置处理\n * @param params\n */\nfunction transpose(params) {\n  var chart = params.chart,\n    options = params.options;\n  var isTransposed = options.isTransposed;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : []\n  });\n  return params;\n}\n/**\n * 转化率组件\n * @param params\n */\nexport function conversionTag(params) {\n  var options = params.options,\n    chart = params.chart;\n  var maxSize = options.maxSize;\n  // 获取形状位置，再转化为需要的转化率位置\n  var dataArray = get(chart, ['geometries', '0', 'dataArray'], []);\n  var size = get(chart, ['options', 'data', 'length']);\n  var x = map(dataArray, function (item) {\n    return get(item, ['0', 'nextPoints', '0', 'x']) * size - 0.5;\n  });\n  var getLineCoordinate = function getLineCoordinate(datum, datumIndex, data, initLineOption) {\n    var percent = maxSize - (maxSize - datum[FUNNEL_MAPPING_VALUE]) / 2;\n    return __assign(__assign({}, initLineOption), {\n      start: [x[datumIndex - 1] || datumIndex - 0.5, percent],\n      end: [x[datumIndex - 1] || datumIndex - 0.5, percent + 0.05]\n    });\n  };\n  conversionTagComponent(getLineCoordinate)(params);\n  return params;\n}\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\nexport function basicFunnel(params) {\n  return flow(field, geometry, transpose, conversionTag)(params);\n}","map":null,"metadata":{},"sourceType":"module"}