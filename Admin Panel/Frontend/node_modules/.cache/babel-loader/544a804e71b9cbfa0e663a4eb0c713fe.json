{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { animation, annotation, interaction, legend, scale, theme, tooltip } from '../../adaptor/common';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    lineStyle = options.lineStyle,\n    color = options.color,\n    pointOptions = options.point,\n    areaOptions = options.area;\n  chart.data(data);\n  // 雷达图 主 geometry\n  var primary = deepAssign({}, params, {\n    options: {\n      line: {\n        style: lineStyle,\n        color: color\n      },\n      point: pointOptions ? __assign({\n        color: color\n      }, pointOptions) : pointOptions,\n      area: areaOptions ? __assign({\n        color: color\n      }, areaOptions) : areaOptions,\n      // label 不传递给各个 geometry adaptor，由 label adaptor 处理\n      label: undefined\n    }\n  });\n  // 副 Geometry\n  var second = deepAssign({}, primary, {\n    options: {\n      tooltip: false\n    }\n  });\n  // 优先使用 point.state, 其次取主元素的 state 状态样式配置\n  var pointState = (pointOptions === null || pointOptions === void 0 ? void 0 : pointOptions.state) || options.state;\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  line(primary);\n  point(pointParams);\n  area(second);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(params);\n}\n/**\n * coord 配置\n * @param params\n */\nfunction coord(params) {\n  var chart = params.chart,\n    options = params.options;\n  var radius = options.radius,\n    startAngle = options.startAngle,\n    endAngle = options.endAngle;\n  chart.coordinate('polar', {\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  });\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xField = options.xField,\n    xAxis = options.xAxis,\n    yField = options.yField,\n    yAxis = options.yAxis;\n  chart.axis(xField, xAxis);\n  chart.axis(yField, yAxis);\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField;\n  var geometry = findGeometry(chart, 'line');\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    geometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  return params;\n}\n/**\n * 雷达图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, meta, theme, coord, axis, legend, tooltip, label, interaction, animation, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}