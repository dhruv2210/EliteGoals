{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { getShape } from './util/hit';\nimport * as Shape from './shape';\nimport Group from './group';\nimport { each, getPixelRatio, requestAnimationFrame, clearAnimationFrame } from './util/util';\nimport { applyAttrsToContext, drawChildren, getMergedRegion, mergeView, checkRefresh, clearChanged } from './util/draw';\nvar Canvas = /** @class */function (_super) {\n  __extends(Canvas, _super);\n  function Canvas() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Canvas.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    // 设置渲染引擎为 canvas，只读属性\n    cfg['renderer'] = 'canvas';\n    // 是否自动绘制，不需要用户调用 draw 方法\n    cfg['autoDraw'] = true;\n    // 是否允许局部刷新图表\n    cfg['localRefresh'] = true;\n    cfg['refreshElements'] = [];\n    // 是否在视图内自动裁剪\n    cfg['clipView'] = true;\n    // 是否使用快速拾取的方案，默认为 false，上层可以打开\n    cfg['quickHit'] = false;\n    return cfg;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Canvas.prototype.onCanvasChange = function (changeType) {\n    /**\n     * 触发画布更新的三种 changeType\n     * 1. attr: 修改画布的绘图属性\n     * 2. sort: 画布排序，图形的层次会发生变化\n     * 3. changeSize: 改变画布大小\n     */\n    if (changeType === 'attr' || changeType === 'sort' || changeType === 'changeSize') {\n      this.set('refreshElements', [this]);\n      this.draw();\n    }\n  };\n  Canvas.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  Canvas.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 获取屏幕像素比\n   */\n  Canvas.prototype.getPixelRatio = function () {\n    var pixelRatio = this.get('pixelRatio') || getPixelRatio();\n    // 不足 1 的取 1，超出 1 的取整\n    return pixelRatio >= 1 ? Math.ceil(pixelRatio) : 1;\n  };\n  Canvas.prototype.getViewRange = function () {\n    return {\n      minX: 0,\n      minY: 0,\n      maxX: this.cfg.width,\n      maxY: this.cfg.height\n    };\n  };\n  // 复写基类的方法生成标签\n  Canvas.prototype.createDom = function () {\n    var element = document.createElement('canvas');\n    var context = element.getContext('2d');\n    // 缓存 context 对象\n    this.set('context', context);\n    return element;\n  };\n  Canvas.prototype.setDOMSize = function (width, height) {\n    _super.prototype.setDOMSize.call(this, width, height);\n    var context = this.get('context');\n    var el = this.get('el');\n    var pixelRatio = this.getPixelRatio();\n    el.width = pixelRatio * width;\n    el.height = pixelRatio * height;\n    // 设置 canvas 元素的宽度和高度，会重置缩放，因此 context.scale 需要在每次设置宽、高后调用\n    if (pixelRatio > 1) {\n      context.scale(pixelRatio, pixelRatio);\n    }\n  };\n  // 复写基类方法\n  Canvas.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this._clearFrame(); // 需要清理掉延迟绘制的帧\n    var context = this.get('context');\n    var element = this.get('el');\n    context.clearRect(0, 0, element.width, element.height);\n  };\n  Canvas.prototype.getShape = function (x, y) {\n    var shape;\n    if (this.get('quickHit')) {\n      shape = getShape(this, x, y);\n    } else {\n      shape = _super.prototype.getShape.call(this, x, y, null);\n    }\n    return shape;\n  };\n  // 对绘制区域边缘取整，避免浮点数问题\n  Canvas.prototype._getRefreshRegion = function () {\n    var elements = this.get('refreshElements');\n    var viewRegion = this.getViewRange();\n    var region;\n    // 如果是当前画布整体发生了变化，则直接重绘整个画布\n    if (elements.length && elements[0] === this) {\n      region = viewRegion;\n    } else {\n      region = getMergedRegion(elements);\n      if (region) {\n        region.minX = Math.floor(region.minX);\n        region.minY = Math.floor(region.minY);\n        region.maxX = Math.ceil(region.maxX);\n        region.maxY = Math.ceil(region.maxY);\n        region.maxY += 1; // 在很多环境下字体的高低会不一致，附加一像素，避免残影\n        var clipView = this.get('clipView');\n        // 自动裁剪不在 view 内的区域\n        if (clipView) {\n          region = mergeView(region, viewRegion);\n        }\n      }\n    }\n    return region;\n  };\n  /**\n   * 刷新图形元素，这里仅仅是放入队列，下次绘制时进行绘制\n   * @param {IElement} element 图形元素\n   */\n  Canvas.prototype.refreshElement = function (element) {\n    var refreshElements = this.get('refreshElements');\n    refreshElements.push(element);\n    // if (this.get('autoDraw')) {\n    //   this._startDraw();\n    // }\n  };\n  // 清理还在进行的绘制\n  Canvas.prototype._clearFrame = function () {\n    var drawFrame = this.get('drawFrame');\n    if (drawFrame) {\n      // 如果全部渲染时，存在局部渲染，则抛弃掉局部渲染\n      clearAnimationFrame(drawFrame);\n      this.set('drawFrame', null);\n      this.set('refreshElements', []);\n    }\n  };\n  // 手工调用绘制接口\n  Canvas.prototype.draw = function () {\n    var drawFrame = this.get('drawFrame');\n    if (this.get('autoDraw') && drawFrame) {\n      return;\n    }\n    this._startDraw();\n  };\n  // 绘制所有图形\n  Canvas.prototype._drawAll = function () {\n    var context = this.get('context');\n    var element = this.get('el');\n    var children = this.getChildren();\n    context.clearRect(0, 0, element.width, element.height);\n    applyAttrsToContext(context, this);\n    drawChildren(context, children);\n    // 对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也会记录更新的元素队列，因此全局渲染完后也需要置空\n    this.set('refreshElements', []);\n  };\n  // 绘制局部\n  Canvas.prototype._drawRegion = function () {\n    var context = this.get('context');\n    var refreshElements = this.get('refreshElements');\n    var children = this.getChildren();\n    var region = this._getRefreshRegion();\n    // 需要注意可能没有 region 的场景\n    // 一般发生在设置了 localRefresh ,在没有图形发生变化的情况下，用户调用了 draw\n    if (region) {\n      // 清理指定区域\n      context.clearRect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n      // 保存上下文，设置 clip\n      context.save();\n      context.beginPath();\n      context.rect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n      context.clip();\n      applyAttrsToContext(context, this);\n      // 确认更新的元素，这个优化可以提升 10 倍左右的性能，10W 个带有 group 的节点，局部渲染会从 90ms 下降到 5-6 ms\n      checkRefresh(this, children, region);\n      // 绘制子元素\n      drawChildren(context, children, region);\n      context.restore();\n    } else if (refreshElements.length) {\n      // 防止发生改变的 elements 没有 region 的场景，这会发生在多个情况下\n      // 1. 空的 group\n      // 2. 所有 elements 没有在绘图区域\n      // 3. group 下面的 elements 隐藏掉\n      // 如果不进行清理 hasChanged 的状态会不正确\n      clearChanged(refreshElements);\n    }\n    each(refreshElements, function (element) {\n      if (element.get('hasChanged')) {\n        // 在视窗外的 Group 元素会加入到更新队列里，但实际却没有执行 draw() 逻辑，也就没有清除 hasChanged 标记\n        // 即已经重绘完、但 hasChanged 标记没有清除的元素，需要统一清除掉。主要是 Group 存在问题，具体原因待排查\n        element.set('hasChanged', false);\n      }\n    });\n    this.set('refreshElements', []);\n  };\n  // 触发绘制\n  Canvas.prototype._startDraw = function () {\n    var _this = this;\n    var drawFrame = this.get('drawFrame');\n    if (!drawFrame) {\n      drawFrame = requestAnimationFrame(function () {\n        if (_this.get('localRefresh')) {\n          _this._drawRegion();\n        } else {\n          _this._drawAll();\n        }\n        _this.set('drawFrame', null);\n      });\n      this.set('drawFrame', drawFrame);\n    }\n  };\n  Canvas.prototype.skipDraw = function () {};\n  Canvas.prototype.removeDom = function () {\n    var el = this.get('el');\n    // 需要清理 canvas 画布内容，否则ios下 创建的canvas垃圾未回收，导致Total canvas memory use exceeds问题\n    // 相关问题列表\n    // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n    // https://github.com/openlayers/openlayers/issues/9291\n    el.width = 0;\n    el.height = 0;\n    el.parentNode.removeChild(el);\n  };\n  return Canvas;\n}(AbstractCanvas);\nexport default Canvas;","map":null,"metadata":{},"sourceType":"module"}