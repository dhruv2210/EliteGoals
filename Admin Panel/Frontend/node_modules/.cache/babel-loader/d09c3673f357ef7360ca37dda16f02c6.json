{"ast":null,"code":"import { __values } from \"tslib\";\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nregisterShape('point', 'image', {\n  draw: function draw(cfg, container) {\n    var e_1, _a;\n    var size = getStyle(cfg, false, false, 'r').r;\n    var points = this.parsePoints(cfg.points);\n    var pointPosition = points[0];\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      var group = container.addGroup();\n      try {\n        for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {\n          var point = points_1_1.value;\n          group.addShape('image', {\n            attrs: {\n              x: point.x - size / 2,\n              y: point.y - size,\n              width: size,\n              height: size,\n              img: cfg.shape[1]\n            }\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return group;\n    }\n    return container.addShape('image', {\n      attrs: {\n        x: pointPosition.x - size / 2,\n        y: pointPosition.y - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1]\n      }\n    });\n  },\n  getMarker: function getMarker(markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color\n      }\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module"}