{"ast":null,"code":"import { __assign, __rest, __spreadArrays } from \"tslib\";\nimport { isEmpty, isFunction, isNumber, isObject, isString, uniq } from '@antv/util';\nimport { transformLabel } from '../../utils';\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\nexport function getMappingField(o, field) {\n  var type = o.type,\n    xField = o.xField,\n    yField = o.yField,\n    colorField = o.colorField,\n    shapeField = o.shapeField,\n    sizeField = o.sizeField,\n    styleField = o.styleField;\n  var rawFields = o.rawFields;\n  var fields = [];\n  rawFields = (isFunction(rawFields) ? rawFields(type, field) : rawFields) || [];\n  // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n  if (field === 'color') {\n    fields = __spreadArrays([colorField || xField], rawFields);\n  } else if (field === 'shape') {\n    fields = __spreadArrays([shapeField || xField], rawFields);\n  } else if (field === 'size') {\n    fields = __spreadArrays([sizeField || xField], rawFields);\n  } else {\n    fields = __spreadArrays([xField, yField, colorField, shapeField, sizeField, styleField], rawFields);\n    // 一定能找到的！\n    var idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n    var f = fields[idx];\n    // 删除当前字段\n    fields.splice(idx, 1);\n    // 插入到第一个\n    fields.unshift(f);\n  }\n  var mappingFields = uniq(fields.filter(function (f) {\n    return !!f;\n  }));\n  /**\n   * 修复 line geometry 无拆分时 color 回调错误\n   * eg:\n   *   geometry.color(xField, ()=> '#f24')\n   */\n  var tileMappingField = type === 'line' && [xField, yField].includes(mappingFields.join('*')) ? '' : mappingFields.join('*');\n  return {\n    mappingFields: mappingFields,\n    tileMappingField: tileMappingField\n  };\n}\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\nexport function getMappingFunction(mappingFields, func) {\n  if (!func) return undefined;\n  // 返回函数\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var params = {};\n    mappingFields.forEach(function (f, idx) {\n      params[f] = args[idx];\n    });\n    // 删除 undefined\n    delete params['undefined'];\n    return func(params);\n  };\n}\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\nexport function geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var type = options.type,\n    args = options.args,\n    mapping = options.mapping,\n    xField = options.xField,\n    yField = options.yField,\n    colorField = options.colorField,\n    shapeField = options.shapeField,\n    sizeField = options.sizeField,\n    tooltipFields = options.tooltipFields,\n    label = options.label,\n    state = options.state,\n    customInfo = options.customInfo;\n  // 如果没有 mapping 信息，那么直接返回\n  if (!mapping) {\n    return params;\n  }\n  var color = mapping.color,\n    shape = mapping.shape,\n    size = mapping.size,\n    style = mapping.style,\n    tooltip = mapping.tooltip;\n  // 创建 geometry\n  var geometry = chart[type](args).position(xField + \"*\" + yField);\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    var _a = getMappingField(options, 'color'),\n      mappingFields = _a.mappingFields,\n      tileMappingField = _a.tileMappingField;\n    geometry.color(tileMappingField, getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    var _b = getMappingField(options, 'shape'),\n      mappingFields = _b.mappingFields,\n      tileMappingField = _b.tileMappingField;\n    geometry.shape(tileMappingField, getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    var _c = getMappingField(options, 'size'),\n      mappingFields = _c.mappingFields,\n      tileMappingField = _c.tileMappingField;\n    geometry.size(tileMappingField, getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n  if (isFunction(style)) {\n    var _d = getMappingField(options, 'style'),\n      mappingFields = _d.mappingFields,\n      tileMappingField = _d.tileMappingField;\n    geometry.style(tileMappingField, getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n  /**\n   * label 的映射\n   */\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    var callback = label.callback,\n      fields = label.fields,\n      cfg = __rest(label, [\"callback\", \"fields\"]);\n    geometry.label({\n      fields: fields || [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  /**\n   * state 状态样式\n   */\n  if (state) {\n    geometry.state(state);\n  }\n  /**\n   * 自定义信息\n   */\n  if (customInfo) {\n    geometry.customInfo(customInfo);\n  }\n  // 防止因为 x y 字段做了通道映射，导致生成图例\n  [xField, yField].filter(function (f) {\n    return f !== colorField;\n  }).forEach(function (f) {\n    chart.legend(f, false);\n  });\n  return __assign(__assign({}, params), {\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: {\n      geometry: geometry\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}