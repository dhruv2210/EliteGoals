{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\n/** ShapeFactory 基类 */\nvar ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n  /** 主题样式 */\n  theme: null,\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints: function getShapePoints(shapeType, shapePoint) {\n    var shape = this.getShape(shapeType);\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n    return this.getDefaultPoints(shapePoint);\n  },\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape: function getShape(shapeType) {\n    var shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n    return shape;\n  },\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints: function getDefaultPoints() {\n    return [];\n  },\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle: function getDefaultStyle(geometryTheme) {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker: function getMarker(shapeType, markerCfg) {\n    var shape = this.getShape(shapeType);\n    if (!shape.getMarker) {\n      var defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n    var theme = this.theme;\n    var shapeStyle = get(theme, [shapeType, 'default'], {});\n    var markerStyle = shape.getMarker(markerCfg);\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape: function drawShape(shapeType, cfg, container) {\n    var shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  }\n};\n/** Shape 基类 */\nvar ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath: function parsePath(path) {\n    var coordinate = this.coordinate;\n    var parsedPath = parsePathString(path);\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n    return parsedPath;\n  },\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint: function parsePoint(point) {\n    var coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints: function parsePoints(points) {\n    var coordinate = this.coordinate;\n    return points.map(function (point) {\n      return coordinate.convert(point);\n    });\n  },\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw: function draw(cfg, container) {}\n};\nvar ShapeFactoryMap = {};\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName, cfg) {\n  var className = upperFirst(factoryName);\n  var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), {\n    geometryType: factoryName\n  });\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName, shapeType, cfg) {\n  var className = upperFirst(factoryName);\n  var factory = ShapeFactoryMap[className];\n  var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName) {\n  var className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}","map":null,"metadata":{},"sourceType":"module"}