{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { uniq } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { edge, polygon } from '../../adaptor/geometries';\nimport { deepAssign, findViewById, flow } from '../../utils';\nimport { addViewAnimation } from '../../utils/view';\nimport { COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID, X_FIELD, Y_FIELD } from './constant';\nimport { transformToViewsData } from './helper';\n/**\n * 默认配置项 处理\n * @param params\n */\nfunction defaultOptions(params) {\n  var options = params.options;\n  var _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a;\n  return deepAssign({}, {\n    options: {\n      tooltip: {\n        fields: uniq(__spreadArrays(['name', 'source', 'target', 'value', 'isNode'], rawFields))\n      },\n      label: {\n        fields: uniq(__spreadArrays(['x', 'name'], rawFields))\n      }\n    }\n  }, params);\n}\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var color = options.color,\n    nodeStyle = options.nodeStyle,\n    edgeStyle = options.edgeStyle,\n    label = options.label,\n    tooltip = options.tooltip,\n    nodeState = options.nodeState,\n    edgeState = options.edgeState;\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n  // 2. node edge views\n  // @ts-ignore\n  var _a = transformToViewsData(options, chart.width, chart.height),\n    nodes = _a.nodes,\n    edges = _a.edges;\n  // edge view\n  var edgeView = chart.createView({\n    id: EDGES_VIEW_ID\n  });\n  edgeView.data(edges);\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color: color,\n        style: edgeStyle,\n        shape: 'arc'\n      },\n      tooltip: tooltip,\n      state: edgeState\n    }\n  });\n  var nodeView = chart.createView({\n    id: NODES_VIEW_ID\n  });\n  nodeView.data(nodes);\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color: color,\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip,\n      state: nodeState\n    }\n  });\n  chart.interaction('element-active');\n  // scale\n  chart.scale({\n    x: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    y: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    name: {\n      sync: 'color',\n      type: 'cat'\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\nexport function animation(params) {\n  var chart = params.chart,\n    options = params.options;\n  var animation = options.animation;\n  var geometries = __spreadArrays(chart.views[0].geometries, chart.views[1].geometries);\n  addViewAnimation(chart, animation, geometries);\n  return params;\n}\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params) {\n  var chart = params.chart,\n    options = params.options;\n  var nodeDraggable = options.nodeDraggable;\n  var DRAG_INTERACTION = 'sankey-node-draggable';\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n  return params;\n}\n/**\n * Interaction 配置\n * @param params\n */\nfunction interaction(params) {\n  var chart = params.chart,\n    options = params.options;\n  var _a = options.interactions,\n    interactions = _a === void 0 ? [] : _a;\n  var nodeInteractions = [].concat(interactions, options.nodeInteractions || []);\n  var edgeInteractions = [].concat(interactions, options.edgeInteractions || []);\n  var nodeView = findViewById(chart, NODES_VIEW_ID);\n  var edgeView = findViewById(chart, EDGES_VIEW_ID);\n  nodeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      nodeView.removeInteraction(i.type);\n    } else {\n      nodeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  edgeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      edgeView.removeInteraction(i.type);\n    } else {\n      edgeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(defaultOptions, geometry, interaction, nodeDraggable, animation, theme\n  // ... 其他的 adaptor flow\n  )(params);\n}","map":null,"metadata":{},"sourceType":"module"}