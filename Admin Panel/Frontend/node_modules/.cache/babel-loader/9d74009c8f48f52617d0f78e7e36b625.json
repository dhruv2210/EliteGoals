{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { getElements, getIntersectElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\nimport StateBase from './state-base';\n/**\n * @ignore\n * 区域设置状态的基础 Action\n */\nvar ElementRangeState = /** @class */function (_super) {\n  __extends(ElementRangeState, _super);\n  function ElementRangeState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.startPoint = null;\n    _this.endPoint = null;\n    _this.isStarted = false;\n    /**\n     * 是否作用于当前 view 的 siblings，默认是 false 仅作用于自己\n     */\n    _this.effectSiblings = false;\n    /**\n     * 是否受 element 的数据影响，还是受包围盒的影响\n     */\n    _this.effectByRecord = false;\n    return _this;\n  }\n  // 获取当前的位置\n  ElementRangeState.prototype.getCurrentPoint = function () {\n    var event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y\n    };\n  };\n  /**\n   * 开始，记录开始选中的位置\n   */\n  ElementRangeState.prototype.start = function () {\n    this.clear(); // 开始的时候清理之前的状态\n    this.startPoint = this.getCurrentPoint();\n    this.isStarted = true;\n  };\n  ElementRangeState.prototype.getIntersectElements = function () {\n    var elements = null;\n    if (isMask(this.context)) {\n      elements = getMaskedElements(this.context, 10);\n    } else {\n      var startPoint = this.startPoint;\n      var endPoint = this.isStarted ? this.getCurrentPoint() : this.endPoint;\n      // 如果没有开始，则不允许范围设置状态，保护性质\n      if (!startPoint || !endPoint) {\n        return;\n      }\n      // 计算框选区域\n      var box = {\n        minX: Math.min(startPoint.x, endPoint.x),\n        minY: Math.min(startPoint.y, endPoint.y),\n        maxX: Math.max(startPoint.x, endPoint.x),\n        maxY: Math.max(startPoint.y, endPoint.y)\n      };\n      // this.clear(); // 不全部清理，会导致闪烁\n      var view = this.context.view;\n      elements = getIntersectElements(view, box);\n    }\n    return elements;\n  };\n  /**\n   * 选中\n   */\n  ElementRangeState.prototype.setStateEnable = function (enable) {\n    if (this.effectSiblings && !this.effectByRecord) {\n      this.setSiblingsState(enable);\n    } else {\n      var allElements = getElements(this.context.view);\n      var elements = this.getIntersectElements();\n      if (elements && elements.length) {\n        if (this.effectByRecord) {\n          this.setSiblingsStateByRecord(elements, enable);\n        } else {\n          this.setElementsState(elements, enable, allElements);\n        }\n      } else {\n        this.clear();\n      }\n    }\n  };\n  // 根据选中的 element 的数据进行设置状态\n  ElementRangeState.prototype.setSiblingsStateByRecord = function (elements, enable) {\n    var _this = this;\n    var view = this.context.view;\n    var siblings = getSilbings(view);\n    var records = elements.map(function (el) {\n      return el.getModel().data;\n    });\n    var xFiled = view.getXScale().field;\n    var yField = view.getYScales()[0].field;\n    each(siblings, function (sibling) {\n      var allElements = getElements(sibling);\n      var effectElements = allElements.filter(function (el) {\n        var record = el.getModel().data;\n        return isInRecords(records, record, xFiled, yField);\n      });\n      _this.setElementsState(effectElements, enable, allElements);\n    });\n  };\n  // 设置兄弟 view 的状态\n  ElementRangeState.prototype.setSiblingsState = function (enable) {\n    var _this = this;\n    var view = this.context.view;\n    var siblings = getSilbings(view);\n    if (isMask(this.context)) {\n      // 受 mask 影响\n      each(siblings, function (sibling) {\n        var allElements = getElements(sibling);\n        var effectElements = getSiblingMaskElements(_this.context, sibling, 10);\n        if (effectElements && effectElements.length) {\n          _this.setElementsState(effectElements, enable, allElements);\n        } else {\n          _this.clearViewState(sibling);\n        }\n      });\n    }\n  };\n  ElementRangeState.prototype.setElementsState = function (elements, enable, allElements) {\n    var _this = this;\n    each(allElements, function (el) {\n      if (!elements.includes(el)) {\n        _this.setElementState(el, false);\n      } else {\n        _this.setElementState(el, enable);\n      }\n    });\n  };\n  /**\n   * 结束\n   */\n  ElementRangeState.prototype.end = function () {\n    this.isStarted = false;\n    this.endPoint = this.getCurrentPoint();\n  };\n  // 复写 clear\n  ElementRangeState.prototype.clear = function () {\n    var _this = this;\n    var view = this.context.view;\n    // 判断是否影响 siblings\n    if (this.effectSiblings) {\n      var siblings = getSilbings(view);\n      each(siblings, function (sibling) {\n        _this.clearViewState(sibling);\n      });\n    } else {\n      this.clearViewState(view);\n    }\n  };\n  return ElementRangeState;\n}(StateBase);\nexport default ElementRangeState;","map":null,"metadata":{},"sourceType":"module"}