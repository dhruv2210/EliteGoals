{"ast":null,"code":"import isString from './is-string';\nimport toString from './to-string';\nimport { default as measureTextWidth } from './measure-text-width';\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth 最大宽度\n * @param font 字体\n * @param str 要替换的文本\n */\nexport default (function (text, maxWidth, font, str) {\n  if (str === void 0) {\n    str = '...';\n  }\n  var STEP = 16; // 每次 16，调参工程师\n  var PLACEHOLDER_WIDTH = measureTextWidth(str, font);\n  var leftText = !isString(text) ? toString(text) : text;\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n  var currentText;\n  var currentWidth;\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n  // 首先通过 step 计算，找出最大的未超出长度的\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      break;\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  return \"\" + r.join('') + str;\n});","map":null,"metadata":{},"sourceType":"module"}