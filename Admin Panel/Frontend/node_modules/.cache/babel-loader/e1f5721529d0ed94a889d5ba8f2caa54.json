{"ast":null,"code":"import { animation, annotation, interaction, slider, theme } from '../../adaptor/common';\nimport { schema } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { TREND_DOWN, TREND_FIELD, TREND_UP, Y_FIELD } from './constant';\nimport { getStockData } from './utils';\n/**\n * 图表配置处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var yField = options.yField;\n  var data = options.data,\n    risingFill = options.risingFill,\n    fallingFill = options.fallingFill,\n    tooltip = options.tooltip,\n    stockStyle = options.stockStyle;\n  chart.data(getStockData(data, yField));\n  var tooltipOptions = tooltip;\n  if (tooltipOptions !== false) {\n    tooltipOptions = deepAssign({}, {\n      fields: yField\n    }, tooltipOptions);\n  }\n  schema(deepAssign({}, params, {\n    options: {\n      schema: {\n        shape: 'candle',\n        color: [risingFill, fallingFill],\n        style: stockStyle\n      },\n      yField: Y_FIELD,\n      seriesField: TREND_FIELD,\n      rawFields: yField,\n      tooltip: tooltipOptions\n    }\n  }));\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a, _b;\n  var chart = params.chart,\n    options = params.options;\n  var meta = options.meta,\n    xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField;\n  var baseMeta = (_a = {}, _a[xField] = {\n    type: 'timeCat',\n    tickCount: 6\n  }, _a[TREND_FIELD] = {\n    values: [TREND_UP, TREND_DOWN]\n  }, _a);\n  var scales = deepAssign(baseMeta, meta, (_b = {}, _b[xField] = pick(xAxis, AXIS_META_CONFIG_KEYS), _b[Y_FIELD] = pick(yAxis, AXIS_META_CONFIG_KEYS), _b));\n  chart.scale(scales);\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(Y_FIELD, false);\n  } else {\n    chart.axis(Y_FIELD, yAxis);\n  }\n  return params;\n}\n/**\n * tooltip 配置\n * @param params\n */\nexport function tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip;\n  if (tooltip !== false) {\n    chart.tooltip(tooltip);\n  } else {\n    chart.tooltip(false);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend;\n  if (legend) {\n    chart.legend(TREND_FIELD, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * K线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(theme, geometry, meta, axis, tooltip, legend, interaction, animation, annotation(), slider)(params);\n}","map":null,"metadata":{},"sourceType":"module"}