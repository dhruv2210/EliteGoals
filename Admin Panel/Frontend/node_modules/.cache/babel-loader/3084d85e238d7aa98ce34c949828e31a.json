{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, max, map, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nfunction normalizeSize(arr) {\n  if (!isArray(arr)) {\n    return [];\n  }\n  var maxValue = max(arr);\n  return map(arr, function (num) {\n    return num / maxValue;\n  });\n}\nvar ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints: function getDefaultPoints(pointInfo) {\n    var radius = pointInfo.size / 2;\n    var points = [];\n    var sizeArr = normalizeSize(pointInfo._size);\n    each(pointInfo.y, function (y, index) {\n      var offset = sizeArr[index] * radius;\n      var isMin = index === 0;\n      var isMax = index === pointInfo.y.length - 1;\n      points.push({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x - offset,\n        y: y\n      });\n      points.unshift({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x + offset,\n        y: y\n      });\n    });\n    return points;\n  }\n});\nregisterShape('violin', 'violin', {\n  draw: function draw(cfg, container) {\n    var shapeAttrs = getStyle(cfg, true, true);\n    var path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, shapeAttrs), {\n        path: path\n      }),\n      name: 'violin'\n    });\n  },\n  getMarker: function getMarker(markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default ViolinShapeFactory;","map":null,"metadata":{},"sourceType":"module"}