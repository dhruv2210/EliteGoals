{"ast":null,"code":"import * as React from 'react';\nimport CacheEntity from './Cache';\nexport var ATTR_TOKEN = 'data-token-hash';\nexport var ATTR_MARK = 'data-css-hash';\nexport var ATTR_DEV_CACHE_PATH = 'data-dev-cache-path';\n// Mark css-in-js instance in style element\nexport var CSS_IN_JS_INSTANCE = '__cssinjs_instance__';\nexport var CSS_IN_JS_INSTANCE_ID = Math.random().toString(12).slice(2);\nexport function createCache() {\n  if (typeof document !== 'undefined' && document.head && document.body) {\n    var styles = document.body.querySelectorAll(\"style[\".concat(ATTR_MARK, \"]\")) || [];\n    var firstChild = document.head.firstChild;\n    Array.from(styles).forEach(function (style) {\n      style[CSS_IN_JS_INSTANCE] = style[CSS_IN_JS_INSTANCE] || CSS_IN_JS_INSTANCE_ID;\n      // Not force move if no head\n      document.head.insertBefore(style, firstChild);\n    });\n    // Deduplicate of moved styles\n    var styleHash = {};\n    Array.from(document.querySelectorAll(\"style[\".concat(ATTR_MARK, \"]\"))).forEach(function (style) {\n      var hash = style.getAttribute(ATTR_MARK);\n      if (styleHash[hash]) {\n        if (style[CSS_IN_JS_INSTANCE] === CSS_IN_JS_INSTANCE_ID) {\n          var _style$parentNode;\n          (_style$parentNode = style.parentNode) === null || _style$parentNode === void 0 ? void 0 : _style$parentNode.removeChild(style);\n        }\n      } else {\n        styleHash[hash] = true;\n      }\n    });\n  }\n  return new CacheEntity();\n}\nvar StyleContext = /*#__PURE__*/React.createContext({\n  hashPriority: 'low',\n  cache: createCache(),\n  defaultCache: true\n});\nexport var StyleProvider = function StyleProvider(props) {\n  var autoClear = props.autoClear,\n    mock = props.mock,\n    cache = props.cache,\n    hashPriority = props.hashPriority,\n    container = props.container,\n    children = props.children;\n  var _React$useContext = React.useContext(StyleContext),\n    parentCache = _React$useContext.cache,\n    parentAutoClear = _React$useContext.autoClear,\n    parentMock = _React$useContext.mock,\n    parentDefaultCache = _React$useContext.defaultCache,\n    parentHashPriority = _React$useContext.hashPriority,\n    parentContainer = _React$useContext.container;\n  var context = React.useMemo(function () {\n    return {\n      autoClear: autoClear !== null && autoClear !== void 0 ? autoClear : parentAutoClear,\n      mock: mock !== null && mock !== void 0 ? mock : parentMock,\n      cache: cache || parentCache || createCache(),\n      defaultCache: !cache && parentDefaultCache,\n      hashPriority: hashPriority !== null && hashPriority !== void 0 ? hashPriority : parentHashPriority,\n      container: container || parentContainer\n    };\n  }, [autoClear, parentAutoClear, parentMock, parentCache, mock, cache, parentDefaultCache, hashPriority, parentHashPriority, container, parentContainer]);\n  return /*#__PURE__*/React.createElement(StyleContext.Provider, {\n    value: context\n  }, children);\n};\nexport default StyleContext;","map":null,"metadata":{},"sourceType":"module"}