{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getArcPath } from '../../../util/graphics';\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getCPath, getQPath } from './util';\nfunction getArcShapePath(from, to, center) {\n  var sub = getQPath(to, center);\n  var path = [['M', from.x, from.y]];\n  path.push(sub);\n  return path;\n}\nfunction getArcShapeWeightPath(points, center) {\n  var arc1 = getQPath(points[1], center);\n  var arc2 = getQPath(points[3], center);\n  var path = [['M', points[0].x, points[0].y]];\n  path.push(arc2);\n  path.push(['L', points[3].x, points[3].y]);\n  path.push(['L', points[2].x, points[2].y]);\n  path.push(arc1);\n  path.push(['L', points[1].x, points[1].y]);\n  path.push(['L', points[0].x, points[0].y]);\n  path.push(['Z']);\n  return path;\n}\n// 弧线包括笛卡尔坐标系下的半圆弧线、极坐标系下以圆心为控制点的二阶曲线、笛卡尔坐标系下带权重的三阶曲线、极坐标系下带权重的以圆心为控制点的二阶曲线\nregisterShape('edge', 'arc', {\n  draw: function draw(cfg, container) {\n    var style = getStyle(cfg, true, false, 'lineWidth');\n    var points = cfg.points;\n    var type = points.length > 2 ? 'weight' : 'normal';\n    var path;\n    if (cfg.isInCircle) {\n      var center = {\n        x: 0,\n        y: 1\n      };\n      if (type === 'normal') {\n        path = getArcShapePath(points[0], points[1], center);\n      } else {\n        style.fill = style.stroke;\n        path = getArcShapeWeightPath(points, center);\n      }\n      path = this.parsePath(path);\n      return container.addShape('path', {\n        attrs: __assign(__assign({}, style), {\n          path: path\n        })\n      });\n    } else {\n      if (type === 'normal') {\n        points = this.parsePoints(points);\n        path = getArcPath((points[1].x + points[0].x) / 2, points[0].y, Math.abs(points[1].x - points[0].x) / 2, Math.PI, Math.PI * 2);\n        return container.addShape('path', {\n          attrs: __assign(__assign({}, style), {\n            path: path\n          })\n        });\n      } else {\n        var c1 = getCPath(points[1], points[3]);\n        var c2 = getCPath(points[2], points[0]);\n        path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], c1, ['L', points[3].x, points[3].y], ['L', points[2].x, points[2].y], c2, ['Z']];\n        path = this.parsePath(path);\n        style.fill = style.stroke;\n        return container.addShape('path', {\n          attrs: __assign(__assign({}, style), {\n            path: path\n          })\n        });\n      }\n    }\n  },\n  getMarker: function getMarker(markerCfg) {\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: markerCfg.color\n      }\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"module"}