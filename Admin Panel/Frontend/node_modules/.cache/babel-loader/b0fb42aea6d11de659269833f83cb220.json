{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * @fileoverview path 的一些工具\n * @author dxq613@gmail.com\n */\nimport { PathUtil } from '@antv/g-base';\nimport { Quad as QuadUtil } from '@antv/g-math';\nimport { Cubic as CubicUtil } from '@antv/g-math';\nimport { ext } from '@antv/matrix-util';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { inBox } from './util';\nimport inLine from './in-stroke/line';\nimport inArc from './in-stroke/arc';\nvar transform = ext.transform;\nfunction hasArc(path) {\n  var hasArc = false;\n  var count = path.length;\n  for (var i = 0; i < count; i++) {\n    var params = path[i];\n    var cmd = params[0];\n    if (cmd === 'C' || cmd === 'A' || cmd === 'Q') {\n      hasArc = true;\n      break;\n    }\n  }\n  return hasArc;\n}\nfunction isPointInStroke(segments, lineWidth, x, y, length) {\n  var isHit = false;\n  var halfWidth = lineWidth / 2;\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    var currentPoint = segment.currentPoint,\n      params = segment.params,\n      prePoint = segment.prePoint,\n      box = segment.box;\n    // 如果在前面已经生成过包围盒，直接按照包围盒计算\n    if (box && !inBox(box.x - halfWidth, box.y - halfWidth, box.width + lineWidth, box.height + lineWidth, x, y)) {\n      continue;\n    }\n    switch (segment.command) {\n      // L 和 Z 都是直线， M 不进行拾取\n      case 'L':\n      case 'Z':\n        isHit = inLine(prePoint[0], prePoint[1], currentPoint[0], currentPoint[1], lineWidth, x, y);\n        break;\n      case 'Q':\n        var qDistance = QuadUtil.pointDistance(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4], x, y);\n        isHit = qDistance <= lineWidth / 2;\n        break;\n      case 'C':\n        var cDistance = CubicUtil.pointDistance(prePoint[0],\n        // 上一段结束位置, 即 C 的起始点\n        prePoint[1], params[1],\n        // 'C' 的参数，1、2 为第一个控制点，3、4 为第二个控制点，5、6 为结束点\n        params[2], params[3], params[4], params[5], params[6], x, y, length);\n        isHit = cDistance <= lineWidth / 2;\n        break;\n      case 'A':\n        // 计算点到椭圆圆弧的距离，暂时使用近似算法，后面可以改成切割法求最近距离\n        var arcParams = segment.arcParams;\n        var cx = arcParams.cx,\n          cy = arcParams.cy,\n          rx = arcParams.rx,\n          ry = arcParams.ry,\n          startAngle = arcParams.startAngle,\n          endAngle = arcParams.endAngle,\n          xRotation = arcParams.xRotation;\n        var p = [x, y, 1];\n        var r = rx > ry ? rx : ry;\n        var scaleX = rx > ry ? 1 : rx / ry;\n        var scaleY = rx > ry ? ry / rx : 1;\n        var m = transform(null, [['t', -cx, -cy], ['r', -xRotation], ['s', 1 / scaleX, 1 / scaleY]]);\n        vec3.transformMat3(p, p, m);\n        isHit = inArc(0, 0, r, startAngle, endAngle, lineWidth, p[0], p[1]);\n        break;\n      default:\n        break;\n    }\n    if (isHit) {\n      break;\n    }\n  }\n  return isHit;\n}\n/**\n * 提取出内部的闭合多边形和非闭合的多边形，假设 path 不存在圆弧\n * @param {Array} path 路径\n * @returns {Array} 点的集合\n */\nfunction extractPolygons(path) {\n  var count = path.length;\n  var polygons = [];\n  var polylines = [];\n  var points = []; // 防止第一个命令不是 'M'\n  for (var i = 0; i < count; i++) {\n    var params = path[i];\n    var cmd = params[0];\n    if (cmd === 'M') {\n      // 遇到 'M' 判定是否是新数组，新数组中没有点\n      if (points.length) {\n        // 如果存在点，则说明没有遇到 'Z'，开始了一个新的多边形\n        polylines.push(points);\n        points = []; // 创建新的点\n      }\n\n      points.push([params[1], params[2]]);\n    } else if (cmd === 'Z') {\n      if (points.length) {\n        // 存在点\n        polygons.push(points);\n        points = []; // 开始新的点集合\n      }\n      // 如果不存在点，同时 'Z'，则说明是错误，不处理\n    } else {\n      points.push([params[1], params[2]]);\n    }\n  }\n  // 说明 points 未放入 polygons 或者 polyline\n  // 仅当只有一个 M，没有 Z 时会发生这种情况\n  if (points.length > 0) {\n    polylines.push(points);\n  }\n  return {\n    polygons: polygons,\n    polylines: polylines\n  };\n}\nexport default __assign({\n  hasArc: hasArc,\n  extractPolygons: extractPolygons,\n  isPointInStroke: isPointInStroke\n}, PathUtil);","map":null,"metadata":{},"sourceType":"module"}