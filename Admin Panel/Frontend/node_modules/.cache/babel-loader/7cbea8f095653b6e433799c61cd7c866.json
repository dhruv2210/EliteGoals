{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { animation, annotation, scale, theme } from '../../adaptor/common';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { geometry } from '../progress/adaptor';\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var innerRadius = options.innerRadius,\n    radius = options.radius;\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius: innerRadius,\n    radius: radius\n  });\n  return params;\n}\n/**\n * statistic 配置\n * @param params\n */\nexport function statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var innerRadius = options.innerRadius,\n    statistic = options.statistic,\n    percent = options.percent,\n    meta = options.meta;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n      return (v * 100).toFixed(2) + \"%\";\n    };\n    var contentOpt = statistic.content;\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n      });\n    }\n    renderStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: contentOpt\n      }),\n      plotType: 'ring-progress'\n    }, {\n      percent: percent\n    });\n  }\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}