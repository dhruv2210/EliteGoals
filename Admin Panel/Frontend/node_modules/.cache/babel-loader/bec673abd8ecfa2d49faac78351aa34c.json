{"ast":null,"code":"import { each, isEmpty, isNumber, isNumberEqual, max, min } from '@antv/util';\n// 获取图形的包围盒\nfunction getPointsBox(points) {\n  if (isEmpty(points)) {\n    return null;\n  }\n  var minX = points[0].x;\n  var maxX = points[0].x;\n  var minY = points[0].y;\n  var maxY = points[0].y;\n  each(points, function (point) {\n    minX = minX > point.x ? point.x : minX;\n    maxX = maxX < point.x ? point.x : maxX;\n    minY = minY > point.y ? point.y : minY;\n    maxY = maxY < point.y ? point.y : maxY;\n  });\n  return {\n    minX: minX,\n    maxX: maxX,\n    minY: minY,\n    maxY: maxY,\n    centerX: (minX + maxX) / 2,\n    centerY: (minY + maxY) / 2\n  };\n}\nfunction uniqueValues(array) {\n  return Array.from(new Set(array)).length === 1;\n}\nfunction mid(array) {\n  return (min(array) + max(array)) / 2;\n}\n/**\n * @ignore\n * 根据弧度计算极坐标系下的坐标点\n * @param centerX\n * @param centerY\n * @param radius\n * @param angleInRadian\n * @returns\n */\nexport function polarToCartesian(centerX, centerY, radius, angleInRadian) {\n  return {\n    x: centerX + radius * Math.cos(angleInRadian),\n    y: centerY + radius * Math.sin(angleInRadian)\n  };\n}\n/**\n * @ignore\n * 根据起始角度计算绘制扇形的 path\n * @param centerX\n * @param centerY\n * @param radius\n * @param startAngleInRadian\n * @param endAngleInRadian\n * @returns\n */\nexport function getSectorPath(centerX, centerY, radius, startAngleInRadian, endAngleInRadian, innerRadius) {\n  if (innerRadius === void 0) {\n    innerRadius = 0;\n  }\n  var start = polarToCartesian(centerX, centerY, radius, startAngleInRadian);\n  var end = polarToCartesian(centerX, centerY, radius, endAngleInRadian);\n  var innerStart = polarToCartesian(centerX, centerY, innerRadius, startAngleInRadian);\n  var innerEnd = polarToCartesian(centerX, centerY, innerRadius, endAngleInRadian);\n  if (endAngleInRadian - startAngleInRadian === Math.PI * 2) {\n    // 整个圆是分割成两个圆\n    var middlePoint = polarToCartesian(centerX, centerY, radius, startAngleInRadian + Math.PI);\n    var innerMiddlePoint = polarToCartesian(centerX, centerY, innerRadius, startAngleInRadian + Math.PI);\n    var circlePathCommands = [['M', start.x, start.y], ['A', radius, radius, 0, 1, 1, middlePoint.x, middlePoint.y], ['A', radius, radius, 0, 1, 1, end.x, end.y], ['M', innerStart.x, innerStart.y]];\n    if (innerRadius) {\n      circlePathCommands.push(['A', innerRadius, innerRadius, 0, 1, 0, innerMiddlePoint.x, innerMiddlePoint.y]);\n      circlePathCommands.push(['A', innerRadius, innerRadius, 0, 1, 0, innerEnd.x, innerEnd.y]);\n    }\n    circlePathCommands.push(['M', start.x, start.y]);\n    circlePathCommands.push(['Z']);\n    return circlePathCommands;\n  }\n  var arcSweep = endAngleInRadian - startAngleInRadian <= Math.PI ? 0 : 1;\n  var sectorPathCommands = [['M', start.x, start.y], ['A', radius, radius, 0, arcSweep, 1, end.x, end.y], ['L', innerEnd.x, innerEnd.y]];\n  if (innerRadius) {\n    sectorPathCommands.push(['A', innerRadius, innerRadius, 0, arcSweep, 0, innerStart.x, innerStart.y]);\n  }\n  sectorPathCommands.push(['L', start.x, start.y]);\n  sectorPathCommands.push(['Z']);\n  return sectorPathCommands;\n}\n/**\n * @ignore\n * Gets arc path\n * @param centerX\n * @param centerY\n * @param radius\n * @param startAngleInRadian\n * @param endAngleInRadian\n * @returns\n */\nexport function getArcPath(centerX, centerY, radius, startAngleInRadian, endAngleInRadian) {\n  var start = polarToCartesian(centerX, centerY, radius, startAngleInRadian);\n  var end = polarToCartesian(centerX, centerY, radius, endAngleInRadian);\n  if (isNumberEqual(endAngleInRadian - startAngleInRadian, Math.PI * 2)) {\n    var middlePoint = polarToCartesian(centerX, centerY, radius, startAngleInRadian + Math.PI);\n    return [['M', start.x, start.y], ['A', radius, radius, 0, 1, 1, middlePoint.x, middlePoint.y], ['A', radius, radius, 0, 1, 1, start.x, start.y], ['A', radius, radius, 0, 1, 0, middlePoint.x, middlePoint.y], ['A', radius, radius, 0, 1, 0, start.x, start.y], ['Z']];\n  }\n  var arcSweep = endAngleInRadian - startAngleInRadian <= Math.PI ? 0 : 1;\n  return [['M', start.x, start.y], ['A', radius, radius, 0, arcSweep, 1, end.x, end.y]];\n}\n/**\n * @ignore\n * 从数据模型中的 points 换算角度\n * @param shapeModel\n * @param coordinate\n * @returns\n */\nexport function getAngle(shapeModel, coordinate) {\n  var points = shapeModel.points;\n  var box = getPointsBox(points);\n  var endAngle;\n  var startAngle;\n  var coordStartAngle = coordinate.startAngle,\n    coordEndAngle = coordinate.endAngle;\n  var diffAngle = coordEndAngle - coordStartAngle;\n  if (coordinate.isTransposed) {\n    endAngle = box.maxY * diffAngle;\n    startAngle = box.minY * diffAngle;\n  } else {\n    endAngle = box.maxX * diffAngle;\n    startAngle = box.minX * diffAngle;\n  }\n  endAngle += coordStartAngle;\n  startAngle += coordStartAngle;\n  return {\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\n/**\n * @ignore\n * 计算多边形重心: https://en.wikipedia.org/wiki/Centroid#Of_a_polygon\n */\nexport function getPolygonCentroid(xs, ys) {\n  if (isNumber(xs) && isNumber(ys)) {\n    // 普通色块图，xs 和 ys 是数值\n    return [xs, ys];\n  }\n  xs = xs;\n  ys = ys;\n  // 当这个 polygon 的点在一条线上的时候\n  // 也就是说 xs 里面的值都相同，比如：[1, 1, 1, 1]\n  // 或者说 ys 里面的值都相同，比如：[0, 0, 0, 0]\n  // 下面计算得到的 k = 0\n  // 导致返回的值是 [NaN, NaN]\n  // 所以这里做相应的处理\n  if (uniqueValues(xs) || uniqueValues(ys)) return [mid(xs), mid(ys)];\n  var i = -1;\n  var x = 0;\n  var y = 0;\n  var former;\n  var current = xs.length - 1;\n  var diff;\n  var k = 0;\n  while (++i < xs.length) {\n    former = current;\n    current = i;\n    k += diff = xs[former] * ys[current] - xs[current] * ys[former];\n    x += (xs[former] + xs[current]) * diff;\n    y += (ys[former] + ys[current]) * diff;\n  }\n  k *= 3;\n  return [x / k, y / k];\n}\n/**\n * @ignore\n * 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n */\nexport function getReplaceAttrs(sourceShape, targetShape) {\n  var originAttrs = sourceShape.attr();\n  var newAttrs = targetShape.attr();\n  each(originAttrs, function (v, k) {\n    if (newAttrs[k] === undefined) {\n      newAttrs[k] = undefined;\n    }\n  });\n  return newAttrs;\n}","map":null,"metadata":{},"sourceType":"module"}