{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { get, isNumber } from '@antv/util';\nimport { animation, annotation, interaction, pattern, scale, state, theme, tooltip } from '../../adaptor/common';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { deepAssign, findGeometry, flow, transformLabel } from '../../utils';\nimport { getTooltipMapping } from '../../utils/tooltip';\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    type = options.type,\n    xField = options.xField,\n    yField = options.yField,\n    colorField = options.colorField,\n    sizeField = options.sizeField,\n    sizeRatio = options.sizeRatio,\n    shape = options.shape,\n    color = options.color,\n    tooltip = options.tooltip,\n    heatmapStyle = options.heatmapStyle,\n    meta = options.meta;\n  chart.data(data);\n  var geometryType = 'polygon';\n  if (type === 'density') {\n    geometryType = 'heatmap';\n  }\n  var _a = getTooltipMapping(tooltip, [xField, yField, colorField]),\n    fields = _a.fields,\n    formatter = _a.formatter;\n  /**\n   * The ratio between the actual size and the max available size, must be in range `[0,1]`.\n   *\n   * If the `sizeRatio` attribute is undefined or it exceeds the range,\n   * `checkedSizeRatio` would be set to 1 as default.\n   */\n  var checkedSizeRatio = 1;\n  if (sizeRatio || sizeRatio === 0) {\n    if (!shape && !sizeField) {\n      console.warn('sizeRatio is not in effect: Must define shape or sizeField first');\n    } else if (sizeRatio < 0 || sizeRatio > 1) {\n      console.warn('sizeRatio is not in effect: It must be a number in [0,1]');\n    } else {\n      checkedSizeRatio = sizeRatio;\n    }\n  }\n  geometryAdaptor(deepAssign({}, params, {\n    options: {\n      type: geometryType,\n      colorField: colorField,\n      tooltipFields: fields,\n      shapeField: sizeField || '',\n      label: undefined,\n      mapping: {\n        tooltip: formatter,\n        shape: shape && (sizeField ? function (dautm) {\n          var field = data.map(function (row) {\n            return row[sizeField];\n          });\n          var _a = (meta === null || meta === void 0 ? void 0 : meta[sizeField]) || {},\n            min = _a.min,\n            max = _a.max;\n          min = isNumber(min) ? min : Math.min.apply(Math, field);\n          max = isNumber(max) ? max : Math.max.apply(Math, field);\n          return [shape, (get(dautm, sizeField) - min) / (max - min), checkedSizeRatio];\n        } : function () {\n          return [shape, 1, checkedSizeRatio];\n        }),\n        color: color || colorField && chart.getTheme().sequenceColors.join('-'),\n        style: heatmapStyle\n      }\n    }\n  }));\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nfunction legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    colorField = options.colorField,\n    sizeField = options.sizeField,\n    sizeLegend = options.sizeLegend;\n  /** legend 不为 false, 则展示图例, 优先展示 color 分类图例 */\n  var showLegend = legend !== false;\n  if (colorField) {\n    chart.legend(colorField, showLegend ? legend : false);\n  }\n  // 旧版本: 有 sizeField 就有 sizeLegend. 这里默认继承下 legend 配置\n  if (sizeField) {\n    chart.legend(sizeField, sizeLegend === undefined ? legend : sizeLegend);\n  }\n  /** 默认没有 sizeField，则隐藏连续图例 */\n  if (!showLegend && !sizeLegend) {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * fixme 后续确认下，数据标签的逻辑为啥和通用的不一致\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    colorField = options.colorField,\n    type = options.type;\n  var geometry = findGeometry(chart, type === 'density' ? 'heatmap' : 'polygon');\n  if (!label) {\n    geometry.label(false);\n  } else if (colorField) {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    geometry.label({\n      fields: [colorField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  return params;\n}\n/**\n * 极坐标\n * @param params\n */\nfunction coordinate(params) {\n  var _a, _b;\n  var chart = params.chart,\n    options = params.options;\n  var coordinate = options.coordinate,\n    reflect = options.reflect;\n  var coordinateOption = deepAssign({\n    actions: []\n  }, coordinate !== null && coordinate !== void 0 ? coordinate : {\n    type: 'rect'\n  });\n  if (reflect) {\n    (_b = (_a = coordinateOption.actions) === null || _a === void 0 ? void 0 : _a.push) === null || _b === void 0 ? void 0 : _b.call(_a, ['reflect', reflect]);\n  }\n  chart.coordinate(coordinateOption);\n  return params;\n}\n/**\n * 热力图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('heatmapStyle'), meta, coordinate, geometry, axis, legend, tooltip, label, annotation(), interaction, animation, state)(params);\n}","map":null,"metadata":{},"sourceType":"module"}