{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, get, omit, set } from '@antv/util';\nimport { annotation as baseAnnotation, interaction, theme, tooltip } from '../../adaptor/common';\nimport { interval, point, violin } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, findViewById, flow, pick } from '../../utils';\nimport { addViewAnimation } from '../../utils/view';\nimport { MEDIAN_FIELD, MEDIAN_VIEW_ID, MIN_MAX_FIELD, MIN_MAX_VIEW_ID, QUANTILE_FIELD, QUANTILE_VIEW_ID, VIOLIN_SIZE_FIELD, VIOLIN_VIEW_ID, VIOLIN_Y_FIELD, X_FIELD } from './constant';\nimport { transformViolinData } from './utils';\nvar TOOLTIP_FIELDS = ['low', 'high', 'q1', 'q3', 'median'];\nvar adjustCfg = [{\n  type: 'dodge',\n  marginRatio: 1 / 32\n}];\n/** 处理数据 */\nfunction data(params) {\n  var chart = params.chart,\n    options = params.options;\n  chart.data(transformViolinData(options));\n  return params;\n}\n/** 小提琴轮廓 */\nfunction violinView(params) {\n  var chart = params.chart,\n    options = params.options;\n  var seriesField = options.seriesField,\n    color = options.color,\n    _a = options.shape,\n    shape = _a === void 0 ? 'violin' : _a,\n    violinStyle = options.violinStyle,\n    tooltip = options.tooltip,\n    state = options.state;\n  var view = chart.createView({\n    id: VIOLIN_VIEW_ID\n  });\n  violin({\n    chart: view,\n    options: {\n      xField: X_FIELD,\n      yField: VIOLIN_Y_FIELD,\n      seriesField: seriesField ? seriesField : X_FIELD,\n      sizeField: VIOLIN_SIZE_FIELD,\n      tooltip: __assign({\n        fields: TOOLTIP_FIELDS\n      }, tooltip),\n      violin: {\n        style: violinStyle,\n        color: color,\n        shape: shape\n      },\n      state: state\n    }\n  });\n  view.geometries[0].adjust(adjustCfg);\n  return params;\n}\n/** 箱线 */\nfunction boxView(params) {\n  var chart = params.chart,\n    options = params.options;\n  var seriesField = options.seriesField,\n    color = options.color,\n    tooltip = options.tooltip,\n    box = options.box;\n  // 如果配置 `box` 为 false ，不渲染内部箱线图\n  if (box === false) return params;\n  // 边缘线\n  var minMaxView = chart.createView({\n    id: MIN_MAX_VIEW_ID\n  });\n  interval({\n    chart: minMaxView,\n    options: {\n      xField: X_FIELD,\n      yField: MIN_MAX_FIELD,\n      seriesField: seriesField ? seriesField : X_FIELD,\n      tooltip: __assign({\n        fields: TOOLTIP_FIELDS\n      }, tooltip),\n      state: typeof box === 'object' ? box.state : {},\n      interval: {\n        color: color,\n        size: 1,\n        style: {\n          lineWidth: 0\n        }\n      }\n    }\n  });\n  minMaxView.geometries[0].adjust(adjustCfg);\n  // 四分点位\n  var quantileView = chart.createView({\n    id: QUANTILE_VIEW_ID\n  });\n  interval({\n    chart: quantileView,\n    options: {\n      xField: X_FIELD,\n      yField: QUANTILE_FIELD,\n      seriesField: seriesField ? seriesField : X_FIELD,\n      tooltip: __assign({\n        fields: TOOLTIP_FIELDS\n      }, tooltip),\n      state: typeof box === 'object' ? box.state : {},\n      interval: {\n        color: color,\n        size: 8,\n        style: {\n          fillOpacity: 1\n        }\n      }\n    }\n  });\n  quantileView.geometries[0].adjust(adjustCfg);\n  // 中位值\n  var medianView = chart.createView({\n    id: MEDIAN_VIEW_ID\n  });\n  point({\n    chart: medianView,\n    options: {\n      xField: X_FIELD,\n      yField: MEDIAN_FIELD,\n      seriesField: seriesField ? seriesField : X_FIELD,\n      tooltip: __assign({\n        fields: TOOLTIP_FIELDS\n      }, tooltip),\n      state: typeof box === 'object' ? box.state : {},\n      point: {\n        color: color,\n        size: 1,\n        style: {\n          fill: 'white',\n          lineWidth: 0\n        }\n      }\n    }\n  });\n  medianView.geometries[0].adjust(adjustCfg);\n  // 关闭辅助 view 的轴\n  quantileView.axis(false);\n  minMaxView.axis(false);\n  medianView.axis(false);\n  // 关闭辅助 view 的图例\n  medianView.legend(false);\n  minMaxView.legend(false);\n  quantileView.legend(false);\n  return params;\n}\n/**\n * meta 配置\n */\nfunction meta(params) {\n  var _a;\n  var chart = params.chart,\n    options = params.options;\n  var meta = options.meta,\n    xAxis = options.xAxis,\n    yAxis = options.yAxis;\n  var baseMeta = {};\n  var scales = deepAssign(baseMeta, meta, (_a = {}, _a[X_FIELD] = __assign(__assign({\n    sync: true\n  }, pick(xAxis, AXIS_META_CONFIG_KEYS)), {\n    // fix:  dodge is not support linear attribute, please use category attribute!\n    // 强制 x 轴类型为分类类型\n    type: 'cat'\n  }), _a[VIOLIN_Y_FIELD] = __assign({\n    sync: true\n  }, pick(yAxis, AXIS_META_CONFIG_KEYS)), _a[MIN_MAX_FIELD] = __assign({\n    sync: VIOLIN_Y_FIELD\n  }, pick(yAxis, AXIS_META_CONFIG_KEYS)), _a[QUANTILE_FIELD] = __assign({\n    sync: VIOLIN_Y_FIELD\n  }, pick(yAxis, AXIS_META_CONFIG_KEYS)), _a[MEDIAN_FIELD] = __assign({\n    sync: VIOLIN_Y_FIELD\n  }, pick(yAxis, AXIS_META_CONFIG_KEYS)), _a));\n  chart.scale(scales);\n  return params;\n}\n/**\n * axis 配置\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis;\n  var view = findViewById(chart, VIOLIN_VIEW_ID);\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    view.axis(X_FIELD, false);\n  } else {\n    view.axis(X_FIELD, xAxis);\n  }\n  if (yAxis === false) {\n    view.axis(VIOLIN_Y_FIELD, false);\n  } else {\n    view.axis(VIOLIN_Y_FIELD, yAxis);\n  }\n  chart.axis(false);\n  return params;\n}\n/**\n *\n * @param params\n * @returns\n */\nfunction legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    seriesField = options.seriesField,\n    shape = options.shape;\n  if (legend === false) {\n    chart.legend(false);\n  } else {\n    var legendField_1 = seriesField ? seriesField : X_FIELD;\n    // fixme 暂不明为啥有描边\n    var legendOptions = omit(legend, ['selected']);\n    if (!shape || !shape.startsWith('hollow')) {\n      if (!get(legendOptions, ['marker', 'style', 'lineWidth'])) {\n        set(legendOptions, ['marker', 'style', 'lineWidth'], 0);\n      }\n    }\n    chart.legend(legendField_1, legendOptions);\n    // 特殊的处理 fixme G2 层得解决这个问题\n    if (get(legend, 'selected')) {\n      each(chart.views, function (view) {\n        return view.legend(legendField_1, legend);\n      });\n    }\n  }\n  return params;\n}\n/**\n * annotation, apply to violin view.\n * @param params\n * @returns\n */\nfunction annotation(params) {\n  var chart = params.chart;\n  var violinView = findViewById(chart, VIOLIN_VIEW_ID);\n  baseAnnotation()(__assign(__assign({}, params), {\n    chart: violinView\n  }));\n  return params;\n}\n/**\n * 动画\n * @param params\n */\nexport function animation(params) {\n  var chart = params.chart,\n    options = params.options;\n  var animation = options.animation;\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  each(chart.views, function (view) {\n    addViewAnimation(view, animation);\n  });\n  return params;\n}\n/**\n * 小提琴图适配器\n * @param params\n */\nexport function adaptor(params) {\n  return flow(theme, data, violinView, boxView, meta, tooltip, axis, legend, interaction, annotation, animation)(params);\n}","map":null,"metadata":{},"sourceType":"module"}