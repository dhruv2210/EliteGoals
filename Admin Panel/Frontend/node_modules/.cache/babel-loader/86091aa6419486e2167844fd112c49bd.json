{"ast":null,"code":"import { arcToCubic } from './arc-2-cubic';\nimport { quadToCubic } from './quad-2-cubic';\nimport { lineToCubic } from './line-2-cubic';\nexport function segmentToCubic(segment, params) {\n  if ('TQ'.indexOf(segment[0]) < 0) {\n    params.qx = null;\n    params.qy = null;\n  }\n  var _a = segment.slice(1),\n    s1 = _a[0],\n    s2 = _a[1];\n  switch (segment[0]) {\n    case 'M':\n      params.x = s1;\n      params.y = s2;\n      return segment;\n    case 'A':\n      return ['C'].concat(arcToCubic.apply(0, [params.x1, params.y1].concat(segment.slice(1))));\n    case 'Q':\n      params.qx = s1;\n      params.qy = s2;\n      return ['C'].concat(quadToCubic.apply(0, [params.x1, params.y1].concat(segment.slice(1))));\n    case 'L':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, segment[1], segment[2]));\n    case 'H':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, segment[1], params.y1));\n    case 'V':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, params.x1, segment[1]));\n    case 'Z':\n      // @ts-ignore\n      return ['C'].concat(lineToCubic(params.x1, params.y1, params.x, params.y));\n    default:\n  }\n  return segment;\n}","map":null,"metadata":{},"sourceType":"module"}