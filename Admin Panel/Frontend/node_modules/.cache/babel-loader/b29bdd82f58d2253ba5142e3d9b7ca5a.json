{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useRef, useEffect } from 'react';\nimport { isEqual, get } from '@antv/util';\nimport createNode from '../util/createNode';\nimport { hasPath, isType, deepClone, clone, setPath } from '../util';\nexport default function useInit(ChartClass, config) {\n  var chart = useRef();\n  var chartOptions = useRef();\n  var container = useRef(null);\n  var onReady = config.onReady,\n    onEvent = config.onEvent;\n  /**\n   * Get data base64\n   * @param {string} type A DOMString indicating the image format. The default format type is image/png.\n   * @param {number} encoderOptions A Number between 0 and 1 indicating the image quality\n   */\n  var toDataURL = function toDataURL(type, encoderOptions) {\n    var _a;\n    if (type === void 0) {\n      type = 'image/png';\n    }\n    return (_a = chart.current) === null || _a === void 0 ? void 0 : _a.chart.canvas.cfg.el.toDataURL(type, encoderOptions);\n  };\n  /**\n   * Download Iamge\n   * @param {string} name A name of image\n   * @param {string} type A DOMString indicating the image format. The default format type is image/png.\n   * @param {number} encoderOptions A Number between 0 and 1 indicating the image quality\n   */\n  var downloadImage = function downloadImage(name, type, encoderOptions) {\n    var _a;\n    if (name === void 0) {\n      name = 'download';\n    }\n    if (type === void 0) {\n      type = 'image/png';\n    }\n    var imageName = name;\n    if (name.indexOf('.') === -1) {\n      imageName = \"\".concat(name, \".\").concat(type.split('/')[1]);\n    }\n    var base64 = (_a = chart.current) === null || _a === void 0 ? void 0 : _a.chart.canvas.cfg.el.toDataURL(type, encoderOptions);\n    var a = document.createElement('a');\n    a.href = base64;\n    a.download = imageName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    a = null;\n    return imageName;\n  };\n  var reactDomToString = function reactDomToString(source, path, type) {\n    var statisticCustomHtml = hasPath(source, path);\n    setPath(source, path, function () {\n      var arg = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        arg[_i] = arguments[_i];\n      }\n      var statisticDom = isType(statisticCustomHtml, 'Function') ? statisticCustomHtml.apply(void 0, arg) : statisticCustomHtml;\n      if (isType(statisticDom, 'String') || isType(statisticDom, 'Number') || isType(statisticDom, 'HTMLDivElement')) {\n        return statisticDom;\n      }\n      return createNode(statisticDom, type);\n    });\n  };\n  var processConfig = function processConfig() {\n    // statistic\n    if (hasPath(config, ['statistic', 'content', 'customHtml'])) {\n      reactDomToString(config, ['statistic', 'content', 'customHtml']);\n    }\n    if (hasPath(config, ['statistic', 'title', 'customHtml'])) {\n      reactDomToString(config, ['statistic', 'title', 'customHtml']);\n    }\n    // tooltip\n    if (typeof config.tooltip === 'object') {\n      if (hasPath(config, ['tooltip', 'container'])) {\n        reactDomToString(config, ['tooltip', 'container'], 'tooltip');\n      }\n      if (hasPath(config, ['tooltip', 'customContent'])) {\n        reactDomToString(config, ['tooltip', 'customContent'], 'tooltip');\n      }\n    }\n  };\n  useEffect(function () {\n    if (chart.current && !isEqual(chartOptions.current, config)) {\n      var changeData = false;\n      if (chartOptions.current) {\n        // 从 options 里面取出 data 、value 、 percent 进行比对，判断是否仅数值发生改变\n        var _a = chartOptions.current,\n          currentData = _a.data,\n          currentValue = _a.value,\n          currentPercent = _a.percent,\n          currentConfig = __rest(_a, [\"data\", \"value\", \"percent\"]);\n        var inputData = config.data,\n          inputValue = config.value,\n          inputPercent = config.percent,\n          inputConfig = __rest(config, [\"data\", \"value\", \"percent\"]);\n        changeData = isEqual(currentConfig, inputConfig);\n      }\n      chartOptions.current = deepClone(config);\n      if (changeData && get(config, 'chartType') !== 'Mix') {\n        var changeType_1 = 'data';\n        var typeMaps = ['percent']; // 特殊类型的图表 data 字段，例如 RingProgress\n        var currentKeys_1 = Object.keys(config);\n        typeMaps.forEach(function (type) {\n          if (currentKeys_1.includes(type)) {\n            changeType_1 = type;\n          }\n        });\n        chart.current.changeData((config === null || config === void 0 ? void 0 : config[changeType_1]) || []);\n      } else {\n        processConfig();\n        chart.current.update(config);\n      }\n    }\n  }, [config]);\n  useEffect(function () {\n    if (!container.current) {\n      return function () {\n        return null;\n      };\n    }\n    if (!chartOptions.current) {\n      chartOptions.current = deepClone(config);\n    }\n    processConfig();\n    var chartInstance = new ChartClass(container.current, __assign({}, config));\n    chartInstance.toDataURL = function (type, encoderOptions) {\n      return toDataURL(type, encoderOptions);\n    };\n    chartInstance.downloadImage = function (name, type, encoderOptions) {\n      return downloadImage(name, type, encoderOptions);\n    };\n    chartInstance.render();\n    chart.current = clone(chartInstance);\n    if (onReady) {\n      onReady(chartInstance);\n    }\n    var handler = function handler(event) {\n      if (onEvent) {\n        onEvent(chartInstance, event);\n      }\n    };\n    chartInstance.on('*', handler);\n    // 组件销毁时销毁图表\n    return function () {\n      if (chart.current) {\n        chart.current.destroy();\n        chart.current.off('*', handler);\n        chart.current = undefined;\n      }\n    };\n  }, []);\n  return {\n    chart: chart,\n    container: container\n  };\n}","map":null,"metadata":{},"sourceType":"module"}