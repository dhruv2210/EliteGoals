{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getTheme } from '@antv/g2';\nimport { isNil, isObject } from '@antv/util';\nimport { deepAssign } from '../../utils';\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { geometry } from './base';\n/**\n * 柱形图其他的 adaptor\n * @param params\n */\nfunction otherAdaptor(params) {\n  var chart = params.chart,\n    options = params.options,\n    ext = params.ext;\n  var seriesField = options.seriesField,\n    isGroup = options.isGroup,\n    isStack = options.isStack,\n    marginRatio = options.marginRatio,\n    widthRatio = options.widthRatio,\n    groupField = options.groupField,\n    theme = options.theme;\n  /**\n   * adjust\n   */\n  var adjust = [];\n  if (seriesField) {\n    // group\n    if (isGroup) {\n      adjust.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        marginRatio: marginRatio\n      });\n    }\n    // stack\n    if (isStack) {\n      adjust.push({\n        type: 'stack',\n        marginRatio: marginRatio\n      });\n    }\n  }\n  if (adjust.length && (ext === null || ext === void 0 ? void 0 : ext.geometry)) {\n    var g = ext === null || ext === void 0 ? void 0 : ext.geometry;\n    g.adjust(adjust);\n  }\n  // widthRatio\n  if (!isNil(widthRatio)) {\n    chart.theme(deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n      // columWidthRatio 配置覆盖 theme 中的配置\n      columnWidthRatio: widthRatio\n    }));\n  }\n  return params;\n}\nexport function interval(params) {\n  var options = params.options;\n  var xField = options.xField,\n    yField = options.yField,\n    interval = options.interval,\n    seriesField = options.seriesField,\n    tooltip = options.tooltip,\n    minColumnWidth = options.minColumnWidth,\n    maxColumnWidth = options.maxColumnWidth,\n    columnBackground = options.columnBackground,\n    dodgePadding = options.dodgePadding,\n    intervalPadding = options.intervalPadding,\n    useDeferredLabel = options.useDeferredLabel;\n  var _a = getTooltipMapping(tooltip, [xField, yField, seriesField]),\n    fields = _a.fields,\n    formatter = _a.formatter;\n  // 保障一定要存在 interval 映射\n  var ext = (interval ? geometry(deepAssign({}, params, {\n    options: {\n      type: 'interval',\n      colorField: seriesField,\n      tooltipFields: fields,\n      mapping: __assign({\n        tooltip: formatter\n      }, interval),\n      args: {\n        dodgePadding: dodgePadding,\n        intervalPadding: intervalPadding,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        background: columnBackground,\n        useDeferredLabel: useDeferredLabel\n      }\n    }\n  })) : params).ext;\n  return otherAdaptor(__assign(__assign({}, params), {\n    ext: ext\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}