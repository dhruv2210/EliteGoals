{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, get, isFunction, isNumber, isString } from '@antv/util';\nimport { kebabCase } from './kebab-case';\nimport { pick } from './pick';\n/**\n * @desc 生成 html-statistic 的 style 字符串 (兼容 canvas 的 shapeStyle 到 css样式上)\n *\n * @param width\n * @param style\n */\nexport function adapteStyle(style) {\n  var styleObject = {\n    overflow: 'hidden',\n    'white-space': 'nowrap',\n    'text-overflow': 'ellipsis',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n  var shapeStyleKeys = ['stroke', 'lineWidth', 'shadowColor', 'strokeOpacity', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'fill'];\n  // 兼容 shapeStyle 设置 · start\n  if (get(style, 'fill')) {\n    styleObject['color'] = style['fill'];\n  }\n  var _a = pick(style, shapeStyleKeys),\n    shadowColor = _a.shadowColor,\n    _b = _a.shadowBlur,\n    shadowBlur = _b === void 0 ? 0 : _b,\n    _c = _a.shadowOffsetX,\n    shadowOffsetX = _c === void 0 ? 0 : _c,\n    _d = _a.shadowOffsetY,\n    shadowOffsetY = _d === void 0 ? 0 : _d;\n  styleObject['text-shadow'] = \"\" + [shadowColor, shadowOffsetX + \"px\", shadowOffsetY + \"px\", shadowBlur + \"px\"].join(' ');\n  var _e = pick(style, shapeStyleKeys),\n    stroke = _e.stroke,\n    _f = _e.lineWidth,\n    lineWidth = _f === void 0 ? 0 : _f;\n  styleObject['-webkit-text-stroke'] = \"\" + [lineWidth + \"px\", stroke].join(' ');\n  // 兼容 shapeStyle 设置 · end\n  each(style, function (v, k) {\n    //  兼容 shapeStyle 的 fontSize 没有单位\n    if (['fontSize'].includes(k) && isNumber(v)) {\n      styleObject[kebabCase(k)] = v + \"px\";\n    } else if (k && !shapeStyleKeys.includes(k)) {\n      styleObject[kebabCase(k)] = \"\" + v;\n    }\n  });\n  return styleObject;\n}\n/**\n * @desc 设置 html-statistic 容器的默认样式\n *\n * - 默认事件穿透\n */\nexport function setStatisticContainerStyle(container, style) {\n  container.style['pointer-events'] = 'none';\n  each(style, function (v, k) {\n    if (k && v) {\n      container.style[k] = v;\n    }\n  });\n}\n/**\n * 渲染环图 html-annotation（默认 position 居中 [50%, 50%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport var renderStatistic = function renderStatistic(chart, options, datum) {\n  var statistic = options.statistic,\n    plotType = options.plotType;\n  var titleOpt = statistic.title,\n    contentOpt = statistic.content;\n  [titleOpt, contentOpt].forEach(function (option, idx) {\n    if (!option) {\n      return;\n    }\n    var transform = '';\n    if (idx === 0) {\n      transform = contentOpt ? 'translate(-50%, -100%)' : 'translate(-50%, -50%)';\n    } else {\n      transform = titleOpt ? 'translate(-50%, 0)' : 'translate(-50%, -50%)';\n    }\n    var style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html(__assign({\n      position: ['50%', '50%'],\n      html: function html(container, view) {\n        var coordinate = view.getCoordinate();\n        var containerW = 0;\n        if (plotType === 'pie' || plotType === 'ring-progress') {\n          containerW = coordinate.getRadius() * coordinate.innerRadius * 2;\n        } else if (plotType === 'liquid') {\n          var liquidShape = get(view.geometries, [0, 'elements', 0, 'shape']);\n          if (liquidShape) {\n            // 获取到水波图边框大小\n            var path = liquidShape.find(function (t) {\n              return t.get('name') === 'wrap';\n            });\n            var width = path.getCanvasBBox().width;\n            containerW = width;\n          }\n        } else if (!containerW) {\n          // 保底方案\n          containerW = coordinate.getWidth();\n        }\n        setStatisticContainerStyle(container, __assign({\n          width: containerW + \"px\",\n          transform: transform\n        }, adapteStyle(style)));\n        var filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n        var text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? isString(text) ? text : \"\" + text : '<div></div>';\n      },\n      // @ts-ignore\n      key: (idx === 0 ? 'top' : 'bottom') + \"-statistic\"\n    }, pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */));\n  });\n};\n/**\n * 渲染 html-annotation for gauge (等不规则 plot), 默认 position 居中居底 [50%, 100%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport var renderGaugeStatistic = function renderGaugeStatistic(chart, options, datum) {\n  var statistic = options.statistic;\n  var titleOpt = statistic.title,\n    contentOpt = statistic.content;\n  [titleOpt, contentOpt].forEach(function (option) {\n    if (!option) {\n      return;\n    }\n    var style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html(__assign({\n      position: ['50%', '100%'],\n      html: function html(container, view) {\n        var coordinate = view.getCoordinate();\n        // 弧形的坐标\n        var polarCoord = view.views[0].getCoordinate();\n        var polarCenter = polarCoord.getCenter();\n        var polarRadius = polarCoord.getRadius();\n        var polarMaxY = Math.max(Math.sin(polarCoord.startAngle), Math.sin(polarCoord.endAngle)) * polarRadius;\n        var offsetY = polarCenter.y + polarMaxY - coordinate.y.start - parseFloat(get(style, 'fontSize', 0));\n        var containerWidth = coordinate.getRadius() * coordinate.innerRadius * 2;\n        setStatisticContainerStyle(container, __assign({\n          width: containerWidth + \"px\",\n          transform: \"translate(-50%, \" + offsetY + \"px)\"\n        }, adapteStyle(style)));\n        var filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n        var text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? isString(text) ? text : \"\" + text : '<div></div>';\n      }\n    }, pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}