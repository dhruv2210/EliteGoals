{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { get } from '@antv/util';\nimport { animation, annotation, interaction as commonInteraction, legend, theme, tooltip } from '../../adaptor/common';\nimport { polygon as basePolygon } from '../../adaptor/geometries/polygon';\nimport { pattern } from '../../adaptor/pattern';\nimport { deepAssign, flow } from '../../utils';\nimport { getAdjustAppendPadding } from '../../utils/padding';\nimport { enableDrillInteraction, findInteraction, transformData } from './utils';\n/**\n * 获取默认 option\n * @param params\n */\nfunction defaultOptions(params) {\n  var options = params.options;\n  var colorField = options.colorField;\n  return deepAssign({\n    options: {\n      rawFields: ['value'],\n      tooltip: {\n        fields: ['name', 'value', colorField, 'path'],\n        formatter: function formatter(data) {\n          return {\n            name: data.name,\n            value: data.value\n          };\n        }\n      }\n    }\n  }, params);\n}\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var color = options.color,\n    colorField = options.colorField,\n    rectStyle = options.rectStyle,\n    hierarchyConfig = options.hierarchyConfig,\n    rawFields = options.rawFields;\n  var data = transformData({\n    data: options.data,\n    colorField: options.colorField,\n    enableDrillDown: enableDrillInteraction(options),\n    hierarchyConfig: hierarchyConfig\n  });\n  chart.data(data);\n  // geometry\n  basePolygon(deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField,\n      rawFields: rawFields,\n      polygon: {\n        color: color,\n        style: rectStyle\n      }\n    }\n  }));\n  // 做一个反转，这样配合排序，可以将最大值放到左上角，最小值放到右下角\n  chart.coordinate().reflect('y');\n  return params;\n}\n/**\n * 坐标轴\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\nfunction adaptorInteraction(options) {\n  var drilldown = options.drilldown,\n    _a = options.interactions,\n    interactions = _a === void 0 ? [] : _a;\n  var enableDrillDown = enableDrillInteraction(options);\n  if (enableDrillDown) {\n    return deepAssign({}, options, {\n      interactions: __spreadArrays(interactions, [{\n        type: 'drill-down',\n        // 🚓 这不是一个规范的 API，后续会变更。慎重参考\n        cfg: {\n          drillDownConfig: drilldown,\n          transformData: transformData\n        }\n      }])\n    });\n  }\n  return options;\n}\n/**\n * Interaction 配置\n * @param params\n */\nexport function interaction(params) {\n  var chart = params.chart,\n    options = params.options;\n  var interactions = options.interactions,\n    drilldown = options.drilldown;\n  commonInteraction({\n    chart: chart,\n    options: adaptorInteraction(options)\n  });\n  // 适配 view-zoom\n  var viewZoomInteraction = findInteraction(interactions, 'view-zoom');\n  if (viewZoomInteraction) {\n    // 开启缩放 interaction 后，则阻止默认滚动事件，避免整个窗口的滚动\n    if (viewZoomInteraction.enable !== false) {\n      chart.getCanvas().on('mousewheel', function (ev) {\n        ev.preventDefault();\n      });\n    } else {\n      // 手动关闭后，清除。仅对声明 viewZoomInteraction 的清除。\n      chart.getCanvas().off('mousewheel');\n    }\n  }\n  // 适应下钻交互面包屑\n  var enableDrillDown = enableDrillInteraction(options);\n  if (enableDrillDown) {\n    // 为面包屑在底部留出 25px 的空间\n    chart.appendPadding = getAdjustAppendPadding(chart.appendPadding, get(drilldown, ['breadCrumb', 'position']));\n  }\n  return params;\n}\n/**\n * 矩形树图\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(defaultOptions, theme, pattern('rectStyle'), geometry, axis, legend, tooltip, interaction, animation, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}