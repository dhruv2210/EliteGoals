{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport { animation, annotation, interaction, theme, tooltip } from '../../adaptor/common';\nimport { point, schema } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { BOX_RANGE, BOX_SYNC_NAME, OUTLIERS_VIEW_ID } from './constant';\nimport { transformData } from './utils';\n/**\n * 字段\n * @param params\n */\nfunction field(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xField = options.xField,\n    yField = options.yField,\n    groupField = options.groupField,\n    color = options.color,\n    tooltip = options.tooltip,\n    boxStyle = options.boxStyle;\n  chart.data(transformData(options.data, yField));\n  var yFieldName = isArray(yField) ? BOX_RANGE : yField;\n  var rawFields = yField ? isArray(yField) ? yField : [yField] : [];\n  var tooltipOptions = tooltip;\n  if (tooltipOptions !== false) {\n    tooltipOptions = deepAssign({}, {\n      fields: isArray(yField) ? yField : []\n    }, tooltipOptions);\n  }\n  var ext = schema(deepAssign({}, params, {\n    options: {\n      xField: xField,\n      yField: yFieldName,\n      seriesField: groupField,\n      tooltip: tooltipOptions,\n      rawFields: rawFields,\n      // 只有异常点视图展示 label\n      label: false,\n      schema: {\n        shape: 'box',\n        color: color,\n        style: boxStyle\n      }\n    }\n  })).ext;\n  if (groupField) {\n    ext.geometry.adjust('dodge');\n  }\n  return params;\n}\n/**\n * 创建异常点 view\n */\nfunction outliersPoint(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xField = options.xField,\n    data = options.data,\n    outliersField = options.outliersField,\n    outliersStyle = options.outliersStyle,\n    padding = options.padding,\n    label = options.label;\n  if (!outliersField) return params;\n  var outliersView = chart.createView({\n    padding: padding,\n    id: OUTLIERS_VIEW_ID\n  });\n  var outliersViewData = data.reduce(function (ret, datum) {\n    var outliersData = datum[outliersField];\n    outliersData.forEach(function (d) {\n      var _a;\n      return ret.push(__assign(__assign({}, datum), (_a = {}, _a[outliersField] = d, _a)));\n    });\n    return ret;\n  }, []);\n  outliersView.data(outliersViewData);\n  point({\n    chart: outliersView,\n    options: {\n      xField: xField,\n      yField: outliersField,\n      point: {\n        shape: 'circle',\n        style: outliersStyle\n      },\n      label: label\n    }\n  });\n  outliersView.axis(false);\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a, _b;\n  var chart = params.chart,\n    options = params.options;\n  var meta = options.meta,\n    xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField,\n    outliersField = options.outliersField;\n  var yFieldName = Array.isArray(yField) ? BOX_RANGE : yField;\n  var baseMeta = {};\n  // make yField and outliersField share y mate\n  if (outliersField) {\n    var syncName = BOX_SYNC_NAME;\n    baseMeta = (_a = {}, _a[outliersField] = {\n      sync: syncName,\n      nice: true\n    }, _a[yFieldName] = {\n      sync: syncName,\n      nice: true\n    }, _a);\n  }\n  var scales = deepAssign(baseMeta, meta, (_b = {}, _b[xField] = pick(xAxis, AXIS_META_CONFIG_KEYS), _b[yFieldName] = pick(yAxis, AXIS_META_CONFIG_KEYS), _b));\n  chart.scale(scales);\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  var yFieldName = Array.isArray(yField) ? BOX_RANGE : yField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(BOX_RANGE, false);\n  } else {\n    chart.axis(yFieldName, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    groupField = options.groupField;\n  if (groupField) {\n    if (legend) {\n      chart.legend(groupField, legend);\n    } else {\n      // Grouped Box Chart default has legend, and it's position is `bottom`\n      chart.legend(groupField, {\n        position: 'bottom'\n      });\n    }\n  } else {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * 箱型图适配器\n * @param params\n */\nexport function adaptor(params) {\n  return flow(field, outliersPoint, meta, axis, legend, tooltip, annotation(), interaction, animation, theme)(params);\n}","map":null,"metadata":{},"sourceType":"module"}