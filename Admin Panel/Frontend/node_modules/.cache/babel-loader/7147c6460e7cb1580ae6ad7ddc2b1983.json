{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { treemap } from '../../utils/hierarchy/treemap';\nexport function findInteraction(interactions, interactionType) {\n  if (!isArray(interactions)) return undefined;\n  return interactions.find(function (i) {\n    return i.type === interactionType;\n  });\n}\nexport function enableInteraction(interactions, interactionType) {\n  var interaction = findInteraction(interactions, interactionType);\n  return interaction && interaction.enable !== false;\n}\n/**\n * 是否允许下钻交互\n * @param interactions\n * @param interactionType\n * @returns\n */\nexport function enableDrillInteraction(options) {\n  var interactions = options.interactions,\n    drilldown = options.drilldown;\n  // 兼容旧版本, treemap-drill-down\n  return get(drilldown, 'enabled') || enableInteraction(interactions, 'treemap-drill-down');\n}\nexport function resetDrillDown(chart) {\n  var drillDownInteraction = chart.interactions['drill-down'];\n  if (!drillDownInteraction) return;\n  // @ts-ignore\n  var drillDownAction = drillDownInteraction.context.actions.find(function (i) {\n    return i.name === 'drill-down-action';\n  });\n  drillDownAction.reset();\n}\nexport function transformData(options) {\n  var data = options.data,\n    colorField = options.colorField,\n    enableDrillDown = options.enableDrillDown,\n    hierarchyConfig = options.hierarchyConfig;\n  var nodes = treemap(data, __assign(__assign({}, hierarchyConfig), {\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    if (node.depth === 0) {\n      return null;\n    }\n    // 开启下钻，仅加载 depth === 1 的数据\n    if (enableDrillDown && node.depth !== 1) {\n      return null;\n    }\n    // 不开启下钻，加载所有叶子节点\n    if (!enableDrillDown && node.children) {\n      return null;\n    }\n    // path 信息仅挑选必要祖先元素属性，因为在有些属性是不必要(x, y), 或是不准确的(下钻时的 depth)，不对外透出\n    var curPath = node.ancestors().map(function (n) {\n      return {\n        data: n.data,\n        height: n.height,\n        value: n.value\n      };\n    });\n    // 在下钻树图中，每次绘制的是当前层级信息，将父元素的层级信息（data.path) 做一层拼接。\n    var path = enableDrillDown && isArray(data.path) ? curPath.concat(data.path.slice(1)) : curPath;\n    var nodeInfo = Object.assign({}, node.data, __assign({\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value,\n      path: path\n    }, node));\n    if (!node.data[colorField] && node.parent) {\n      var ancestorNode = node.ancestors().find(function (n) {\n        return n.data[colorField];\n      });\n      nodeInfo[colorField] = ancestorNode === null || ancestorNode === void 0 ? void 0 : ancestorNode.data[colorField];\n    } else {\n      nodeInfo[colorField] = node.data[colorField];\n    }\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      colorField: colorField,\n      enableDrillDown: enableDrillDown\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}