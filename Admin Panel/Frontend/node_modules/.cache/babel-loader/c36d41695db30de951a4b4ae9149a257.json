{"ast":null,"code":"import { createDom } from './dom';\nexport function setShadow(model, context) {\n  var el = model.cfg.el;\n  var attrs = model.attr();\n  var cfg = {\n    dx: attrs.shadowOffsetX,\n    dy: attrs.shadowOffsetY,\n    blur: attrs.shadowBlur,\n    color: attrs.shadowColor\n  };\n  if (!cfg.dx && !cfg.dy && !cfg.blur && !cfg.color) {\n    el.removeAttribute('filter');\n  } else {\n    var id = context.find('filter', cfg);\n    if (!id) {\n      id = context.addShadow(cfg);\n    }\n    el.setAttribute('filter', \"url(#\" + id + \")\");\n  }\n}\nexport function setTransform(model) {\n  var matrix = model.attr().matrix;\n  if (matrix) {\n    var el = model.cfg.el;\n    var transform = [];\n    for (var i = 0; i < 9; i += 3) {\n      transform.push(matrix[i] + \",\" + matrix[i + 1]);\n    }\n    transform = transform.join(',');\n    if (transform.indexOf('NaN') === -1) {\n      el.setAttribute('transform', \"matrix(\" + transform + \")\");\n    } else {\n      console.warn('invalid matrix:', matrix);\n    }\n  }\n}\nexport function setClip(model, context) {\n  var clip = model.getClip();\n  var el = model.get('el');\n  if (!clip) {\n    el.removeAttribute('clip-path');\n  } else if (clip && !el.hasAttribute('clip-path')) {\n    createDom(clip);\n    clip.createPath(context);\n    var id = context.addClip(clip);\n    el.setAttribute('clip-path', \"url(#\" + id + \")\");\n  }\n}","map":null,"metadata":{},"sourceType":"module"}