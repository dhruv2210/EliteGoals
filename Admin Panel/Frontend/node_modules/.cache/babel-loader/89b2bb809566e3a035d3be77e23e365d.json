{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\n/**\n * @fileoverview line\n * @author dengfuping_develop@163.com\n */\nimport { Line as LineUtil } from '@antv/g-math';\nimport { each, isObject } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\nvar Line = /** @class */function (_super) {\n  __extends(Line, _super);\n  function Line() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'line';\n    _this.canFill = false;\n    _this.canStroke = true;\n    return _this;\n  }\n  Line.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      startArrow: false,\n      endArrow: false\n    });\n  };\n  Line.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    each(targetAttrs || attrs, function (value, attr) {\n      if (attr === 'startArrow' || attr === 'endArrow') {\n        if (value) {\n          var id = isObject(value) ? context.addArrow(attrs, SVG_ATTR_MAP[attr]) : context.getDefaultArrow(attrs, SVG_ATTR_MAP[attr]);\n          el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n        } else {\n          el.removeAttribute(SVG_ATTR_MAP[attr]);\n        }\n      } else if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n  };\n  /**\n   * Use math calculation to get length of line\n   * @return {number} length\n   */\n  Line.prototype.getTotalLength = function () {\n    var _a = this.attr(),\n      x1 = _a.x1,\n      y1 = _a.y1,\n      x2 = _a.x2,\n      y2 = _a.y2;\n    return LineUtil.length(x1, y1, x2, y2);\n  };\n  /**\n   * Use math calculation to get point according to ratio as same sa Canvas version\n   * @param {number} ratio\n   * @return {Point} point\n   */\n  Line.prototype.getPoint = function (ratio) {\n    var _a = this.attr(),\n      x1 = _a.x1,\n      y1 = _a.y1,\n      x2 = _a.x2,\n      y2 = _a.y2;\n    return LineUtil.pointAt(x1, y1, x2, y2, ratio);\n  };\n  return Line;\n}(ShapeBase);\nexport default Line;","map":null,"metadata":{},"sourceType":"module"}