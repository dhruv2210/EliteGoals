{"ast":null,"code":"import { each, isArray, isNil, isNumber } from '@antv/util';\nexport function formatPadding(padding) {\n  var top = 0;\n  var left = 0;\n  var right = 0;\n  var bottom = 0;\n  if (isNumber(padding)) {\n    top = left = right = bottom = padding;\n  } else if (isArray(padding)) {\n    top = padding[0];\n    right = !isNil(padding[1]) ? padding[1] : padding[0];\n    bottom = !isNil(padding[2]) ? padding[2] : padding[0];\n    left = !isNil(padding[3]) ? padding[3] : right;\n  }\n  return [top, right, bottom, left];\n}\nexport function clearDom(container) {\n  var children = container.childNodes;\n  var length = children.length;\n  for (var i = length - 1; i >= 0; i--) {\n    container.removeChild(children[i]);\n  }\n}\nexport function hasClass(elements, cName) {\n  return !!elements.className.match(new RegExp(\"(\\\\s|^)\" + cName + \"(\\\\s|$)\"));\n}\nexport function regionToBBox(region) {\n  var start = region.start,\n    end = region.end;\n  var minX = Math.min(start.x, end.x);\n  var minY = Math.min(start.y, end.y);\n  var maxX = Math.max(start.x, end.x);\n  var maxY = Math.max(start.y, end.y);\n  return {\n    x: minX,\n    y: minY,\n    minX: minX,\n    minY: minY,\n    maxX: maxX,\n    maxY: maxY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nexport function pointsToBBox(points) {\n  var xs = points.map(function (point) {\n    return point.x;\n  });\n  var ys = points.map(function (point) {\n    return point.y;\n  });\n  var minX = Math.min.apply(Math, xs);\n  var minY = Math.min.apply(Math, ys);\n  var maxX = Math.max.apply(Math, xs);\n  var maxY = Math.max.apply(Math, ys);\n  return {\n    x: minX,\n    y: minY,\n    minX: minX,\n    minY: minY,\n    maxX: maxX,\n    maxY: maxY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nexport function createBBox(x, y, width, height) {\n  var maxX = x + width;\n  var maxY = y + height;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    minX: x,\n    minY: y,\n    // 非常奇葩的 js 特性\n    // Infinity + Infinity = Infinity\n    // Infinity - Infinity = NaN\n    // fixed https://github.com/antvis/G2Plot/issues/1243\n    maxX: isNaN(maxX) ? 0 : maxX,\n    maxY: isNaN(maxY) ? 0 : maxY\n  };\n}\nexport function getValueByPercent(min, max, percent) {\n  return (1 - percent) * min + max * percent;\n}\nexport function getCirclePoint(center, radius, angle) {\n  return {\n    x: center.x + Math.cos(angle) * radius,\n    y: center.y + Math.sin(angle) * radius\n  };\n}\nexport function distance(p1, p2) {\n  var dx = p2.x - p1.x;\n  var dy = p2.y - p1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\nexport var wait = function wait(interval) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, interval);\n  });\n};\n/**\n * 判断两个数值 是否接近\n * - 解决精度问题（由于无法确定精度上限，根据具体场景可传入 精度 参数）\n */\nexport var near = function near(x, y, e) {\n  if (e === void 0) {\n    e = Math.pow(Number.EPSILON, 0.5);\n  }\n  return [x, y].includes(Infinity) ? Math.abs(x) === Math.abs(y) : Math.abs(x - y) < e;\n};\nexport function intersectBBox(box1, box2) {\n  var minX = Math.max(box1.minX, box2.minX);\n  var minY = Math.max(box1.minY, box2.minY);\n  var maxX = Math.min(box1.maxX, box2.maxX);\n  var maxY = Math.min(box1.maxY, box2.maxY);\n  return createBBox(minX, minY, maxX - minX, maxY - minY);\n}\nexport function mergeBBox(box1, box2) {\n  var minX = Math.min(box1.minX, box2.minX);\n  var minY = Math.min(box1.minY, box2.minY);\n  var maxX = Math.max(box1.maxX, box2.maxX);\n  var maxY = Math.max(box1.maxY, box2.maxY);\n  return createBBox(minX, minY, maxX - minX, maxY - minY);\n}\nexport function getBBoxWithClip(element) {\n  var clipShape = element.getClip();\n  var clipBBox = clipShape && clipShape.getBBox();\n  var bbox;\n  if (!element.isGroup()) {\n    // 如果是普通的图形\n    bbox = element.getBBox();\n  } else {\n    var minX_1 = Infinity;\n    var maxX_1 = -Infinity;\n    var minY_1 = Infinity;\n    var maxY_1 = -Infinity;\n    var children = element.getChildren();\n    if (children.length > 0) {\n      each(children, function (child) {\n        if (child.get('visible')) {\n          // 如果分组没有子元素，则直接跳过\n          if (child.isGroup() && child.get('children').length === 0) {\n            return true;\n          }\n          var box = getBBoxWithClip(child);\n          // 计算 4 个顶点\n          var leftTop = child.applyToMatrix([box.minX, box.minY, 1]);\n          var leftBottom = child.applyToMatrix([box.minX, box.maxY, 1]);\n          var rightTop = child.applyToMatrix([box.maxX, box.minY, 1]);\n          var rightBottom = child.applyToMatrix([box.maxX, box.maxY, 1]);\n          // 从中取最小的范围\n          var boxMinX = Math.min(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);\n          var boxMaxX = Math.max(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);\n          var boxMinY = Math.min(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);\n          var boxMaxY = Math.max(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);\n          if (boxMinX < minX_1) {\n            minX_1 = boxMinX;\n          }\n          if (boxMaxX > maxX_1) {\n            maxX_1 = boxMaxX;\n          }\n          if (boxMinY < minY_1) {\n            minY_1 = boxMinY;\n          }\n          if (boxMaxY > maxY_1) {\n            maxY_1 = boxMaxY;\n          }\n        }\n      });\n    } else {\n      minX_1 = 0;\n      maxX_1 = 0;\n      minY_1 = 0;\n      maxY_1 = 0;\n    }\n    bbox = createBBox(minX_1, minY_1, maxX_1 - minX_1, maxY_1 - minY_1);\n  }\n  if (clipBBox) {\n    return intersectBBox(bbox, clipBBox);\n  } else {\n    return bbox;\n  }\n}\nexport function updateClip(element, newElement) {\n  if (!element.getClip() && !newElement.getClip()) {\n    // 两者都没有 clip\n    return;\n  }\n  var newClipShape = newElement.getClip();\n  if (!newClipShape) {\n    // 新的 element 没有 clip\n    element.setClip(null); // 移除 clip\n    return;\n  }\n  var clipCfg = {\n    type: newClipShape.get('type'),\n    attrs: newClipShape.attr()\n  };\n  element.setClip(clipCfg);\n}\nexport function toPx(number) {\n  return number + \"px\";\n}\nexport function getTextPoint(start, end, position, offset) {\n  var lineLength = distance(start, end);\n  var offsetPercent = offset / lineLength; // 计算间距同线的比例，用于计算最终的位置\n  var percent = 0;\n  if (position === 'start') {\n    percent = 0 - offsetPercent;\n  } else if (position === 'end') {\n    percent = 1 + offsetPercent;\n  }\n  return {\n    x: getValueByPercent(start.x, end.x, percent),\n    y: getValueByPercent(start.y, end.y, percent)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}