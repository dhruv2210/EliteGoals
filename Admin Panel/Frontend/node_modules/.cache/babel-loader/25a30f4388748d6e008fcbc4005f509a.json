{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nvar skeletonClsLoading = new Keyframes(\"ant-skeleton-loading\", {\n  '0%': {\n    transform: 'translateX(-37.5%)'\n  },\n  '100%': {\n    transform: 'translateX(37.5%)'\n  }\n});\nvar genSkeletonElementCommonSize = function genSkeletonElementCommonSize(size) {\n  return {\n    height: size,\n    lineHeight: size + \"px\"\n  };\n};\nvar genSkeletonElementAvatarSize = function genSkeletonElementAvatarSize(size) {\n  return _extends({\n    width: size\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonColor = function genSkeletonColor(token) {\n  return {\n    position: 'relative',\n    // fix https://github.com/ant-design/ant-design/issues/36444\n    // https://monshin.github.io/202109/css/safari-border-radius-overflow-hidden/\n    /* stylelint-disable-next-line property-no-vendor-prefix,value-no-vendor-prefix */\n    zIndex: 0,\n    overflow: 'hidden',\n    background: 'transparent',\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      insetInlineEnd: '-150%',\n      bottom: 0,\n      insetInlineStart: '-150%',\n      background: token.skeletonLoadingBackground,\n      animationName: skeletonClsLoading,\n      animationDuration: token.skeletonLoadingMotionDuration,\n      animationTimingFunction: 'ease',\n      animationIterationCount: 'infinite',\n      content: '\"\"'\n    }\n  };\n};\nvar genSkeletonElementInputSize = function genSkeletonElementInputSize(size) {\n  return _extends({\n    width: size * 5,\n    minWidth: size * 5\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonElementAvatar = function genSkeletonElementAvatar(token) {\n  var _ref;\n  var skeletonAvatarCls = token.skeletonAvatarCls,\n    color = token.color,\n    controlHeight = token.controlHeight,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM;\n  return _ref = {}, _defineProperty(_ref, \"\" + skeletonAvatarCls, _extends({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: color\n  }, genSkeletonElementAvatarSize(controlHeight))), _defineProperty(_ref, \"\" + skeletonAvatarCls + skeletonAvatarCls + \"-circle\", {\n    borderRadius: '50%'\n  }), _defineProperty(_ref, \"\" + skeletonAvatarCls + skeletonAvatarCls + \"-lg\", _extends({}, genSkeletonElementAvatarSize(controlHeightLG))), _defineProperty(_ref, \"\" + skeletonAvatarCls + skeletonAvatarCls + \"-sm\", _extends({}, genSkeletonElementAvatarSize(controlHeightSM))), _ref;\n};\nvar genSkeletonElementInput = function genSkeletonElementInput(token) {\n  var _ref2;\n  var controlHeight = token.controlHeight,\n    borderRadiusSM = token.borderRadiusSM,\n    skeletonInputCls = token.skeletonInputCls,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    color = token.color;\n  return _ref2 = {}, _defineProperty(_ref2, \"\" + skeletonInputCls, _extends({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: color,\n    borderRadius: borderRadiusSM\n  }, genSkeletonElementInputSize(controlHeight))), _defineProperty(_ref2, skeletonInputCls + \"-lg\", _extends({}, genSkeletonElementInputSize(controlHeightLG))), _defineProperty(_ref2, skeletonInputCls + \"-sm\", _extends({}, genSkeletonElementInputSize(controlHeightSM))), _ref2;\n};\nvar genSkeletonElementImageSize = function genSkeletonElementImageSize(size) {\n  return _extends({\n    width: size\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonElementImage = function genSkeletonElementImage(token) {\n  var _extends2, _ref3;\n  var skeletonImageCls = token.skeletonImageCls,\n    imageSizeBase = token.imageSizeBase,\n    color = token.color,\n    borderRadiusSM = token.borderRadiusSM;\n  return _ref3 = {}, _defineProperty(_ref3, \"\" + skeletonImageCls, _extends(_extends({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'top',\n    background: color,\n    borderRadius: borderRadiusSM\n  }, genSkeletonElementImageSize(imageSizeBase * 2)), (_extends2 = {}, _defineProperty(_extends2, skeletonImageCls + \"-path\", {\n    fill: '#bfbfbf'\n  }), _defineProperty(_extends2, skeletonImageCls + \"-svg\", _extends(_extends({}, genSkeletonElementImageSize(imageSizeBase)), {\n    maxWidth: imageSizeBase * 4,\n    maxHeight: imageSizeBase * 4\n  })), _defineProperty(_extends2, skeletonImageCls + \"-svg\" + skeletonImageCls + \"-svg-circle\", {\n    borderRadius: '50%'\n  }), _extends2))), _defineProperty(_ref3, \"\" + skeletonImageCls + skeletonImageCls + \"-circle\", {\n    borderRadius: '50%'\n  }), _ref3;\n};\nvar genSkeletonElementButtonShape = function genSkeletonElementButtonShape(token, size, buttonCls) {\n  var _ref4;\n  var skeletonButtonCls = token.skeletonButtonCls;\n  return _ref4 = {}, _defineProperty(_ref4, \"\" + buttonCls + skeletonButtonCls + \"-circle\", {\n    width: size,\n    minWidth: size,\n    borderRadius: '50%'\n  }), _defineProperty(_ref4, \"\" + buttonCls + skeletonButtonCls + \"-round\", {\n    borderRadius: size\n  }), _ref4;\n};\nvar genSkeletonElementButtonSize = function genSkeletonElementButtonSize(size) {\n  return _extends({\n    width: size * 2,\n    minWidth: size * 2\n  }, genSkeletonElementCommonSize(size));\n};\nvar genSkeletonElementButton = function genSkeletonElementButton(token) {\n  var borderRadiusSM = token.borderRadiusSM,\n    skeletonButtonCls = token.skeletonButtonCls,\n    controlHeight = token.controlHeight,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    color = token.color;\n  return _extends(_extends(_extends(_extends(_extends(_defineProperty({}, \"\" + skeletonButtonCls, _extends({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: color,\n    borderRadius: borderRadiusSM,\n    width: controlHeight * 2,\n    minWidth: controlHeight * 2\n  }, genSkeletonElementButtonSize(controlHeight))), genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), _defineProperty({}, skeletonButtonCls + \"-lg\", _extends({}, genSkeletonElementButtonSize(controlHeightLG)))), genSkeletonElementButtonShape(token, controlHeightLG, skeletonButtonCls + \"-lg\")), _defineProperty({}, skeletonButtonCls + \"-sm\", _extends({}, genSkeletonElementButtonSize(controlHeightSM)))), genSkeletonElementButtonShape(token, controlHeightSM, skeletonButtonCls + \"-sm\"));\n};\n// =============================== Base ===============================\nvar genBaseStyle = function genBaseStyle(token) {\n  var _ref5, _ref7, _ref9, _ref12, _ref14;\n  var componentCls = token.componentCls,\n    skeletonAvatarCls = token.skeletonAvatarCls,\n    skeletonTitleCls = token.skeletonTitleCls,\n    skeletonParagraphCls = token.skeletonParagraphCls,\n    skeletonButtonCls = token.skeletonButtonCls,\n    skeletonInputCls = token.skeletonInputCls,\n    skeletonImageCls = token.skeletonImageCls,\n    controlHeight = token.controlHeight,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    color = token.color,\n    padding = token.padding,\n    marginSM = token.marginSM,\n    borderRadius = token.borderRadius,\n    skeletonTitleHeight = token.skeletonTitleHeight,\n    skeletonBlockRadius = token.skeletonBlockRadius,\n    skeletonParagraphLineHeight = token.skeletonParagraphLineHeight,\n    controlHeightXS = token.controlHeightXS,\n    skeletonParagraphMarginTop = token.skeletonParagraphMarginTop;\n  return _ref14 = {}, _defineProperty(_ref14, \"\" + componentCls, (_ref9 = {\n    display: 'table',\n    width: '100%'\n  }, _defineProperty(_ref9, componentCls + \"-header\", (_ref5 = {\n    display: 'table-cell',\n    paddingInlineEnd: padding,\n    verticalAlign: 'top'\n  }, _defineProperty(_ref5, \"\" + skeletonAvatarCls, _extends({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: color\n  }, genSkeletonElementAvatarSize(controlHeight))), _defineProperty(_ref5, skeletonAvatarCls + \"-circle\", {\n    borderRadius: '50%'\n  }), _defineProperty(_ref5, skeletonAvatarCls + \"-lg\", _extends({}, genSkeletonElementAvatarSize(controlHeightLG))), _defineProperty(_ref5, skeletonAvatarCls + \"-sm\", _extends({}, genSkeletonElementAvatarSize(controlHeightSM))), _ref5)), _defineProperty(_ref9, componentCls + \"-content\", (_ref7 = {\n    display: 'table-cell',\n    width: '100%',\n    verticalAlign: 'top'\n  }, _defineProperty(_ref7, \"\" + skeletonTitleCls, _defineProperty({\n    width: '100%',\n    height: skeletonTitleHeight,\n    background: color,\n    borderRadius: skeletonBlockRadius\n  }, \"+ \" + skeletonParagraphCls, {\n    marginBlockStart: controlHeightSM\n  })), _defineProperty(_ref7, \"\" + skeletonParagraphCls, {\n    padding: 0,\n    '> li': {\n      width: '100%',\n      height: skeletonParagraphLineHeight,\n      listStyle: 'none',\n      background: color,\n      borderRadius: skeletonBlockRadius,\n      '+ li': {\n        marginBlockStart: controlHeightXS\n      }\n    }\n  }), _defineProperty(_ref7, skeletonParagraphCls + \"> li:last-child:not(:first-child):not(:nth-child(2))\", {\n    width: '61%'\n  }), _ref7)), _defineProperty(_ref9, \"&-round \" + componentCls + \"-content\", _defineProperty({}, skeletonTitleCls + \", \" + skeletonParagraphCls + \" > li\", {\n    borderRadius: borderRadius\n  })), _ref9)), _defineProperty(_ref14, componentCls + \"-with-avatar \" + componentCls + \"-content\", _defineProperty({}, \"\" + skeletonTitleCls, _defineProperty({\n    marginBlockStart: marginSM\n  }, \"+ \" + skeletonParagraphCls, {\n    marginBlockStart: skeletonParagraphMarginTop\n  }))), _defineProperty(_ref14, \"\" + componentCls + componentCls + \"-element\", _extends(_extends(_extends(_extends({\n    display: 'inline-block',\n    width: 'auto'\n  }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token))), _defineProperty(_ref14, \"\" + componentCls + componentCls + \"-block\", (_ref12 = {\n    width: '100%'\n  }, _defineProperty(_ref12, \"\" + skeletonButtonCls, {\n    width: '100%'\n  }), _defineProperty(_ref12, \"\" + skeletonInputCls, {\n    width: '100%'\n  }), _ref12)), _defineProperty(_ref14, \"\" + componentCls + componentCls + \"-active\", _defineProperty({}, \"\\n        \" + skeletonTitleCls + \",\\n        \" + skeletonParagraphCls + \" > li,\\n        \" + skeletonAvatarCls + \",\\n        \" + skeletonButtonCls + \",\\n        \" + skeletonInputCls + \",\\n        \" + skeletonImageCls + \"\\n      \", _extends({}, genSkeletonColor(token)))), _ref14;\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', function (token) {\n  var componentCls = token.componentCls;\n  var skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: componentCls + \"-avatar\",\n    skeletonTitleCls: componentCls + \"-title\",\n    skeletonParagraphCls: componentCls + \"-paragraph\",\n    skeletonButtonCls: componentCls + \"-button\",\n    skeletonInputCls: componentCls + \"-input\",\n    skeletonImageCls: componentCls + \"-image\",\n    imageSizeBase: token.controlHeight * 1.5,\n    skeletonTitleHeight: token.controlHeight / 2,\n    skeletonBlockRadius: token.borderRadiusSM,\n    skeletonParagraphLineHeight: token.controlHeight / 2,\n    skeletonParagraphMarginTop: token.marginLG + token.marginXXS,\n    borderRadius: 100,\n    skeletonLoadingBackground: \"linear-gradient(90deg, \" + token.color + \" 25%, \" + token.colorGradientEnd + \" 37%, \" + token.color + \" 63%)\",\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, function (token) {\n  var colorFillContent = token.colorFillContent,\n    colorFill = token.colorFill;\n  return {\n    color: colorFillContent,\n    colorGradientEnd: colorFill\n  };\n});","map":null,"metadata":{},"sourceType":"module"}