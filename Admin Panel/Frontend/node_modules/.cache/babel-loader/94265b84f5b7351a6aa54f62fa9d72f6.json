{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { DIRECTION } from '../../constant';\n/** @ignore */\nvar PaddingCal = /** @class */function () {\n  /**\n   * 初始的 padding 数据\n   * @param top\n   * @param right\n   * @param bottom\n   * @param left\n   */\n  function PaddingCal(top, right, bottom, left) {\n    if (top === void 0) {\n      top = 0;\n    }\n    if (right === void 0) {\n      right = 0;\n    }\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n    if (left === void 0) {\n      left = 0;\n    }\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n  /**\n   * 使用静态方法创建一个\n   * @param top\n   * @param right\n   * @param bottom\n   * @param left\n   */\n  PaddingCal.instance = function (top, right, bottom, left) {\n    if (top === void 0) {\n      top = 0;\n    }\n    if (right === void 0) {\n      right = 0;\n    }\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n    if (left === void 0) {\n      left = 0;\n    }\n    return new PaddingCal(top, right, bottom, left);\n  };\n  /**\n   * 取最大区间\n   * @param padding\n   */\n  PaddingCal.prototype.max = function (padding) {\n    var _a = __read(padding, 4),\n      top = _a[0],\n      right = _a[1],\n      bottom = _a[2],\n      left = _a[3];\n    this.top = Math.max(this.top, top);\n    this.right = Math.max(this.right, right);\n    this.bottom = Math.max(this.bottom, bottom);\n    this.left = Math.max(this.left, left);\n    return this;\n  };\n  /**\n   * 四周增加 padding\n   * @param padding\n   */\n  PaddingCal.prototype.shrink = function (padding) {\n    var _a = __read(padding, 4),\n      top = _a[0],\n      right = _a[1],\n      bottom = _a[2],\n      left = _a[3];\n    this.top += top;\n    this.right += right;\n    this.bottom += bottom;\n    this.left += left;\n    return this;\n  };\n  /**\n   * 在某一个方向增加 padding\n   * @param bbox\n   * @param direction\n   */\n  PaddingCal.prototype.inc = function (bbox, direction) {\n    var width = bbox.width,\n      height = bbox.height;\n    switch (direction) {\n      case DIRECTION.TOP:\n      case DIRECTION.TOP_LEFT:\n      case DIRECTION.TOP_RIGHT:\n        this.top += height;\n        break;\n      case DIRECTION.RIGHT:\n      case DIRECTION.RIGHT_TOP:\n      case DIRECTION.RIGHT_BOTTOM:\n        this.right += width;\n        break;\n      case DIRECTION.BOTTOM:\n      case DIRECTION.BOTTOM_LEFT:\n      case DIRECTION.BOTTOM_RIGHT:\n        this.bottom += height;\n        break;\n      case DIRECTION.LEFT:\n      case DIRECTION.LEFT_TOP:\n      case DIRECTION.LEFT_BOTTOM:\n        this.left += width;\n        break;\n      default:\n        break;\n    }\n    return this;\n  };\n  /**\n   * 获得最终的 padding\n   */\n  PaddingCal.prototype.getPadding = function () {\n    return [this.top, this.right, this.bottom, this.left];\n  };\n  /**\n   * clone 一个 padding cal\n   */\n  PaddingCal.prototype.clone = function () {\n    return new (PaddingCal.bind.apply(PaddingCal, __spreadArray([void 0], __read(this.getPadding()), false)))();\n  };\n  return PaddingCal;\n}();\nexport { PaddingCal };","map":null,"metadata":{},"sourceType":"module"}