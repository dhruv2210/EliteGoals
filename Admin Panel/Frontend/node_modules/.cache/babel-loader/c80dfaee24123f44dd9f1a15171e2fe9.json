{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Base } from '@antv/g-base';\nimport { deepMix, each, hasKey, isObject } from '@antv/util';\nvar LOCATION_FIELD_MAP = {\n  none: [],\n  point: ['x', 'y'],\n  region: ['start', 'end'],\n  points: ['points'],\n  circle: ['center', 'radius', 'startAngle', 'endAngle']\n};\nvar Component = /** @class */function (_super) {\n  __extends(Component, _super);\n  function Component(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.initCfg();\n    return _this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  Component.prototype.getDefaultCfg = function () {\n    return {\n      id: '',\n      name: '',\n      type: '',\n      locationType: 'none',\n      offsetX: 0,\n      offsetY: 0,\n      animate: false,\n      capture: true,\n      updateAutoRender: false,\n      animateOption: {\n        appear: null,\n        update: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        enter: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        leave: {\n          duration: 350,\n          easing: 'easeQuadIn'\n        }\n      },\n      events: null,\n      defaultCfg: {},\n      visible: true\n    };\n  };\n  /**\n   * 清理组件的内容，一般配合 render 使用\n   * @example\n   * axis.clear();\n   * axis.render();\n   */\n  Component.prototype.clear = function () {};\n  /**\n   * 更新组件\n   * @param {object} cfg 更新属性\n   */\n  Component.prototype.update = function (cfg) {\n    var _this = this;\n    var defaultCfg = this.get('defaultCfg') || {};\n    each(cfg, function (value, name) {\n      var originCfg = _this.get(name);\n      var newCfg = value;\n      if (originCfg !== value) {\n        // 判断两者是否相等，主要是进行 null 的判定\n        if (isObject(value) && defaultCfg[name]) {\n          // 新设置的属性与默认值进行合并\n          newCfg = deepMix({}, defaultCfg[name], value);\n        }\n        _this.set(name, newCfg);\n      }\n    });\n    this.updateInner(cfg);\n    this.afterUpdate(cfg);\n  };\n  // 更新内部\n  Component.prototype.updateInner = function (cfg) {};\n  Component.prototype.afterUpdate = function (cfg) {\n    // 更新时考虑显示、隐藏\n    if (hasKey(cfg, 'visible')) {\n      if (cfg.visible) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n    // 更新时考虑capture\n    if (hasKey(cfg, 'capture')) {\n      this.setCapture(cfg.capture);\n    }\n  };\n  Component.prototype.getLayoutBBox = function () {\n    return this.getBBox(); // 默认返回 getBBox，不同的组件内部单独实现\n  };\n\n  Component.prototype.getLocationType = function () {\n    return this.get('locationType');\n  };\n  Component.prototype.getOffset = function () {\n    return {\n      offsetX: this.get('offsetX'),\n      offsetY: this.get('offsetY')\n    };\n  };\n  // 默认使用 update\n  Component.prototype.setOffset = function (offsetX, offsetY) {\n    this.update({\n      offsetX: offsetX,\n      offsetY: offsetY\n    });\n  };\n  Component.prototype.setLocation = function (cfg) {\n    var location = __assign({}, cfg);\n    this.update(location);\n  };\n  // 实现 ILocation 接口的 getLocation\n  Component.prototype.getLocation = function () {\n    var _this = this;\n    var location = {};\n    var locationType = this.get('locationType');\n    var fields = LOCATION_FIELD_MAP[locationType];\n    each(fields, function (field) {\n      location[field] = _this.get(field);\n    });\n    return location;\n  };\n  Component.prototype.isList = function () {\n    return false;\n  };\n  Component.prototype.isSlider = function () {\n    return false;\n  };\n  /**\n   * @protected\n   * 初始化，用于具体的组件继承\n   */\n  Component.prototype.init = function () {};\n  // 将组件默认的配置项设置合并到传入的配置项\n  Component.prototype.initCfg = function () {\n    var _this = this;\n    var defaultCfg = this.get('defaultCfg');\n    each(defaultCfg, function (value, name) {\n      var cfg = _this.get(name);\n      if (isObject(cfg)) {\n        var newCfg = deepMix({}, value, cfg);\n        _this.set(name, newCfg);\n      }\n    });\n  };\n  return Component;\n}(Base);\nexport default Component;","map":null,"metadata":{},"sourceType":"module"}