{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, some } from '@antv/util';\nimport ListState from './list-state';\nvar STATUS_UNCHECKED = 'unchecked';\nvar STATUS_CHECKED = 'checked';\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nvar ListChecked = /** @class */function (_super) {\n  __extends(ListChecked, _super);\n  function ListChecked() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_CHECKED;\n    return _this;\n  }\n  // 单个 item 设置状态\n  ListChecked.prototype.setItemState = function (list, item, enable) {\n    this.setCheckedBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 checked\n  ListChecked.prototype.setCheckedBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  };\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  ListChecked.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      var list_1 = triggerInfo.list,\n        item = triggerInfo.item;\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      var allChecked = !some(list_1.getItems(), function (t) {\n        return list_1.hasState(t, STATUS_UNCHECKED);\n      });\n      //\n      if (allChecked || list_1.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list_1, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  };\n  /**\n   * checked 图例项\n   */\n  ListChecked.prototype.checked = function () {\n    this.setState();\n  };\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  ListChecked.prototype.reset = function () {\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  };\n  return ListChecked;\n}(ListState);\nexport default ListChecked;","map":null,"metadata":{},"sourceType":"module"}