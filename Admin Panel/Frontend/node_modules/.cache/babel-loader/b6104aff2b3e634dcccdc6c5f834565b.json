{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { deepMix, get, isArray, isEqual } from '@antv/util';\nimport { animation, interaction, scale, theme, tooltip } from '../../adaptor/common';\nimport { schema as schemaGeometry } from '../../adaptor/geometries';\nimport { deepAssign, findGeometry, flow, getAdjustAppendPadding, LEVEL, log, normalPadding, resolveAllPadding, transformLabel } from '../../utils';\nimport { ID_FIELD } from './constant';\nimport './interactions';\nimport './label';\nimport './shape';\nimport { getColorMap, islegalSets, layoutVennData } from './utils';\n/** 图例默认预留空间 */\nexport var LEGEND_SPACE = 40;\n/**\n * 获取 color 映射\n */\nfunction colorMap(params, data, colorPalette) {\n  var chart = params.chart,\n    options = params.options;\n  var blendMode = options.blendMode,\n    setsField = options.setsField;\n  var _a = chart.getTheme(),\n    colors10 = _a.colors10,\n    colors20 = _a.colors20;\n  var palette = colorPalette;\n  if (!isArray(palette)) {\n    palette = data.filter(function (d) {\n      return d[setsField].length === 1;\n    }).length <= 10 ? colors10 : colors20;\n  }\n  var map = getColorMap(palette, data, blendMode, setsField);\n  return function (id) {\n    return map.get(id) || palette[0];\n  };\n}\n/**\n * color options 转换\n */\nfunction transformColor(params, data) {\n  var options = params.options;\n  var color = options.color;\n  if (typeof color !== 'function') {\n    var colorPalette = typeof color === 'string' ? [color] : color;\n    var map_1 = colorMap(params, data, colorPalette);\n    return function (datum) {\n      return map_1(datum[ID_FIELD]);\n    };\n  }\n  return color;\n}\n/**\n * 处理 padding\n */\nfunction padding(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    appendPadding = options.appendPadding,\n    padding = options.padding;\n  // 处理 legend 的位置. 默认预留 40px, 业务上可以通过 appendPadding 增加\n  var tempPadding = normalPadding(appendPadding);\n  if (legend !== false) {\n    tempPadding = getAdjustAppendPadding(appendPadding, get(legend, 'position'), LEGEND_SPACE);\n  }\n  chart.appendPadding = resolveAllPadding([tempPadding, padding]);\n  return params;\n}\n/**\n * 处理非法数据\n * @param params\n */\nfunction data(params) {\n  var options = params.options;\n  /* 如遇到 交集 中存在 非法元素 的情况，就过滤掉\n   * 如：\n   * data = [\n   *   { sets: ['A'], size: 3 }, // 集合\n   *   { sets: ['B'], size: 4 }, // 集合\n   *   { sets: ['A', 'B'], size: 2 }, // 交集\n   *   { sets: ['A', 'B', 'C'], size: 2 }, // 交集 (存在非法 C，过滤该条数据)\n   *   ...\n   * ]\n   */\n  var data = options['data'];\n  if (!data) {\n    log(LEVEL.WARN, false, 'warn: %s', '数据不能为空');\n    data = [];\n  }\n  // 合法元素的集合：['A', 'B']\n  var currSets = data.filter(function (datum) {\n    return datum.sets.length === 1;\n  }).map(function (datum) {\n    return datum.sets[0];\n  });\n  // 过滤 data\n  var filterSets = data.filter(function (datum) {\n    var sets = datum.sets;\n    // 存在非法元素，就过滤这条数据\n    return islegalSets(currSets, sets);\n  });\n  if (!isEqual(filterSets, data)) log(LEVEL.WARN, false, 'warn: %s', '交集中不能出现不存在的集合, 请输入合法数据');\n  return deepMix({}, params, {\n    options: {\n      data: filterSets\n    }\n  });\n}\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var pointStyle = options.pointStyle,\n    setsField = options.setsField,\n    sizeField = options.sizeField;\n  // 获取容器大小\n  var _a = normalPadding(chart.appendPadding),\n    t = _a[0],\n    r = _a[1],\n    b = _a[2],\n    l = _a[3];\n  // 处理 legend 的位置. 默认预留 40px, 业务上可以通过 appendPadding 增加\n  var customInfo = {\n    offsetX: l,\n    offsetY: t\n  };\n  // coordinateBBox + appendPadding = viewBBox, 不需要再计算 appendPadding 部分，因此直接使用 viewBBox\n  var _b = chart.viewBBox,\n    width = _b.width,\n    height = _b.height;\n  // 处理padding输入不合理的情况， w 和 h 不能为负数\n  var vennData = layoutVennData(options, Math.max(width - (r + l), 0), Math.max(height - (t + b), 0), 0);\n  chart.data(vennData);\n  var ext = schemaGeometry(deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      sizeField: sizeField,\n      seriesField: ID_FIELD,\n      rawFields: [setsField, sizeField],\n      schema: {\n        shape: 'venn',\n        style: pointStyle\n      }\n    }\n  })).ext;\n  var geometry = ext.geometry;\n  geometry.customInfo(customInfo);\n  var colorOptions = transformColor(params, vennData);\n  // 韦恩图试点, color 通道只能映射一个字段. 通过外部查找获取 datum\n  if (typeof colorOptions === 'function') {\n    geometry.color(ID_FIELD, function (id) {\n      var datum = vennData.find(function (d) {\n        return d[ID_FIELD] === id;\n      });\n      var defaultColor = colorMap(params, vennData)(id);\n      return colorOptions(datum, defaultColor);\n    });\n  }\n  return params;\n}\n/**\n * 处理 label\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label;\n  // 获取容器大小\n  var _a = normalPadding(chart.appendPadding),\n    t = _a[0],\n    l = _a[3];\n  // 传入 label 布局函数所需的 自定义参数\n  var customLabelInfo = {\n    offsetX: l,\n    offsetY: t\n  };\n  var geometry = findGeometry(chart, 'schema');\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    geometry.label({\n      fields: ['id'],\n      callback: callback,\n      cfg: deepMix({}, transformLabel(cfg), {\n        // 使用 G2 的 自定义label 修改位置\n        type: 'venn',\n        customLabelInfo: customLabelInfo\n      })\n    });\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    sizeField = options.sizeField;\n  chart.legend(ID_FIELD, legend);\n  // 强制不开启 连续图例\n  chart.legend(sizeField, false);\n  return params;\n}\n/**\n * 默认关闭坐标轴\n * @param params\n */\nexport function axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n/**\n * 韦恩图 interaction 交互适配器\n */\nfunction vennInteraction(params) {\n  var options = params.options,\n    chart = params.chart;\n  var interactions = options.interactions;\n  if (interactions) {\n    var MAP_1 = {\n      'legend-active': 'venn-legend-active',\n      'legend-highlight': 'venn-legend-highlight'\n    };\n    interaction(deepAssign({}, params, {\n      options: {\n        interactions: interactions.map(function (i) {\n          return __assign(__assign({}, i), {\n            type: MAP_1[i.type] || i.type\n          });\n        })\n      }\n    }));\n  }\n  chart.removeInteraction('legend-active');\n  chart.removeInteraction('legend-highlight');\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(padding, theme, data, geometry, label, scale({}), legend, axis, tooltip, vennInteraction, animation\n  // ... 其他的 adaptor flow\n  )(params);\n}","map":null,"metadata":{},"sourceType":"module"}