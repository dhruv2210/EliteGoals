{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport Action from '../base';\nimport { getCurrentElement, getElementValue, getElementsByField } from '../util';\nimport { deepMix, each, isFunction } from '@antv/util';\n/**\n * Link Elements by color\n *\n * public 方法是对外可用的反馈交互。使用方式，如：element-link-by-color:link, element-link-by-color:unlink, element-link-by-color:clear\n */\nvar LinkByColor = /** @class */function (_super) {\n  __extends(LinkByColor, _super);\n  function LinkByColor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.cache = {};\n    return _this;\n  }\n  // 获取颜色对应的 scale\n  LinkByColor.prototype.getColorScale = function (view, element) {\n    var colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return null;\n    }\n    var scale = view.getScaleByField(colorAttr.getFields()[0]);\n    return scale;\n  };\n  // 获取连接的 path\n  LinkByColor.prototype.getLinkPath = function (element, nextElement) {\n    var view = this.context.view;\n    var isTransposed = view.getCoordinate().isTransposed;\n    var bbox = element.shape.getCanvasBBox();\n    var nextBBox = nextElement.shape.getCanvasBBox();\n    var path = isTransposed ? [['M', bbox.minX, bbox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', nextBBox.maxX, nextBBox.maxY], ['L', bbox.maxX, bbox.minY], ['Z']] : [['M', bbox.maxX, bbox.minY], ['L', nextBBox.minX, nextBBox.minY], ['L', nextBBox.minX, nextBBox.maxY], ['L', bbox.maxX, bbox.maxY], ['Z']];\n    return path;\n  };\n  // 添加连接的图形\n  LinkByColor.prototype.addLinkShape = function (group, element, nextElement, activeStyle) {\n    var style = {\n      opacity: 0.4,\n      fill: element.shape.attr('fill')\n    };\n    group.addShape({\n      type: 'path',\n      attrs: __assign(__assign({}, deepMix({}, style, isFunction(activeStyle) ? activeStyle(style, element) : activeStyle)), {\n        path: this.getLinkPath(element, nextElement)\n      })\n    });\n  };\n  // 使用图形连接\n  LinkByColor.prototype.linkByElement = function (element, activeStyle) {\n    var _this = this;\n    var view = this.context.view;\n    var scale = this.getColorScale(view, element);\n    if (!scale) {\n      return;\n    }\n    var value = getElementValue(element, scale.field);\n    if (!this.cache[value]) {\n      var elements_1 = getElementsByField(view, scale.field, value);\n      var linkGroup = this.linkGroup;\n      var group_1 = linkGroup.addGroup();\n      this.cache[value] = group_1; // 缓存\n      var count_1 = elements_1.length;\n      each(elements_1, function (el, index) {\n        if (index < count_1 - 1) {\n          var nextEl = elements_1[index + 1];\n          _this.addLinkShape(group_1, el, nextEl, activeStyle);\n        }\n      });\n    }\n  };\n  // 移除连接\n  LinkByColor.prototype.removeLink = function (element) {\n    var scale = this.getColorScale(this.context.view, element);\n    if (!scale) {\n      return;\n    }\n    var value = getElementValue(element, scale.field);\n    if (this.cache[value]) {\n      this.cache[value].remove();\n      this.cache[value] = null;\n    }\n  };\n  /**\n   * 连接 elements\n   *\n   * @usage\n   * registerInteraction('xxx', {\n   *   start: [\n   *    {\n   *      trigger: 'interval:mouseenter',\n   *      action: 'element-link-by-color:link',\n   *      arg: {\n   *        // style: { fill: 'red' }\n   *        style: (style, element) => ({ fill: 'red' })\n   *     },\n   *   },\n   *  ],\n   * });\n   */\n  LinkByColor.prototype.link = function (args) {\n    var context = this.context;\n    if (!this.linkGroup) {\n      // 不允许被拾取\n      this.linkGroup = context.view.foregroundGroup.addGroup({\n        id: 'link-by-color-group',\n        capture: false\n      });\n    }\n    var element = getCurrentElement(context);\n    if (element) {\n      this.linkByElement(element, args === null || args === void 0 ? void 0 : args.style);\n    }\n  };\n  /**\n   * 取消连接 elements\n   */\n  LinkByColor.prototype.unlink = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      this.removeLink(element);\n    }\n  };\n  /**\n   * 清除所有连接\n   */\n  LinkByColor.prototype.clear = function () {\n    if (this.linkGroup) {\n      this.linkGroup.clear();\n    }\n    this.cache = {};\n  };\n  /**\n   * 销毁\n   */\n  LinkByColor.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    if (this.linkGroup) {\n      this.linkGroup.remove();\n    }\n  };\n  return LinkByColor;\n}(Action);\nexport default LinkByColor;","map":null,"metadata":{},"sourceType":"module"}