{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\nvar AbstractShape = /** @class */function (_super) {\n  __extends(AbstractShape, _super);\n  function AbstractShape(cfg) {\n    return _super.call(this, cfg) || this;\n  }\n  // 是否在包围盒内\n  AbstractShape.prototype._isInBBox = function (refX, refY) {\n    var bbox = this.getBBox();\n    return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n   */\n  AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n    this.clearCacheBBox();\n  };\n  // 计算包围盒时，需要缓存，这是一个高频的操作\n  AbstractShape.prototype.getBBox = function () {\n    var bbox = this.cfg.bbox;\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set('bbox', bbox);\n    }\n    return bbox;\n  };\n  // 计算相对于画布的包围盒\n  AbstractShape.prototype.getCanvasBBox = function () {\n    var canvasBBox = this.cfg.canvasBBox;\n    if (!canvasBBox) {\n      canvasBBox = this.calculateCanvasBBox();\n      this.set('canvasBBox', canvasBBox);\n    }\n    return canvasBBox;\n  };\n  AbstractShape.prototype.applyMatrix = function (matrix) {\n    _super.prototype.applyMatrix.call(this, matrix);\n    // 清理掉缓存的包围盒\n    this.set('canvasBBox', null);\n  };\n  /**\n   * 计算相对于画布的包围盒，默认等同于 bbox\n   * @return {BBox} 包围盒\n   */\n  AbstractShape.prototype.calculateCanvasBBox = function () {\n    var bbox = this.getBBox();\n    var totalMatrix = this.getTotalMatrix();\n    var minX = bbox.minX,\n      minY = bbox.minY,\n      maxX = bbox.maxX,\n      maxY = bbox.maxY;\n    if (totalMatrix) {\n      var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n      var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n      var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n      var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n      minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n      maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n    }\n    var attrs = this.attrs;\n    // 如果存在 shadow 则计算 shadow\n    if (attrs.shadowColor) {\n      var _a = attrs.shadowBlur,\n        shadowBlur = _a === void 0 ? 0 : _a,\n        _b = attrs.shadowOffsetX,\n        shadowOffsetX = _b === void 0 ? 0 : _b,\n        _c = attrs.shadowOffsetY,\n        shadowOffsetY = _c === void 0 ? 0 : _c;\n      var shadowLeft = minX - shadowBlur + shadowOffsetX;\n      var shadowRight = maxX + shadowBlur + shadowOffsetX;\n      var shadowTop = minY - shadowBlur + shadowOffsetY;\n      var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n      minX = Math.min(minX, shadowLeft);\n      maxX = Math.max(maxX, shadowRight);\n      minY = Math.min(minY, shadowTop);\n      maxY = Math.max(maxY, shadowBottom);\n    }\n    return {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  /**\n   * @protected\n   * 清理缓存的 bbox\n   */\n  AbstractShape.prototype.clearCacheBBox = function () {\n    this.set('bbox', null);\n    this.set('canvasBBox', null);\n  };\n  // 实现接口\n  AbstractShape.prototype.isClipShape = function () {\n    return this.get('isClipShape');\n  };\n  /**\n   * @protected\n   * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n   * @param  {number}  refX 相对于图形的坐标 x\n   * @param  {number}  refY 相对于图形的坐标 Y\n   * @return {boolean} 点是否在图形内部\n   */\n  AbstractShape.prototype.isInShape = function (refX, refY) {\n    return false;\n  };\n  /**\n   * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n   * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n   * @return {Boolean} 仅仅使用 BBox 进行拾取\n   */\n  AbstractShape.prototype.isOnlyHitBox = function () {\n    return false;\n  };\n  // 不同的 Shape 各自实现\n  AbstractShape.prototype.isHit = function (x, y) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n    var vec = [x, y, 1];\n    vec = this.invertFromMatrix(vec);\n    var refX = vec[0],\n      refY = vec[1];\n    var inBBox = this._isInBBox(refX, refY);\n    // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n    if (this.isOnlyHitBox()) {\n      return inBBox;\n    }\n    // 被裁减掉的和不在包围盒内的不进行计算\n    if (inBBox && !this.isClipped(refX, refY)) {\n      // 对图形进行拾取判断\n      if (this.isInShape(refX, refY)) {\n        return true;\n      }\n      // 对起始箭头进行拾取判断\n      if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n      // 对结束箭头进行拾取判断\n      if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  return AbstractShape;\n}(Element);\nexport default AbstractShape;","map":null,"metadata":{},"sourceType":"module"}