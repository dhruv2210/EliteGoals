{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport mapValues from 'lodash/mapValues';\nimport ValidationError from '../ValidationError';\nimport Ref from '../Reference';\nexport default function createValidation(config) {\n  function validate(_ref, cb) {\n    var value = _ref.value,\n      _ref$path = _ref.path,\n      path = _ref$path === void 0 ? '' : _ref$path,\n      label = _ref.label,\n      options = _ref.options,\n      originalValue = _ref.originalValue,\n      sync = _ref.sync,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"value\", \"path\", \"label\", \"options\", \"originalValue\", \"sync\"]);\n    var name = config.name,\n      test = config.test,\n      params = config.params,\n      message = config.message;\n    var parent = options.parent,\n      context = options.context;\n    function resolve(item) {\n      return Ref.isRef(item) ? item.getValue(value, parent, context) : item;\n    }\n    function createError() {\n      var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var nextParams = mapValues(_extends({\n        value: value,\n        originalValue: originalValue,\n        label: label,\n        path: overrides.path || path\n      }, params, overrides.params), resolve);\n      var error = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);\n      error.params = nextParams;\n      return error;\n    }\n    var ctx = _extends({\n      path: path,\n      parent: parent,\n      type: name,\n      createError: createError,\n      resolve: resolve,\n      options: options,\n      originalValue: originalValue\n    }, rest);\n    if (!sync) {\n      try {\n        Promise.resolve(test.call(ctx, value, ctx)).then(function (validOrError) {\n          if (ValidationError.isError(validOrError)) cb(validOrError);else if (!validOrError) cb(createError());else cb(null, validOrError);\n        }).catch(cb);\n      } catch (err) {\n        cb(err);\n      }\n      return;\n    }\n    var result;\n    try {\n      var _ref2;\n      result = test.call(ctx, value, ctx);\n      if (typeof ((_ref2 = result) == null ? void 0 : _ref2.then) === 'function') {\n        throw new Error(\"Validation test of type: \\\"\".concat(ctx.type, \"\\\" returned a Promise during a synchronous validate. \") + \"This test will finish after the validate call has returned\");\n      }\n    } catch (err) {\n      cb(err);\n      return;\n    }\n    if (ValidationError.isError(result)) cb(result);else if (!result) cb(createError());else cb(null, result);\n  }\n  validate.OPTIONS = config;\n  return validate;\n}","map":null,"metadata":{},"sourceType":"module"}