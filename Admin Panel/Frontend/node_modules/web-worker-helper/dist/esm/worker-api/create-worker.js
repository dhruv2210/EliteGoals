var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
import AsyncQueue from '../async-queue/async-queue';
import WorkerBody from '../worker-farm/worker-body';
/** Counter for jobs */
var requestId = 0;
// 异步队列
var inputBatches;
var options;
/**
 * Set up a WebWorkerGlobalScope to talk with the main thread
 */
export function createWorker(process, processInBatches) {
    var _this = this;
    // 检查是否在 worker 线程中
    if (typeof self === 'undefined') {
        return;
    }
    var context = {
        process: processOnMainThread,
    };
    WorkerBody.onmessage = function (type, payload) { return __awaiter(_this, void 0, void 0, function () {
        var _a, result, resultIterator, resultIterator_1, resultIterator_1_1, batch, e_1_1, error_1, message;
        var e_1, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 19, , 20]);
                    _a = type;
                    switch (_a) {
                        case 'process': return [3 /*break*/, 1];
                        case 'process-in-batches': return [3 /*break*/, 3];
                        case 'input-batch': return [3 /*break*/, 16];
                        case 'input-done': return [3 /*break*/, 17];
                    }
                    return [3 /*break*/, 18];
                case 1:
                    if (!process) {
                        throw new Error('Worker does not support atomic processing');
                    }
                    return [4 /*yield*/, process(payload.input, payload.options || {}, context)];
                case 2:
                    result = _c.sent();
                    WorkerBody.postMessage('done', { result: result });
                    return [3 /*break*/, 18];
                case 3:
                    if (!processInBatches) {
                        throw new Error('Worker does not support batched processing');
                    }
                    inputBatches = new AsyncQueue();
                    options = payload.options || {};
                    resultIterator = processInBatches(inputBatches, options, context);
                    _c.label = 4;
                case 4:
                    _c.trys.push([4, 9, 10, 15]);
                    resultIterator_1 = __asyncValues(resultIterator);
                    _c.label = 5;
                case 5: return [4 /*yield*/, resultIterator_1.next()];
                case 6:
                    if (!(resultIterator_1_1 = _c.sent(), !resultIterator_1_1.done)) return [3 /*break*/, 8];
                    batch = resultIterator_1_1.value;
                    WorkerBody.postMessage('output-batch', { result: batch });
                    _c.label = 7;
                case 7: return [3 /*break*/, 5];
                case 8: return [3 /*break*/, 15];
                case 9:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 15];
                case 10:
                    _c.trys.push([10, , 13, 14]);
                    if (!(resultIterator_1_1 && !resultIterator_1_1.done && (_b = resultIterator_1.return))) return [3 /*break*/, 12];
                    return [4 /*yield*/, _b.call(resultIterator_1)];
                case 11:
                    _c.sent();
                    _c.label = 12;
                case 12: return [3 /*break*/, 14];
                case 13:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 14: return [7 /*endfinally*/];
                case 15:
                    WorkerBody.postMessage('done', {});
                    return [3 /*break*/, 18];
                case 16:
                    inputBatches.push(payload.input);
                    return [3 /*break*/, 18];
                case 17:
                    inputBatches.close();
                    return [3 /*break*/, 18];
                case 18: return [3 /*break*/, 20];
                case 19:
                    error_1 = _c.sent();
                    message = error_1 instanceof Error ? error_1.message : '';
                    WorkerBody.postMessage('error', { error: message });
                    return [3 /*break*/, 20];
                case 20: return [2 /*return*/];
            }
        });
    }); };
}
function processOnMainThread(arrayBuffer, options) {
    if (options === void 0) { options = {}; }
    return new Promise(function (resolve, reject) {
        var id = requestId++;
        /**
         */
        var onMessage = function (type, payload) {
            if (payload.id !== id) {
                // not ours
                return;
            }
            switch (type) {
                case 'done':
                    WorkerBody.removeEventListener(onMessage);
                    resolve(payload.result);
                    break;
                case 'error':
                    WorkerBody.removeEventListener(onMessage);
                    reject(payload.error);
                    break;
                default:
                // ignore
            }
        };
        WorkerBody.addEventListener(onMessage);
        // Ask the main thread to decode data
        var payload = { id: id, input: arrayBuffer, options: options };
        WorkerBody.postMessage('process', payload);
    });
}
