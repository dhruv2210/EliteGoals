var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* global importScripts */
import { global, isWorker } from '../env-utils/globals';
import { assert } from '../env-utils/assert';
var loadLibraryPromises = {}; // promises
/**
 * Dynamically loads a library ("module")
 *
 * - wasm library: Array buffer is returned
 * - js library: Parse JS is returned
 *
 * Method depends on environment
 * - browser - script element is created and installed on document
 * - worker - eval is called on global context
 * - node - file is required
 *
 * @param libraryUrl
 * @param moduleName
 * @param options
 */
export function loadLibrary(libraryUrl, moduleName, options) {
    if (moduleName === void 0) { moduleName = null; }
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (moduleName) {
                        libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);
                    }
                    // Ensure libraries are only loaded once
                    loadLibraryPromises[libraryUrl] = loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);
                    return [4 /*yield*/, loadLibraryPromises[libraryUrl]];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
// TODO - sort out how to resolve paths for main/worker and dev/prod
export function getLibraryUrl(library, moduleName, options) {
    // Check if already a URL
    if (library.startsWith('http')) {
        return library;
    }
    // Allow application to import and supply libraries through `options.modules`
    var modules = options.modules || {};
    if (modules[library]) {
        return modules[library];
    }
    // load from external scripts
    if (options.CDN) {
        assert(options.CDN.startsWith('http'));
        return options.CDN + "/" + moduleName + "/dist/libs/" + library;
    }
    // TODO - loading inside workers requires paths relative to worker script location...
    if (isWorker) {
        return "../src/libs/" + library;
    }
    return "modules/" + moduleName + "/src/libs/" + library;
}
function loadLibraryFromFile(libraryUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var response_1, response, scriptSource;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!libraryUrl.endsWith('wasm')) return [3 /*break*/, 3];
                    return [4 /*yield*/, fetch(libraryUrl)];
                case 1:
                    response_1 = _a.sent();
                    return [4 /*yield*/, response_1.arrayBuffer()];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    if (isWorker) {
                        return [2 /*return*/, importScripts(libraryUrl)];
                    }
                    return [4 /*yield*/, fetch(libraryUrl)];
                case 4:
                    response = _a.sent();
                    return [4 /*yield*/, response.text()];
                case 5:
                    scriptSource = _a.sent();
                    return [2 /*return*/, loadLibraryFromString(scriptSource, libraryUrl)];
            }
        });
    });
}
/*
async function loadScriptFromFile(libraryUrl) {
  const script = document.createElement('script');
  script.src = libraryUrl;
  return await new Promise((resolve, reject) => {
    script.onload = data => {
      resolve(data);
    };
    script.onerror = reject;
  });
}
*/
// TODO - Needs security audit...
//  - Raw eval call
//  - Potentially bypasses CORS
// Upside is that this separates fetching and parsing
// we could create a`LibraryLoader` or`ModuleLoader`
function loadLibraryFromString(scriptSource, id) {
    if (isWorker) {
        // Use lvalue trick to make eval run in global scope
        eval.call(global, scriptSource); // eslint-disable-line no-eval
        // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript
        return null;
    }
    var script = document.createElement('script');
    script.id = id;
    // most browsers like a separate text node but some throw an error. The second method covers those.
    try {
        script.appendChild(document.createTextNode(scriptSource));
    }
    catch (e) {
        script.text = scriptSource;
    }
    document.body.appendChild(script);
    return null;
}
// TODO - technique for module injection into worker, from THREE.DracoLoader...
/*
function combineWorkerWithLibrary(worker, jsContent) {
  var fn = wWorker.toString();
  var body = [
    '// injected',
    jsContent,
    '',
    '// worker',
    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))
  ].join('\n');
  this.workerSourceURL = URL.createObjectURL(new Blob([body]));
}
*/
