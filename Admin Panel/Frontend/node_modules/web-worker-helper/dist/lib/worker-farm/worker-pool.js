"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("../utils/env-utils/globals");
var worker_thread_1 = __importDefault(require("./worker-thread"));
var worker_job_1 = __importDefault(require("./worker-job"));
/**
 * Process multiple data messages with small pool of identical workers
 */
var WorkerPool = /** @class */ (function () {
    function WorkerPool(props) {
        this.name = 'unnamed';
        this.maxConcurrency = 1;
        this.maxMobileConcurrency = 1;
        this.onDebug = function () { };
        this.reuseWorkers = true;
        this.props = {};
        this.jobQueue = [];
        this.idleQueue = [];
        this.count = 0;
        this.isDestroyed = false;
        this.source = props.source;
        this.url = props.url;
        this.setProps(props);
    }
    /**
     * Terminates all workers in the pool
     * @note Can free up significant memory
     */
    WorkerPool.prototype.destroy = function () {
        // Destroy idle workers, active Workers will be destroyed on completion
        this.idleQueue.forEach(function (worker) { return worker.destroy(); });
        this.isDestroyed = true;
    };
    WorkerPool.prototype.setProps = function (props) {
        this.props = __assign(__assign({}, this.props), props);
        if (props.name !== undefined) {
            this.name = props.name;
        }
        if (props.maxConcurrency !== undefined) {
            this.maxConcurrency = props.maxConcurrency;
        }
        if (props.maxMobileConcurrency !== undefined) {
            this.maxMobileConcurrency = props.maxMobileConcurrency;
        }
        if (props.reuseWorkers !== undefined) {
            this.reuseWorkers = props.reuseWorkers;
        }
        if (props.onDebug !== undefined) {
            this.onDebug = props.onDebug;
        }
    };
    WorkerPool.prototype.startJob = function (name, onMessage, onError) {
        if (onMessage === void 0) { onMessage = function (job, type, data) { return job.done(data); }; }
        if (onError === void 0) { onError = function (job, error) { return job.error(error); }; }
        return __awaiter(this, void 0, void 0, function () {
            var startPromise;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startPromise = new Promise(function (onStart) {
                            // Promise resolves when thread completes or fails working on this job
                            _this.jobQueue.push({ name: name, onMessage: onMessage, onError: onError, onStart: onStart });
                            return _this;
                        });
                        this.startQueuedJob();
                        return [4 /*yield*/, startPromise];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Starts first queued job if worker is available or can be created
     * Called when job is started and whenever a worker returns to the idleQueue
     */
    WorkerPool.prototype.startQueuedJob = function () {
        return __awaiter(this, void 0, void 0, function () {
            var workerThread, queuedJob, job_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.jobQueue.length) {
                            return [2 /*return*/];
                        }
                        workerThread = this.getAvailableWorker();
                        if (!workerThread) {
                            return [2 /*return*/];
                        }
                        queuedJob = this.jobQueue.shift();
                        if (!queuedJob) return [3 /*break*/, 4];
                        this.onDebug({
                            message: 'Starting job',
                            name: queuedJob.name,
                            backlog: this.jobQueue.length,
                            workerThread: workerThread,
                        });
                        job_1 = new worker_job_1.default(queuedJob.name, workerThread);
                        // Set the worker thread's message handlers
                        workerThread.onMessage = function (data) { return queuedJob.onMessage(job_1, data.type, data.payload); };
                        workerThread.onError = function (error) { return queuedJob.onError(job_1, error); };
                        // Resolve the start promise so that the app can start sending messages to worker
                        queuedJob.onStart(job_1);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        return [4 /*yield*/, job_1.result];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        this.returnWorkerToQueue(workerThread);
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a worker to the idle queue
     * Destroys the worker if
     *  - pool is destroyed
     *  - if this pool doesn't reuse workers
     *  - if maxConcurrency has been lowered
     */
    WorkerPool.prototype.returnWorkerToQueue = function (worker) {
        var shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this.getMaxConcurrency();
        if (shouldDestroyWorker) {
            worker.destroy();
            this.count--;
        }
        else {
            this.idleQueue.push(worker);
        }
        if (!this.isDestroyed) {
            this.startQueuedJob();
        }
    };
    /**
     * Returns idle worker or creates new worker if maxConcurrency has not been reached
     */
    WorkerPool.prototype.getAvailableWorker = function () {
        // If a worker has completed and returned to the queue, it can be used
        if (this.idleQueue.length > 0) {
            return this.idleQueue.shift() || null;
        }
        // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source
        if (this.count < this.getMaxConcurrency()) {
            this.count++;
            var name_1 = this.name.toLowerCase() + " (#" + this.count + " of " + this.maxConcurrency + ")";
            return new worker_thread_1.default({ name: name_1, source: this.source, url: this.url });
        }
        // No worker available, have to wait
        return null;
    };
    WorkerPool.prototype.getMaxConcurrency = function () {
        return globals_1.isMobile ? this.maxMobileConcurrency : this.maxConcurrency;
    };
    return WorkerPool;
}());
exports.default = WorkerPool;
