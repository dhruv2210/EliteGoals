"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processOnWorker = exports.canProcessOnWorker = void 0;
var worker_farm_1 = __importDefault(require("../worker-farm/worker-farm"));
var remove_nontransferable_options_1 = require("../utils/worker-utils/remove-nontransferable-options");
var get_worker_url_1 = require("./get-worker-url");
/**
 * Determines if we can parse with worker
 * @param loader
 * @param data
 * @param options
 */
function canProcessOnWorker(worker, options) {
    if (!worker_farm_1.default.isSupported()) {
        return false;
    }
    return worker.worker && (options === null || options === void 0 ? void 0 : options.worker);
}
exports.canProcessOnWorker = canProcessOnWorker;
/**
 * This function expects that the worker thread sends certain messages,
 * Creating such a worker can be automated if the worker is wrapper by a call to createWorker
 */
function processOnWorker(worker, data, options, context) {
    if (options === void 0) { options = {}; }
    if (context === void 0) { context = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var name, url, workerFarm, workerPool, jobName, job, transferableOptions, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    name = (0, get_worker_url_1.getWorkerName)(worker);
                    url = (0, get_worker_url_1.getWorkerURL)(worker, options);
                    workerFarm = worker_farm_1.default.getWorkerFarm(options);
                    workerPool = workerFarm.getWorkerPool({ name: name, url: url });
                    jobName = options.jobName || worker.name;
                    return [4 /*yield*/, workerPool.startJob(jobName, onMessage.bind(null, context))];
                case 1:
                    job = _a.sent();
                    transferableOptions = (0, remove_nontransferable_options_1.removeNontransferableOptions)(options);
                    job.postMessage('process', { input: data, options: transferableOptions });
                    return [4 /*yield*/, job.result];
                case 2:
                    result = _a.sent();
                    return [2 /*return*/, result.result];
            }
        });
    });
}
exports.processOnWorker = processOnWorker;
/**
 * Job completes when we receive the result
 * @param job
 * @param message
 */
function onMessage(context, job, type, payload) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, id, input, options, result, error_1, message;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = type;
                    switch (_a) {
                        case 'done': return [3 /*break*/, 1];
                        case 'error': return [3 /*break*/, 2];
                        case 'process': return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 8];
                case 1:
                    // Worker is done
                    job.done(payload);
                    return [3 /*break*/, 9];
                case 2:
                    // Worker encountered an error
                    job.error(new Error(payload.error));
                    return [3 /*break*/, 9];
                case 3:
                    id = payload.id, input = payload.input, options = payload.options;
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 6, , 7]);
                    if (!context.process) {
                        job.postMessage('error', { id: id, error: 'Worker not set up to process on main thread' });
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, context.process(input, options)];
                case 5:
                    result = _b.sent();
                    job.postMessage('done', { id: id, result: result });
                    return [3 /*break*/, 7];
                case 6:
                    error_1 = _b.sent();
                    message = error_1 instanceof Error ? error_1.message : 'unknown error';
                    job.postMessage('error', { id: id, error: message });
                    return [3 /*break*/, 7];
                case 7: return [3 /*break*/, 9];
                case 8:
                    console.warn("process-on-worker: unknown message " + type);
                    _b.label = 9;
                case 9: return [2 /*return*/];
            }
        });
    });
}
