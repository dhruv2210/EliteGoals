{"version":3,"file":"null.worker.js","sources":["../src/async-queue/async-queue.ts","../src/utils/worker-utils/get-transfer-list.ts","../src/worker-farm/worker-body.ts","../src/worker-api/create-worker.ts","../src/workers/null.worker.ts"],"sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue<T> {\n  private _values: any[];\n  private _settlers: any[];\n  private _closed: boolean;\n\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value: T): void {\n    return this.enqueue(value);\n  }\n\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({ value });\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close(): void {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({ done: true });\n    }\n    this._closed = true;\n  }\n\n  // ITERATOR IMPLEMENTATION\n\n  /** @returns a Promise for an IteratorResult */\n  next(): Promise<IteratorResult<T, any>> {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({ done: false, value });\n    }\n\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({ done: true, value: undefined });\n    }\n\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({ resolve, reject });\n    });\n  }\n}\n","// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(object: any, recursive = true, transfers?: Set<any>): Transferable[] {\n  // Make sure that items in the transfer list is unique\n  const transfersSet = transfers || new Set();\n\n  if (!object) {\n    // ignore\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n    // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n    // Do not iterate through the content in this case\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object: unknown) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}\n","import type { WorkerMessageData, WorkerMessageType, WorkerMessagePayload } from '../types';\nimport { getTransferList } from '../utils/worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    self.onmessage = (message: MessageEvent<any>) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const { type, payload } = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const { type, payload } = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * 从 worker 线程发送消息到主线程\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = { source: 'Worker thread', type, payload };\n      const transferList = getTransferList(payload);\n      // TODO: targetOrigin, transferList\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const { type, data } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source === 'Main thread';\n}\n","import type { WorkerMessageType, WorkerMessagePayload, WorkerContext, Process, ProcessInBatches } from '../types';\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\n\n/** Counter for jobs */\nlet requestId = 0;\n// 异步队列\nlet inputBatches: AsyncQueue<any>;\nlet options: Record<string, any>;\n\nexport type ProcessOnMainThread = (data: any, options?: Record<string, any>, context?: WorkerContext) => any;\n\n/**\n * Set up a WebWorkerGlobalScope to talk with the main thread\n */\nexport function createWorker(process: Process, processInBatches?: ProcessInBatches): void {\n  // 检查是否在 worker 线程中\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  const context: WorkerContext = {\n    process: processOnMainThread,\n  };\n\n  WorkerBody.onmessage = async (type: WorkerMessageType, payload: WorkerMessagePayload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n          // eslint-disable-next-line no-case-declarations\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', { result });\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n          inputBatches = new AsyncQueue();\n          options = payload.options || {};\n          // eslint-disable-next-line no-case-declarations\n          const resultIterator = processInBatches(inputBatches, options, context);\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', { result: batch });\n          }\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', { error: message });\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer: ArrayBuffer, options = {}) {\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    /**\n     */\n    const onMessage = (type: string, payload: WorkerMessagePayload) => {\n      if (payload.id !== id) {\n        // not ours\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n        // ignore\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n\n    // Ask the main thread to decode data\n    const payload = { id, input: arrayBuffer, options };\n    WorkerBody.postMessage('process', payload);\n  });\n}\n","import { createWorker } from '../worker-api/create-worker';\n\ncreateWorker(async (data: any, options?: Record<string, any>) => {\n  return data;\n});\n"],"names":[],"mappings":"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"}