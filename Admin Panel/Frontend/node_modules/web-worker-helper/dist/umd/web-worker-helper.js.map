{"version":3,"file":"web-worker-helper.js","sources":["../../src/utils/env-utils/assert.ts","../../src/utils/env-utils/globals.ts","../../src/worker-farm/worker-job.ts","../../src/utils/worker-utils/get-loadable-worker-url.ts","../../src/utils/worker-utils/get-transfer-list.ts","../../src/worker-farm/worker-thread.ts","../../src/worker-farm/worker-pool.ts","../../src/worker-farm/worker-farm.ts","../../src/worker-farm/worker-body.ts","../../src/utils/worker-utils/remove-nontransferable-options.ts","../../src/worker-api/get-worker-url.ts","../../src/worker-api/process-on-worker.ts","../../src/async-queue/async-queue.ts","../../src/worker-api/create-worker.ts","../../src/utils/library-utils/library-utils.ts","../../src/index.ts"],"sourcesContent":["// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\n\n/** Throws an `Error` with the optional `message` if `condition` is falsy */\nexport function assert(condition: any, message?: string): void {\n  if (!condition) {\n    throw new Error(message || 'web worker helper assertion failed.');\n  }\n}\n","// Purpose: include this in your module to avoids adding dependencies on\n// micro modules like 'global' and 'is-browser';\n\n/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  document: typeof document !== 'undefined' && document,\n};\n\nconst self_: { [key: string]: any } = globals.self || globals.window || {};\nconst window_: { [key: string]: any } = globals.window || globals.self || {};\nconst global_: { [key: string]: any } = globals.self || globals.window || {};\nconst document_: { [key: string]: any } = globals.document || {};\n\nexport { self_ as self, window_ as window, global_ as global, document_ as document };\n\n/** true if running on a worker thread */\nexport const isWorker: boolean = typeof importScripts === 'function';\n\n/** true if running on a mobile device */\nexport const isMobile: boolean = typeof window !== 'undefined' && typeof window.orientation !== 'undefined';\n","import type { WorkerMessageType, WorkerMessagePayload } from '../types';\nimport WorkerThread from './worker-thread';\nimport { assert } from '../utils/env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  public readonly name: string;\n  public readonly workerThread: WorkerThread;\n  public isRunning: boolean;\n  /** Promise that resolves when Job is done */\n  public readonly result: Promise<any>;\n\n  private resolve: (value: any) => void;\n  private reject: (reason?: any) => void;\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.isRunning = true;\n    this.resolve = () => {};\n    this.reject = () => {};\n    this.result = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  public postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'Main thread', // Lets worker ignore unrelated messages\n      type,\n      payload,\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  public done(value: any): void {\n    assert(this.isRunning, 'WorkerJob isRunning false.');\n    this.isRunning = false;\n    this.resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  public error(error: Error): void {\n    assert(this.isRunning, 'WorkerJob isRunning false.');\n    this.isRunning = false;\n    this.reject(error);\n  }\n}\n","import { assert } from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props: { source?: string; url?: string }) {\n  assert((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined\n\n  let workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    // Differentiate worker urls from worker source code\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n\n  assert(workerURL);\n  return workerURL;\n}\n\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url: string): string {\n  // A local script url, we can use it to initialize a Worker directly\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  // A remote script, we need to use `importScripts` to load from different origin\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource: string): string {\n  // NOTE: webworkify was previously used\n  // const blob = webworkify(workerSource, {bare: true});\n  const blob = new Blob([workerSource], { type: 'application/javascript' });\n  return URL.createObjectURL(blob);\n}\n\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl: string): string {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n  throw error;\n}`;\n}\n","// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(object: any, recursive = true, transfers?: Set<any>): Transferable[] {\n  // Make sure that items in the transfer list is unique\n  const transfersSet = transfers || new Set();\n\n  if (!object) {\n    // ignore\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n    // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n    // Do not iterate through the content in this case\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object: unknown) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}\n","import { assert } from '../utils/env-utils/assert';\nimport { getLoadableWorkerURL } from '../utils/worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../utils/worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  public readonly name: string;\n  public readonly source: string | undefined;\n  public readonly url: string | undefined;\n  public terminated = false;\n  public worker: Worker;\n  public onMessage: (message: any) => void;\n  public onError: (error: Error) => void;\n\n  private loadableURL = '';\n\n  constructor(props: WorkerThreadProps) {\n    const { name, source, url } = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error);\n\n    this.worker = this.createBrowserWorker();\n  }\n\n  static isSupported(): boolean {\n    return typeof Worker !== 'undefined';\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  public destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  public get isRunning() {\n    // TODO: isRunning\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  public postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    this.worker.postMessage(data, transferList);\n  }\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  private getErrorFromErrorEvent(event: ErrorEvent): Error {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name} from ${this.url}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  private createBrowserWorker() {\n    this.loadableURL = getLoadableWorkerURL({ source: this.source, url: this.url });\n    const worker = new Worker(this.loadableURL, { name: this.name });\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error) => {\n      this.onError(this.getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n\n    worker.onmessageerror = (event) => console.error(`worker ${this.name}, message error: ${event}`);\n\n    return worker;\n  }\n}\n","import type { WorkerMessageType, WorkerMessagePayload } from '../types';\nimport { isMobile } from '../utils/env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n\n/** WorkerPool onDebug Callback Parameters */\ntype OnDebugParameters = {\n  message: string;\n  name: string;\n  backlog: number;\n  workerThread: WorkerThread;\n};\n\n/** WorkerPool Properties */\nexport type WorkerPoolProps = {\n  name?: string;\n  source?: string;\n  url?: string;\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  onDebug?: (options: OnDebugParameters) => any;\n  reuseWorkers?: boolean;\n};\n\n/** Private helper types */\ntype OnMessage = (job: WorkerJob, type: WorkerMessageType, payload: WorkerMessagePayload) => void;\ntype OnError = (job: WorkerJob, error: Error) => void;\n\ntype QueuedJob = {\n  name: string;\n  onMessage: OnMessage;\n  onError: OnError;\n  onStart: (value: any) => void; // Resolve job start promise\n};\n\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n  public name = 'unnamed';\n  public source?: string;\n  public url?: string;\n  public maxConcurrency = 1;\n  public maxMobileConcurrency = 1;\n  public onDebug: (options: OnDebugParameters) => any = () => {};\n  public reuseWorkers = true;\n\n  private props: WorkerPoolProps = {};\n  private jobQueue: QueuedJob[] = [];\n  private idleQueue: WorkerThread[] = [];\n  private count = 0;\n  private isDestroyed = false;\n\n  constructor(props: WorkerPoolProps) {\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  /**\n   * Terminates all workers in the pool\n   * @note Can free up significant memory\n   */\n  public destroy() {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach((worker) => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  public setProps(props: WorkerPoolProps) {\n    this.props = { ...this.props, ...props };\n\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  public async startJob(\n    name: string,\n    onMessage: OnMessage = (job, type, data) => job.done(data),\n    onError: OnError = (job, error) => job.error(error)\n  ): Promise<WorkerJob> {\n    // Promise resolves when thread starts working on this job\n    const startPromise = new Promise<WorkerJob>((onStart) => {\n      // Promise resolves when thread completes or fails working on this job\n      this.jobQueue.push({ name, onMessage, onError, onStart });\n      return this;\n    });\n    this.startQueuedJob();\n    return await startPromise;\n  }\n\n  /**\n   * Starts first queued job if worker is available or can be created\n   * Called when job is started and whenever a worker returns to the idleQueue\n   */\n  private async startQueuedJob(): Promise<void> {\n    if (!this.jobQueue.length) {\n      return;\n    }\n\n    const workerThread = this.getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    // We have a worker, dequeue and start the job\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        backlog: this.jobQueue.length,\n        workerThread,\n      });\n\n      // Create a worker job to let the app access thread and manage job completion\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      // Set the worker thread's message handlers\n      workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = (error) => queuedJob.onError(job, error);\n\n      // Resolve the start promise so that the app can start sending messages to worker\n      queuedJob.onStart(job);\n\n      // Wait for the app to signal that the job is complete, then return worker to queue\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  /**\n   * Returns a worker to the idle queue\n   * Destroys the worker if\n   *  - pool is destroyed\n   *  - if this pool doesn't reuse workers\n   *  - if maxConcurrency has been lowered\n   */\n  private returnWorkerToQueue(worker: WorkerThread) {\n    const shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this.getMaxConcurrency();\n\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n\n    if (!this.isDestroyed) {\n      this.startQueuedJob();\n    }\n  }\n\n  /**\n   * Returns idle worker or creates new worker if maxConcurrency has not been reached\n   */\n  private getAvailableWorker(): WorkerThread | null {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this.getMaxConcurrency()) {\n      this.count++;\n      const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n      return new WorkerThread({ name, source: this.source, url: this.url });\n    }\n\n    // No worker available, have to wait\n    return null;\n  }\n\n  private getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n","import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\nexport type WorkerFarmProps = {\n  // max count of workers\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: WorkerFarmProps = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true,\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static workerFarm?: WorkerFarm;\n\n  /** Check if Workers are supported */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm.workerFarm = WorkerFarm.workerFarm || new WorkerFarm({});\n    WorkerFarm.workerFarm.setProps(props);\n    return WorkerFarm.workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  constructor(props: WorkerFarmProps) {\n    this.props = { ...DEFAULT_PROPS };\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  public destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  public setProps(props: WorkerFarmProps): void {\n    this.props = { ...this.props, ...props };\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this.getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  public getWorkerPool(options: { name: string; source?: string; url?: string }): WorkerPool {\n    const { name, source, url } = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url,\n      });\n      workerPool.setProps(this.getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  private getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug,\n    };\n  }\n}\n","import type { WorkerMessageData, WorkerMessageType, WorkerMessagePayload } from '../types';\nimport { getTransferList } from '../utils/worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    self.onmessage = (message: MessageEvent<any>) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const { type, payload } = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const { type, payload } = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * 从 worker 线程发送消息到主线程\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = { source: 'Worker thread', type, payload };\n      const transferList = getTransferList(payload);\n      // TODO: targetOrigin, transferList\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const { type, data } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source === 'Main thread';\n}\n","/**\n * Safely stringify JSON (drop non serializable values like functions and regexps)\n * @param value\n */\nexport function removeNontransferableOptions(object: object): object {\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  // TODO - warn if options stringification is long\n  return JSON.parse(stringifyJSON(object));\n}\n\nfunction stringifyJSON(v: unknown) {\n  const cache = new Set();\n  return JSON.stringify(v, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        // Circular reference found\n        try {\n          // If this value does not reference a parent it can be deduped\n          return JSON.parse(JSON.stringify(value));\n        } catch (err) {\n          // discard key if value cannot be deduped\n          return undefined;\n        }\n      }\n      // Store value in our set\n      cache.add(value);\n    }\n    return value;\n  });\n}\n","import type { WorkerObject, WorkerOptions } from '../types';\nimport { assert } from '../utils/env-utils/assert';\n\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker: WorkerObject): string {\n  return `${worker.name}`;\n}\n\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker: WorkerObject, options: WorkerOptions = {}): string {\n  const workerOptions = options[worker.id] || {};\n\n  const workerFileName = `${worker.name}.worker.js`;\n\n  let url = workerOptions.workerUrl;\n\n  // If URL is test\n  if (options._workerType === 'test') {\n    url = `${worker.module}/dist/${workerFileName}`;\n  }\n\n  // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n  if (!url) {\n    url = `https://unpkg.com/${worker.module}/dist/${workerFileName}`;\n  }\n\n  assert(url);\n\n  return url;\n}\n","import type { WorkerObject, WorkerOptions, WorkerContext, WorkerMessageType, WorkerMessagePayload } from '../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport { removeNontransferableOptions } from '../utils/worker-utils/remove-nontransferable-options';\nimport { getWorkerURL, getWorkerName } from './get-worker-url';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to createWorker\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({ name, url });\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(jobName, onMessage.bind(null, context));\n\n  // Kick off the processing in the worker\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', { input: data, options: transferableOptions });\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      // eslint-disable-next-line no-case-declarations\n      const { id, input, options } = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', { id, error: 'Worker not set up to process on main thread' });\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', { id, result });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', { id, error: message });\n      }\n      break;\n\n    default:\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n","// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue<T> {\n  private _values: any[];\n  private _settlers: any[];\n  private _closed: boolean;\n\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value: T): void {\n    return this.enqueue(value);\n  }\n\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({ value });\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close(): void {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({ done: true });\n    }\n    this._closed = true;\n  }\n\n  // ITERATOR IMPLEMENTATION\n\n  /** @returns a Promise for an IteratorResult */\n  next(): Promise<IteratorResult<T, any>> {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({ done: false, value });\n    }\n\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({ done: true, value: undefined });\n    }\n\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({ resolve, reject });\n    });\n  }\n}\n","import type { WorkerMessageType, WorkerMessagePayload, WorkerContext, Process, ProcessInBatches } from '../types';\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\n\n/** Counter for jobs */\nlet requestId = 0;\n// 异步队列\nlet inputBatches: AsyncQueue<any>;\nlet options: Record<string, any>;\n\nexport type ProcessOnMainThread = (data: any, options?: Record<string, any>, context?: WorkerContext) => any;\n\n/**\n * Set up a WebWorkerGlobalScope to talk with the main thread\n */\nexport function createWorker(process: Process, processInBatches?: ProcessInBatches): void {\n  // 检查是否在 worker 线程中\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  const context: WorkerContext = {\n    process: processOnMainThread,\n  };\n\n  WorkerBody.onmessage = async (type: WorkerMessageType, payload: WorkerMessagePayload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n          // eslint-disable-next-line no-case-declarations\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', { result });\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n          inputBatches = new AsyncQueue();\n          options = payload.options || {};\n          // eslint-disable-next-line no-case-declarations\n          const resultIterator = processInBatches(inputBatches, options, context);\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', { result: batch });\n          }\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', { error: message });\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer: ArrayBuffer, options = {}) {\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    /**\n     */\n    const onMessage = (type: string, payload: WorkerMessagePayload) => {\n      if (payload.id !== id) {\n        // not ours\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n        // ignore\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n\n    // Ask the main thread to decode data\n    const payload = { id, input: arrayBuffer, options };\n    WorkerBody.postMessage('process', payload);\n  });\n}\n","/* global importScripts */\nimport { global, isWorker } from '../env-utils/globals';\nimport { assert } from '../env-utils/assert';\n\nconst loadLibraryPromises: Record<string, Promise<any>> = {}; // promises\n\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(\n  libraryUrl: string,\n  moduleName: string | null = null,\n  options: object = {}\n): Promise<any> {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n  loadLibraryPromises[libraryUrl] = loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library: string, moduleName?: string, options?: any): string {\n  // Check if already a URL\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl: string): Promise<any> {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource: string, id: string): null | any {\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n","export const version = '0.0.3';\n\nimport type { WorkerObject } from './types';\n\n// TYPES\nexport type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerMessage,\n  WorkerMessageType,\n  WorkerMessageData,\n  WorkerMessagePayload,\n} from './types';\n\n// GENERAL UTILS\nexport { assert } from './utils/env-utils/assert';\nexport { isWorker } from './utils/env-utils/globals';\n\n// WORKER UTILS - TYPES\nexport { default as WorkerJob } from './worker-farm/worker-job';\nexport { default as WorkerThread } from './worker-farm/worker-thread';\n\n// WORKER FARMS\nexport { default as WorkerFarm } from './worker-farm/worker-farm';\nexport { default as WorkerPool } from './worker-farm/worker-pool';\nexport { default as WorkerBody } from './worker-farm/worker-body';\n\nexport { processOnWorker, canProcessOnWorker } from './worker-api/process-on-worker';\nexport { createWorker } from './worker-api/create-worker';\n\n// WORKER UTILS - EXPORTS\nexport { getWorkerURL } from './worker-api/get-worker-url';\nexport { getTransferList } from './utils/worker-utils/get-transfer-list';\n\n// LIBRARY UTILS\nexport { getLibraryUrl, loadLibrary } from './utils/library-utils/library-utils';\n\n// PARSER UTILS\nexport { default as AsyncQueue } from './async-queue/async-queue';\n\n// WORKER OBJECTS\n\n/** A null worker to test that worker processing is functional */\nexport const NullWorker: WorkerObject = {\n  id: 'null',\n  name: 'null',\n  module: 'web-worker-helper',\n  options: {},\n};\n"],"names":["global"],"mappings":"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"}