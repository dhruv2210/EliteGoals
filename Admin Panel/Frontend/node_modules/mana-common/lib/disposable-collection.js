"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DisposableCollection = void 0;

var _event = require("./event");

var _disposable = require("./disposable");

/* eslint-disable @typescript-eslint/no-explicit-any */
class DisposableCollection {
  constructor(...toDispose) {
    this.disposables = [];
    this.onDisposeEmitter = new _event.Emitter();
    this.disposingElements = false;
    this.pushAll(toDispose);
  }

  get disposed() {
    return this.disposables.length === 0;
  }

  get onDispose() {
    return this.onDisposeEmitter.event;
  }

  checkDisposed() {
    if (this.disposed && !this.disposingElements) {
      this.onDisposeEmitter.fire(undefined);
      this.onDisposeEmitter.dispose();
    }
  }

  dispose() {
    if (this.disposed || this.disposingElements) {
      return;
    }

    this.disposingElements = true;

    while (!this.disposed) {
      try {
        this.disposables.pop().dispose();
      } catch (e) {
        console.error(e);
      }
    }

    this.disposingElements = false;
    this.checkDisposed();
  }

  push(disposable) {
    const {
      disposables
    } = this;
    disposables.push(disposable);
    const originalDispose = disposable.dispose.bind(disposable);

    const toRemove = _disposable.Disposable.create(() => {
      const index = disposables.indexOf(disposable);

      if (index !== -1) {
        disposables.splice(index, 1);
      }

      this.checkDisposed();
    });

    disposable.dispose = () => {
      toRemove.dispose();
      originalDispose();
    };

    return toRemove;
  }

  pushAll(disposables) {
    return disposables.map(disposable => this.push(disposable));
  }

}

exports.DisposableCollection = DisposableCollection;