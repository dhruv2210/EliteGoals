var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled from 'styled-components';
import { getCssValue, getFlexDirection, isHorizontal, isVertical } from './utils';
export var Flexbox = styled.div.attrs(function () {
  return {
    className: 'layoutkit-flexbox'
  };
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  // \u662F\u5426\u663E\u793A\n  display: ", ";\n\n  flex: ", ";\n\n  flex-direction: ", ";\n  justify-content: ", ";\n  align-items: ", ";\n\n  width: ", ";\n  height: ", ";\n\n  padding: ", ";\n\n  > *:not(:last-child) {\n    margin-right: ", ";\n    margin-bottom: ", ";\n  }\n"])), function (props) {
  return props.hidden ? 'none' : 'flex';
}, function (props) {
  return props.flex;
}, function (props) {
  return getFlexDirection(props.direction, props.horizontal);
}, function (props) {
  return props.distribution;
}, function (props) {
  return props.align;
}, function (props) {
  if (isHorizontal(props.direction, props.horizontal) && !props.width && ['space-between', 'space-around', 'space-evenly'].includes(props.distribution)) return '100%';
  return getCssValue(props.width);
}, function (props) {
  return getCssValue(props.height);
}, function (props) {
  return getCssValue(props.padding);
}, function (props) {
  return isHorizontal(props.direction, props.horizontal) && getCssValue(props.gap);
}, function (props) {
  return isVertical(props.direction, props.horizontal) && getCssValue(props.gap);
});