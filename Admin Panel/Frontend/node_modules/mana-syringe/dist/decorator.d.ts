import type { Decorator } from './core';
import { Syringe } from './core';
export declare function injectable<T = any>(option?: Syringe.DecoratorOption<T>): Decorator<T>;
export declare function singleton<T = any>(option?: Syringe.DecoratorOption<T>): Decorator<T>;
export declare function transient<T = any>(option?: Syringe.DecoratorOption<T>): Decorator<T>;
export declare function inject(token: Syringe.Token<any>): (target: any, targetKey: string, index?: number | undefined) => void;
export declare function named(name: Syringe.Named): (target: any, targetKey: string, index?: number | undefined) => void;
export { postConstruct, optional, unmanaged, decorate } from 'inversify';
