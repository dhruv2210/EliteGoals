"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var g6_1 = __importDefault(require("@antv/g6"));
var createLoading_1 = __importDefault(require("../../utils/createLoading"));
var errorBoundary_1 = __importDefault(require("../../errorBoundary"));
var useGraph_1 = __importDefault(require("../hooks/useGraph"));
var utils_1 = require("../../utils");
var constants_1 = require("./constants");
var utils_2 = require("./utils");
var customItems_1 = require("./customItems");
(0, customItems_1.registerCustomItems)();
var defaultNodeSize = [150, 30];
var defaultNodeStyle = {
    stroke: '#72CC4A',
    fill: '#f00',
};
var defaultLayout = {
    type: 'dagre',
    rankdir: 'LR',
    nodesep: 30,
    ranksep: 50,
};
var defaultLabelCfg = {
    style: {
        fill: '#000000A6',
        fontSize: 10,
    },
};
var defaultProps = {
    nodeType: 'round-rect',
    edgeType: 'fund-polyline',
    behaviors: ['zoom-canvas', 'drag-canvas'],
    nodeSize: defaultNodeSize,
    nodeLabelCfg: defaultLabelCfg,
    edgeLabelCfg: defaultLabelCfg,
    nodeAnchorPoints: constants_1.defaultNodeAnchorPoints,
    layout: defaultLayout,
    nodeStyle: defaultNodeStyle,
    edgeStyle: constants_1.defaultEdgeStyle,
    nodeStateStyles: constants_1.defaultStateStyles,
    edgeStateStyles: constants_1.defaultStateStyles,
    colorMap: {},
    autoFit: true,
};
var graphs = {};
var DagreFundFlowGraph = function (props) {
    var uProps = (0, utils_2.useProps)(props, defaultProps);
    var data = uProps.data, className = uProps.className, style = uProps.style, width = uProps.width, height = uProps.height, _a = uProps.nodeType, nodeType = _a === void 0 ? 'round-rect' : _a, _b = uProps.edgeType, edgeType = _b === void 0 ? 'fund-polyline' : _b, _c = uProps.behaviors, behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c, _d = uProps.nodeSize, nodeSize = _d === void 0 ? defaultNodeSize : _d, _e = uProps.nodeLabelCfg, nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e, _f = uProps.edgeLabelCfg, edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f, _g = uProps.nodeAnchorPoints, nodeAnchorPoints = _g === void 0 ? constants_1.defaultNodeAnchorPoints : _g, _h = uProps.layout, layout = _h === void 0 ? defaultLayout : _h, minimapCfg = uProps.minimapCfg, _j = uProps.nodeStyle, nodeStyle = _j === void 0 ? defaultNodeStyle : _j, _k = uProps.edgeStyle, edgeStyle = _k === void 0 ? constants_1.defaultEdgeStyle : _k, _l = uProps.nodeStateStyles, nodeStateStyles = _l === void 0 ? constants_1.defaultStateStyles : _l, _m = uProps.edgeStateStyles, edgeStateStyles = _m === void 0 ? constants_1.defaultStateStyles : _m, _o = uProps.colorMap, colorMap = _o === void 0 ? {} : _o, _p = uProps.autoFit, autoFit = _p === void 0 ? true : _p, graphRef = uProps.graphRef, onReady = uProps.onReady, loading = uProps.loading, loadingTemplate = uProps.loadingTemplate, errorTemplate = uProps.errorTemplate;
    var container = react_1.default.useRef(null);
    var graph = react_1.default.useRef(null);
    var graphId = (0, utils_2.getGraphId)(graph);
    (0, useGraph_1.default)(graphs[graphId], uProps, container);
    (0, react_1.useEffect)(function () {
        var graphSize = (0, utils_2.getGraphSize)(width, height, container);
        var graph = graphs[graphId];
        if (!graph) {
            graph = new g6_1.default.Graph({
                container: container.current,
                width: graphSize[0],
                height: graphSize[1],
                modes: {
                    default: behaviors,
                },
                defaultNode: {
                    type: nodeType,
                    size: nodeSize,
                    style: nodeStyle,
                    anchorPoints: nodeAnchorPoints,
                    labelCfg: nodeLabelCfg,
                },
                defaultEdge: {
                    type: edgeType,
                    style: edgeStyle,
                    colorMap: colorMap,
                    labelCfg: edgeLabelCfg,
                },
                nodeStateStyles: nodeStateStyles,
                edgeStateStyles: edgeStateStyles,
                layout: layout,
                fitView: autoFit,
            });
            graphs[graphId] = graph;
        }
        if (graphRef) {
            graphRef.current = graph;
        }
        (0, utils_2.renderMinimap)(minimapCfg, graph);
        var originData = (0, utils_1.deepClone)(data);
        graph.data(originData);
        graph.render();
        if (onReady) {
            onReady(graph);
        }
        // modify the node color according to the in edge
        var edges = graph.getEdges();
        // @ts-ignore
        edges.forEach(function (edge) {
            var line = edge.getKeyShape();
            var stroke = line.attr('stroke');
            var targetNode = edge.getTarget();
            targetNode.update({
                style: {
                    stroke: stroke,
                },
            });
        });
        (0, utils_2.bindEvents)(graph, props);
        return function () {
            if (graphs[graphId]) {
                graphs[graphId].destroy();
                delete graphs[graphId];
            }
        };
    }, []);
    return (react_1.default.createElement(errorBoundary_1.default, { errorTemplate: errorTemplate },
        loading && react_1.default.createElement(createLoading_1.default, { loadingTemplate: loadingTemplate }),
        react_1.default.createElement("div", { className: className, style: style, ref: container })));
};
exports.default = DagreFundFlowGraph;
