var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import G6 from '@antv/g6';
import { defaultMinimapCfg } from '../constants';
var grapgMinmapMaps = {};
export var processMinimap = function (cfg, graph) {
    if (cfg === void 0) { cfg = {}; }
    var graphId = graph === null || graph === void 0 ? void 0 : graph.get('id');
    if (!graph || graph.destroyed) {
        grapgMinmapMaps[graphId] = null;
        return;
    }
    if ((!cfg || !cfg.show) && grapgMinmapMaps[graphId]) {
        var pluginMinimap = graph.get('plugins')[0];
        if (pluginMinimap) {
            graph.removePlugin(pluginMinimap);
        }
        grapgMinmapMaps[graphId] = null;
    }
    if (cfg.show && !grapgMinmapMaps[graphId]) {
        var curMminimapCfg = Object.assign(defaultMinimapCfg, cfg);
        var minimap = new G6.Minimap(__assign(__assign({}, curMminimapCfg), { id: graphId }));
        graph.addPlugin(minimap);
        grapgMinmapMaps[graphId] = minimap;
    }
};
