import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import defaultMap from 'antd/es/theme/themes/default';
import seedToken from 'antd/es/theme/themes/seed';
import formatToken from 'antd/es/theme/util/alias';
// Alias Token 优先级排序，数字小的排在前面，在 map 中的优先级比不在 map 中的优先级高，都不在 map 中的按字母顺序排序
var tokenOrder = {
  // example
  // 0-20 留给 text
  colorTextHeading: 1,
  colorTextLabel: 2,
  colorTextDescription: 3,
  colorTextDisabled: 4,
  colorTextPlaceholder: 5,
  colorIcon: 10,
  colorIconHover: 11,
  // 21-40 留给 border
  colorBorderBg: 21,
  controlTmpOutline: 22,
  // 41-60 留给 fill
  colorFillAlter: 41,
  colorFillContent: 42,
  colorFillContentHover: 43,
  // 61-80 留给 bg
  controlItemBgActive: 61,
  controlItemBgActiveHover: 62,
  controlItemBgHover: 63
};
export function sortToken(arr) {
  if (!arr) {
    return arr;
  }

  return arr.sort(function (a, b) {
    if (tokenOrder[a] && !tokenOrder[b]) {
      return -1;
    }

    if (!tokenOrder[a] && tokenOrder[b]) {
      return 1;
    }

    if (tokenOrder[a] && tokenOrder[b]) {
      return tokenOrder[a] - tokenOrder[b];
    }

    return a.localeCompare(b);
  });
}
export var seedRelatedMap = {
  colorPrimary: ['colorPrimaryBg', 'colorPrimaryBgHover', 'colorPrimaryBorder', 'colorPrimaryBorderHover', 'colorPrimaryHover', 'colorPrimary', 'colorPrimaryActive', 'colorPrimaryTextHover', 'colorPrimaryText', 'colorPrimaryTextActive'],
  colorError: ['colorErrorBg', 'colorErrorBgHover', 'colorErrorBorder', 'colorErrorBorderHover', 'colorErrorHover', 'colorError', 'colorErrorActive', 'colorErrorTextHover', 'colorErrorText', 'colorErrorTextActive'],
  colorWarning: ['colorWarningBg', 'colorWarningBgHover', 'colorWarningBorder', 'colorWarningBorderHover', 'colorWarningHover', 'colorWarning', 'colorWarningActive', 'colorWarningTextHover', 'colorWarningText', 'colorWarningTextActive'],
  colorSuccess: ['colorSuccessBg', 'colorSuccessBgHover', 'colorSuccessBorder', 'colorSuccessBorderHover', 'colorSuccessHover', 'colorSuccess', 'colorSuccessActive', 'colorSuccessTextHover', 'colorSuccessText', 'colorSuccessTextActive'],
  colorInfo: ['colorInfoBg', 'colorInfoBgHover', 'colorInfoBorder', 'colorInfoBorderHover', 'colorInfoHover', 'colorInfo', 'colorInfoActive', 'colorInfoTextHover', 'colorInfoText', 'colorInfoTextActive'],
  colorTextBase: ['colorText', 'colorTextSecondary', 'colorTextTertiary', 'colorTextQuaternary'],
  colorBgBase: ['colorBgContainer', 'colorBgElevated', 'colorBgLayout', 'colorBgSpotlight', 'colorBgMask', 'colorBorder', 'colorBorderSecondary', 'colorFill', 'colorFillSecondary', 'colorFillTertiary', 'colorFillQuaternary']
};

var getMapRelatedAlias = function getMapRelatedAlias() {
  var mapRelatedAlias = {};
  var mapFn = defaultMap;
  var mapToken = mapFn(_objectSpread({}, seedToken));
  var aliasToken = formatToken(_objectSpread(_objectSpread({}, mapToken), {}, {
    override: {}
  }));
  Object.keys(mapToken).forEach(function (mapKey) {
    delete aliasToken[mapKey];
  });
  Object.keys(mapToken).forEach(function (mapKey) {
    var _objectSpread2;

    var newAlias = formatToken(_objectSpread(_objectSpread({}, mapToken), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, mapKey, 'changed'), _defineProperty(_objectSpread2, "override", {}), _objectSpread2)));
    Object.keys(aliasToken).forEach(function (aliasKey) {
      if (aliasToken[aliasKey] !== newAlias[aliasKey]) {
        if (!mapRelatedAlias[mapKey]) {
          mapRelatedAlias[mapKey] = [];
        }

        mapRelatedAlias[mapKey].push(aliasKey);
      }
    });
    mapRelatedAlias[mapKey] = sortToken(mapRelatedAlias[mapKey]);
  });
  return mapRelatedAlias;
};

export var mapRelatedAlias = getMapRelatedAlias();

var getSeedRelatedAlias = function getSeedRelatedAlias() {
  var result = {};
  Object.keys(seedToken).forEach(function (key) {
    var _seedRelatedMap$seedK;

    var seedKey = key;
    var arr = mapRelatedAlias[seedKey] || [];
    (_seedRelatedMap$seedK = seedRelatedMap[seedKey]) === null || _seedRelatedMap$seedK === void 0 ? void 0 : _seedRelatedMap$seedK.forEach(function (mapKey) {
      var _mapRelatedAlias$mapK;

      arr.push.apply(arr, _toConsumableArray((_mapRelatedAlias$mapK = mapRelatedAlias[mapKey]) !== null && _mapRelatedAlias$mapK !== void 0 ? _mapRelatedAlias$mapK : []));
    });

    if (arr.length) {
      result[key] = sortToken(Array.from(new Set(arr)));
    }
  });
  return result;
};

export var seedRelatedAlias = getSeedRelatedAlias();