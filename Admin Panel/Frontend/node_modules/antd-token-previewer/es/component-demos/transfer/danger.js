import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState } from 'react';
import { Transfer } from 'antd';
import mockData from "./data";
var initialTargetKeys = mockData.filter(function (item) {
  return +item.key > 10;
}).map(function (item) {
  return item.key;
});

var Demo = function Demo() {
  var _useState = useState(initialTargetKeys),
      _useState2 = _slicedToArray(_useState, 2),
      targetKeys = _useState2[0],
      setTargetKeys = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      selectedKeys = _useState4[0],
      setSelectedKeys = _useState4[1];

  var onScroll = function onScroll() {};

  return /*#__PURE__*/React.createElement(Transfer, {
    dataSource: mockData,
    titles: ['Source', 'Target'],
    targetKeys: targetKeys,
    status: 'error',
    selectedKeys: selectedKeys,
    onChange: function onChange(nextTargetKeys) {
      setTargetKeys(nextTargetKeys);
    },
    onSelectChange: function onSelectChange(sourceSelectedKeys, targetSelectedKeys) {
      setSelectedKeys([].concat(_toConsumableArray(sourceSelectedKeys), _toConsumableArray(targetSelectedKeys)));
    },
    onScroll: onScroll,
    render: function render(item) {
      return item.title;
    }
  });
};

var componentDemo = {
  demo: /*#__PURE__*/React.createElement(Demo, null),
  tokens: ['colorError'],
  key: 'danger'
};
export default componentDemo;