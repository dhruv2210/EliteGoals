import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { AlignLeftOutlined, BgColorsOutlined, BorderHorizontalOutlined, BulbOutlined, CaretRightOutlined, ControlOutlined, FileUnknownOutlined, FontColorsOutlined, FontSizeOutlined, FormatPainterOutlined, HighlightOutlined, RadiusSettingOutlined, TabletOutlined } from '@ant-design/icons';
import { Collapse, Space } from 'antd';
import classNames from 'classnames';
import useMergedState from 'rc-util/es/hooks/useMergedState';
import React from 'react';
import { Motion, ShapeLine } from "../../icons";
import makeStyle from "../../utils/makeStyle";
import { getRelatedComponents } from "../../utils/statistic";
import TokenItem from "../token-item";
var Panel = Collapse.Panel;
export var IconMap = {
  seed: /*#__PURE__*/React.createElement(BulbOutlined, null),
  colorText: /*#__PURE__*/React.createElement(FontColorsOutlined, null),
  colorBg: /*#__PURE__*/React.createElement(BgColorsOutlined, null),
  colorSplit: /*#__PURE__*/React.createElement(BorderHorizontalOutlined, null),
  colorFill: /*#__PURE__*/React.createElement(HighlightOutlined, null),
  colorCommon: /*#__PURE__*/React.createElement(FormatPainterOutlined, null),
  space: /*#__PURE__*/React.createElement(ShapeLine, null),
  font: /*#__PURE__*/React.createElement(FontSizeOutlined, null),
  line: /*#__PURE__*/React.createElement(AlignLeftOutlined, null),
  screen: /*#__PURE__*/React.createElement(TabletOutlined, null),
  motion: /*#__PURE__*/React.createElement(Motion, null),
  radius: /*#__PURE__*/React.createElement(RadiusSettingOutlined, null),
  control: /*#__PURE__*/React.createElement(ControlOutlined, null),
  others: /*#__PURE__*/React.createElement(FileUnknownOutlined, null)
};
export var TextMap = {
  seed: 'Seed Token',
  colorCommon: 'Common Color 通用颜色',
  colorText: 'Text Color 文本颜色',
  colorBg: 'Background Color 背景颜色',
  colorFill: 'Fill Color 填充颜色',
  colorSplit: 'Split Color 分割线颜色',
  space: 'Space 间距',
  font: 'Font 文本',
  line: 'Line 线',
  screen: 'Screen 屏幕',
  motion: 'Motion 动画',
  radius: 'Radius 圆角',
  control: 'Control 控件',
  others: 'Others 未分类'
};
var useStyle = makeStyle('TokenCard', function (token) {
  return _defineProperty({
    '.token-card': _defineProperty({
      width: '100%',
      height: 'auto',
      borderRadius: token.borderRadiusLG,
      border: "1px solid rgba(0,0,0,0.09)",
      marginBottom: token.marginSM
    }, "".concat(token.rootCls, "-collapse.token-card-collapse"), _defineProperty({}, "> ".concat(token.rootCls, "-collapse-item > ").concat(token.rootCls, "-collapse-content > ").concat(token.rootCls, "-collapse-content-box"), {
      padding: {
        _skip_check_: true,
        value: "0 ".concat(token.paddingXS, "px 12px !important")
      }
    }))
  }, ".token-card ".concat(token.rootCls, "-input-group >").concat(token.rootCls, "-input:not(:first-child):not(:last-child)"), {
    background: 'white',
    borderRadius: token.borderRadiusLG
  });
});
export default (function (_ref2) {
  var title = _ref2.title,
      icon = _ref2.icon,
      tokenArr = _ref2.tokenArr,
      keyword = _ref2.keyword,
      hideUseless = _ref2.hideUseless,
      defaultOpen = _ref2.defaultOpen,
      customOpen = _ref2.open,
      onOpenChange = _ref2.onOpenChange,
      activeToken = _ref2.activeToken,
      onActiveTokenChange = _ref2.onActiveTokenChange,
      onTokenChange = _ref2.onTokenChange,
      tokenPath = _ref2.tokenPath,
      selectedTokens = _ref2.selectedTokens,
      themes = _ref2.themes,
      onTokenSelect = _ref2.onTokenSelect,
      enableTokenSelect = _ref2.enableTokenSelect,
      hideUsageCount = _ref2.hideUsageCount,
      fallback = _ref2.fallback,
      placeholder = _ref2.placeholder;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useMergedState = useMergedState(false, {
    onChange: onOpenChange,
    defaultValue: defaultOpen,
    value: customOpen
  }),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      open = _useMergedState2[0],
      setOpen = _useMergedState2[1];

  return wrapSSR( /*#__PURE__*/React.createElement("div", {
    className: classNames('token-card', hashId)
  }, /*#__PURE__*/React.createElement(Collapse, {
    ghost: true,
    expandIcon: function expandIcon(_ref3) {
      var isActive = _ref3.isActive;
      return /*#__PURE__*/React.createElement(CaretRightOutlined, {
        rotate: isActive ? 450 : 360,
        style: {
          fontSize: 12,
          color: 'rgba(0,0,0,0.45)'
        }
      });
    },
    expandIconPosition: "right",
    className: "token-card-collapse",
    activeKey: open ? '1' : undefined,
    onChange: function onChange(keys) {
      // onOpenChange?.(keys.length > 0);
      setOpen(keys.length > 0);
    }
  }, /*#__PURE__*/React.createElement(Panel, {
    header: /*#__PURE__*/React.createElement(Space, {
      size: "small"
    }, /*#__PURE__*/React.createElement("span", null, title), /*#__PURE__*/React.createElement("span", null, icon)),
    key: "1"
  }, tokenArr.filter(function (tokenName) {
    return (!keyword || tokenName.toLowerCase().includes(keyword.toLowerCase())) && (!hideUseless || getRelatedComponents(tokenName).length > 0);
  }).map(function (tokenName) {
    return /*#__PURE__*/React.createElement(TokenItem, {
      tokenPath: tokenPath,
      onActiveChange: function onActiveChange(active) {
        return onActiveTokenChange === null || onActiveTokenChange === void 0 ? void 0 : onActiveTokenChange(active ? tokenName : undefined);
      },
      active: activeToken === tokenName,
      tokenName: tokenName,
      key: tokenName,
      onTokenChange: onTokenChange,
      themes: themes,
      selectedTokens: selectedTokens,
      onTokenSelect: onTokenSelect,
      enableTokenSelect: enableTokenSelect,
      hideUsageCount: hideUsageCount,
      fallback: fallback
    });
  }), tokenArr.length === 0 && placeholder))));
});