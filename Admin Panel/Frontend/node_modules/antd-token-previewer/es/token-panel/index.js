import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { CheckOutlined } from '@ant-design/icons';
import { Dropdown, Input, Menu, Switch, theme as antdTheme } from 'antd';
import classNames from 'classnames';
import useMergedState from "rc-util/es/hooks/useMergedState";
import React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { SearchDropdown } from "../icons";
import { classifyToken, getTypeOfToken, TOKEN_SORTS } from "../utils/classifyToken";
import getDesignToken from "../utils/getDesignToken";
import makeStyle from "../utils/makeStyle";
import TokenCard, { IconMap, TextMap } from "./token-card";
import { getTokenItemId } from "./token-item";
var useToken = antdTheme.useToken;
var useStyle = makeStyle('AliasTokenPreview', function (token) {
  var _previewPanelSearc;

  return {
    '.preview-panel-wrapper': {
      overflow: 'auto',
      height: '100%',
      '.preview-panel': {
        height: '100%',
        minWidth: 300,
        backgroundColor: 'white',
        display: 'flex',
        flexDirection: 'column',
        '.preview-panel-token-wrapper': {
          position: 'relative',
          flex: 1,
          overflow: 'hidden',
          '&::before, &::after': {
            position: 'absolute',
            zIndex: 1,
            opacity: 0,
            transition: 'opacity .3s',
            content: '""',
            pointerEvents: 'none',
            insetInlineStart: 0,
            insetInlineEnd: 0,
            height: 40
          },
          '&::before': {
            top: 0,
            boxShadow: 'inset 0 10px 8px -8px #00000014'
          },
          '&::after': {
            bottom: 0,
            boxShadow: 'inset 0 -10px 8px -8px #00000014'
          },
          '&.preview-panel-token-wrapper-ping-top': {
            '&::before': {
              opacity: 1
            }
          }
        },
        '.preview-panel-space': {
          marginBottom: 20,
          paddingInlineStart: token.paddingXS,
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          '.preview-hide-token': {
            color: token.colorTextSecondary,
            fontSize: token.fontSizeSM,
            lineHeight: token.lineHeightSM,
            display: 'flex',
            alignItems: 'center',
            '>*:first-child': {
              marginInlineEnd: 2
            }
          }
        },
        '.preview-panel-search': (_previewPanelSearc = {
          backgroundColor: 'rgba(0, 0, 0, 2%)',
          borderRadius: token.borderRadiusLG
        }, _defineProperty(_previewPanelSearc, "".concat(token.rootCls, "-input-group-addon"), {
          backgroundColor: 'inherit',
          border: 'none',
          padding: 0,
          transition: "background-color ".concat(token.motionDurationSlow),
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 4%)'
          }
        }), _defineProperty(_previewPanelSearc, "input", {
          fontSize: token.fontSizeSM,
          paddingInlineStart: 4
        }), _defineProperty(_previewPanelSearc, '.previewer-token-type-dropdown-icon-active', {
          color: token.colorPrimary
        }), _previewPanelSearc)
      }
    }
  };
});
export default /*#__PURE__*/forwardRef(function (props, ref) {
  var filterTypes = props.filterTypes,
      onFilterTypesChange = props.onFilterTypesChange,
      themes = props.themes,
      selectedTokens = props.selectedTokens,
      onTokenSelect = props.onTokenSelect,
      enableTokenSelect = props.enableTokenSelect;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      search = _useState2[0],
      setSearch = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      showAll = _useState4[0],
      setShowAll = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      showTokenListShadowTop = _useState6[0],
      setShowTokenListShadowTop = _useState6[1];

  var cardWrapperRef = useRef(null);

  var _useState7 = useState([]),
      _useState8 = _slicedToArray(_useState7, 2),
      activeCards = _useState8[0],
      setActiveCards = _useState8[1];

  var _useState9 = useState(),
      _useState10 = _slicedToArray(_useState9, 2),
      activeToken = _useState10[0],
      setActiveToken = _useState10[1];

  var _useToken = useToken(),
      token = _useToken.token;

  var _useMergedState = useMergedState(filterTypes || []),
      _useMergedState2 = _slicedToArray(_useMergedState, 2),
      mergedFilterTypes = _useMergedState2[0],
      setMergedFilterTypes = _useMergedState2[1]; // TODO: Split AliasToken and SeedToken


  var groupedToken = useMemo(function () {
    return classifyToken(token);
  }, [token]);
  useEffect(function () {
    var _cardWrapperRef$curre3;

    var handleTokenListScroll = function handleTokenListScroll() {
      var _cardWrapperRef$curre, _cardWrapperRef$curre2;

      setShowTokenListShadowTop(((_cardWrapperRef$curre = (_cardWrapperRef$curre2 = cardWrapperRef.current) === null || _cardWrapperRef$curre2 === void 0 ? void 0 : _cardWrapperRef$curre2.scrollTop) !== null && _cardWrapperRef$curre !== void 0 ? _cardWrapperRef$curre : 0) > 0);
    };

    (_cardWrapperRef$curre3 = cardWrapperRef.current) === null || _cardWrapperRef$curre3 === void 0 ? void 0 : _cardWrapperRef$curre3.addEventListener('scroll', handleTokenListScroll);
    var wrapper = cardWrapperRef.current;
    return function () {
      wrapper === null || wrapper === void 0 ? void 0 : wrapper.removeEventListener('scroll', handleTokenListScroll);
    };
  }, []);
  useImperativeHandle(ref, function () {
    return {
      scrollToToken: function scrollToToken(tokenName) {
        var type = getTypeOfToken(tokenName);

        if (!activeCards.includes(type)) {
          setActiveCards(function (prev) {
            return [].concat(_toConsumableArray(prev), [type]);
          });
        }

        setActiveToken(tokenName);
        setTimeout(function () {
          var _cardWrapperRef$curre4;

          var node = (_cardWrapperRef$curre4 = cardWrapperRef.current) === null || _cardWrapperRef$curre4 === void 0 ? void 0 : _cardWrapperRef$curre4.querySelector("#".concat(getTokenItemId(tokenName)));

          if (!node) {
            return;
          }

          node === null || node === void 0 ? void 0 : node.scrollIntoView({
            block: 'center',
            inline: 'nearest'
          });
        }, 100);
      }
    };
  });

  var handleAliasTokenChange = function handleAliasTokenChange(theme, tokenName, value) {
    var _theme$onThemeChange;

    (_theme$onThemeChange = theme.onThemeChange) === null || _theme$onThemeChange === void 0 ? void 0 : _theme$onThemeChange.call(theme, _objectSpread(_objectSpread({}, theme.config), {}, {
      token: _objectSpread(_objectSpread({}, theme.config.token), {}, _defineProperty({}, tokenName, value))
    }), ['token', tokenName]);
  };

  return wrapSSR( /*#__PURE__*/React.createElement("div", {
    className: classNames('preview-panel-wrapper', hashId)
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames('preview-panel')
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: 16
    }
  }, /*#__PURE__*/React.createElement("h3", {
    className: classNames('preview-panel-space', hashId)
  }, /*#__PURE__*/React.createElement("span", null, "Alias Token \u9884\u89C8"), /*#__PURE__*/React.createElement("span", {
    className: "preview-hide-token"
  }, /*#__PURE__*/React.createElement("span", null, "\u663E\u793A\u6240\u6709"), /*#__PURE__*/React.createElement(Switch, {
    checked: showAll,
    onChange: function onChange(value) {
      return setShowAll(value);
    },
    size: "small"
  }))), /*#__PURE__*/React.createElement(Input, {
    allowClear: true,
    onChange: function onChange(e) {
      setSearch(e.target.value);
    },
    bordered: false,
    addonBefore: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dropdown, {
      overlay: /*#__PURE__*/React.createElement(Menu, {
        items: [{
          label: '筛选项',
          type: 'group',
          key: 'title-key',
          style: {
            fontSize: 12
          }
        }].concat(_toConsumableArray(TOKEN_SORTS.map(function (type) {
          return {
            icon: /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(CheckOutlined, {
              style: {
                opacity: mergedFilterTypes.includes(type) ? 1 : 0,
                marginInlineEnd: 8,
                fontSize: 12
              }
            }), IconMap[type]),
            label: TextMap[type],
            key: type,
            onClick: function onClick() {
              var newTypes = mergedFilterTypes.includes(type) ? mergedFilterTypes.filter(function (item) {
                return type !== item;
              }) : [].concat(_toConsumableArray(mergedFilterTypes), [type]);
              setMergedFilterTypes(newTypes);
              onFilterTypesChange === null || onFilterTypesChange === void 0 ? void 0 : onFilterTypesChange(newTypes);
            }
          };
        })))
      }),
      trigger: ['click']
    }, /*#__PURE__*/React.createElement(SearchDropdown, {
      style: {
        width: 32,
        cursor: 'pointer',
        fontSize: 18,
        paddingTop: 2,
        transition: 'color 0.3s'
      },
      className: classNames({
        'previewer-token-type-dropdown-icon-active': mergedFilterTypes.length > 0
      })
    }))),
    className: "preview-panel-search",
    placeholder: "\u641C\u7D22 Token / \u8272\u503C / \u6587\u672C / \u5706\u89D2\u7B49"
  })), /*#__PURE__*/React.createElement("div", {
    className: classNames('preview-panel-token-wrapper', {
      'preview-panel-token-wrapper-ping-top': showTokenListShadowTop
    })
  }, /*#__PURE__*/React.createElement("div", {
    ref: cardWrapperRef,
    style: {
      height: '100%',
      overflow: 'auto',
      padding: '0 16px'
    }
  }, /*#__PURE__*/React.createElement("div", null, TOKEN_SORTS.filter(function (type) {
    return type !== 'seed' && (mergedFilterTypes.includes(type) || mergedFilterTypes.length === 0) && (!search || groupedToken[type].some(function (item) {
      return item.toLowerCase().includes(search.toLowerCase());
    }));
  }).map(function (key) {
    return /*#__PURE__*/React.createElement(TokenCard, {
      title: TextMap[key],
      icon: IconMap[key],
      key: key,
      tokenPath: ['token'],
      tokenArr: groupedToken[key],
      keyword: search,
      hideUseless: !showAll,
      open: activeCards.includes(key),
      onOpenChange: function onOpenChange(open) {
        return setActiveCards(function (prev) {
          return open ? [].concat(_toConsumableArray(prev), [key]) : prev.filter(function (item) {
            return item !== key;
          });
        });
      },
      onTokenChange: handleAliasTokenChange,
      activeToken: activeToken,
      onActiveTokenChange: function onActiveTokenChange(tokenName) {
        return setActiveToken(tokenName);
      },
      themes: themes,
      selectedTokens: selectedTokens,
      onTokenSelect: onTokenSelect,
      enableTokenSelect: enableTokenSelect,
      fallback: function fallback(config) {
        return getDesignToken(config);
      }
    });
  })))))));
});