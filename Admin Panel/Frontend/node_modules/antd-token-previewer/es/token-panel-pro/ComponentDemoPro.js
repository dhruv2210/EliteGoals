import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { ConfigProvider, Segmented, Space, theme as antdTheme } from 'antd';
import React from 'react';
import ComponentDemoGroup from "../component-panel/ComponentDemoGroup";
import { useLocale } from "../locale";
import { Error, Primary, Success, Warning } from "../overviews";

var ComponentDemoPro = function ComponentDemoPro(_ref) {
  var selectedTokens = _ref.selectedTokens,
      theme = _ref.theme,
      components = _ref.components,
      activeComponents = _ref.activeComponents,
      componentDrawer = _ref.componentDrawer,
      showAll = _ref.showAll,
      style = _ref.style;

  var _React$useState = React.useState('overview'),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      mode = _React$useState2[0],
      setMode = _React$useState2[1];

  var _antdTheme$useToken = antdTheme.useToken(),
      colorBgLayout = _antdTheme$useToken.token.colorBgLayout;

  var locale = useLocale();
  var overviewDemo = React.useMemo(function () {
    if (showAll) {
      return /*#__PURE__*/React.createElement(Space, {
        direction: "vertical"
      }, /*#__PURE__*/React.createElement(Primary, null), /*#__PURE__*/React.createElement(Success, null), /*#__PURE__*/React.createElement(Error, null), /*#__PURE__*/React.createElement(Warning, null));
    }

    if (selectedTokens !== null && selectedTokens !== void 0 && selectedTokens.includes('colorError')) {
      return /*#__PURE__*/React.createElement(Error, null);
    }

    if (selectedTokens !== null && selectedTokens !== void 0 && selectedTokens.includes('colorSuccess')) {
      return /*#__PURE__*/React.createElement(Success, null);
    }

    if (selectedTokens !== null && selectedTokens !== void 0 && selectedTokens.includes('colorWarning')) {
      return /*#__PURE__*/React.createElement(Warning, null);
    }

    return /*#__PURE__*/React.createElement(Primary, null);
  }, [selectedTokens, showAll]);
  return /*#__PURE__*/React.createElement("div", {
    style: _objectSpread(_objectSpread({}, style), {}, {
      background: colorBgLayout,
      paddingBottom: 24
    })
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      margin: 'auto',
      maxWidth: 960
    }
  }, /*#__PURE__*/React.createElement(Segmented, {
    options: [{
      value: 'overview',
      label: locale.demo.overview
    }, {
      value: 'component',
      label: locale.demo.components
    }],
    value: mode,
    onChange: setMode,
    style: {
      margin: '12px 0 0 12px'
    }
  }), /*#__PURE__*/React.createElement(ConfigProvider, {
    theme: {
      components: {
        Select: {
          zIndexPopup: 10
        },
        DatePicker: {
          zIndexPopup: 10
        },
        Dropdown: {
          zIndexPopup: 10
        },
        Mentions: {
          zIndexPopup: 10
        },
        Tooltip: {
          zIndexPopup: 10
        },
        Popover: {
          zIndexPopup: 10
        },
        Popconfirm: {
          zIndexPopup: 10
        }
      }
    }
  }, mode === 'overview' ? /*#__PURE__*/React.createElement("div", {
    style: {
      margin: 12,
      maxWidth: 'fit-content'
    }
  }, overviewDemo) : /*#__PURE__*/React.createElement(ComponentDemoGroup, {
    selectedTokens: selectedTokens,
    themes: [theme],
    components: components,
    activeComponents: activeComponents,
    componentDrawer: componentDrawer,
    hideTokens: true
  }))));
};

export default (function (props) {
  return /*#__PURE__*/React.createElement(ConfigProvider, {
    theme: props.theme.config
  }, /*#__PURE__*/React.createElement(ComponentDemoPro, props));
});