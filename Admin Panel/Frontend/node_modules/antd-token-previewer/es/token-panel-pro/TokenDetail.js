import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { Tooltip } from 'antd';
import tokenMeta from "antd/es/version/token-meta.json";
import classNames from 'classnames';
import React, { useMemo } from 'react';
import { useLocale } from "../locale";
import { mapRelatedAlias } from "../meta/TokenRelation";
import TokenInput from "../TokenInput";
import deepUpdateObj from "../utils/deepUpdateObj";
import getDesignToken from "../utils/getDesignToken";
import getValueByPath from "../utils/getValueByPath";
import makeStyle from "../utils/makeStyle";
import { getRelatedComponents } from "../utils/statistic";
var useStyle = makeStyle('TokenDetail', function (token) {
  return {
    '.token-panel-token-detail': {
      '.token-panel-pro-token-collapse-map-collapse-token-description': {
        color: token.colorTextPlaceholder,
        marginBottom: 8,
        fontSize: 12
      },
      '.token-panel-pro-token-collapse-map-collapse-token-usage-tag-container': {
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        color: token.colorTextSecondary
      },
      '.token-panel-pro-token-collapse-map-collapse-token-usage-tag': {
        display: 'inline-block',
        marginInlineEnd: 8,
        borderRadius: 4,
        height: 20,
        padding: '0 8px',
        fontSize: 12,
        lineHeight: '20px',
        backgroundColor: 'rgba(0,0,0,0.015)'
      },
      '.token-panel-pro-token-collapse-map-collapse-token-inputs': {
        padding: '8px 10px',
        backgroundColor: 'rgba(0,0,0,0.02)',
        marginTop: 12,
        '> *:not(:last-child)': {
          marginBottom: 8
        }
      }
    }
  };
});

var TokenDetail = function TokenDetail(_ref) {
  var _tokenName2;

  var themes = _ref.themes,
      path = _ref.path,
      tokenName = _ref.tokenName,
      className = _ref.className,
      style = _ref.style;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var tokenPath = [].concat(_toConsumableArray(path), [tokenName]);
  var locale = useLocale();

  var handleTokenChange = function handleTokenChange(theme) {
    return function (value) {
      var _theme$onThemeChange;

      (_theme$onThemeChange = theme.onThemeChange) === null || _theme$onThemeChange === void 0 ? void 0 : _theme$onThemeChange.call(theme, deepUpdateObj(theme.config, [].concat(_toConsumableArray(path), [tokenName]), value), [].concat(_toConsumableArray(path), [tokenName]));
    };
  };

  var relatedComponents = useMemo(function () {
    var _tokenName;

    return getRelatedComponents([tokenName].concat(_toConsumableArray((_tokenName = mapRelatedAlias[tokenName]) !== null && _tokenName !== void 0 ? _tokenName : [])));
  }, [tokenName]);
  return wrapSSR( /*#__PURE__*/React.createElement("div", {
    className: classNames(className, hashId, 'token-panel-token-detail'),
    style: style
  }, /*#__PURE__*/React.createElement("div", {
    className: "token-panel-pro-token-collapse-map-collapse-token-description"
  }, (_tokenName2 = tokenMeta[tokenName]) === null || _tokenName2 === void 0 ? void 0 : _tokenName2[locale._lang === 'zh-CN' ? 'desc' : 'descEn']), relatedComponents.length > 0 && /*#__PURE__*/React.createElement(Tooltip, {
    title: getRelatedComponents(tokenName).join(', '),
    placement: "topLeft"
  }, /*#__PURE__*/React.createElement("div", {
    className: "token-panel-pro-token-collapse-map-collapse-token-usage-tag-container"
  }, relatedComponents.map(function (item) {
    return /*#__PURE__*/React.createElement("span", {
      key: item,
      className: "token-panel-pro-token-collapse-map-collapse-token-usage-tag"
    }, item);
  }))), /*#__PURE__*/React.createElement("div", {
    className: "token-panel-pro-token-collapse-map-collapse-token-inputs"
  }, themes.map(function (themeItem) {
    var _themeItem$getCanRese, _getValueByPath;

    return /*#__PURE__*/React.createElement("div", {
      key: themeItem.key
    }, /*#__PURE__*/React.createElement(TokenInput, {
      hideTheme: themes.length === 1,
      theme: themeItem,
      canReset: (_themeItem$getCanRese = themeItem.getCanReset) === null || _themeItem$getCanRese === void 0 ? void 0 : _themeItem$getCanRese.call(themeItem, tokenPath),
      onReset: function onReset() {
        var _themeItem$onReset;

        return (_themeItem$onReset = themeItem.onReset) === null || _themeItem$onReset === void 0 ? void 0 : _themeItem$onReset.call(themeItem, tokenPath);
      },
      onChange: handleTokenChange(themeItem),
      value: (_getValueByPath = getValueByPath(themeItem.config, tokenPath)) !== null && _getValueByPath !== void 0 ? _getValueByPath : getDesignToken(themeItem.config)[tokenName]
    }));
  }))));
};

export default TokenDetail;