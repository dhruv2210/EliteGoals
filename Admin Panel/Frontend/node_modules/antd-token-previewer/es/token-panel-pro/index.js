import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Tabs } from 'antd';
import classNames from 'classnames';
import React, { useEffect, useMemo, useState } from 'react';
import { useLocale } from "../locale";
import { tokenCategory } from "../meta";
import makeStyle from "../utils/makeStyle";
import AliasPanel from "./AliasPanel";
import TokenContent from "./TokenContent";
var useStyle = makeStyle('TokenPanelPro', function (token) {
  return {
    '.token-panel-pro': _defineProperty({
      height: '100%',
      display: 'flex',
      borderInlineEnd: "1px solid ".concat(token.colorBorderSecondary)
    }, ".token-panel-pro-tabs".concat(token.rootCls, "-tabs"), _defineProperty({
      height: '100%',
      overflow: 'auto'
    }, "".concat(token.rootCls, "-tabs-content"), _defineProperty({
      height: '100%'
    }, "".concat(token.rootCls, "-tabs-tabpane"), {
      height: '100%'
    })))
  };
});

var TokenPanelPro = function TokenPanelPro(_ref) {
  var className = _ref.className,
      style = _ref.style,
      theme = _ref.theme,
      selectedTokens = _ref.selectedTokens,
      onTokenSelect = _ref.onTokenSelect,
      infoFollowPrimary = _ref.infoFollowPrimary,
      onInfoFollowPrimaryChange = _ref.onInfoFollowPrimaryChange,
      aliasOpen = _ref.aliasOpen,
      onAliasOpenChange = _ref.onAliasOpenChange;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = useState('brandColor'),
      _useState2 = _slicedToArray(_useState, 2),
      activeGroup = _useState2[0],
      setActiveGroup = _useState2[1];

  var locale = useLocale();
  var activeCategory = useMemo(function () {
    return tokenCategory.reduce(function (result, category) {
      return result !== null && result !== void 0 ? result : category.groups.find(function (group) {
        return group.key === activeGroup;
      });
    }, undefined);
  }, [activeGroup]);
  useEffect(function () {
    var _activeCategory$seedT;

    onTokenSelect === null || onTokenSelect === void 0 ? void 0 : onTokenSelect((_activeCategory$seedT = activeCategory === null || activeCategory === void 0 ? void 0 : activeCategory.seedToken) !== null && _activeCategory$seedT !== void 0 ? _activeCategory$seedT : [], 'seed');
  }, [activeCategory]);
  return wrapSSR( /*#__PURE__*/React.createElement("div", {
    className: classNames(hashId, className, 'token-panel-pro'),
    style: style
  }, /*#__PURE__*/React.createElement(Tabs, {
    defaultActiveKey: "color",
    tabBarGutter: 32,
    tabBarStyle: {
      padding: '0 16px',
      margin: 0
    },
    style: {
      height: '100%',
      flex: '0 0 540px'
    },
    className: "token-panel-pro-tabs",
    onChange: function onChange(key) {
      var _tokenCategory$find$g, _tokenCategory$find;

      setActiveGroup((_tokenCategory$find$g = (_tokenCategory$find = tokenCategory.find(function (category) {
        return category.nameEn === key;
      })) === null || _tokenCategory$find === void 0 ? void 0 : _tokenCategory$find.groups[0].key) !== null && _tokenCategory$find$g !== void 0 ? _tokenCategory$find$g : '');
    },
    items: tokenCategory.map(function (category) {
      return {
        key: category.nameEn,
        label: locale._lang === 'zh-CN' ? category.name : category.nameEn,
        children: /*#__PURE__*/React.createElement(TokenContent, {
          category: category,
          theme: theme,
          selectedTokens: selectedTokens,
          onTokenSelect: onTokenSelect,
          infoFollowPrimary: infoFollowPrimary,
          onInfoFollowPrimaryChange: onInfoFollowPrimaryChange,
          activeGroup: activeGroup,
          onActiveGroupChange: setActiveGroup
        })
      };
    })
  }), /*#__PURE__*/React.createElement(AliasPanel, {
    open: aliasOpen,
    description: activeCategory === null || activeCategory === void 0 ? void 0 : activeCategory.aliasTokenDescription,
    onOpenChange: function onOpenChange(value) {
      return onAliasOpenChange === null || onAliasOpenChange === void 0 ? void 0 : onAliasOpenChange(value);
    },
    activeSeeds: activeCategory === null || activeCategory === void 0 ? void 0 : activeCategory.seedToken,
    theme: theme,
    style: {
      flex: aliasOpen ? '0 0 320px' : 'none',
      width: 0
    },
    selectedTokens: selectedTokens,
    onTokenSelect: onTokenSelect
  })));
};

export default TokenPanelPro;