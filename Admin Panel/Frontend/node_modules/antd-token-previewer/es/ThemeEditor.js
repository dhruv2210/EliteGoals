import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import classNames from 'classnames';
import React, { forwardRef, useImperativeHandle, useMemo, useState } from 'react';
import { antdComponents } from "./component-panel";
import useControlledTheme from "./hooks/useControlledTheme";
import { LocaleContext, zhCN } from "./locale";
import { mapRelatedAlias, seedRelatedAlias, seedRelatedMap } from "./meta/TokenRelation";
import TokenPanelPro from "./token-panel-pro";
import ComponentDemoPro from "./token-panel-pro/ComponentDemoPro";
import makeStyle from "./utils/makeStyle";
import { getRelatedComponents } from "./utils/statistic";
var useStyle = makeStyle('ThemeEditor', function (token) {
  return {
    '.antd-theme-editor': {
      backgroundColor: token.colorBgLayout,
      display: 'flex'
    }
  };
});
var defaultTheme = {
  name: '默认主题',
  key: 'default',
  config: {}
};
var ThemeEditor = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var customTheme = _ref.theme,
      onThemeChange = _ref.onThemeChange,
      className = _ref.className,
      style = _ref.style,
      darkAlgorithm = _ref.darkAlgorithm,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? zhCN : _ref$locale;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = useState({
    seed: ['colorPrimary']
  }),
      _useState2 = _slicedToArray(_useState, 2),
      selectedTokens = _useState2[0],
      setSelectedTokens = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      aliasOpen = _useState4[0],
      setAliasOpen = _useState4[1];

  var _useControlledTheme = useControlledTheme({
    theme: customTheme,
    defaultTheme: defaultTheme,
    onChange: onThemeChange,
    darkAlgorithm: darkAlgorithm
  }),
      theme = _useControlledTheme.theme,
      infoFollowPrimary = _useControlledTheme.infoFollowPrimary,
      onInfoFollowPrimaryChange = _useControlledTheme.onInfoFollowPrimaryChange,
      updateRef = _useControlledTheme.updateRef;

  useImperativeHandle(ref, function () {
    return {
      updateRef: updateRef
    };
  });

  var handleTokenSelect = function handleTokenSelect(token, type) {
    setSelectedTokens(function (prev) {
      var tokens = typeof token === 'string' ? token ? [token] : [] : token;

      if (type === 'seed') {
        return {
          seed: tokens
        };
      }

      var newSelectedTokens = _objectSpread({}, prev);

      tokens.forEach(function (newToken) {
        var _prev$type, _prev$type2, _prev$type3;

        newSelectedTokens = _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, type, (_prev$type = prev[type]) !== null && _prev$type !== void 0 && _prev$type.includes(newToken) ? (_prev$type2 = prev[type]) === null || _prev$type2 === void 0 ? void 0 : _prev$type2.filter(function (t) {
          return t !== newToken;
        }) : [].concat(_toConsumableArray((_prev$type3 = prev[type]) !== null && _prev$type3 !== void 0 ? _prev$type3 : []), [newToken])));
      });

      if (type === 'map') {
        delete newSelectedTokens.alias;
      }

      return newSelectedTokens;
    });
  };

  var computedSelectedTokens = useMemo(function () {
    var _selectedTokens$seed, _selectedTokens$map, _selectedTokens$alias, _selectedTokens$map2, _selectedTokens$alias2, _selectedTokens$alias3;

    if ((_selectedTokens$seed = selectedTokens.seed) !== null && _selectedTokens$seed !== void 0 && _selectedTokens$seed.length && !((_selectedTokens$map = selectedTokens.map) !== null && _selectedTokens$map !== void 0 && _selectedTokens$map.length) && !((_selectedTokens$alias = selectedTokens.alias) !== null && _selectedTokens$alias !== void 0 && _selectedTokens$alias.length)) {
      var _selectedTokens$seed$, _selectedTokens$seed$2;

      return [].concat(_toConsumableArray(selectedTokens.seed), _toConsumableArray((_selectedTokens$seed$ = seedRelatedMap[selectedTokens.seed[0]]) !== null && _selectedTokens$seed$ !== void 0 ? _selectedTokens$seed$ : []), _toConsumableArray((_selectedTokens$seed$2 = seedRelatedAlias[selectedTokens.seed[0]]) !== null && _selectedTokens$seed$2 !== void 0 ? _selectedTokens$seed$2 : []));
    }

    if ((_selectedTokens$map2 = selectedTokens.map) !== null && _selectedTokens$map2 !== void 0 && _selectedTokens$map2.length && !((_selectedTokens$alias2 = selectedTokens.alias) !== null && _selectedTokens$alias2 !== void 0 && _selectedTokens$alias2.length)) {
      return [].concat(_toConsumableArray(selectedTokens.map), _toConsumableArray(selectedTokens.map.reduce(function (result, item) {
        return result.concat(mapRelatedAlias[item]);
      }, [])));
    }

    if ((_selectedTokens$alias3 = selectedTokens.alias) !== null && _selectedTokens$alias3 !== void 0 && _selectedTokens$alias3.length) {
      return _toConsumableArray(selectedTokens.alias);
    }

    return [];
  }, [selectedTokens]);
  var relatedComponents = useMemo(function () {
    return computedSelectedTokens ? getRelatedComponents(computedSelectedTokens) : [];
  }, [computedSelectedTokens]);
  return wrapSSR( /*#__PURE__*/React.createElement(LocaleContext.Provider, {
    value: locale
  }, /*#__PURE__*/React.createElement("div", {
    className: classNames(hashId, 'antd-theme-editor', className),
    style: style
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      flex: aliasOpen ? '0 0 860px' : "0 0 ".concat(860 - 320, "px"),
      height: '100%',
      backgroundColor: '#F7F8FA',
      backgroundImage: 'linear-gradient(180deg, #FFFFFF 0%, rgba(246,247,249,0.00) 100%)',
      display: 'flex',
      transition: 'all 0.3s'
    }
  }, /*#__PURE__*/React.createElement(TokenPanelPro, {
    aliasOpen: aliasOpen,
    onAliasOpenChange: function onAliasOpenChange(open) {
      return setAliasOpen(open);
    },
    theme: theme,
    style: {
      flex: 1
    },
    selectedTokens: selectedTokens,
    onTokenSelect: handleTokenSelect,
    infoFollowPrimary: infoFollowPrimary,
    onInfoFollowPrimaryChange: onInfoFollowPrimaryChange
  })), /*#__PURE__*/React.createElement(ComponentDemoPro, {
    theme: theme,
    components: antdComponents,
    activeComponents: relatedComponents,
    selectedTokens: computedSelectedTokens,
    style: {
      flex: 1,
      overflow: 'auto',
      height: '100%'
    },
    componentDrawer: true
  }))));
});
export default ThemeEditor;