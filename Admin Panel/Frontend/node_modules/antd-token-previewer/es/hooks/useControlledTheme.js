import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { theme as antTheme } from 'antd';
import { useEffect, useRef, useState } from 'react';
import deepUpdateObj from "../utils/deepUpdateObj";
import getDesignToken from "../utils/getDesignToken";
import getValueByPath from "../utils/getValueByPath";
var defaultDark = antTheme.darkAlgorithm,
    compactAlgorithm = antTheme.compactAlgorithm,
    defaultAlgorithm = antTheme.defaultAlgorithm;
export var themeMap = {
  dark: defaultDark,
  compact: compactAlgorithm,
  default: defaultAlgorithm
};

var useControlledTheme = function useControlledTheme(_ref) {
  var _themeRef$current2;

  var customTheme = _ref.theme,
      defaultTheme = _ref.defaultTheme,
      onChange = _ref.onChange;

  var _useState = useState(customTheme !== null && customTheme !== void 0 ? customTheme : defaultTheme),
      _useState2 = _slicedToArray(_useState, 2),
      theme = _useState2[0],
      setTheme = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      infoFollowPrimary = _useState4[0],
      setInfoFollowPrimary = _useState4[1];

  var themeRef = useRef(theme);

  var _useState5 = useState(0),
      _useState6 = _slicedToArray(_useState5, 2),
      setRenderHolder = _useState6[1];

  var forceUpdate = function forceUpdate() {
    return setRenderHolder(function (prev) {
      return prev + 1;
    });
  };

  var getNewTheme = function getNewTheme(newTheme, force) {
    var newToken = _objectSpread({}, newTheme.config.token);

    if (infoFollowPrimary || force) {
      newToken.colorInfo = getDesignToken(newTheme.config).colorPrimary;
    }

    return _objectSpread(_objectSpread({}, newTheme), {}, {
      config: _objectSpread(_objectSpread({}, newTheme.config), {}, {
        token: newToken
      })
    });
  };

  var handleSetTheme = function handleSetTheme(newTheme) {
    if (customTheme) {
      onChange === null || onChange === void 0 ? void 0 : onChange(getNewTheme(newTheme));
    } else {
      setTheme(getNewTheme(newTheme));
    }
  };

  var handleResetTheme = function handleResetTheme(path) {
    var _themeRef$current;

    var newConfig = _objectSpread({}, theme.config);

    newConfig = deepUpdateObj(newConfig, path, getValueByPath((_themeRef$current = themeRef.current) === null || _themeRef$current === void 0 ? void 0 : _themeRef$current.config, path));
    handleSetTheme(_objectSpread(_objectSpread({}, theme), {}, {
      config: newConfig
    }), path);
  };

  var getCanReset = function getCanReset(origin, current) {
    return function (path) {
      return getValueByPath(origin, path) !== getValueByPath(current, path);
    };
  }; // Controlled theme change


  useEffect(function () {
    if (customTheme) {
      setTheme(customTheme);
    }
  }, [customTheme]);

  var handleInfoFollowPrimaryChange = function handleInfoFollowPrimaryChange(value) {
    setInfoFollowPrimary(value);

    if (value) {
      setTheme(getNewTheme(theme, true));
    }
  };

  return {
    theme: _objectSpread(_objectSpread({}, theme), {}, {
      onThemeChange: function onThemeChange(config, path) {
        return handleSetTheme(_objectSpread(_objectSpread({}, theme), {}, {
          config: config
        }), path);
      },
      onReset: handleResetTheme,
      getCanReset: getCanReset((_themeRef$current2 = themeRef.current) === null || _themeRef$current2 === void 0 ? void 0 : _themeRef$current2.config, theme.config)
    }),
    infoFollowPrimary: infoFollowPrimary,
    onInfoFollowPrimaryChange: handleInfoFollowPrimaryChange,
    updateRef: function updateRef() {
      themeRef.current = theme;
      forceUpdate();
    }
  };
};

export default useControlledTheme;