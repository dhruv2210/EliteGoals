import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { Button, Layout, message, theme as antdTheme } from 'antd';
import classNames from 'classnames';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import ComponentPanel from "./component-panel";
import FilterPanel from "./FilterPanel";
import { Arrow, CompactTheme, DarkTheme } from "./icons";
import ThemeSelect from "./ThemeSelect";
import TokenPanel from "./token-panel";
import makeStyle from "./utils/makeStyle";
var darkAlgorithm = antdTheme.darkAlgorithm;
var Header = Layout.Header,
    Sider = Layout.Sider,
    Content = Layout.Content;
var SIDER_WIDTH = 340;
var useStyle = makeStyle('layout', function (token) {
  var _$concat, _previewerLayout$co;

  return _defineProperty({}, ".previewer-layout".concat(token.rootCls, "-layout"), (_previewerLayout$co = {}, _defineProperty(_previewerLayout$co, "".concat(token.rootCls, "-layout-header"), {
    backgroundColor: 'white !important',
    display: 'flex',
    alignItems: 'center',
    borderBottom: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorSplit),
    paddingInline: "".concat(token.paddingLG, "px !important")
  }), _defineProperty(_previewerLayout$co, "".concat(token.rootCls, "-layout-sider"), (_$concat = {
    padding: 0,
    borderInlineEnd: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorSplit),
    transition: "all ".concat(token.motionDurationSlow),
    overflow: 'visible !important'
  }, _defineProperty(_$concat, "".concat(token.rootCls, "-btn").concat(token.rootCls, "-btn-circle.previewer-sider-collapse-btn"), {
    position: 'absolute',
    transform: 'translateX(50%)',
    border: 'none',
    boxShadow: '0 2px 8px -2px rgba(0,0,0,0.05), 0 1px 4px -1px rgba(25,15,15,0.07), 0 0 1px 0 rgba(0,0,0,0.08)',
    marginTop: token.margin,
    insetInlineEnd: 0,
    color: 'rgba(0,0,0,0.25)',
    '&:hover': {
      color: 'rgba(0,0,0,0.45)',
      boxShadow: '0 2px 8px -2px rgba(0,0,0,0.18), 0 1px 4px -1px rgba(25,15,15,0.18), 0 0 1px 0 rgba(0,0,0,0.18)'
    },
    '.previewer-sider-collapse-btn-icon': {
      fontSize: 16,
      marginTop: 4,
      transition: 'transform 0.3s'
    },
    '&-collapsed': {
      borderRadius: {
        _skip_check_: true,
        value: '0 100px 100px 0'
      },
      transform: 'translateX(90%)',
      '.previewer-sider-collapse-btn-icon': {
        transform: 'rotate(180deg)'
      }
    }
  }), _defineProperty(_$concat, '.previewer-sider-handler', {
    position: 'absolute',
    insetInlineEnd: 0,
    height: '100%',
    width: 8,
    transform: 'translateX(50%)',
    cursor: 'ew-resize',
    opacity: 0,
    backgroundColor: 'transparent'
  }), _$concat)), _previewerLayout$co));
});

var Previewer = function Previewer(_ref2) {
  var onSave = _ref2.onSave,
      showTheme = _ref2.showTheme,
      theme = _ref2.theme,
      _onThemeChange = _ref2.onThemeChange;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      selectedTokens = _useState2[0],
      setSelectedTokens = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      siderVisible = _useState4[0],
      setSiderVisible = _useState4[1];

  var _useState5 = useState(SIDER_WIDTH),
      _useState6 = _slicedToArray(_useState5, 2),
      siderWidth = _useState6[0],
      setSiderWidth = _useState6[1];

  var _useState7 = useState('filter'),
      _useState8 = _slicedToArray(_useState7, 2),
      filterMode = _useState8[0],
      setFilterMode = _useState8[1];

  var _useState9 = useState([]),
      _useState10 = _slicedToArray(_useState9, 2),
      filterTypes = _useState10[0],
      setFilterTypes = _useState10[1];

  var tokenPanelRef = useRef(null);
  var dragRef = useRef(false);
  var siderRef = useRef(null);
  var defaultThemes = useMemo(function () {
    return [{
      name: '默认主题',
      key: 'default',
      config: {},
      fixed: true
    }, {
      name: '暗色主题',
      key: 'dark',
      config: {
        algorithm: darkAlgorithm
      },
      icon: /*#__PURE__*/React.createElement(DarkTheme, {
        style: {
          fontSize: 16
        }
      }),
      closable: true
    }, {
      name: '紧凑主题',
      key: 'compact',
      config: {},
      icon: /*#__PURE__*/React.createElement(CompactTheme, {
        style: {
          fontSize: 16
        }
      }),
      closable: true
    }];
  }, []);

  var _useState11 = useState(theme ? [_objectSpread(_objectSpread({}, theme), {}, {
    fixed: true
  })] : defaultThemes),
      _useState12 = _slicedToArray(_useState11, 2),
      themes = _useState12[0],
      setThemes = _useState12[1];

  var _useState13 = useState(showTheme && !theme ? ['default', 'dark'] : [themes[0].key]),
      _useState14 = _slicedToArray(_useState13, 2),
      shownThemes = _useState14[0],
      setShownThemes = _useState14[1];

  var _useState15 = useState(showTheme && !theme ? ['default', 'dark'] : [themes[0].key]),
      _useState16 = _slicedToArray(_useState15, 2),
      enabledThemes = _useState16[0],
      setEnabledThemes = _useState16[1];

  useEffect(function () {
    setThemes(theme ? [_objectSpread(_objectSpread({}, theme), {}, {
      fixed: true
    })] : defaultThemes);
    setShownThemes(function (prev) {
      return theme ? [theme.key] : prev;
    });
    setEnabledThemes(function (prev) {
      return theme ? [theme.key] : prev;
    });
  }, [defaultThemes, theme]);
  useEffect(function () {
    var handleMouseUp = function handleMouseUp() {
      dragRef.current = false;
      document.body.style.cursor = '';

      if (siderRef.current) {
        siderRef.current.style.transition = 'all 0.3s';
      }
    };

    var handleMouseMove = function handleMouseMove(e) {
      if (dragRef.current) {
        e.preventDefault();
        setSiderWidth(e.clientX > SIDER_WIDTH ? e.clientX : SIDER_WIDTH);
      }
    };

    window.addEventListener('mouseup', handleMouseUp);
    window.addEventListener('mousemove', handleMouseMove);
    return function () {
      window.removeEventListener('mouseup', handleMouseUp);
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);
  var handleTokenClick = useCallback(function (tokenName) {
    var _tokenPanelRef$curren;

    (_tokenPanelRef$curren = tokenPanelRef.current) === null || _tokenPanelRef$curren === void 0 ? void 0 : _tokenPanelRef$curren.scrollToToken(tokenName);
  }, []);
  var mutableThemes = useMemo(function () {
    return enabledThemes.map(function (item) {
      var themeEntity = themes.find(function (themeItem) {
        return themeItem.key === item;
      });
      return {
        name: themeEntity.name,
        key: themeEntity.key,
        config: themeEntity.config,
        onThemeChange: function onThemeChange(newTheme) {
          if (themeEntity.key === (theme === null || theme === void 0 ? void 0 : theme.key)) {
            _onThemeChange === null || _onThemeChange === void 0 ? void 0 : _onThemeChange(newTheme);
          } else {
            setThemes(function (prev) {
              return prev.map(function (themeItem) {
                return themeItem.key === themeEntity.key ? _objectSpread(_objectSpread({}, themeItem), {}, {
                  config: newTheme
                }) : themeItem;
              });
            });
          }
        }
      };
    });
  }, [enabledThemes, _onThemeChange, theme === null || theme === void 0 ? void 0 : theme.key, themes]);
  var componentPanel = useMemo(function () {
    return /*#__PURE__*/React.createElement(ComponentPanel, {
      filterMode: filterMode,
      selectedTokens: selectedTokens,
      themes: mutableThemes,
      onTokenClick: handleTokenClick,
      style: {
        flex: 1,
        height: 0,
        marginTop: 12
      }
    });
  }, [filterMode, handleTokenClick, mutableThemes, selectedTokens]);
  return wrapSSR( /*#__PURE__*/React.createElement(Layout, {
    className: classNames('previewer-layout', hashId)
  }, /*#__PURE__*/React.createElement(Header, {
    className: "previewer-header"
  }, /*#__PURE__*/React.createElement("span", {
    style: {
      fontSize: 16,
      fontWeight: 'bold',
      marginRight: 16
    }
  }, "\u4E3B\u9898\u9884\u89C8\u5668"), showTheme && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ThemeSelect, {
    showAddTheme: true,
    enabledThemes: enabledThemes,
    shownThemes: shownThemes,
    themes: themes,
    onEnabledThemeChange: function onEnabledThemeChange(value) {
      if (value.length > 2) {
        message.warning({
          content: '最多同时展示两个主题'
        });
        return;
      }

      setEnabledThemes(value);
    },
    onShownThemeChange: function onShownThemeChange(value, selectTheme, _ref3) {
      var type = _ref3.type;

      if (type === 'select' && enabledThemes.length < 2) {
        setEnabledThemes(function (prev) {
          return [].concat(_toConsumableArray(prev), [selectTheme]);
        });
      }

      setShownThemes(value);
    }
  })), /*#__PURE__*/React.createElement(Button, {
    type: "primary",
    style: {
      marginLeft: 'auto'
    },
    onClick: function onClick() {
      return onSave === null || onSave === void 0 ? void 0 : onSave(themes[0].config);
    }
  }, "\u4FDD\u5B58")), /*#__PURE__*/React.createElement(Layout, {
    style: {
      height: 'calc(100vh - 64px)'
    }
  }, /*#__PURE__*/React.createElement(Sider, {
    style: {
      backgroundColor: 'white',
      height: '100%',
      overflow: 'auto',
      flex: "0 0 ".concat(siderWidth, "px"),
      willChange: 'auto'
    },
    width: siderVisible ? siderWidth : 0,
    ref: siderRef
  }, /*#__PURE__*/React.createElement("div", {
    className: "previewer-sider-handler",
    onMouseDown: function onMouseDown() {
      dragRef.current = true;
      document.body.style.cursor = 'ew-resize';

      if (siderRef.current) {
        siderRef.current.style.transition = 'none';
      }
    }
  }), /*#__PURE__*/React.createElement(Button, {
    onClick: function onClick() {
      return setSiderVisible(function (prev) {
        return !prev;
      });
    },
    className: classNames('previewer-sider-collapse-btn', !siderVisible && 'previewer-sider-collapse-btn-collapsed'),
    size: "small",
    icon: /*#__PURE__*/React.createElement(Arrow, {
      rotate: siderVisible ? 0 : 180,
      className: "previewer-sider-collapse-btn-icon"
    }),
    shape: "circle"
  }), /*#__PURE__*/React.createElement(TokenPanel, {
    ref: tokenPanelRef,
    filterTypes: filterTypes,
    onFilterTypesChange: function onFilterTypesChange(types) {
      return setFilterTypes(types);
    },
    themes: mutableThemes,
    selectedTokens: selectedTokens,
    enableTokenSelect: true,
    onTokenSelect: function onTokenSelect(tokenName) {
      return setSelectedTokens(function (prev) {
        return prev.includes(tokenName) ? prev.filter(function (item) {
          return item !== tokenName;
        }) : [].concat(_toConsumableArray(prev), [tokenName]);
      });
    }
  })), /*#__PURE__*/React.createElement(Content, {
    style: {
      padding: '16px 20px 28px 24px',
      height: '100%',
      overflow: 'hidden',
      display: 'flex',
      flexDirection: 'column'
    }
  }, /*#__PURE__*/React.createElement(FilterPanel, {
    selectedTokens: selectedTokens,
    onSelectedTokensChange: function onSelectedTokensChange(tokens) {
      return setSelectedTokens(tokens);
    },
    filterMode: filterMode,
    onFilterModeChange: function onFilterModeChange(mode) {
      return setFilterMode(mode);
    },
    onTokenClick: handleTokenClick
  }), componentPanel))));
};

export default Previewer;