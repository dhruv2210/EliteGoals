import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { useStyleRegister } from '@ant-design/cssinjs';
import { ConfigProvider, theme as antdTheme } from 'antd';
import { useContext } from 'react';
var ConfigContext = ConfigProvider.ConfigContext;

var makeStyle = function makeStyle(path, styleFn) {
  return function () {
    var _antdTheme$useToken = antdTheme.useToken(),
        theme = _antdTheme$useToken.theme,
        token = _antdTheme$useToken.token,
        hashId = _antdTheme$useToken.hashId;

    var _useContext = useContext(ConfigContext),
        getPrefixCls = _useContext.getPrefixCls;

    var rootCls = getPrefixCls();
    return [useStyleRegister({
      theme: theme,
      hashId: hashId,
      token: token,
      path: [path]
    }, function () {
      return styleFn(_objectSpread(_objectSpread({}, token), {}, {
        rootCls: ".".concat(rootCls)
      }));
    }), hashId];
  };
};

export default makeStyle;