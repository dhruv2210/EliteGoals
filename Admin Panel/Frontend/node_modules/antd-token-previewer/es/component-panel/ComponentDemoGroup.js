import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { ConfigProvider, Tooltip } from 'antd';
import classNames from 'classnames';
import React from 'react';
import ComponentDemos from "../component-demos";
import { useLocale } from "../locale";
import makeStyle from "../utils/makeStyle";
import ComponentCard, { getComponentDemoId } from "./ComponentCard";
var useStyle = makeStyle('ComponentDemoGroup', function (token) {
  return {
    '.previewer-component-demo-group': {
      display: 'flex',
      width: '100%',
      overflow: 'hidden',
      '&:first-child': {
        '.previewer-component-demo-group-item': {
          paddingTop: token.padding
        }
      },
      '&:last-child': {
        '.previewer-component-demo-group-item': {
          paddingBottom: token.padding
        }
      }
    }
  };
});
var useDemoStyle = makeStyle('ComponentDemoBlock', function (token) {
  return {
    '.previewer-component-demo-group-item': {
      flex: '1 1 50%',
      paddingInline: token.padding,
      paddingBlock: token.padding / 2,
      width: 0,
      backgroundColor: token.colorBgLayout,
      '.previewer-component-demo-group-item-relative-token': {
        color: token.colorTextSecondary,
        paddingBottom: 8,
        '&:not(:first-child)': {
          marginTop: 12
        }
      }
    }
  };
});

var ComponentDemoBlock = function ComponentDemoBlock(_ref) {
  var _demos$;

  var component = _ref.component,
      onTokenClick = _ref.onTokenClick,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'middle' : _ref$size,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$demos = _ref.demos,
      demos = _ref$demos === void 0 ? [] : _ref$demos,
      theme = _ref.theme,
      componentDrawer = _ref.componentDrawer;

  var _useDemoStyle = useDemoStyle(),
      _useDemoStyle2 = _slicedToArray(_useDemoStyle, 2),
      hashId = _useDemoStyle2[1];

  var locale = useLocale();
  return /*#__PURE__*/React.createElement("div", {
    className: classNames('previewer-component-demo-group-item', hashId)
  }, /*#__PURE__*/React.createElement(ComponentCard, {
    title: component,
    component: component,
    onTokenClick: onTokenClick,
    drawer: componentDrawer,
    theme: theme
  }, /*#__PURE__*/React.createElement(ConfigProvider, {
    componentSize: size,
    componentDisabled: disabled
  }, demos.some(function (item) {
    return item.active;
  }) ? demos.map(function (demo) {
    return /*#__PURE__*/React.createElement("div", {
      key: demo.key,
      style: {
        display: demo.active ? '' : 'none'
      }
    }, demo.tokens && /*#__PURE__*/React.createElement("div", {
      className: "previewer-component-demo-group-item-relative-token"
    }, /*#__PURE__*/React.createElement(Tooltip, {
      title: demo.tokens.join(', ')
    }, /*#__PURE__*/React.createElement("span", null, locale.demo.relatedTokens, ":", ' ', demo.tokens.slice(0, 2).join(', '), demo.tokens.length > 2 ? '...' : ''))), demo.demo);
  }) : (_demos$ = demos[0]) === null || _demos$ === void 0 ? void 0 : _demos$.demo)));
};

var ComponentDemoGroup = function ComponentDemoGroup(_ref2) {
  var themes = _ref2.themes,
      components = _ref2.components,
      size = _ref2.size,
      disabled = _ref2.disabled,
      activeComponents = _ref2.activeComponents,
      selectedTokens = _ref2.selectedTokens,
      onTokenClick = _ref2.onTokenClick,
      componentDrawer = _ref2.componentDrawer,
      hideTokens = _ref2.hideTokens;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  return wrapSSR( /*#__PURE__*/React.createElement(React.Fragment, null, Object.entries(components).reduce(function (result, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        group = _ref4[1];

    return result.concat(group);
  }, []).map(function (item) {
    var componentDemos = ComponentDemos[item];

    if (!componentDemos) {
      return null;
    }

    var demos = componentDemos.map(function (demo, index) {
      return _objectSpread(_objectSpread({}, demo), {}, {
        tokens: hideTokens ? undefined : demo.tokens,
        active: (!selectedTokens || selectedTokens.length === 0) && index === 0 || (selectedTokens === null || selectedTokens === void 0 ? void 0 : selectedTokens.some(function (token) {
          var _demo$tokens;

          return (_demo$tokens = demo.tokens) === null || _demo$tokens === void 0 ? void 0 : _demo$tokens.includes(token);
        }))
      });
    });
    return /*#__PURE__*/React.createElement("div", {
      className: classNames('previewer-component-demo-group', hashId),
      key: item,
      id: getComponentDemoId(item),
      style: {
        display: !activeComponents || activeComponents.length === 0 || activeComponents.includes(item) ? '' : 'none'
      }
    }, themes.length > 1 ? themes.map(function (theme) {
      return /*#__PURE__*/React.createElement(ConfigProvider, {
        key: theme.key,
        theme: theme.config
      }, /*#__PURE__*/React.createElement(ComponentDemoBlock, {
        component: item,
        onTokenClick: onTokenClick,
        demos: demos,
        disabled: disabled,
        size: size,
        theme: theme,
        componentDrawer: componentDrawer
      }));
    }) : /*#__PURE__*/React.createElement(ComponentDemoBlock, {
      component: item,
      onTokenClick: onTokenClick,
      demos: demos,
      disabled: disabled,
      size: size,
      theme: themes[0],
      componentDrawer: componentDrawer
    }));
  })));
};

export default ComponentDemoGroup;