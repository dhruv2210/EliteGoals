import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { useState } from 'react';
import { Card } from 'antd';
import { Control } from "../icons";
import makeStyle from "../utils/makeStyle";
import classNames from 'classnames';
import ComponentTokenDrawer from "./ComponentTokenDrawer";
var useStyle = makeStyle('ComponentCard', function (token) {
  var _$concat2;

  return _defineProperty({}, "".concat(token.rootCls, "-card.component-card"), (_$concat2 = {
    borderRadius: 6,
    boxShadow: "0 1px 2px 0 rgba(25,15,15,0.07)"
  }, _defineProperty(_$concat2, "".concat(token.rootCls, "-card-head"), _defineProperty({
    paddingInline: 18
  }, "".concat(token.rootCls, "-card-head-title"), {
    paddingBlock: token.paddingSM,
    fontSize: token.fontSize
  })), _defineProperty(_$concat2, "".concat(token.rootCls, "-card-body"), {
    padding: 18,
    overflow: 'auto'
  }), _defineProperty(_$concat2, '.component-token-control-icon', {
    color: token.colorIcon,
    transition: "color ".concat(token.motionDurationMid),
    fontSize: token.fontSizeLG,
    cursor: 'pointer',
    '&:hover': {
      color: token.colorIconHover
    }
  }), _$concat2));
});
export var getComponentDemoId = function getComponentDemoId(component) {
  return "antd-token-previewer-".concat(component);
};

var ComponentCard = function ComponentCard(_ref2) {
  var children = _ref2.children,
      component = _ref2.component,
      title = _ref2.title,
      theme = _ref2.theme,
      drawer = _ref2.drawer;

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      drawerOpen = _useState2[0],
      setDrawerOpen = _useState2[1];

  return wrapSSR( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {
    className: classNames('component-card', hashId),
    title: title,
    extra: drawer && theme && /*#__PURE__*/React.createElement(Control, {
      className: "component-token-control-icon",
      onClick: function onClick() {
        return setDrawerOpen(true);
      }
    })
  }, children), drawer && theme && /*#__PURE__*/React.createElement(ComponentTokenDrawer, {
    visible: drawerOpen,
    theme: theme,
    component: component,
    onClose: function onClose() {
      return setDrawerOpen(false);
    }
  })));
};

export default ComponentCard;