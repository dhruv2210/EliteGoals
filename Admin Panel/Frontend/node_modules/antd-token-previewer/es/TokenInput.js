import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Button, Dropdown, Input, InputNumber } from 'antd';
import classNames from 'classnames';
import React, { useEffect, useRef, useState } from 'react';
import { useDebouncyFn } from 'use-debouncy';
import ColorPanel from "./ColorPanel";
import ColorPreview from "./ColorPreview";
import { useLocale } from "./locale";
import isColor from "./utils/isColor";
import makeStyle from "./utils/makeStyle";
var useStyle = makeStyle('TokenInput', function (token) {
  var _light, _previewerTokenInp;

  return {
    '.previewer-token-input': (_previewerTokenInp = {}, _defineProperty(_previewerTokenInp, "".concat(token.rootCls, "-input-group-addon, ").concat(token.rootCls, "-input-number-group-addon"), {
      border: '0 !important',
      color: "rgba(0, 0, 0, 0.25) !important",
      fontSize: "".concat(token.fontSizeSM, "px !important"),
      padding: '0 !important',
      backgroundColor: 'transparent !important',
      '&:first-child': {
        paddingInlineStart: 0
      },
      '&:last-child': {
        paddingInlineEnd: 0
      }
    }), _defineProperty(_previewerTokenInp, "".concat(token.rootCls, "-input-group-wrapper, ").concat(token.rootCls, "-input-number-group-wrapper"), {
      padding: 0,
      height: 24,
      width: '100%',
      input: {
        fontSize: token.fontSizeSM,
        lineHeight: token.lineHeightSM,
        padding: "2px ".concat(token.paddingXS, "px"),
        height: 24
      }
    }), _defineProperty(_previewerTokenInp, "".concat(token.rootCls, "-input-group-wrapper ").concat(token.rootCls, "-input, ").concat(token.rootCls, "-input-number-group-wrapper ").concat(token.rootCls, "-input-number"), {
      background: 'white',
      borderRadius: "".concat(token.borderRadiusLG, "px !important"),
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis'
    }), _defineProperty(_previewerTokenInp, '&&-light', (_light = {}, _defineProperty(_light, "".concat(token.rootCls, "-input-group-addon, ").concat(token.rootCls, "-input-number-group-addon"), {
      backgroundColor: token.colorBgContainer
    }), _defineProperty(_light, "".concat(token.rootCls, "-input-group-wrapper ").concat(token.rootCls, "-input,\n        ").concat(token.rootCls, "-input-number-group-wrapper ").concat(token.rootCls, "-input-number-input"), {
      background: token.colorFillAlter
    }), _light)), _defineProperty(_previewerTokenInp, '&&-readonly', {
      input: {
        cursor: 'text',
        color: token.colorText
      }
    }), _previewerTokenInp)
  };
});

var TokenInput = function TokenInput(_ref) {
  var value = _ref.value,
      theme = _ref.theme,
      onChange = _ref.onChange,
      light = _ref.light,
      readonly = _ref.readonly,
      onReset = _ref.onReset,
      customCanReset = _ref.canReset,
      hideTheme = _ref.hideTheme;
  var valueRef = useRef(value || '');

  var _useState = useState(value || ''),
      _useState2 = _slicedToArray(_useState, 2),
      tokenValue = _useState2[0],
      setTokenValue = _useState2[1];

  var canReset = customCanReset !== null && customCanReset !== void 0 ? customCanReset : valueRef.current !== tokenValue;
  var locale = useLocale();

  var _useStyle = useStyle(),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  useEffect(function () {
    if (value !== undefined) {
      setTokenValue(value);
    }
  }, [value]);
  var debouncedOnChange = useDebouncyFn(function (newValue) {
    onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
  }, 500);

  var handleTokenChange = function handleTokenChange(newValue) {
    if (!readonly) {
      setTokenValue(newValue);
      debouncedOnChange(newValue);
    }
  };

  var handleReset = function handleReset() {
    if (onReset) {
      onReset();
    } else {
      handleTokenChange(valueRef.current);
    }
  };

  var addonAfter = !readonly && /*#__PURE__*/React.createElement("span", {
    style: {
      display: 'flex',
      alignItems: 'center',
      minWidth: hideTheme ? '' : 80
    }
  }, canReset || hideTheme ? /*#__PURE__*/React.createElement(Button, {
    style: {
      fontSize: 12
    },
    onClick: handleReset,
    type: "link",
    size: "small",
    disabled: !canReset
  }, locale.reset) : /*#__PURE__*/React.createElement("span", {
    style: {
      padding: '0 8px'
    }
  }, theme === null || theme === void 0 ? void 0 : theme.name));
  var inputNode;

  if (typeof valueRef.current === 'string' && isColor(valueRef.current)) {
    inputNode = /*#__PURE__*/React.createElement(Input, {
      bordered: false,
      addonAfter: addonAfter,
      value: String(tokenValue),
      disabled: readonly,
      addonBefore: /*#__PURE__*/React.createElement(Dropdown, {
        trigger: ['click'],
        overlay: /*#__PURE__*/React.createElement(ColorPanel, {
          alpha: true,
          color: String(tokenValue),
          onChange: function onChange(v) {
            handleTokenChange(v);
          }
        })
      }, /*#__PURE__*/React.createElement(ColorPreview, {
        color: String(tokenValue),
        dark: (theme === null || theme === void 0 ? void 0 : theme.key) === 'dark',
        style: {
          cursor: 'pointer',
          marginInlineEnd: 8,
          verticalAlign: 'top'
        }
      })),
      onChange: function onChange(e) {
        handleTokenChange(e.target.value);
      }
    });
  } else if (typeof valueRef.current === 'number') {
    inputNode = /*#__PURE__*/React.createElement(InputNumber, {
      addonAfter: addonAfter,
      bordered: false,
      value: tokenValue,
      disabled: readonly,
      onChange: function onChange(newValue) {
        handleTokenChange(Number(newValue));
      }
    });
  } else {
    inputNode = /*#__PURE__*/React.createElement(Input, {
      addonAfter: addonAfter,
      bordered: false,
      value: String(tokenValue),
      disabled: readonly,
      onChange: function onChange(e) {
        handleTokenChange(typeof value === 'number' ? Number(e.target.value) : e.target.value);
      }
    });
  }

  return wrapSSR( /*#__PURE__*/React.createElement("div", {
    className: classNames('previewer-token-input', hashId, {
      'previewer-token-input-light': light,
      'previewer-token-input-readonly': readonly
    })
  }, inputNode));
};

export default TokenInput;