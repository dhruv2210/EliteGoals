"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _antd = require("antd");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _componentPanel = _interopRequireDefault(require("./component-panel"));

var _FilterPanel = _interopRequireDefault(require("./FilterPanel"));

var _icons = require("./icons");

var _ThemeSelect = _interopRequireDefault(require("./ThemeSelect"));

var _tokenPanel = _interopRequireDefault(require("./token-panel"));

var _makeStyle = _interopRequireDefault(require("./utils/makeStyle"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var darkAlgorithm = _antd.theme.darkAlgorithm;
var Header = _antd.Layout.Header,
    Sider = _antd.Layout.Sider,
    Content = _antd.Layout.Content;
var SIDER_WIDTH = 340;
var useStyle = (0, _makeStyle.default)('layout', function (token) {
  var _$concat, _previewerLayout$co;

  return (0, _defineProperty2.default)({}, ".previewer-layout".concat(token.rootCls, "-layout"), (_previewerLayout$co = {}, (0, _defineProperty2.default)(_previewerLayout$co, "".concat(token.rootCls, "-layout-header"), {
    backgroundColor: 'white !important',
    display: 'flex',
    alignItems: 'center',
    borderBottom: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorSplit),
    paddingInline: "".concat(token.paddingLG, "px !important")
  }), (0, _defineProperty2.default)(_previewerLayout$co, "".concat(token.rootCls, "-layout-sider"), (_$concat = {
    padding: 0,
    borderInlineEnd: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorSplit),
    transition: "all ".concat(token.motionDurationSlow),
    overflow: 'visible !important'
  }, (0, _defineProperty2.default)(_$concat, "".concat(token.rootCls, "-btn").concat(token.rootCls, "-btn-circle.previewer-sider-collapse-btn"), {
    position: 'absolute',
    transform: 'translateX(50%)',
    border: 'none',
    boxShadow: '0 2px 8px -2px rgba(0,0,0,0.05), 0 1px 4px -1px rgba(25,15,15,0.07), 0 0 1px 0 rgba(0,0,0,0.08)',
    marginTop: token.margin,
    insetInlineEnd: 0,
    color: 'rgba(0,0,0,0.25)',
    '&:hover': {
      color: 'rgba(0,0,0,0.45)',
      boxShadow: '0 2px 8px -2px rgba(0,0,0,0.18), 0 1px 4px -1px rgba(25,15,15,0.18), 0 0 1px 0 rgba(0,0,0,0.18)'
    },
    '.previewer-sider-collapse-btn-icon': {
      fontSize: 16,
      marginTop: 4,
      transition: 'transform 0.3s'
    },
    '&-collapsed': {
      borderRadius: {
        _skip_check_: true,
        value: '0 100px 100px 0'
      },
      transform: 'translateX(90%)',
      '.previewer-sider-collapse-btn-icon': {
        transform: 'rotate(180deg)'
      }
    }
  }), (0, _defineProperty2.default)(_$concat, '.previewer-sider-handler', {
    position: 'absolute',
    insetInlineEnd: 0,
    height: '100%',
    width: 8,
    transform: 'translateX(50%)',
    cursor: 'ew-resize',
    opacity: 0,
    backgroundColor: 'transparent'
  }), _$concat)), _previewerLayout$co));
});

var Previewer = function Previewer(_ref2) {
  var onSave = _ref2.onSave,
      showTheme = _ref2.showTheme,
      theme = _ref2.theme,
      _onThemeChange = _ref2.onThemeChange;

  var _useStyle = useStyle(),
      _useStyle2 = (0, _slicedToArray2.default)(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      selectedTokens = _useState2[0],
      setSelectedTokens = _useState2[1];

  var _useState3 = (0, _react.useState)(true),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      siderVisible = _useState4[0],
      setSiderVisible = _useState4[1];

  var _useState5 = (0, _react.useState)(SIDER_WIDTH),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      siderWidth = _useState6[0],
      setSiderWidth = _useState6[1];

  var _useState7 = (0, _react.useState)('filter'),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      filterMode = _useState8[0],
      setFilterMode = _useState8[1];

  var _useState9 = (0, _react.useState)([]),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      filterTypes = _useState10[0],
      setFilterTypes = _useState10[1];

  var tokenPanelRef = (0, _react.useRef)(null);
  var dragRef = (0, _react.useRef)(false);
  var siderRef = (0, _react.useRef)(null);
  var defaultThemes = (0, _react.useMemo)(function () {
    return [{
      name: '默认主题',
      key: 'default',
      config: {},
      fixed: true
    }, {
      name: '暗色主题',
      key: 'dark',
      config: {
        algorithm: darkAlgorithm
      },
      icon: /*#__PURE__*/_react.default.createElement(_icons.DarkTheme, {
        style: {
          fontSize: 16
        }
      }),
      closable: true
    }, {
      name: '紧凑主题',
      key: 'compact',
      config: {},
      icon: /*#__PURE__*/_react.default.createElement(_icons.CompactTheme, {
        style: {
          fontSize: 16
        }
      }),
      closable: true
    }];
  }, []);

  var _useState11 = (0, _react.useState)(theme ? [_objectSpread(_objectSpread({}, theme), {}, {
    fixed: true
  })] : defaultThemes),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      themes = _useState12[0],
      setThemes = _useState12[1];

  var _useState13 = (0, _react.useState)(showTheme && !theme ? ['default', 'dark'] : [themes[0].key]),
      _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
      shownThemes = _useState14[0],
      setShownThemes = _useState14[1];

  var _useState15 = (0, _react.useState)(showTheme && !theme ? ['default', 'dark'] : [themes[0].key]),
      _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
      enabledThemes = _useState16[0],
      setEnabledThemes = _useState16[1];

  (0, _react.useEffect)(function () {
    setThemes(theme ? [_objectSpread(_objectSpread({}, theme), {}, {
      fixed: true
    })] : defaultThemes);
    setShownThemes(function (prev) {
      return theme ? [theme.key] : prev;
    });
    setEnabledThemes(function (prev) {
      return theme ? [theme.key] : prev;
    });
  }, [defaultThemes, theme]);
  (0, _react.useEffect)(function () {
    var handleMouseUp = function handleMouseUp() {
      dragRef.current = false;
      document.body.style.cursor = '';

      if (siderRef.current) {
        siderRef.current.style.transition = 'all 0.3s';
      }
    };

    var handleMouseMove = function handleMouseMove(e) {
      if (dragRef.current) {
        e.preventDefault();
        setSiderWidth(e.clientX > SIDER_WIDTH ? e.clientX : SIDER_WIDTH);
      }
    };

    window.addEventListener('mouseup', handleMouseUp);
    window.addEventListener('mousemove', handleMouseMove);
    return function () {
      window.removeEventListener('mouseup', handleMouseUp);
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);
  var handleTokenClick = (0, _react.useCallback)(function (tokenName) {
    var _tokenPanelRef$curren;

    (_tokenPanelRef$curren = tokenPanelRef.current) === null || _tokenPanelRef$curren === void 0 ? void 0 : _tokenPanelRef$curren.scrollToToken(tokenName);
  }, []);
  var mutableThemes = (0, _react.useMemo)(function () {
    return enabledThemes.map(function (item) {
      var themeEntity = themes.find(function (themeItem) {
        return themeItem.key === item;
      });
      return {
        name: themeEntity.name,
        key: themeEntity.key,
        config: themeEntity.config,
        onThemeChange: function onThemeChange(newTheme) {
          if (themeEntity.key === (theme === null || theme === void 0 ? void 0 : theme.key)) {
            _onThemeChange === null || _onThemeChange === void 0 ? void 0 : _onThemeChange(newTheme);
          } else {
            setThemes(function (prev) {
              return prev.map(function (themeItem) {
                return themeItem.key === themeEntity.key ? _objectSpread(_objectSpread({}, themeItem), {}, {
                  config: newTheme
                }) : themeItem;
              });
            });
          }
        }
      };
    });
  }, [enabledThemes, _onThemeChange, theme === null || theme === void 0 ? void 0 : theme.key, themes]);
  var componentPanel = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement(_componentPanel.default, {
      filterMode: filterMode,
      selectedTokens: selectedTokens,
      themes: mutableThemes,
      onTokenClick: handleTokenClick,
      style: {
        flex: 1,
        height: 0,
        marginTop: 12
      }
    });
  }, [filterMode, handleTokenClick, mutableThemes, selectedTokens]);
  return wrapSSR( /*#__PURE__*/_react.default.createElement(_antd.Layout, {
    className: (0, _classnames.default)('previewer-layout', hashId)
  }, /*#__PURE__*/_react.default.createElement(Header, {
    className: "previewer-header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    style: {
      fontSize: 16,
      fontWeight: 'bold',
      marginRight: 16
    }
  }, "\u4E3B\u9898\u9884\u89C8\u5668"), showTheme && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ThemeSelect.default, {
    showAddTheme: true,
    enabledThemes: enabledThemes,
    shownThemes: shownThemes,
    themes: themes,
    onEnabledThemeChange: function onEnabledThemeChange(value) {
      if (value.length > 2) {
        _antd.message.warning({
          content: '最多同时展示两个主题'
        });

        return;
      }

      setEnabledThemes(value);
    },
    onShownThemeChange: function onShownThemeChange(value, selectTheme, _ref3) {
      var type = _ref3.type;

      if (type === 'select' && enabledThemes.length < 2) {
        setEnabledThemes(function (prev) {
          return [].concat((0, _toConsumableArray2.default)(prev), [selectTheme]);
        });
      }

      setShownThemes(value);
    }
  })), /*#__PURE__*/_react.default.createElement(_antd.Button, {
    type: "primary",
    style: {
      marginLeft: 'auto'
    },
    onClick: function onClick() {
      return onSave === null || onSave === void 0 ? void 0 : onSave(themes[0].config);
    }
  }, "\u4FDD\u5B58")), /*#__PURE__*/_react.default.createElement(_antd.Layout, {
    style: {
      height: 'calc(100vh - 64px)'
    }
  }, /*#__PURE__*/_react.default.createElement(Sider, {
    style: {
      backgroundColor: 'white',
      height: '100%',
      overflow: 'auto',
      flex: "0 0 ".concat(siderWidth, "px"),
      willChange: 'auto'
    },
    width: siderVisible ? siderWidth : 0,
    ref: siderRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "previewer-sider-handler",
    onMouseDown: function onMouseDown() {
      dragRef.current = true;
      document.body.style.cursor = 'ew-resize';

      if (siderRef.current) {
        siderRef.current.style.transition = 'none';
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_antd.Button, {
    onClick: function onClick() {
      return setSiderVisible(function (prev) {
        return !prev;
      });
    },
    className: (0, _classnames.default)('previewer-sider-collapse-btn', !siderVisible && 'previewer-sider-collapse-btn-collapsed'),
    size: "small",
    icon: /*#__PURE__*/_react.default.createElement(_icons.Arrow, {
      rotate: siderVisible ? 0 : 180,
      className: "previewer-sider-collapse-btn-icon"
    }),
    shape: "circle"
  }), /*#__PURE__*/_react.default.createElement(_tokenPanel.default, {
    ref: tokenPanelRef,
    filterTypes: filterTypes,
    onFilterTypesChange: function onFilterTypesChange(types) {
      return setFilterTypes(types);
    },
    themes: mutableThemes,
    selectedTokens: selectedTokens,
    enableTokenSelect: true,
    onTokenSelect: function onTokenSelect(tokenName) {
      return setSelectedTokens(function (prev) {
        return prev.includes(tokenName) ? prev.filter(function (item) {
          return item !== tokenName;
        }) : [].concat((0, _toConsumableArray2.default)(prev), [tokenName]);
      });
    }
  })), /*#__PURE__*/_react.default.createElement(Content, {
    style: {
      padding: '16px 20px 28px 24px',
      height: '100%',
      overflow: 'hidden',
      display: 'flex',
      flexDirection: 'column'
    }
  }, /*#__PURE__*/_react.default.createElement(_FilterPanel.default, {
    selectedTokens: selectedTokens,
    onSelectedTokensChange: function onSelectedTokensChange(tokens) {
      return setSelectedTokens(tokens);
    },
    filterMode: filterMode,
    onFilterModeChange: function onFilterModeChange(mode) {
      return setFilterMode(mode);
    },
    onTokenClick: handleTokenClick
  }), componentPanel))));
};

var _default = Previewer;
exports.default = _default;