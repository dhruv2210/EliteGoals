"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _antd = require("antd");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _locale = require("../locale");

var _meta = require("../meta");

var _makeStyle = _interopRequireDefault(require("../utils/makeStyle"));

var _AliasPanel = _interopRequireDefault(require("./AliasPanel"));

var _TokenContent = _interopRequireDefault(require("./TokenContent"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyle = (0, _makeStyle.default)('TokenPanelPro', function (token) {
  return {
    '.token-panel-pro': (0, _defineProperty2.default)({
      height: '100%',
      display: 'flex',
      borderInlineEnd: "1px solid ".concat(token.colorBorderSecondary)
    }, ".token-panel-pro-tabs".concat(token.rootCls, "-tabs"), (0, _defineProperty2.default)({
      height: '100%',
      overflow: 'auto'
    }, "".concat(token.rootCls, "-tabs-content"), (0, _defineProperty2.default)({
      height: '100%'
    }, "".concat(token.rootCls, "-tabs-tabpane"), {
      height: '100%'
    })))
  };
});

var TokenPanelPro = function TokenPanelPro(_ref) {
  var className = _ref.className,
      style = _ref.style,
      theme = _ref.theme,
      selectedTokens = _ref.selectedTokens,
      onTokenSelect = _ref.onTokenSelect,
      infoFollowPrimary = _ref.infoFollowPrimary,
      onInfoFollowPrimaryChange = _ref.onInfoFollowPrimaryChange,
      aliasOpen = _ref.aliasOpen,
      onAliasOpenChange = _ref.onAliasOpenChange;

  var _useStyle = useStyle(),
      _useStyle2 = (0, _slicedToArray2.default)(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = (0, _react.useState)('brandColor'),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      activeGroup = _useState2[0],
      setActiveGroup = _useState2[1];

  var locale = (0, _locale.useLocale)();
  var activeCategory = (0, _react.useMemo)(function () {
    return _meta.tokenCategory.reduce(function (result, category) {
      return result !== null && result !== void 0 ? result : category.groups.find(function (group) {
        return group.key === activeGroup;
      });
    }, undefined);
  }, [activeGroup]);
  (0, _react.useEffect)(function () {
    var _activeCategory$seedT;

    onTokenSelect === null || onTokenSelect === void 0 ? void 0 : onTokenSelect((_activeCategory$seedT = activeCategory === null || activeCategory === void 0 ? void 0 : activeCategory.seedToken) !== null && _activeCategory$seedT !== void 0 ? _activeCategory$seedT : [], 'seed');
  }, [activeCategory]);
  return wrapSSR( /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(hashId, className, 'token-panel-pro'),
    style: style
  }, /*#__PURE__*/_react.default.createElement(_antd.Tabs, {
    defaultActiveKey: "color",
    tabBarGutter: 32,
    tabBarStyle: {
      padding: '0 16px',
      margin: 0
    },
    style: {
      height: '100%',
      flex: '0 0 540px'
    },
    className: "token-panel-pro-tabs",
    onChange: function onChange(key) {
      var _tokenCategory$find$g, _tokenCategory$find;

      setActiveGroup((_tokenCategory$find$g = (_tokenCategory$find = _meta.tokenCategory.find(function (category) {
        return category.nameEn === key;
      })) === null || _tokenCategory$find === void 0 ? void 0 : _tokenCategory$find.groups[0].key) !== null && _tokenCategory$find$g !== void 0 ? _tokenCategory$find$g : '');
    },
    items: _meta.tokenCategory.map(function (category) {
      return {
        key: category.nameEn,
        label: locale._lang === 'zh-CN' ? category.name : category.nameEn,
        children: /*#__PURE__*/_react.default.createElement(_TokenContent.default, {
          category: category,
          theme: theme,
          selectedTokens: selectedTokens,
          onTokenSelect: onTokenSelect,
          infoFollowPrimary: infoFollowPrimary,
          onInfoFollowPrimaryChange: onInfoFollowPrimaryChange,
          activeGroup: activeGroup,
          onActiveGroupChange: setActiveGroup
        })
      };
    })
  }), /*#__PURE__*/_react.default.createElement(_AliasPanel.default, {
    open: aliasOpen,
    description: activeCategory === null || activeCategory === void 0 ? void 0 : activeCategory.aliasTokenDescription,
    onOpenChange: function onOpenChange(value) {
      return onAliasOpenChange === null || onAliasOpenChange === void 0 ? void 0 : onAliasOpenChange(value);
    },
    activeSeeds: activeCategory === null || activeCategory === void 0 ? void 0 : activeCategory.seedToken,
    theme: theme,
    style: {
      flex: aliasOpen ? '0 0 320px' : 'none',
      width: 0
    },
    selectedTokens: selectedTokens,
    onTokenSelect: onTokenSelect
  })));
};

var _default = TokenPanelPro;
exports.default = _default;