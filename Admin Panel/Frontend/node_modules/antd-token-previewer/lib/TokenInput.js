"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _antd = require("antd");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _useDebouncy = require("use-debouncy");

var _ColorPanel = _interopRequireDefault(require("./ColorPanel"));

var _ColorPreview = _interopRequireDefault(require("./ColorPreview"));

var _locale = require("./locale");

var _isColor = _interopRequireDefault(require("./utils/isColor"));

var _makeStyle = _interopRequireDefault(require("./utils/makeStyle"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyle = (0, _makeStyle.default)('TokenInput', function (token) {
  var _light, _previewerTokenInp;

  return {
    '.previewer-token-input': (_previewerTokenInp = {}, (0, _defineProperty2.default)(_previewerTokenInp, "".concat(token.rootCls, "-input-group-addon, ").concat(token.rootCls, "-input-number-group-addon"), {
      border: '0 !important',
      color: "rgba(0, 0, 0, 0.25) !important",
      fontSize: "".concat(token.fontSizeSM, "px !important"),
      padding: '0 !important',
      backgroundColor: 'transparent !important',
      '&:first-child': {
        paddingInlineStart: 0
      },
      '&:last-child': {
        paddingInlineEnd: 0
      }
    }), (0, _defineProperty2.default)(_previewerTokenInp, "".concat(token.rootCls, "-input-group-wrapper, ").concat(token.rootCls, "-input-number-group-wrapper"), {
      padding: 0,
      height: 24,
      width: '100%',
      input: {
        fontSize: token.fontSizeSM,
        lineHeight: token.lineHeightSM,
        padding: "2px ".concat(token.paddingXS, "px"),
        height: 24
      }
    }), (0, _defineProperty2.default)(_previewerTokenInp, "".concat(token.rootCls, "-input-group-wrapper ").concat(token.rootCls, "-input, ").concat(token.rootCls, "-input-number-group-wrapper ").concat(token.rootCls, "-input-number"), {
      background: 'white',
      borderRadius: "".concat(token.borderRadiusLG, "px !important"),
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis'
    }), (0, _defineProperty2.default)(_previewerTokenInp, '&&-light', (_light = {}, (0, _defineProperty2.default)(_light, "".concat(token.rootCls, "-input-group-addon, ").concat(token.rootCls, "-input-number-group-addon"), {
      backgroundColor: token.colorBgContainer
    }), (0, _defineProperty2.default)(_light, "".concat(token.rootCls, "-input-group-wrapper ").concat(token.rootCls, "-input,\n        ").concat(token.rootCls, "-input-number-group-wrapper ").concat(token.rootCls, "-input-number-input"), {
      background: token.colorFillAlter
    }), _light)), (0, _defineProperty2.default)(_previewerTokenInp, '&&-readonly', {
      input: {
        cursor: 'text',
        color: token.colorText
      }
    }), _previewerTokenInp)
  };
});

var TokenInput = function TokenInput(_ref) {
  var value = _ref.value,
      theme = _ref.theme,
      onChange = _ref.onChange,
      light = _ref.light,
      readonly = _ref.readonly,
      onReset = _ref.onReset,
      customCanReset = _ref.canReset,
      hideTheme = _ref.hideTheme;
  var valueRef = (0, _react.useRef)(value || '');

  var _useState = (0, _react.useState)(value || ''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      tokenValue = _useState2[0],
      setTokenValue = _useState2[1];

  var canReset = customCanReset !== null && customCanReset !== void 0 ? customCanReset : valueRef.current !== tokenValue;
  var locale = (0, _locale.useLocale)();

  var _useStyle = useStyle(),
      _useStyle2 = (0, _slicedToArray2.default)(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  (0, _react.useEffect)(function () {
    if (value !== undefined) {
      setTokenValue(value);
    }
  }, [value]);
  var debouncedOnChange = (0, _useDebouncy.useDebouncyFn)(function (newValue) {
    onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
  }, 500);

  var handleTokenChange = function handleTokenChange(newValue) {
    if (!readonly) {
      setTokenValue(newValue);
      debouncedOnChange(newValue);
    }
  };

  var handleReset = function handleReset() {
    if (onReset) {
      onReset();
    } else {
      handleTokenChange(valueRef.current);
    }
  };

  var addonAfter = !readonly && /*#__PURE__*/_react.default.createElement("span", {
    style: {
      display: 'flex',
      alignItems: 'center',
      minWidth: hideTheme ? '' : 80
    }
  }, canReset || hideTheme ? /*#__PURE__*/_react.default.createElement(_antd.Button, {
    style: {
      fontSize: 12
    },
    onClick: handleReset,
    type: "link",
    size: "small",
    disabled: !canReset
  }, locale.reset) : /*#__PURE__*/_react.default.createElement("span", {
    style: {
      padding: '0 8px'
    }
  }, theme === null || theme === void 0 ? void 0 : theme.name));

  var inputNode;

  if (typeof valueRef.current === 'string' && (0, _isColor.default)(valueRef.current)) {
    inputNode = /*#__PURE__*/_react.default.createElement(_antd.Input, {
      bordered: false,
      addonAfter: addonAfter,
      value: String(tokenValue),
      disabled: readonly,
      addonBefore: /*#__PURE__*/_react.default.createElement(_antd.Dropdown, {
        trigger: ['click'],
        overlay: /*#__PURE__*/_react.default.createElement(_ColorPanel.default, {
          alpha: true,
          color: String(tokenValue),
          onChange: function onChange(v) {
            handleTokenChange(v);
          }
        })
      }, /*#__PURE__*/_react.default.createElement(_ColorPreview.default, {
        color: String(tokenValue),
        dark: (theme === null || theme === void 0 ? void 0 : theme.key) === 'dark',
        style: {
          cursor: 'pointer',
          marginInlineEnd: 8,
          verticalAlign: 'top'
        }
      })),
      onChange: function onChange(e) {
        handleTokenChange(e.target.value);
      }
    });
  } else if (typeof valueRef.current === 'number') {
    inputNode = /*#__PURE__*/_react.default.createElement(_antd.InputNumber, {
      addonAfter: addonAfter,
      bordered: false,
      value: tokenValue,
      disabled: readonly,
      onChange: function onChange(newValue) {
        handleTokenChange(Number(newValue));
      }
    });
  } else {
    inputNode = /*#__PURE__*/_react.default.createElement(_antd.Input, {
      addonAfter: addonAfter,
      bordered: false,
      value: String(tokenValue),
      disabled: readonly,
      onChange: function onChange(e) {
        handleTokenChange(typeof value === 'number' ? Number(e.target.value) : e.target.value);
      }
    });
  }

  return wrapSSR( /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('previewer-token-input', hashId, {
      'previewer-token-input-light': light,
      'previewer-token-input-readonly': readonly
    })
  }, inputNode));
};

var _default = TokenInput;
exports.default = _default;