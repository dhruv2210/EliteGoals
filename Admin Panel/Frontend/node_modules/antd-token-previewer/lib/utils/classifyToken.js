"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classifyToken = exports.TOKEN_SORTS = void 0;
exports.getTypeOfToken = getTypeOfToken;

function defineTokenType(types) {
  return types;
}

var TOKEN_SORTS = defineTokenType(['seed', 'colorCommon', 'colorText', 'colorBg', 'colorFill', 'colorSplit', 'font', 'radius', 'space', 'screen', 'line', 'motion', 'control', 'others']);
exports.TOKEN_SORTS = TOKEN_SORTS;

function getTypeOfToken(tokenName) {
  if (tokenName.startsWith('color')) {
    if (tokenName.startsWith('colorLink') || tokenName.startsWith('colorText') || tokenName.startsWith('colorIcon') || tokenName.startsWith('colorPlaceholder') || tokenName.startsWith('colorIcon')) {
      return 'colorText';
    }

    if (tokenName.startsWith('colorBg') || tokenName.startsWith('colorPopupBg')) {
      return 'colorBg';
    }

    if (tokenName.startsWith('colorBorder') || tokenName.startsWith('colorSplit')) {
      return 'colorSplit';
    }

    if (tokenName.startsWith('colorFill')) {
      return 'colorFill';
    }

    return 'colorCommon';
  }

  if (tokenName.startsWith('font')) {
    return 'font';
  }

  if (tokenName.startsWith('screen')) {
    return 'screen';
  }

  if (tokenName.startsWith('line')) {
    return 'line';
  }

  if (tokenName.startsWith('motion')) {
    return 'motion';
  }

  if (tokenName.startsWith('borderRadius')) {
    return 'radius';
  }

  if (tokenName.startsWith('control')) {
    return 'control';
  }

  if (tokenName.startsWith('margin') || tokenName.startsWith('padding')) {
    return 'space';
  }

  return 'others';
}

var classifyToken = function classifyToken(token) {
  var groupedToken = {};
  Object.keys(token || {}).sort(function (a, b) {
    return a.localeCompare(b);
  }).forEach(function (key) {
    var type = getTypeOfToken(key);

    if (!groupedToken[type]) {
      groupedToken[type] = [];
    }

    groupedToken[type].push(key);
  });
  return groupedToken;
};

exports.classifyToken = classifyToken;