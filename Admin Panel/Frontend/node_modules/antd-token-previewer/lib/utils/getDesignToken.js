"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDesignToken;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _default = _interopRequireDefault(require("antd/es/theme/themes/default"));

var _seed = _interopRequireDefault(require("antd/es/theme/themes/seed"));

var _alias = _interopRequireDefault(require("antd/es/theme/util/alias"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getDesignToken() {
  var _config$algorithm, _config$token;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var seedToken = _objectSpread(_objectSpread({}, _seed.default), config.token);

  var mapFn = (_config$algorithm = config.algorithm) !== null && _config$algorithm !== void 0 ? _config$algorithm : _default.default;
  var mapToken = Array.isArray(mapFn) ? mapFn.reduce(function (result, fn) {
    return fn(seedToken, result);
  }, undefined) : mapFn(seedToken);

  var mergedMapToken = _objectSpread(_objectSpread(_objectSpread({}, mapToken), config.components), {}, {
    override: (_config$token = config.token) !== null && _config$token !== void 0 ? _config$token : {}
  });

  return (0, _alias.default)(mergedMapToken);
}