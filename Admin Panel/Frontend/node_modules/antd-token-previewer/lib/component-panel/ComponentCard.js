"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getComponentDemoId = exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _icons = require("../icons");

var _makeStyle = _interopRequireDefault(require("../utils/makeStyle"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ComponentTokenDrawer = _interopRequireDefault(require("./ComponentTokenDrawer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyle = (0, _makeStyle.default)('ComponentCard', function (token) {
  var _$concat2;

  return (0, _defineProperty2.default)({}, "".concat(token.rootCls, "-card.component-card"), (_$concat2 = {
    borderRadius: 6,
    boxShadow: "0 1px 2px 0 rgba(25,15,15,0.07)"
  }, (0, _defineProperty2.default)(_$concat2, "".concat(token.rootCls, "-card-head"), (0, _defineProperty2.default)({
    paddingInline: 18
  }, "".concat(token.rootCls, "-card-head-title"), {
    paddingBlock: token.paddingSM,
    fontSize: token.fontSize
  })), (0, _defineProperty2.default)(_$concat2, "".concat(token.rootCls, "-card-body"), {
    padding: 18,
    overflow: 'auto'
  }), (0, _defineProperty2.default)(_$concat2, '.component-token-control-icon', {
    color: token.colorIcon,
    transition: "color ".concat(token.motionDurationMid),
    fontSize: token.fontSizeLG,
    cursor: 'pointer',
    '&:hover': {
      color: token.colorIconHover
    }
  }), _$concat2));
});

var getComponentDemoId = function getComponentDemoId(component) {
  return "antd-token-previewer-".concat(component);
};

exports.getComponentDemoId = getComponentDemoId;

var ComponentCard = function ComponentCard(_ref2) {
  var children = _ref2.children,
      component = _ref2.component,
      title = _ref2.title,
      theme = _ref2.theme,
      drawer = _ref2.drawer;

  var _useStyle = useStyle(),
      _useStyle2 = (0, _slicedToArray2.default)(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      drawerOpen = _useState2[0],
      setDrawerOpen = _useState2[1];

  return wrapSSR( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_antd.Card, {
    className: (0, _classnames.default)('component-card', hashId),
    title: title,
    extra: drawer && theme && /*#__PURE__*/_react.default.createElement(_icons.Control, {
      className: "component-token-control-icon",
      onClick: function onClick() {
        return setDrawerOpen(true);
      }
    })
  }, children), drawer && theme && /*#__PURE__*/_react.default.createElement(_ComponentTokenDrawer.default, {
    visible: drawerOpen,
    theme: theme,
    component: component,
    onClose: function onClose() {
      return setDrawerOpen(false);
    }
  })));
};

var _default = ComponentCard;
exports.default = _default;