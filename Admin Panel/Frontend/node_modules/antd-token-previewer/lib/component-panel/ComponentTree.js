"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _icons = require("@ant-design/icons");

var _antd = require("antd");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _makeStyle = _interopRequireDefault(require("../utils/makeStyle"));

var _statistic = require("../utils/statistic");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var DirectoryTree = _antd.Tree.DirectoryTree;
var useStyle = (0, _makeStyle.default)('ComponentTree', function (token) {
  var _$concat;

  return {
    '.component-tree-wrapper': (0, _defineProperty2.default)({
      minWidth: 200,
      borderInlineEnd: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorSplit),
      height: '100%',
      overflow: 'hidden',
      display: 'flex',
      flexDirection: 'column',
      paddingBlock: token.paddingXS,
      '.component-tree-search': {
        margin: '0 8px 12px',
        width: 'calc(100% - 16px)',
        backgroundColor: 'rgba(0, 0, 0, 2%)',
        borderRadius: token.borderRadiusLG,
        height: 24,
        input: {
          fontSize: 12
        },
        '&:hover': {
          backgroundColor: 'rgba(0, 0, 0, 4%)'
        }
      }
    }, "".concat(token.rootCls, "-tree.component-tree"), (_$concat = {
      fontSize: token.fontSizeSM,
      '.component-tree-item.component-tree-item-highlight': {
        color: token.colorPrimary
      }
    }, (0, _defineProperty2.default)(_$concat, "".concat(token.rootCls, "-tree-node-content-wrapper"), {
      transition: "background-color ".concat(token.motionDurationSlow),
      borderRadius: 4
    }), (0, _defineProperty2.default)(_$concat, "".concat(token.rootCls, "-tree-treenode-selected ").concat(token.rootCls, "-tree-node-content-wrapper"), {
      color: token.colorTextLightSolid,
      '.component-tree-item.component-tree-item-highlight': {
        color: token.colorTextLightSolid
      }
    }), (0, _defineProperty2.default)(_$concat, '.component-tree-item', {
      transition: "color ".concat(token.motionDurationMid),
      lineHeight: "24px",
      height: 24,
      display: 'inline-block'
    }), _$concat))
  };
});

var getTreeItemId = function getTreeItemId(component) {
  return "component-tree-item-".concat(component);
};

var ComponentTree = function ComponentTree(_ref) {
  var _onSelect = _ref.onSelect,
      components = _ref.components,
      selectedTokens = _ref.selectedTokens,
      _ref$filterMode = _ref.filterMode,
      filterMode = _ref$filterMode === void 0 ? 'filter' : _ref$filterMode,
      activeComponent = _ref.activeComponent;

  var _useStyle = useStyle(),
      _useStyle2 = (0, _slicedToArray2.default)(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var treeRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      search = _useState2[0],
      setSearch = _useState2[1];

  var relatedComponents = (0, _react.useMemo)(function () {
    return selectedTokens ? (0, _statistic.getRelatedComponents)(selectedTokens) : []; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedTokens]);
  (0, _react.useEffect)(function () {
    var _treeRef$current, _treeRef$current$quer;

    (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : (_treeRef$current$quer = _treeRef$current.querySelector("#".concat(getTreeItemId(activeComponent || '')))) === null || _treeRef$current$quer === void 0 ? void 0 : _treeRef$current$quer.scrollIntoView({
      block: 'nearest',
      inline: 'nearest'
    });
  }, [activeComponent]);
  var treeData = (0, _react.useMemo)(function () {
    return Object.entries(components).filter(function (_ref2) {
      var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          group = _ref3[1];

      return (filterMode === 'highlight' || !relatedComponents.length || group.some(function (item) {
        return relatedComponents.includes(item);
      })) && (!search || group.some(function (item) {
        return item.toLowerCase().includes(search.toLowerCase());
      }));
    }).map(function (_ref4) {
      var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
          type = _ref5[0],
          group = _ref5[1];

      return {
        title: type,
        key: "type-".concat(type),
        children: group.filter(function (item) {
          return (filterMode === 'highlight' || !relatedComponents.length || relatedComponents.includes(item)) && (!search || item.toLowerCase().includes(search.toLowerCase()));
        }).map(function (item) {
          return {
            title: /*#__PURE__*/_react.default.createElement("span", {
              id: getTreeItemId(item),
              className: (0, _classnames.default)('component-tree-item', {
                'component-tree-item-highlight': filterMode === 'highlight' && relatedComponents.includes(item)
              })
            }, item),
            switcherIcon: function switcherIcon() {
              return /*#__PURE__*/_react.default.createElement(_antd.Badge, {
                color: filterMode === 'highlight' && relatedComponents.includes(item) ? activeComponent === item ? 'white' : 'blue' : 'transparent'
              });
            },
            key: item
          };
        })
      };
    });
  }, [components, relatedComponents, filterMode, search, activeComponent]);
  (0, _react.useEffect)(function () {
    if (filterMode === 'highlight') {
      setTimeout(function () {
        var _treeRef$current2, _treeRef$current2$get;

        (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : (_treeRef$current2$get = _treeRef$current2.getElementsByClassName('component-tree-item-active')[0]) === null || _treeRef$current2$get === void 0 ? void 0 : _treeRef$current2$get.scrollIntoView({
          block: 'start',
          inline: 'nearest',
          behavior: 'smooth'
        });
      }, 100);
    }
  }, [selectedTokens, filterMode]);
  return wrapSSR( /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('component-tree-wrapper', hashId)
  }, /*#__PURE__*/_react.default.createElement(_antd.Input, {
    allowClear: true,
    placeholder: "Type to search",
    value: search,
    onChange: function onChange(e) {
      return setSearch(e.target.value);
    },
    prefix: /*#__PURE__*/_react.default.createElement(_icons.SearchOutlined, null),
    bordered: false,
    className: "component-tree-search"
  }), /*#__PURE__*/_react.default.createElement("div", {
    ref: treeRef,
    style: {
      overflow: 'auto',
      flex: 1
    }
  }, /*#__PURE__*/_react.default.createElement(DirectoryTree, {
    selectedKeys: [activeComponent !== null && activeComponent !== void 0 ? activeComponent : ''],
    showIcon: false,
    defaultExpandAll: true,
    treeData: treeData,
    className: "component-tree",
    onSelect: function onSelect(node) {
      return _onSelect === null || _onSelect === void 0 ? void 0 : _onSelect(node[0]);
    },
    expandAction: "doubleClick"
  }))));
};

var _default = ComponentTree;
exports.default = _default;