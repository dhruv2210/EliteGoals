"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _makeStyle = _interopRequireDefault(require("./utils/makeStyle"));

var _classnames = _interopRequireDefault(require("classnames"));

var _antd = require("antd");

var _icons = require("@ant-design/icons");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyle = (0, _makeStyle.default)('ThemeSelect', function (token) {
  var _previewerThemeSel;

  return {
    '.previewer-theme-select': (_previewerThemeSel = {
      padding: "".concat(token.paddingXXS, "px ").concat(token.paddingXS, "px"),
      borderRadius: 4,
      backgroundColor: 'rgba(0, 0, 0, 0.02)',
      height: token.controlHeight,
      display: 'flex',
      alignItems: 'center',
      overflow: 'hidden'
    }, (0, _defineProperty2.default)(_previewerThemeSel, "".concat(token.rootCls, "-btn.previewer-theme-select-add-btn"), {
      minWidth: 0,
      width: 16,
      height: 16,
      fontSize: 8,
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      marginInlineStart: token.marginSM,
      boxShadow: 'none'
    }), (0, _defineProperty2.default)(_previewerThemeSel, '.previewer-theme-select-tag', {
      height: 22,
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      boxSizing: 'border-box',
      borderRadius: 4,
      backgroundColor: token.colorBgContainer,
      border: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token.colorBorder),
      paddingInline: 10,
      fontSize: token.fontSizeSM,
      position: 'relative',
      cursor: 'pointer',
      // transition: `all ${token.motionDurationMid}`,
      '&:not(:last-child)': {
        marginInlineEnd: token.marginXS
      },
      '&.previewer-theme-select-tag-active': {
        border: "".concat(token.lineWidth, "px ").concat(token.lineType, " ").concat(token['blue-1']),
        backgroundColor: 'rgba(22,119,255,0.10)',
        color: token.colorPrimary,
        '&::after': {
          content: '""',
          borderStartEndRadius: 2,
          position: 'absolute',
          insetInlineEnd: 2,
          top: 2,
          width: 6,
          height: 6,
          background: "linear-gradient(to right top, transparent, transparent 50%, ".concat(token.colorPrimary, " 50%, ").concat(token.colorPrimary, " 100%)")
        }
      },
      '.previewer-theme-select-tag-close-btn': {
        position: 'absolute',
        top: -2,
        insetInlineEnd: -2,
        width: 12,
        height: 12,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: token.colorBgContainer,
        boxShadow: '0 2px 8px -2px rgba(0,0,0,0.05), 0 1px 4px -1px rgba(25,15,15,0.07), 0 0 1px 0 rgba(0,0,0,0.08)',
        borderRadius: '50%',
        opacity: 0,
        pointerEvents: 'none',
        zIndex: 2,
        color: token.colorIcon,
        '> .anticon': {
          fontSize: 6
        }
      },
      '&:hover': {
        '.previewer-theme-select-tag-close-btn': {
          opacity: 1,
          pointerEvents: 'initial'
        }
      }
    }), _previewerThemeSel),
    '.previewer-theme-select-dropdown': {
      '.previewer-theme-select-dropdown-title': (0, _defineProperty2.default)({}, "".concat(token.rootCls, "-dropdown-menu-item-group-title"), {
        fontSize: token.fontSizeSM,
        paddingBottom: token.padding,
        paddingTop: 10
      })
    }
  };
});

var ThemeSelect = function ThemeSelect(props) {
  var onEnabledThemeChange = props.onEnabledThemeChange,
      onShownThemeChange = props.onShownThemeChange,
      enabledThemes = props.enabledThemes,
      shownThemes = props.shownThemes,
      themes = props.themes,
      showAddTheme = props.showAddTheme;

  var _useStyle = useStyle(),
      _useStyle2 = (0, _slicedToArray2.default)(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var dropdownItems = (0, _react.useMemo)(function () {
    return [{
      disabled: true,
      label: '添加主题即可预览',
      className: 'previewer-theme-select-dropdown-title',
      type: 'group',
      key: 'add-theme-to-preview'
    }].concat((0, _toConsumableArray2.default)(themes.filter(function (theme) {
      return !shownThemes.includes(theme.key);
    }).map(function (theme) {
      return {
        icon: theme.icon,
        value: theme.key,
        label: theme.name,
        key: theme.key,
        onClick: function onClick() {
          onShownThemeChange([].concat((0, _toConsumableArray2.default)(shownThemes), [theme.key]), theme.key, {
            type: 'select'
          });
        }
      };
    })));
  }, [themes, shownThemes, onShownThemeChange]);
  var shownThemeEntities = (0, _react.useMemo)(function () {
    return themes.filter(function (theme) {
      return shownThemes.includes(theme.key);
    });
  }, [themes, shownThemes]);
  return wrapSSR( /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('previewer-theme-select', hashId)
  }, shownThemeEntities.map(function (theme) {
    return /*#__PURE__*/_react.default.createElement("span", {
      onClick: function onClick() {
        if (theme.fixed) {
          return;
        }

        onEnabledThemeChange(enabledThemes.includes(theme.key) ? enabledThemes.filter(function (item) {
          return item !== theme.key;
        }) : [].concat((0, _toConsumableArray2.default)(enabledThemes), [theme.key]));
      },
      key: theme.key,
      className: (0, _classnames.default)('previewer-theme-select-tag', {
        'previewer-theme-select-tag-active': enabledThemes.includes(theme.key)
      })
    }, theme.name, theme.closable && /*#__PURE__*/_react.default.createElement("span", {
      className: "previewer-theme-select-tag-close-btn",
      onClick: function onClick(e) {
        e.stopPropagation();
        onEnabledThemeChange(enabledThemes.filter(function (item) {
          return item !== theme.key;
        }));
        onShownThemeChange(shownThemes.filter(function (item) {
          return item !== theme.key;
        }), theme.key, {
          type: 'deselect'
        });
      }
    }, /*#__PURE__*/_react.default.createElement(_icons.CloseOutlined, null)));
  }), showAddTheme && /*#__PURE__*/_react.default.createElement(_antd.Dropdown, {
    placement: "bottomRight",
    trigger: ['click'],
    overlay: /*#__PURE__*/_react.default.createElement(_antd.Menu, {
      items: dropdownItems
    }),
    overlayClassName: (0, _classnames.default)('previewer-theme-select-dropdown', hashId)
  }, /*#__PURE__*/_react.default.createElement(_antd.Button, {
    type: "primary",
    shape: "circle",
    className: "previewer-theme-select-add-btn",
    icon: /*#__PURE__*/_react.default.createElement(_icons.PlusOutlined, null)
  }))));
};

var _default = ThemeSelect;
exports.default = _default;