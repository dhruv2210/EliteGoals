"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _icons = require("@ant-design/icons");

var _antd = require("antd");

var _classnames = _interopRequireDefault(require("classnames"));

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _react = _interopRequireWildcard(require("react"));

var _icons2 = require("../icons");

var _classifyToken = require("../utils/classifyToken");

var _getDesignToken = _interopRequireDefault(require("../utils/getDesignToken"));

var _makeStyle = _interopRequireDefault(require("../utils/makeStyle"));

var _tokenCard = _interopRequireWildcard(require("./token-card"));

var _tokenItem = require("./token-item");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var useToken = _antd.theme.useToken;
var useStyle = (0, _makeStyle.default)('AliasTokenPreview', function (token) {
  var _previewPanelSearc;

  return {
    '.preview-panel-wrapper': {
      overflow: 'auto',
      height: '100%',
      '.preview-panel': {
        height: '100%',
        minWidth: 300,
        backgroundColor: 'white',
        display: 'flex',
        flexDirection: 'column',
        '.preview-panel-token-wrapper': {
          position: 'relative',
          flex: 1,
          overflow: 'hidden',
          '&::before, &::after': {
            position: 'absolute',
            zIndex: 1,
            opacity: 0,
            transition: 'opacity .3s',
            content: '""',
            pointerEvents: 'none',
            insetInlineStart: 0,
            insetInlineEnd: 0,
            height: 40
          },
          '&::before': {
            top: 0,
            boxShadow: 'inset 0 10px 8px -8px #00000014'
          },
          '&::after': {
            bottom: 0,
            boxShadow: 'inset 0 -10px 8px -8px #00000014'
          },
          '&.preview-panel-token-wrapper-ping-top': {
            '&::before': {
              opacity: 1
            }
          }
        },
        '.preview-panel-space': {
          marginBottom: 20,
          paddingInlineStart: token.paddingXS,
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          '.preview-hide-token': {
            color: token.colorTextSecondary,
            fontSize: token.fontSizeSM,
            lineHeight: token.lineHeightSM,
            display: 'flex',
            alignItems: 'center',
            '>*:first-child': {
              marginInlineEnd: 2
            }
          }
        },
        '.preview-panel-search': (_previewPanelSearc = {
          backgroundColor: 'rgba(0, 0, 0, 2%)',
          borderRadius: token.borderRadiusLG
        }, (0, _defineProperty2.default)(_previewPanelSearc, "".concat(token.rootCls, "-input-group-addon"), {
          backgroundColor: 'inherit',
          border: 'none',
          padding: 0,
          transition: "background-color ".concat(token.motionDurationSlow),
          '&:hover': {
            backgroundColor: 'rgba(0, 0, 0, 4%)'
          }
        }), (0, _defineProperty2.default)(_previewPanelSearc, "input", {
          fontSize: token.fontSizeSM,
          paddingInlineStart: 4
        }), (0, _defineProperty2.default)(_previewPanelSearc, '.previewer-token-type-dropdown-icon-active', {
          color: token.colorPrimary
        }), _previewPanelSearc)
      }
    }
  };
});

var _default = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var filterTypes = props.filterTypes,
      onFilterTypesChange = props.onFilterTypesChange,
      themes = props.themes,
      selectedTokens = props.selectedTokens,
      onTokenSelect = props.onTokenSelect,
      enableTokenSelect = props.enableTokenSelect;

  var _useStyle = useStyle(),
      _useStyle2 = (0, _slicedToArray2.default)(_useStyle, 2),
      wrapSSR = _useStyle2[0],
      hashId = _useStyle2[1];

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      search = _useState2[0],
      setSearch = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      showAll = _useState4[0],
      setShowAll = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      showTokenListShadowTop = _useState6[0],
      setShowTokenListShadowTop = _useState6[1];

  var cardWrapperRef = (0, _react.useRef)(null);

  var _useState7 = (0, _react.useState)([]),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      activeCards = _useState8[0],
      setActiveCards = _useState8[1];

  var _useState9 = (0, _react.useState)(),
      _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
      activeToken = _useState10[0],
      setActiveToken = _useState10[1];

  var _useToken = useToken(),
      token = _useToken.token;

  var _useMergedState = (0, _useMergedState3.default)(filterTypes || []),
      _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
      mergedFilterTypes = _useMergedState2[0],
      setMergedFilterTypes = _useMergedState2[1]; // TODO: Split AliasToken and SeedToken


  var groupedToken = (0, _react.useMemo)(function () {
    return (0, _classifyToken.classifyToken)(token);
  }, [token]);
  (0, _react.useEffect)(function () {
    var _cardWrapperRef$curre3;

    var handleTokenListScroll = function handleTokenListScroll() {
      var _cardWrapperRef$curre, _cardWrapperRef$curre2;

      setShowTokenListShadowTop(((_cardWrapperRef$curre = (_cardWrapperRef$curre2 = cardWrapperRef.current) === null || _cardWrapperRef$curre2 === void 0 ? void 0 : _cardWrapperRef$curre2.scrollTop) !== null && _cardWrapperRef$curre !== void 0 ? _cardWrapperRef$curre : 0) > 0);
    };

    (_cardWrapperRef$curre3 = cardWrapperRef.current) === null || _cardWrapperRef$curre3 === void 0 ? void 0 : _cardWrapperRef$curre3.addEventListener('scroll', handleTokenListScroll);
    var wrapper = cardWrapperRef.current;
    return function () {
      wrapper === null || wrapper === void 0 ? void 0 : wrapper.removeEventListener('scroll', handleTokenListScroll);
    };
  }, []);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      scrollToToken: function scrollToToken(tokenName) {
        var type = (0, _classifyToken.getTypeOfToken)(tokenName);

        if (!activeCards.includes(type)) {
          setActiveCards(function (prev) {
            return [].concat((0, _toConsumableArray2.default)(prev), [type]);
          });
        }

        setActiveToken(tokenName);
        setTimeout(function () {
          var _cardWrapperRef$curre4;

          var node = (_cardWrapperRef$curre4 = cardWrapperRef.current) === null || _cardWrapperRef$curre4 === void 0 ? void 0 : _cardWrapperRef$curre4.querySelector("#".concat((0, _tokenItem.getTokenItemId)(tokenName)));

          if (!node) {
            return;
          }

          node === null || node === void 0 ? void 0 : node.scrollIntoView({
            block: 'center',
            inline: 'nearest'
          });
        }, 100);
      }
    };
  });

  var handleAliasTokenChange = function handleAliasTokenChange(theme, tokenName, value) {
    var _theme$onThemeChange;

    (_theme$onThemeChange = theme.onThemeChange) === null || _theme$onThemeChange === void 0 ? void 0 : _theme$onThemeChange.call(theme, _objectSpread(_objectSpread({}, theme.config), {}, {
      token: _objectSpread(_objectSpread({}, theme.config.token), {}, (0, _defineProperty2.default)({}, tokenName, value))
    }), ['token', tokenName]);
  };

  return wrapSSR( /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('preview-panel-wrapper', hashId)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('preview-panel')
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: 16
    }
  }, /*#__PURE__*/_react.default.createElement("h3", {
    className: (0, _classnames.default)('preview-panel-space', hashId)
  }, /*#__PURE__*/_react.default.createElement("span", null, "Alias Token \u9884\u89C8"), /*#__PURE__*/_react.default.createElement("span", {
    className: "preview-hide-token"
  }, /*#__PURE__*/_react.default.createElement("span", null, "\u663E\u793A\u6240\u6709"), /*#__PURE__*/_react.default.createElement(_antd.Switch, {
    checked: showAll,
    onChange: function onChange(value) {
      return setShowAll(value);
    },
    size: "small"
  }))), /*#__PURE__*/_react.default.createElement(_antd.Input, {
    allowClear: true,
    onChange: function onChange(e) {
      setSearch(e.target.value);
    },
    bordered: false,
    addonBefore: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_antd.Dropdown, {
      overlay: /*#__PURE__*/_react.default.createElement(_antd.Menu, {
        items: [{
          label: '筛选项',
          type: 'group',
          key: 'title-key',
          style: {
            fontSize: 12
          }
        }].concat((0, _toConsumableArray2.default)(_classifyToken.TOKEN_SORTS.map(function (type) {
          return {
            icon: /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_icons.CheckOutlined, {
              style: {
                opacity: mergedFilterTypes.includes(type) ? 1 : 0,
                marginInlineEnd: 8,
                fontSize: 12
              }
            }), _tokenCard.IconMap[type]),
            label: _tokenCard.TextMap[type],
            key: type,
            onClick: function onClick() {
              var newTypes = mergedFilterTypes.includes(type) ? mergedFilterTypes.filter(function (item) {
                return type !== item;
              }) : [].concat((0, _toConsumableArray2.default)(mergedFilterTypes), [type]);
              setMergedFilterTypes(newTypes);
              onFilterTypesChange === null || onFilterTypesChange === void 0 ? void 0 : onFilterTypesChange(newTypes);
            }
          };
        })))
      }),
      trigger: ['click']
    }, /*#__PURE__*/_react.default.createElement(_icons2.SearchDropdown, {
      style: {
        width: 32,
        cursor: 'pointer',
        fontSize: 18,
        paddingTop: 2,
        transition: 'color 0.3s'
      },
      className: (0, _classnames.default)({
        'previewer-token-type-dropdown-icon-active': mergedFilterTypes.length > 0
      })
    }))),
    className: "preview-panel-search",
    placeholder: "\u641C\u7D22 Token / \u8272\u503C / \u6587\u672C / \u5706\u89D2\u7B49"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('preview-panel-token-wrapper', {
      'preview-panel-token-wrapper-ping-top': showTokenListShadowTop
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: cardWrapperRef,
    style: {
      height: '100%',
      overflow: 'auto',
      padding: '0 16px'
    }
  }, /*#__PURE__*/_react.default.createElement("div", null, _classifyToken.TOKEN_SORTS.filter(function (type) {
    return type !== 'seed' && (mergedFilterTypes.includes(type) || mergedFilterTypes.length === 0) && (!search || groupedToken[type].some(function (item) {
      return item.toLowerCase().includes(search.toLowerCase());
    }));
  }).map(function (key) {
    return /*#__PURE__*/_react.default.createElement(_tokenCard.default, {
      title: _tokenCard.TextMap[key],
      icon: _tokenCard.IconMap[key],
      key: key,
      tokenPath: ['token'],
      tokenArr: groupedToken[key],
      keyword: search,
      hideUseless: !showAll,
      open: activeCards.includes(key),
      onOpenChange: function onOpenChange(open) {
        return setActiveCards(function (prev) {
          return open ? [].concat((0, _toConsumableArray2.default)(prev), [key]) : prev.filter(function (item) {
            return item !== key;
          });
        });
      },
      onTokenChange: handleAliasTokenChange,
      activeToken: activeToken,
      onActiveTokenChange: function onActiveTokenChange(tokenName) {
        return setActiveToken(tokenName);
      },
      themes: themes,
      selectedTokens: selectedTokens,
      onTokenSelect: onTokenSelect,
      enableTokenSelect: enableTokenSelect,
      fallback: function fallback(config) {
        return (0, _getDesignToken.default)(config);
      }
    });
  })))))));
});

exports.default = _default;