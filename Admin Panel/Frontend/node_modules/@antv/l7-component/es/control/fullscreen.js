import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { DOM } from '@antv/l7-utils';
import { createL7Icon } from "../utils/icon";
import ScreenFull from "../utils/screenfull";
import ButtonControl from "./baseControl/buttonControl";
export { Fullscreen };
var Fullscreen = /*#__PURE__*/function (_ButtonControl) {
  _inherits(Fullscreen, _ButtonControl);
  var _super = _createSuper(Fullscreen);
  function Fullscreen(option) {
    var _this;
    _classCallCheck(this, Fullscreen);
    _this = _super.call(this, option);
    _defineProperty(_assertThisInitialized(_this), "isFullscreen", false);
    _defineProperty(_assertThisInitialized(_this), "toggleFullscreen", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!ScreenFull.isEnabled) {
              _context.next = 3;
              break;
            }
            _context.next = 3;
            return ScreenFull.toggle(_this.mapContainer);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    _defineProperty(_assertThisInitialized(_this), "onClick", function () {
      _this.toggleFullscreen();
    });
    _defineProperty(_assertThisInitialized(_this), "onFullscreenChange", function () {
      _this.isFullscreen = !!document.fullscreenElement;
      var _this$controlOption = _this.controlOption,
        btnText = _this$controlOption.btnText,
        btnIcon = _this$controlOption.btnIcon,
        title = _this$controlOption.title,
        exitBtnText = _this$controlOption.exitBtnText,
        exitBtnIcon = _this$controlOption.exitBtnIcon,
        exitTitle = _this$controlOption.exitTitle;
      if (_this.isFullscreen) {
        _this.setBtnTitle(exitTitle);
        _this.setBtnText(exitBtnText);
        _this.setBtnIcon(exitBtnIcon);
      } else {
        _this.setBtnTitle(title);
        _this.setBtnText(btnText);
        _this.setBtnIcon(btnIcon);
      }
      _this.emit('fullscreenChange', _this.isFullscreen);
    });
    if (!ScreenFull.isEnabled) {
      console.warn('当前浏览器环境不支持对地图全屏化');
    }
    return _this;
  }
  _createClass(Fullscreen, [{
    key: "setOptions",
    value: function setOptions(newOptions) {
      var exitBtnText = newOptions.exitBtnText,
        exitBtnIcon = newOptions.exitBtnIcon,
        exitTitle = newOptions.exitTitle;
      if (this.isFullscreen) {
        if (this.checkUpdateOption(newOptions, ['exitBtnIcon'])) {
          this.setBtnIcon(exitBtnIcon);
        }
        if (this.checkUpdateOption(newOptions, ['exitBtnText'])) {
          this.setBtnText(exitBtnText);
        }
        if (this.checkUpdateOption(newOptions, ['exitTitle'])) {
          this.setBtnTitle(exitTitle);
        }
      }
      _get(_getPrototypeOf(Fullscreen.prototype), "setOptions", this).call(this, newOptions);
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var button = _get(_getPrototypeOf(Fullscreen.prototype), "onAdd", this).call(this);
      button.addEventListener('click', this.onClick);
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      this.mapContainer = DOM.getContainer(this.scene.getSceneConfig().id);
      this.mapContainer.addEventListener('fullscreenchange', this.onFullscreenChange);
      return button;
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      _get(_getPrototypeOf(Fullscreen.prototype), "onRemove", this).call(this);
      this.mapContainer.removeEventListener('fullscreenchange', this.onFullscreenChange);
    }
  }, {
    key: "getDefault",
    value: function getDefault(option) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(Fullscreen.prototype), "getDefault", this).call(this, option)), {}, {
        title: '全屏',
        btnIcon: createL7Icon('l7-icon-fullscreen'),
        exitTitle: '退出全屏',
        exitBtnIcon: createL7Icon('l7-icon-exit-fullscreen')
      });
    }
  }]);
  return Fullscreen;
}(ButtonControl);
export { Fullscreen as default };