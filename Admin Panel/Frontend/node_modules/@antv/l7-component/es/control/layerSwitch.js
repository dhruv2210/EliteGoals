import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { createL7Icon } from "../utils/icon";
import SelectControl from "./baseControl/selectControl";
export { LayerSwitch };
var LayerSwitch = /*#__PURE__*/function (_SelectControl) {
  _inherits(LayerSwitch, _SelectControl);
  var _super = _createSuper(LayerSwitch);
  function LayerSwitch() {
    var _this;
    _classCallCheck(this, LayerSwitch);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "onLayerChange", function () {
      var _this$controlOption$l;
      if ((_this$controlOption$l = _this.controlOption.layers) !== null && _this$controlOption$l !== void 0 && _this$controlOption$l.length) {
        return;
      }
      _this.selectValue = _this.getLayerVisible();
      _this.setOptions({
        options: _this.getLayerOptions()
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onLayerVisibleChane", function () {
      _this.setSelectValue(_this.getLayerVisible());
    });
    _defineProperty(_assertThisInitialized(_this), "onSelectChange", function () {
      _this.layers.forEach(function (layer) {
        var needShow = _this.selectValue.includes(layer.name);
        var isShow = layer.isVisible();
        if (needShow && !isShow) {
          layer.show();
        }
        if (!needShow && isShow) {
          layer.hide();
        }
      });
    });
    return _this;
  }
  _createClass(LayerSwitch, [{
    key: "layers",
    get: function get() {
      var layerService = this.layerService;
      var layers = this.controlOption.layers;
      if (Array.isArray(layers) && layers.length) {
        var layerInstances = [];
        layers.forEach(function (layer) {
          if (layer instanceof Object) {
            layerInstances.push(layer);
          }
          if (typeof layer === 'string') {
            var targetLayer = layerService.getLayer(layer) || layerService.getLayerByName(layer);
            if (targetLayer) {
              layerInstances.push(targetLayer);
            }
          }
        });
        return layerInstances;
      }
      return layerService.getLayers() || [];
    }
  }, {
    key: "getDefault",
    value: function getDefault(option) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LayerSwitch.prototype), "getDefault", this).call(this, option)), {}, {
        title: '图层控制',
        btnIcon: createL7Icon('l7-icon-layer'),
        options: []
      });
    }
  }, {
    key: "getLayerVisible",
    value: function getLayerVisible() {
      return this.layers.filter(function (layer) {
        return layer.isVisible();
      }).map(function (layer) {
        return layer.name;
      });
    }
  }, {
    key: "getLayerOptions",
    value: function getLayerOptions() {
      return this.layers.map(function (layer) {
        return {
          text: layer.name,
          value: layer.name
        };
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(option) {
      var isLayerChange = this.checkUpdateOption(option, ['layers']);
      _get(_getPrototypeOf(LayerSwitch.prototype), "setOptions", this).call(this, option);
      if (isLayerChange) {
        this.selectValue = this.getLayerVisible();
        this.controlOption.options = this.getLayerOptions();
        this.popper.setContent(this.getPopperContent(this.controlOption.options));
      }
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var _this$controlOption$o;
      if (!((_this$controlOption$o = this.controlOption.options) !== null && _this$controlOption$o !== void 0 && _this$controlOption$o.length)) {
        this.controlOption.options = this.getLayerOptions();
      }
      if (!this.controlOption.defaultValue) {
        this.controlOption.defaultValue = this.getLayerVisible();
      }
      this.on('selectChange', this.onSelectChange);
      this.layerService.on('layerChange', this.onLayerChange);
      return _get(_getPrototypeOf(LayerSwitch.prototype), "onAdd", this).call(this);
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      this.off('selectChange', this.onSelectChange);
      this.layerService.off('layerChange', this.onLayerChange);
    }
  }, {
    key: "getIsMultiple",
    value: function getIsMultiple() {
      return true;
    }
  }]);
  return LayerSwitch;
}(SelectControl);
export { LayerSwitch as default };