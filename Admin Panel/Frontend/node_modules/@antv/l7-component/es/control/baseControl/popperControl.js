import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { Popper } from "../../utils/popper";
import ButtonControl from "./buttonControl";
export { PopperControl };
var PopperPlacementMap = {
  topleft: 'right-start',
  topcenter: 'bottom',
  topright: 'left-start',
  bottomleft: 'right-end',
  bottomcenter: 'top',
  bottomright: 'left-end',
  lefttop: 'bottom-start',
  leftcenter: 'right',
  leftbottom: 'top-start',
  righttop: 'bottom-end',
  rightcenter: 'left',
  rightbottom: 'top-end'
};
var PopperControl = /*#__PURE__*/function (_ButtonControl) {
  _inherits(PopperControl, _ButtonControl);
  var _super = _createSuper(PopperControl);
  function PopperControl() {
    _classCallCheck(this, PopperControl);
    return _super.apply(this, arguments);
  }
  _createClass(PopperControl, [{
    key: "getPopper",
    value:
    /**
     * 气泡实例
     * @protected
     */

    function getPopper() {
      return this.popper;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.popper.hide();
      _get(_getPrototypeOf(PopperControl.prototype), "hide", this).call(this);
    }

    /**
     * 获取默认配置
     * @param option
     */
  }, {
    key: "getDefault",
    value: function getDefault(option) {
      var _option$position;
      var defaultOption = _get(_getPrototypeOf(PopperControl.prototype), "getDefault", this).call(this, option);
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      var position = (_option$position = option === null || option === void 0 ? void 0 : option.position) !== null && _option$position !== void 0 ? _option$position : defaultOption.position;
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PopperControl.prototype), "getDefault", this).call(this, option)), {}, {
        popperPlacement: position instanceof Element ? 'bottom' : PopperPlacementMap[position],
        popperTrigger: 'click'
      });
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var button = _get(_getPrototypeOf(PopperControl.prototype), "onAdd", this).call(this);
      this.initPopper();
      return button;
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      this.popper.destroy();
    }
  }, {
    key: "initPopper",
    value: function initPopper() {
      var _this = this;
      var _this$controlOption = this.controlOption,
        popperClassName = _this$controlOption.popperClassName,
        popperPlacement = _this$controlOption.popperPlacement,
        popperTrigger = _this$controlOption.popperTrigger;
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      var popperContainer = this.mapsService.getMapContainer();

      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      this.popper = new Popper(this.button, {
        className: popperClassName,
        placement: popperPlacement,
        trigger: popperTrigger,
        container: popperContainer,
        unique: true
      });
      this.popper.on('show', function () {
        _this.emit('popperShow', _this);
      }).on('hide', function () {
        _this.emit('popperHide', _this);
      });
      return this.popper;
    }
  }, {
    key: "setOptions",
    value: function setOptions(option) {
      _get(_getPrototypeOf(PopperControl.prototype), "setOptions", this).call(this, option);
      if (this.checkUpdateOption(option, ['popperPlacement', 'popperTrigger', 'popperClassName'])) {
        var content = this.popper.getContent();
        this.popper.destroy();
        this.initPopper();
        this.popper.setContent(content);
      }
    }
  }]);
  return PopperControl;
}(ButtonControl);
export { PopperControl as default };