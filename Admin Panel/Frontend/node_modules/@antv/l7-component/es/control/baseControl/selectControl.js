import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { DOM } from '@antv/l7-utils';
import { PopperControl } from "./popperControl";
export { SelectControl };
var SelectControlConstant = /*#__PURE__*/function (SelectControlConstant) {
  SelectControlConstant["ActiveOptionClassName"] = "l7-select-control-item-active";
  SelectControlConstant["OptionValueAttrKey"] = "data-option-value";
  SelectControlConstant["OptionIndexAttrKey"] = "data-option-index";
  return SelectControlConstant;
}(SelectControlConstant || {});
var SelectControl = /*#__PURE__*/function (_PopperControl) {
  _inherits(SelectControl, _PopperControl);
  var _super = _createSuper(SelectControl);
  function SelectControl() {
    var _this;
    _classCallCheck(this, SelectControl);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "selectValue", []);
    _defineProperty(_assertThisInitialized(_this), "createNormalOption", function (option) {
      var isSelect = _this.selectValue.includes(option.value);
      var optionDOM = DOM.create('div', "l7-select-control-item ".concat(isSelect ? SelectControlConstant.ActiveOptionClassName : ''));
      if (_this.getIsMultiple()) {
        optionDOM.appendChild(_this.createCheckbox(isSelect));
      }
      if (option.icon) {
        optionDOM.appendChild(option.icon);
      }
      var textDOM = DOM.create('span');
      textDOM.innerText = option.text;
      optionDOM.appendChild(textDOM);
      return optionDOM;
    });
    _defineProperty(_assertThisInitialized(_this), "onItemClick", function (item) {
      if (_this.getIsMultiple()) {
        var targetIndex = _this.selectValue.findIndex(function (value) {
          return value === item.value;
        });
        if (targetIndex > -1) {
          _this.selectValue.splice(targetIndex, 1);
        } else {
          _this.selectValue = [].concat(_toConsumableArray(_this.selectValue), [item.value]);
        }
      } else {
        _this.selectValue = [item.value];
      }
      _this.setSelectValue(_this.selectValue);
    });
    return _this;
  }
  _createClass(SelectControl, [{
    key: "setOptions",
    value: function setOptions(option) {
      _get(_getPrototypeOf(SelectControl.prototype), "setOptions", this).call(this, option);
      var options = option.options;
      if (options) {
        this.popper.setContent(this.getPopperContent(options));
      }
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var button = _get(_getPrototypeOf(SelectControl.prototype), "onAdd", this).call(this);
      var defaultValue = this.controlOption.defaultValue;
      if (defaultValue) {
        this.selectValue = this.transSelectValue(defaultValue);
      }
      this.popper.setContent(this.getPopperContent(this.controlOption.options));
      return button;
    }
  }, {
    key: "getSelectValue",
    value: function getSelectValue() {
      return this.getIsMultiple() ? this.selectValue : this.selectValue[0];
    }
  }, {
    key: "setSelectValue",
    value: function setSelectValue(value) {
      var _this2 = this;
      var emitEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var finalValue = this.transSelectValue(value);
      this.optionDOMList.forEach(function (optionDOM) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        var optionValue = optionDOM.getAttribute(SelectControlConstant.OptionValueAttrKey);
        var checkboxDOM = _this2.getIsMultiple() ? optionDOM.querySelector('input[type=checkbox]') : undefined;
        if (finalValue.includes(optionValue)) {
          DOM.addClass(optionDOM, SelectControlConstant.ActiveOptionClassName);
          if (checkboxDOM) {
            // @ts-ignore
            DOM.setChecked(checkboxDOM, true);
          }
        } else {
          DOM.removeClass(optionDOM, SelectControlConstant.ActiveOptionClassName);
          if (checkboxDOM) {
            // @ts-ignore
            DOM.setChecked(checkboxDOM, false);
          }
        }
      });
      this.selectValue = finalValue;
      if (emitEvent) {
        this.emit('selectChange', this.getIsMultiple() ? finalValue : finalValue[0]);
      }
    }

    /**
     * 是否为多选
     * @protected
     */
  }, {
    key: "getIsMultiple",
    value: function getIsMultiple() {
      return false;
    }
  }, {
    key: "getPopperContent",
    value: function getPopperContent(options) {
      var _this3 = this;
      var isImageOptions = this.isImageOptions();
      var content = DOM.create('div', isImageOptions ? 'l7-select-control--image' : 'l7-select-control--normal');
      if (this.getIsMultiple()) {
        DOM.addClass(content, 'l7-select-control--multiple');
      }
      var optionsDOMList = options.map(function (option, optionIndex) {
        var optionDOM = isImageOptions ?
        // @ts-ignore
        _this3.createImageOption(option) : _this3.createNormalOption(option);
        optionDOM.setAttribute(SelectControlConstant.OptionValueAttrKey, option.value);
        optionDOM.setAttribute(SelectControlConstant.OptionIndexAttrKey, window.String(optionIndex));
        optionDOM.addEventListener('click', _this3.onItemClick.bind(_this3, option));
        return optionDOM;
      });
      content.append.apply(content, _toConsumableArray(optionsDOMList));
      this.optionDOMList = optionsDOMList;
      return content;
    }
  }, {
    key: "createImageOption",
    value: function createImageOption(option) {
      var isSelect = this.selectValue.includes(option.value);
      var optionDOM = DOM.create('div', "l7-select-control-item ".concat(isSelect ? SelectControlConstant.ActiveOptionClassName : ''));
      var imgDOM = DOM.create('img');
      imgDOM.setAttribute('src', option.img);
      DOM.setUnDraggable(imgDOM);
      optionDOM.appendChild(imgDOM);
      var rowDOM = DOM.create('div', 'l7-select-control-item-row');
      if (this.getIsMultiple()) {
        optionDOM.appendChild(this.createCheckbox(isSelect));
      }
      var textDOM = DOM.create('span');
      textDOM.innerText = option.text;
      rowDOM.appendChild(textDOM);
      optionDOM.appendChild(rowDOM);
      return optionDOM;
    }
  }, {
    key: "createCheckbox",
    value: function createCheckbox(isSelect) {
      var checkboxDOM = DOM.create('input');
      checkboxDOM.setAttribute('type', 'checkbox');
      if (isSelect) {
        DOM.setChecked(checkboxDOM, true);
      }
      return checkboxDOM;
    }
  }, {
    key: "isImageOptions",
    value: function isImageOptions() {
      // @ts-ignore
      return !!this.controlOption.options.find(function (item) {
        return item.img;
      });
    }
  }, {
    key: "transSelectValue",
    value: function transSelectValue(value) {
      return Array.isArray(value) ? value : [value];
    }
  }]);
  return SelectControl;
}(PopperControl);
export { SelectControl as default };