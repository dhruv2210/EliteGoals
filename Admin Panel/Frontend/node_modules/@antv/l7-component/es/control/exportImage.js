import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { createL7Icon } from "../utils/icon";
import ButtonControl from "./baseControl/buttonControl";
export { ExportImage };
var ExportImage = /*#__PURE__*/function (_ButtonControl) {
  _inherits(ExportImage, _ButtonControl);
  var _super = _createSuper(ExportImage);
  function ExportImage() {
    var _this;
    _classCallCheck(this, ExportImage);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "onClick", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var onExport;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            onExport = _this.controlOption.onExport;
            if (!(onExport === null || onExport === void 0)) {
              _context.next = 5;
              break;
            }
            void 0;
            _context.next = 10;
            break;
          case 5:
            _context.t0 = onExport;
            _context.next = 8;
            return _this.getImage();
          case 8:
            _context.t1 = _context.sent;
            (0, _context.t0)(_context.t1);
          case 10:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    _defineProperty(_assertThisInitialized(_this), "mergeImage", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var _this$mapsService$get, _this$mapsService$get2;
      var imageType,
        _ref3,
        _ref3$width,
        width,
        _ref3$height,
        height,
        canvas,
        context,
        _len2,
        base64List,
        _key2,
        imgList,
        _args2 = arguments;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            imageType = _this.controlOption.imageType;
            _ref3 = (_this$mapsService$get = (_this$mapsService$get2 = _this.mapsService.getContainer()) === null || _this$mapsService$get2 === void 0 ? void 0 : _this$mapsService$get2.getBoundingClientRect()) !== null && _this$mapsService$get !== void 0 ? _this$mapsService$get : {}, _ref3$width = _ref3.width, width = _ref3$width === void 0 ? 0 : _ref3$width, _ref3$height = _ref3.height, height = _ref3$height === void 0 ? 0 : _ref3$height;
            canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            context = canvas.getContext('2d');
            for (_len2 = _args2.length, base64List = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              base64List[_key2] = _args2[_key2];
            }
            _context2.next = 9;
            return Promise.all(base64List.map(function (base64) {
              return new Promise(function (resolve) {
                var img = new Image();
                img.onload = function () {
                  resolve(img);
                };
                img.src = base64;
              });
            }));
          case 9:
            imgList = _context2.sent;
            imgList.forEach(function (img) {
              context === null || context === void 0 ? void 0 : context.drawImage(img, 0, 0, width, height);
            });
            return _context2.abrupt("return", canvas.toDataURL("image/".concat(imageType)));
          case 12:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })));
    return _this;
  }
  _createClass(ExportImage, [{
    key: "onAdd",
    value: function onAdd() {
      var button = _get(_getPrototypeOf(ExportImage.prototype), "onAdd", this).call(this);
      button.addEventListener('click', this.onClick);
      return button;
    }
  }, {
    key: "getDefault",
    value: function getDefault(option) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(ExportImage.prototype), "getDefault", this).call(this, option)), {}, {
        title: '导出图片',
        btnIcon: createL7Icon('l7-icon-export-picture'),
        imageType: 'png'
      });
    }
  }, {
    key: "getImage",
    value: function () {
      var _getImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var mapImage, layerImage;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.mapsService.exportMap('png');
            case 2:
              mapImage = _context3.sent;
              _context3.next = 5;
              return this.scene.exportPng('png');
            case 5:
              layerImage = _context3.sent;
              return _context3.abrupt("return", this.mergeImage.apply(this, _toConsumableArray([mapImage, layerImage].filter(function (base64) {
                return base64;
              }))));
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function getImage() {
        return _getImage.apply(this, arguments);
      }
      return getImage;
    }()
  }]);
  return ExportImage;
}(ButtonControl);
export { ExportImage as default };