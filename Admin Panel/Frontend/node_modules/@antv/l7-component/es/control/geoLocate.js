import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { isNaN } from 'lodash';
import { createL7Icon } from "../utils/icon";
import ButtonControl from "./baseControl/buttonControl";
export { GeoLocate };
var GeoLocate = /*#__PURE__*/function (_ButtonControl) {
  _inherits(GeoLocate, _ButtonControl);
  var _super = _createSuper(GeoLocate);
  function GeoLocate(option) {
    var _this;
    _classCallCheck(this, GeoLocate);
    _this = _super.call(this, option);
    _defineProperty(_assertThisInitialized(_this), "getGeoLocation", function () {
      return new Promise(function (resolve, reject) {
        window.navigator.geolocation.getCurrentPosition(function (_ref) {
          var coords = _ref.coords;
          var _ref2 = coords !== null && coords !== void 0 ? coords : {},
            longitude = _ref2.longitude,
            latitude = _ref2.latitude;
          if (!isNaN(longitude) && !isNaN(latitude)) {
            resolve([longitude, latitude]);
          } else {
            reject();
          }
        }, function (e) {
          reject(e);
        });
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onClick", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var transform, position, currentZoom;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (window.navigator.geolocation) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            transform = _this.controlOption.transform;
            _context.next = 5;
            return _this.getGeoLocation();
          case 5:
            position = _context.sent;
            currentZoom = _this.mapsService.getZoom();
            _context.t0 = _this.mapsService;
            _context.t1 = currentZoom > 15 ? currentZoom : 15;
            if (!transform) {
              _context.next = 15;
              break;
            }
            _context.next = 12;
            return transform(position);
          case 12:
            _context.t2 = _context.sent;
            _context.next = 16;
            break;
          case 15:
            _context.t2 = position;
          case 16:
            _context.t3 = _context.t2;
            _context.t0.setZoomAndCenter.call(_context.t0, _context.t1, _context.t3);
          case 18:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    if (!window.navigator.geolocation) {
      console.warn('当前浏览器环境不支持获取地理定位');
    }
    return _this;
  }
  _createClass(GeoLocate, [{
    key: "getDefault",
    value: function getDefault(option) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(GeoLocate.prototype), "getDefault", this).call(this, option)), {}, {
        title: '定位',
        btnIcon: createL7Icon('l7-icon-reposition')
      });
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var button = _get(_getPrototypeOf(GeoLocate.prototype), "onAdd", this).call(this);
      button.addEventListener('click', this.onClick);
      return button;
    }

    /**
     * 通过浏览器 API 获取当前所在经纬度
     */
  }]);
  return GeoLocate;
}(ButtonControl);
export { GeoLocate as default };