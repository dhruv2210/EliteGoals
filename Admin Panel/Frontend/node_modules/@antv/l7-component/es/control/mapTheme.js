import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { GaodeMapStyleConfig, MapboxMapStyleConfig } from "../constants";
import { createL7Icon } from "../utils/icon";
import SelectControl from "./baseControl/selectControl";
export { MapTheme };
var MapTheme = /*#__PURE__*/function (_SelectControl) {
  _inherits(MapTheme, _SelectControl);
  var _super = _createSuper(MapTheme);
  function MapTheme() {
    var _this;
    _classCallCheck(this, MapTheme);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "onMapThemeChange", function () {
      _this.mapsService.setMapStyle(_this.selectValue[0]);
    });
    return _this;
  }
  _createClass(MapTheme, [{
    key: "getDefault",
    value: function getDefault(option) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(MapTheme.prototype), "getDefault", this).call(this, option)), {}, {
        title: '地图样式',
        btnIcon: createL7Icon('l7-icon-color'),
        options: []
      });
    }
  }, {
    key: "getStyleOptions",
    value: function getStyleOptions() {
      var mapStyleConfig = this.mapsService.getType() === 'mapbox' ? MapboxMapStyleConfig : GaodeMapStyleConfig;
      return Object.entries(this.mapsService.getMapStyleConfig()).filter(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];
        return typeof value === 'string' && key !== 'blank';
      }).map(function (_ref3) {
        var _mapStyleConfig$key;
        var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          value = _ref4[1];
        // @ts-ignore
        var _ref5 = (_mapStyleConfig$key = mapStyleConfig[key]) !== null && _mapStyleConfig$key !== void 0 ? _mapStyleConfig$key : {},
          text = _ref5.text,
          img = _ref5.img;
        return {
          text: text !== null && text !== void 0 ? text : key,
          value: value,
          img: img,
          key: key
        };
      });
    }
  }, {
    key: "getMapStyle",
    value: function getMapStyle() {
      return this.mapsService.getMapStyle();
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var _this$controlOption$o,
        _this2 = this;
      if (!((_this$controlOption$o = this.controlOption.options) !== null && _this$controlOption$o !== void 0 && _this$controlOption$o.length)) {
        this.controlOption.options = this.getStyleOptions();
      }
      if (this.controlOption.defaultValue) {
        var _this$controlOption$o2, _this$controlOption$o3;
        var defaultValue = this.controlOption.defaultValue;
        this.controlOption.defaultValue = (_this$controlOption$o2 = (_this$controlOption$o3 = this.controlOption.options.find(function (item) {
          return item.key === defaultValue;
        })) === null || _this$controlOption$o3 === void 0 ? void 0 : _this$controlOption$o3.value) !== null && _this$controlOption$o2 !== void 0 ? _this$controlOption$o2 : defaultValue;
      } else {
        var defaultStyle = this.getMapStyle();
        if (defaultStyle) {
          this.controlOption.defaultValue = defaultStyle;
        } else {
          // @ts-ignore
          this.mapsService.map.once('styledata', function () {
            var mapboxStyle = _this2.mapsService.getMapStyle();
            _this2.controlOption.defaultValue = mapboxStyle;
            _this2.setSelectValue(mapboxStyle, false);
          });
        }
      }
      this.on('selectChange', this.onMapThemeChange);
      return _get(_getPrototypeOf(MapTheme.prototype), "onAdd", this).call(this);
    }
  }, {
    key: "getIsMultiple",
    value: function getIsMultiple() {
      return false;
    }
  }]);
  return MapTheme;
}(SelectControl);
export { MapTheme as default };