import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { PositionType } from '@antv/l7-core';
import { DOM } from '@antv/l7-utils';
import { createL7Icon } from "../utils/icon";
import { Control } from "./baseControl";
export { Zoom };
var Zoom = /*#__PURE__*/function (_Control) {
  _inherits(Zoom, _Control);
  var _super = _createSuper(Zoom);
  function Zoom() {
    var _this;
    _classCallCheck(this, Zoom);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "zoomIn", function () {
      if (!_this.disabled && _this.mapsService.getZoom() < _this.mapsService.getMaxZoom()) {
        _this.mapsService.zoomIn();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "zoomOut", function () {
      if (!_this.disabled && _this.mapsService.getZoom() > _this.mapsService.getMinZoom()) {
        _this.mapsService.zoomOut();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "updateDisabled", function () {
      var mapsService = _this.mapsService;
      _this.zoomInButton.removeAttribute('disabled');
      _this.zoomOutButton.removeAttribute('disabled');
      if (_this.disabled || mapsService.getZoom() <= mapsService.getMinZoom()) {
        _this.zoomOutButton.setAttribute('disabled', 'true');
      }
      if (_this.disabled || mapsService.getZoom() >= mapsService.getMaxZoom()) {
        _this.zoomInButton.setAttribute('disabled', 'true');
      }
    });
    return _this;
  }
  _createClass(Zoom, [{
    key: "getDefault",
    value: function getDefault(option) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(Zoom.prototype), "getDefault", this).call(this, option)), {}, {
        position: PositionType.BOTTOMRIGHT,
        name: 'zoom',
        zoomInText: createL7Icon('l7-icon-enlarge'),
        zoomInTitle: 'Zoom in',
        zoomOutText: createL7Icon('l7-icon-narrow'),
        zoomOutTitle: 'Zoom out'
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(newOptions) {
      _get(_getPrototypeOf(Zoom.prototype), "setOptions", this).call(this, newOptions);
      if (this.checkUpdateOption(newOptions, ['zoomInText', 'zoomInTitle', 'zoomOutText', 'zoomOutTitle'])) {
        this.resetButtonGroup(this.container);
      }
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var container = DOM.create('div', 'l7-control-zoom');
      this.resetButtonGroup(container);
      this.mapsService.on('zoomend', this.updateDisabled);
      this.mapsService.on('zoomchange', this.updateDisabled);
      return container;
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      this.mapsService.off('zoomend', this.updateDisabled);
      this.mapsService.off('zoomchange', this.updateDisabled);
    }
  }, {
    key: "disable",
    value: function disable() {
      this.disabled = true;
      this.updateDisabled();
      return this;
    }
  }, {
    key: "enable",
    value: function enable() {
      this.disabled = false;
      this.updateDisabled();
      return this;
    }
  }, {
    key: "resetButtonGroup",
    value: function resetButtonGroup(container) {
      DOM.clearChildren(container);
      this.zoomInButton = this.createButton(this.controlOption.zoomInText, this.controlOption.zoomInTitle, 'l7-button-control', container, this.zoomIn);
      this.zoomOutButton = this.createButton(this.controlOption.zoomOutText, this.controlOption.zoomOutTitle, 'l7-button-control', container, this.zoomOut);
      this.updateDisabled();
    }
  }, {
    key: "createButton",
    value: function createButton(html, tile, className, container, fn) {
      var link = DOM.create('button', className, container);
      if (typeof html === 'string') {
        link.innerHTML = html;
      } else {
        link.append(html);
      }
      link.title = tile;
      link.addEventListener('click', fn);
      return link;
    }
  }]);
  return Zoom;
}(Control);
export { Zoom as default };