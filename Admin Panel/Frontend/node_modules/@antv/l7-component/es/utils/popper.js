import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { DOM } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';

/**
 * 气泡位置枚举
 */

export var Popper = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Popper, _EventEmitter);
  var _super = _createSuper(Popper);
  function Popper(button, option) {
    var _this;
    _classCallCheck(this, Popper);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "isShow", false);
    _defineProperty(_assertThisInitialized(_this), "timeout", null);
    _defineProperty(_assertThisInitialized(_this), "show", function () {
      if (_this.isShow || !_this.contentDOM.innerHTML) {
        return _assertThisInitialized(_this);
      }
      _this.resetPopperPosition();
      DOM.removeClass(_this.popperDOM, 'l7-popper-hide');
      _this.isShow = true;
      if (_this.option.unique) {
        // console.log(Popper.conflictPopperList.length);
        Popper.conflictPopperList.forEach(function (popper) {
          if (popper !== _assertThisInitialized(_this) && popper.isShow) {
            popper.hide();
          }
        });
      }
      _this.emit('show');
      return _assertThisInitialized(_this);
    });
    _defineProperty(_assertThisInitialized(_this), "hide", function () {
      if (!_this.isShow) {
        return _assertThisInitialized(_this);
      }
      DOM.addClass(_this.popperDOM, 'l7-popper-hide');
      _this.isShow = false;
      _this.emit('hide');
      return _assertThisInitialized(_this);
    });
    _defineProperty(_assertThisInitialized(_this), "setHideTimeout", function () {
      if (_this.timeout) {
        return;
      }
      _this.timeout = window.setTimeout(function () {
        if (!_this.isShow) {
          return;
        }
        _this.hide();
        _this.timeout = null;
      }, 300);
    });
    _defineProperty(_assertThisInitialized(_this), "clearHideTimeout", function () {
      if (_this.timeout) {
        window.clearTimeout(_this.timeout);
        _this.timeout = null;
      }
    });
    _defineProperty(_assertThisInitialized(_this), "onBtnClick", function () {
      if (_this.isShow) {
        _this.hide();
      } else {
        _this.show();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "onBtnMouseLeave", function () {
      _this.setHideTimeout();
    });
    _defineProperty(_assertThisInitialized(_this), "onBtnMouseMove", function () {
      _this.clearHideTimeout();
      if (_this.isShow) {
        return;
      }
      _this.show();
    });
    _this.button = button;
    _this.option = option;
    _this.init();
    if (option.unique) {
      Popper.conflictPopperList.push(_assertThisInitialized(_this));
    }
    return _this;
  }
  _createClass(Popper, [{
    key: "buttonRect",
    get: function get() {
      return this.button.getBoundingClientRect();
    }
  }, {
    key: "getPopperDOM",
    value: function getPopperDOM() {
      return this.popperDOM;
    }
  }, {
    key: "getIsShow",
    value: function getIsShow() {
      return this.isShow;
    }
  }, {
    key: "getContent",
    value: function getContent() {
      return this.content;
    }
  }, {
    key: "setContent",
    value: function setContent(content) {
      if (typeof content === 'string') {
        this.contentDOM.innerHTML = content;
      } else if (content instanceof HTMLElement) {
        DOM.clearChildren(this.contentDOM);
        this.contentDOM.appendChild(content);
      }
      this.content = content;
    }
  }, {
    key: "init",
    value: function init() {
      var trigger = this.option.trigger;
      this.popperDOM = this.createPopper();
      if (trigger === 'click') {
        this.button.addEventListener('click', this.onBtnClick);
      } else {
        this.button.addEventListener('mousemove', this.onBtnMouseMove);
        this.button.addEventListener('mouseleave', this.onBtnMouseLeave);
        this.popperDOM.addEventListener('mousemove', this.onBtnMouseMove);
        this.popperDOM.addEventListener('mouseleave', this.onBtnMouseLeave);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.button.removeEventListener('click', this.onBtnClick);
      this.button.removeEventListener('mousemove', this.onBtnMouseMove);
      this.button.removeEventListener('mousemove', this.onBtnMouseLeave);
      this.popperDOM.removeEventListener('mousemove', this.onBtnMouseMove);
      this.popperDOM.removeEventListener('mouseleave', this.onBtnMouseLeave);
      DOM.remove(this.popperDOM);
    }
  }, {
    key: "resetPopperPosition",
    value: function resetPopperPosition() {
      var popperStyleObj = {};
      var _this$option = this.option,
        container = _this$option.container,
        _this$option$offset = _this$option.offset,
        offset = _this$option$offset === void 0 ? [0, 0] : _this$option$offset,
        placement = _this$option.placement;
      var _offset = _slicedToArray(offset, 2),
        offsetX = _offset[0],
        offsetY = _offset[1];
      var buttonRect = this.button.getBoundingClientRect();
      var containerRect = container.getBoundingClientRect();
      var _DOM$getDiffRect = DOM.getDiffRect(buttonRect, containerRect),
        left = _DOM$getDiffRect.left,
        right = _DOM$getDiffRect.right,
        top = _DOM$getDiffRect.top,
        bottom = _DOM$getDiffRect.bottom;
      var isTransformX = false;
      var isTransformY = false;
      if (/^(left|right)/.test(placement)) {
        if (placement.includes('left')) {
          popperStyleObj.right = "".concat(buttonRect.width + right, "px");
        } else if (placement.includes('right')) {
          popperStyleObj.left = "".concat(buttonRect.width + left, "px");
        }
        if (placement.includes('start')) {
          popperStyleObj.top = "".concat(top, "px");
        } else if (placement.includes('end')) {
          popperStyleObj.bottom = "".concat(bottom, "px");
        } else {
          popperStyleObj.top = "".concat(top + buttonRect.height / 2, "px");
          isTransformY = true;
          popperStyleObj.transform = "translate(".concat(offsetX, "px, calc(").concat(offsetY, "px - 50%))");
        }
      } else if (/^(top|bottom)/.test(placement)) {
        if (placement.includes('top')) {
          popperStyleObj.bottom = "".concat(buttonRect.height + bottom, "px");
        } else if (placement.includes('bottom')) {
          popperStyleObj.top = "".concat(buttonRect.height + top, "px");
        }
        if (placement.includes('start')) {
          popperStyleObj.left = "".concat(left, "px");
        } else if (placement.includes('end')) {
          popperStyleObj.right = "".concat(right, "px");
        } else {
          popperStyleObj.left = "".concat(left + buttonRect.width / 2, "px");
          isTransformX = true;
          popperStyleObj.transform = "translate(calc(".concat(offsetX, "px - 50%), ").concat(offsetY, "px)");
        }
      }
      popperStyleObj.transform = "translate(calc(".concat(offsetX, "px - ").concat(isTransformX ? '50%' : '0%', "), calc(").concat(offsetY, "px - ").concat(isTransformY ? '50%' : '0%', ")");
      var posList = placement.split('-');
      if (posList.length) {
        DOM.addClass(this.popperDOM, posList.map(function (pos) {
          return "l7-popper-".concat(pos);
        }).join(' '));
      }
      DOM.addStyle(this.popperDOM, DOM.css2Style(popperStyleObj));
    }
  }, {
    key: "createPopper",
    value: function createPopper() {
      var _this$option2 = this.option,
        container = _this$option2.container,
        _this$option2$classNa = _this$option2.className,
        className = _this$option2$classNa === void 0 ? '' : _this$option2$classNa,
        content = _this$option2.content;
      var popper = DOM.create('div', "l7-popper l7-popper-hide ".concat(className));
      var popperContent = DOM.create('div', 'l7-popper-content');
      var popperArrow = DOM.create('div', 'l7-popper-arrow');
      popper.appendChild(popperContent);
      popper.appendChild(popperArrow);
      container.appendChild(popper);
      this.popperDOM = popper;
      this.contentDOM = popperContent;
      if (content) {
        this.setContent(content);
      }
      return popper;
    }
  }]);
  return Popper;
}(EventEmitter);
_defineProperty(Popper, "conflictPopperList", []);