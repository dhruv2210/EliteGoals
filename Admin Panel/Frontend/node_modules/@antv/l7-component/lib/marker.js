"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _eventemitter = require("eventemitter3");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
//  marker 支持 dragger 未完成
var Marker = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2.default)(Marker, _EventEmitter);
  var _super = _createSuper(Marker);
  function Marker(option) {
    var _this;
    (0, _classCallCheck2.default)(this, Marker);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "added", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "eventHandle", function (e) {
      _this.polyfillEvent(e);
      _this.emit(e.type, {
        target: e,
        data: _this.markerOption.extData,
        lngLat: _this.lngLat
      });
    });
    _this.markerOption = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _this.getDefault()), option);
    (0, _l7Utils.bindAll)(['update', 'onMove', 'onMapClick'], (0, _assertThisInitialized2.default)(_this));
    _this.init();
    return _this;
  }
  (0, _createClass2.default)(Marker, [{
    key: "getMarkerLayerContainerSize",
    value:
    // tslint:disable-next-line: no-empty
    function getMarkerLayerContainerSize() {}
  }, {
    key: "getDefault",
    value: function getDefault() {
      return {
        element: undefined,
        // DOM element
        anchor: _l7Utils.anchorType.BOTTOM,
        offsets: [0, 0],
        color: '#5B8FF9',
        draggable: false
      };
    }
  }, {
    key: "addTo",
    value: function addTo(scene) {
      // this.remove();
      this.scene = scene;
      this.mapsService = scene.get(_l7Core.TYPES.IMapService);
      this.sceneSerive = scene.get(_l7Core.TYPES.ISceneService);
      var element = this.markerOption.element;
      // this.sceneSerive.getSceneContainer().appendChild(element as HTMLElement);
      this.mapsService.getMarkerContainer().appendChild(element);
      this.registerMarkerEvent(element);
      this.mapsService.on('camerachange', this.update); // 注册高德1.x 的地图事件监听
      this.update();
      this.added = true;
      this.emit('added');
      return this;
    }
  }, {
    key: "remove",
    value: function remove() {
      if (this.mapsService) {
        this.mapsService.off('click', this.onMapClick);
        this.mapsService.off('move', this.update);
        this.mapsService.off('moveend', this.update);
        this.mapsService.off('camerachange', this.update);
      }
      this.unRegisterMarkerEvent();
      this.removeAllListeners();
      var element = this.markerOption.element;
      if (element) {
        _l7Utils.DOM.remove(element);
      }
      if (this.popup) {
        this.popup.remove();
      }
      return this;
    }
  }, {
    key: "setLnglat",
    value: function setLnglat(lngLat) {
      this.lngLat = lngLat;
      if (Array.isArray(lngLat)) {
        this.lngLat = {
          lng: lngLat[0],
          lat: lngLat[1]
        };
      }
      if (this.popup) {
        this.popup.setLnglat(this.lngLat);
      }
      this.update();
      return this;
    }
  }, {
    key: "getLnglat",
    value: function getLnglat() {
      return this.lngLat;
    }
  }, {
    key: "getElement",
    value: function getElement() {
      return this.markerOption.element;
    }
  }, {
    key: "setElement",
    value: function setElement(el) {
      var _this2 = this;
      if (!this.added) {
        this.once('added', function () {
          _this2.setElement(el);
        });
        return this;
      }
      var element = this.markerOption.element;
      if (element) {
        _l7Utils.DOM.remove(element);
      }
      this.markerOption.element = el;
      this.init();
      this.mapsService.getMarkerContainer().appendChild(el);
      this.registerMarkerEvent(el);
      this.update();
      return this;
    }
  }, {
    key: "openPopup",
    value: function openPopup() {
      var _this3 = this;
      if (!this.added) {
        this.once('added', function () {
          _this3.openPopup();
        });
        return this;
      }
      var popup = this.popup;
      if (!popup) {
        return this;
      }
      if (!popup.isOpen()) {
        popup.addTo(this.scene);
      }
      return this;
    }
  }, {
    key: "closePopup",
    value: function closePopup() {
      var _this4 = this;
      if (!this.added) {
        this.once('added', function () {
          _this4.closePopup();
        });
      }
      var popup = this.popup;
      if (popup) {
        popup.remove();
      }
      return this;
    }
  }, {
    key: "setPopup",
    value: function setPopup(popup) {
      this.popup = popup;
      if (this.lngLat) {
        this.popup.setLnglat(this.lngLat);
      }
      return this;
    }
  }, {
    key: "togglePopup",
    value: function togglePopup() {
      var popup = this.popup;
      if (!popup) {
        return this;
      } else if (popup.isOpen()) {
        popup.remove();
      } else {
        popup.addTo(this.scene);
      }
      return this;
    }
  }, {
    key: "getPopup",
    value: function getPopup() {
      return this.popup;
    }
  }, {
    key: "getOffset",
    value: function getOffset() {
      return this.markerOption.offsets;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "setDraggable",
    value: function setDraggable(draggable) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "isDraggable",
    value: function isDraggable() {
      return this.markerOption.draggable;
    }
  }, {
    key: "getExtData",
    value: function getExtData() {
      return this.markerOption.extData;
    }
  }, {
    key: "setExtData",
    value: function setExtData(data) {
      this.markerOption.extData = data;
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.mapsService) {
        return;
      }
      var _this$markerOption = this.markerOption,
        element = _this$markerOption.element,
        anchor = _this$markerOption.anchor;
      this.updatePosition();
      _l7Utils.DOM.setTransform(element, "".concat(_l7Utils.anchorTranslate[anchor]));
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "onMapClick",
    value: function onMapClick(e) {
      var element = this.markerOption.element;
      if (this.popup && element) {
        this.togglePopup();
      }
    }
  }, {
    key: "getCurrentContainerSize",
    value: function getCurrentContainerSize() {
      var container = this.mapsService.getContainer();
      return {
        containerHeight: (container === null || container === void 0 ? void 0 : container.scrollHeight) || 0,
        containerWidth: (container === null || container === void 0 ? void 0 : container.scrollWidth) || 0,
        bounds: this.mapsService.getBounds()
      };
    }
  }, {
    key: "updatePosition",
    value: function updatePosition() {
      if (!this.mapsService) {
        return;
      }
      var _this$markerOption2 = this.markerOption,
        element = _this$markerOption2.element,
        offsets = _this$markerOption2.offsets;
      var _this$lngLat = this.lngLat,
        lng = _this$lngLat.lng,
        lat = _this$lngLat.lat;
      var pos = this.mapsService.lngLatToContainer([lng, lat]);
      if (element) {
        element.style.display = 'block';
        element.style.whiteSpace = 'nowrap';
        var _ref = this.getMarkerLayerContainerSize() || this.getCurrentContainerSize(),
          containerHeight = _ref.containerHeight,
          containerWidth = _ref.containerWidth,
          bounds = _ref.bounds;
        if (!bounds) {
          return;
        }
        // 当前可视区域包含跨日界线
        if (Math.abs(bounds[0][0]) > 180 || Math.abs(bounds[1][0]) > 180) {
          if (pos.x > containerWidth) {
            // 日界线右侧点左移
            var newPos = this.mapsService.lngLatToContainer([lng - 360, lat]);
            pos.x = newPos.x;
          }
          if (pos.x < 0) {
            // 日界线左侧点右移
            var _newPos = this.mapsService.lngLatToContainer([lng + 360, lat]);
            pos.x = _newPos.x;
          }
        }
        // 不在当前可视区域内隐藏点
        if (pos.x > containerWidth || pos.x < 0 || pos.y > containerHeight || pos.y < 0) {
          element.style.display = 'none';
        }
        element.style.left = pos.x + offsets[0] + 'px';
        element.style.top = pos.y - offsets[1] + 'px';
      }
    }
  }, {
    key: "init",
    value: function init() {
      var _this5 = this;
      var element = this.markerOption.element;
      var _this$markerOption3 = this.markerOption,
        color = _this$markerOption3.color,
        anchor = _this$markerOption3.anchor;
      if (!element) {
        this.defaultMarker = true;
        element = _l7Utils.DOM.create('div');
        this.markerOption.element = element;
        var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttributeNS(null, 'display', 'block');
        svg.setAttributeNS(null, 'height', '48px');
        svg.setAttributeNS(null, 'width', '48px');
        svg.setAttributeNS(null, 'viewBox', '0 0 1024 1024');
        var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        path.setAttributeNS(null, 'd', 'M512 490.666667C453.12 490.666667 405.333333 442.88 405.333333 384 405.333333 325.12 453.12 277.333333 512 277.333333 570.88 277.333333 618.666667 325.12 618.666667 384 618.666667 442.88 570.88 490.666667 512 490.666667M512 85.333333C346.88 85.333333 213.333333 218.88 213.333333 384 213.333333 608 512 938.666667 512 938.666667 512 938.666667 810.666667 608 810.666667 384 810.666667 218.88 677.12 85.333333 512 85.333333Z');
        path.setAttributeNS(null, 'fill', color);
        svg.appendChild(path);
        element.appendChild(svg);
      }
      _l7Utils.DOM.addClass(element, 'l7-marker');
      Object.keys(this.markerOption.style || {}).forEach(
      // @ts-ignore
      function (key) {
        var _this5$markerOption, _this5$markerOption2;
        var value = ((_this5$markerOption = _this5.markerOption) === null || _this5$markerOption === void 0 ? void 0 : _this5$markerOption.style) && ((_this5$markerOption2 = _this5.markerOption) === null || _this5$markerOption2 === void 0 ? void 0 : _this5$markerOption2.style[key]);
        if (element) {
          // @ts-ignore
          element.style[key] = value;
        }
      });
      (0, _l7Utils.applyAnchorClass)(element, anchor, 'marker');
    }
  }, {
    key: "registerMarkerEvent",
    value: function registerMarkerEvent(element) {
      element.addEventListener('click', this.onMapClick);
      element.addEventListener('mousemove', this.eventHandle);
      element.addEventListener('click', this.eventHandle);
      element.addEventListener('mousedown', this.eventHandle);
      element.addEventListener('mouseup', this.eventHandle);
      element.addEventListener('dblclick', this.eventHandle);
      element.addEventListener('contextmenu', this.eventHandle);
      element.addEventListener('mouseover', this.eventHandle);
      element.addEventListener('mouseout', this.eventHandle);
      element.addEventListener('touchstart', this.eventHandle);
      element.addEventListener('touchend', this.eventHandle);
    }
  }, {
    key: "unRegisterMarkerEvent",
    value: function unRegisterMarkerEvent() {
      var element = this.getElement();
      element.removeEventListener('click', this.onMapClick);
      element.removeEventListener('mousemove', this.eventHandle);
      element.removeEventListener('click', this.eventHandle);
      element.removeEventListener('mousedown', this.eventHandle);
      element.removeEventListener('mouseup', this.eventHandle);
      element.removeEventListener('dblclick', this.eventHandle);
      element.removeEventListener('contextmenu', this.eventHandle);
      element.removeEventListener('mouseover', this.eventHandle);
      element.removeEventListener('mouseout', this.eventHandle);
      element.removeEventListener('touchstart', this.eventHandle);
      element.removeEventListener('touchend', this.eventHandle);
    }
  }, {
    key: "polyfillEvent",
    value: function polyfillEvent(e) {
      if (!this.mapsService || this.mapsService.version !== 'GAODE2.x') {
        return;
      }
      if (!(0, _l7Utils.isPC)() && _l7Utils.isiOS) {
        if (e.type === 'touchstart') {
          this.touchStartTime = Date.now();
        }
        if (e.type === 'touchend' && Date.now() - this.touchStartTime < 300) {
          this.emit('click', {
            target: e,
            data: this.markerOption.extData,
            lngLat: this.lngLat
          });
        }
      }
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "addDragHandler",
    value: function addDragHandler(e) {
      return null;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "onUp",
    value: function onUp(e) {
      throw new Error('Method not implemented.');
    }
  }]);
  return Marker;
}(_eventemitter.EventEmitter);
exports.default = Marker;