"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Scale = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _baseControl = require("./baseControl");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Scale = /*#__PURE__*/function (_Control) {
  (0, _inherits2.default)(Scale, _Control);
  var _super = _createSuper(Scale);
  function Scale() {
    var _this;
    (0, _classCallCheck2.default)(this, Scale);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "update", function () {
      var mapsService = _this.mapsService;
      var maxWidth = _this.controlOption.maxWidth;
      var y = mapsService.getSize()[1] / 2;
      var p1 = mapsService.containerToLngLat([0, y]);
      var p2 = mapsService.containerToLngLat([maxWidth, y]);
      var maxMeters = (0, _l7Utils.lnglatDistance)([p1.lng, p1.lat], [p2.lng, p2.lat]);
      _this.updateScales(maxMeters);
    });
    return _this;
  }
  (0, _createClass2.default)(Scale, [{
    key: "getDefault",
    value: function getDefault(option) {
      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _get2.default)((0, _getPrototypeOf2.default)(Scale.prototype), "getDefault", this).call(this, option)), {}, {
        name: 'scale',
        position: _baseControl.PositionType.BOTTOMLEFT,
        maxWidth: 100,
        metric: true,
        updateWhenIdle: false,
        imperial: false,
        lockWidth: true
      });
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var className = 'l7-control-scale';
      var container = _l7Utils.DOM.create('div', className);
      this.resetScaleLines(container);
      var updateWhenIdle = this.controlOption.updateWhenIdle;
      this.mapsService.on(updateWhenIdle ? 'moveend' : 'mapmove', this.update);
      this.mapsService.on(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);
      return container;
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      var updateWhenIdle = this.controlOption.updateWhenIdle;
      this.mapsService.off(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);
      this.mapsService.off(updateWhenIdle ? 'moveend' : 'mapmove', this.update);
    }
  }, {
    key: "setOptions",
    value: function setOptions(newOption) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Scale.prototype), "setOptions", this).call(this, newOption);
      if (this.checkUpdateOption(newOption, ['lockWidth', 'maxWidth', 'metric', 'updateWhenIdle', 'imperial'])) {
        this.resetScaleLines(this.container);
      }
    }
  }, {
    key: "updateScales",
    value: function updateScales(maxMeters) {
      var _this$controlOption = this.controlOption,
        metric = _this$controlOption.metric,
        imperial = _this$controlOption.imperial;
      if (metric && maxMeters) {
        this.updateMetric(maxMeters);
      }
      if (imperial && maxMeters) {
        this.updateImperial(maxMeters);
      }
    }
  }, {
    key: "resetScaleLines",
    value: function resetScaleLines(container) {
      _l7Utils.DOM.clearChildren(container);
      var _this$controlOption2 = this.controlOption,
        metric = _this$controlOption2.metric,
        imperial = _this$controlOption2.imperial,
        maxWidth = _this$controlOption2.maxWidth,
        lockWidth = _this$controlOption2.lockWidth;
      if (lockWidth) {
        _l7Utils.DOM.addStyle(container, "width: ".concat(maxWidth, "px"));
      }
      if (metric) {
        this.mScale = _l7Utils.DOM.create('div', 'l7-control-scale-line', container);
      }
      if (imperial) {
        this.iScale = _l7Utils.DOM.create('div', 'l7-control-scale-line', container);
      }
      this.update();
    }
  }, {
    key: "updateScale",
    value: function updateScale(scale, text, ratio) {
      var maxWidth = this.controlOption.maxWidth;
      scale.style.width = Math.round(maxWidth * ratio) + 'px';
      scale.innerHTML = text;
    }
  }, {
    key: "getRoundNum",
    value: function getRoundNum(num) {
      var pow10 = Math.pow(10, (Math.floor(num) + '').length - 1);
      var d = num / pow10;
      d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;
      return pow10 * d;
    }
  }, {
    key: "updateMetric",
    value: function updateMetric(maxMeters) {
      var meters = this.getRoundNum(maxMeters);
      var label = meters < 1000 ? meters + ' m' : meters / 1000 + ' km';
      this.updateScale(this.mScale, label, meters / maxMeters);
    }
  }, {
    key: "updateImperial",
    value: function updateImperial(maxMeters) {
      var maxFeet = maxMeters * 3.2808399;
      var maxMiles;
      var miles;
      var feet;
      if (maxFeet > 5280) {
        maxMiles = maxFeet / 5280;
        miles = this.getRoundNum(maxMiles);
        this.updateScale(this.iScale, miles + ' mi', miles / maxMiles);
      } else {
        feet = this.getRoundNum(maxFeet);
        this.updateScale(this.iScale, feet + ' ft', feet / maxFeet);
      }
    }
  }]);
  return Scale;
}(_baseControl.Control);
exports.default = exports.Scale = Scale;