"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Fullscreen = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _icon = require("../utils/icon");
var _screenfull = _interopRequireDefault(require("../utils/screenfull"));
var _buttonControl = _interopRequireDefault(require("./baseControl/buttonControl"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Fullscreen = /*#__PURE__*/function (_ButtonControl) {
  (0, _inherits2.default)(Fullscreen, _ButtonControl);
  var _super = _createSuper(Fullscreen);
  function Fullscreen(option) {
    var _this;
    (0, _classCallCheck2.default)(this, Fullscreen);
    _this = _super.call(this, option);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isFullscreen", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleFullscreen", /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!_screenfull.default.isEnabled) {
              _context.next = 3;
              break;
            }
            _context.next = 3;
            return _screenfull.default.toggle(_this.mapContainer);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClick", function () {
      _this.toggleFullscreen();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFullscreenChange", function () {
      _this.isFullscreen = !!document.fullscreenElement;
      var _this$controlOption = _this.controlOption,
        btnText = _this$controlOption.btnText,
        btnIcon = _this$controlOption.btnIcon,
        title = _this$controlOption.title,
        exitBtnText = _this$controlOption.exitBtnText,
        exitBtnIcon = _this$controlOption.exitBtnIcon,
        exitTitle = _this$controlOption.exitTitle;
      if (_this.isFullscreen) {
        _this.setBtnTitle(exitTitle);
        _this.setBtnText(exitBtnText);
        _this.setBtnIcon(exitBtnIcon);
      } else {
        _this.setBtnTitle(title);
        _this.setBtnText(btnText);
        _this.setBtnIcon(btnIcon);
      }
      _this.emit('fullscreenChange', _this.isFullscreen);
    });
    if (!_screenfull.default.isEnabled) {
      console.warn('当前浏览器环境不支持对地图全屏化');
    }
    return _this;
  }
  (0, _createClass2.default)(Fullscreen, [{
    key: "setOptions",
    value: function setOptions(newOptions) {
      var exitBtnText = newOptions.exitBtnText,
        exitBtnIcon = newOptions.exitBtnIcon,
        exitTitle = newOptions.exitTitle;
      if (this.isFullscreen) {
        if (this.checkUpdateOption(newOptions, ['exitBtnIcon'])) {
          this.setBtnIcon(exitBtnIcon);
        }
        if (this.checkUpdateOption(newOptions, ['exitBtnText'])) {
          this.setBtnText(exitBtnText);
        }
        if (this.checkUpdateOption(newOptions, ['exitTitle'])) {
          this.setBtnTitle(exitTitle);
        }
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(Fullscreen.prototype), "setOptions", this).call(this, newOptions);
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var button = (0, _get2.default)((0, _getPrototypeOf2.default)(Fullscreen.prototype), "onAdd", this).call(this);
      button.addEventListener('click', this.onClick);
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      this.mapContainer = _l7Utils.DOM.getContainer(this.scene.getSceneConfig().id);
      this.mapContainer.addEventListener('fullscreenchange', this.onFullscreenChange);
      return button;
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      (0, _get2.default)((0, _getPrototypeOf2.default)(Fullscreen.prototype), "onRemove", this).call(this);
      this.mapContainer.removeEventListener('fullscreenchange', this.onFullscreenChange);
    }
  }, {
    key: "getDefault",
    value: function getDefault(option) {
      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _get2.default)((0, _getPrototypeOf2.default)(Fullscreen.prototype), "getDefault", this).call(this, option)), {}, {
        title: '全屏',
        btnIcon: (0, _icon.createL7Icon)('l7-icon-fullscreen'),
        exitTitle: '退出全屏',
        exitBtnIcon: (0, _icon.createL7Icon)('l7-icon-exit-fullscreen')
      });
    }
  }]);
  return Fullscreen;
}(_buttonControl.default);
exports.default = exports.Fullscreen = Fullscreen;