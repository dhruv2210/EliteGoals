"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonControl = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _control = _interopRequireDefault(require("./control"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ButtonControl = /*#__PURE__*/function (_Control) {
  (0, _inherits2.default)(ButtonControl, _Control);
  var _super = _createSuper(ButtonControl);
  function ButtonControl() {
    var _this;
    (0, _classCallCheck2.default)(this, ButtonControl);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isDisable", false);
    return _this;
  }
  (0, _createClass2.default)(ButtonControl, [{
    key: "setIsDisable",
    value:
    /**
     * 设置当前按钮
     * @param newIsDisable
     */
    function setIsDisable(newIsDisable) {
      this.isDisable = newIsDisable;
      if (newIsDisable) {
        var _this$button;
        (_this$button = this.button) === null || _this$button === void 0 ? void 0 : _this$button.setAttribute('disabled', 'true');
      } else {
        var _this$button2;
        (_this$button2 = this.button) === null || _this$button2 === void 0 ? void 0 : _this$button2.removeAttribute('disabled');
      }
    }
  }, {
    key: "createButton",
    value: function createButton() {
      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return _l7Utils.DOM.create('button', "l7-button-control ".concat(className));
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      this.button = this.createButton();
      this.isDisable = false;
      var _this$controlOption = this.controlOption,
        title = _this$controlOption.title,
        btnText = _this$controlOption.btnText,
        btnIcon = _this$controlOption.btnIcon;
      this.setBtnTitle(title);
      this.setBtnText(btnText);
      this.setBtnIcon(btnIcon);
      return this.button;
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      this.button = this.buttonIcon = this.buttonText = undefined;
      this.isDisable = false;
    }

    /**
     * 更新配置方法
     * @param newOptions
     */
  }, {
    key: "setOptions",
    value: function setOptions(newOptions) {
      var title = newOptions.title,
        btnText = newOptions.btnText,
        btnIcon = newOptions.btnIcon;
      if (this.checkUpdateOption(newOptions, ['title'])) {
        this.setBtnTitle(title);
      }
      if (this.checkUpdateOption(newOptions, ['btnIcon'])) {
        this.setBtnIcon(btnIcon);
      }
      if (this.checkUpdateOption(newOptions, ['btnText'])) {
        this.setBtnText(btnText);
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(ButtonControl.prototype), "setOptions", this).call(this, newOptions);
    }

    /**
     * 设置按钮 title
     * @param title
     */
  }, {
    key: "setBtnTitle",
    value: function setBtnTitle(title) {
      var _this$button3;
      (_this$button3 = this.button) === null || _this$button3 === void 0 ? void 0 : _this$button3.setAttribute('title', title !== null && title !== void 0 ? title : '');
    }

    /**
     * 设置按钮 Icon
     * @param newIcon
     */
  }, {
    key: "setBtnIcon",
    value: function setBtnIcon(newIcon) {
      if (this.buttonIcon) {
        _l7Utils.DOM.remove(this.buttonIcon);
      }
      if (newIcon) {
        var _this$button4;
        var firstChild = (_this$button4 = this.button) === null || _this$button4 === void 0 ? void 0 : _this$button4.firstChild;
        if (firstChild) {
          var _this$button5;
          (_this$button5 = this.button) === null || _this$button5 === void 0 ? void 0 : _this$button5.insertBefore(newIcon, firstChild);
        } else {
          var _this$button6;
          (_this$button6 = this.button) === null || _this$button6 === void 0 ? void 0 : _this$button6.appendChild(newIcon);
        }
        this.buttonIcon = newIcon;
      }
    }

    /**
     * 设置按钮文本
     * @param newText
     */
  }, {
    key: "setBtnText",
    value: function setBtnText(newText) {
      if (!this.button) {
        return;
      }
      _l7Utils.DOM.removeClass(this.button, 'l7-button-control--row');
      _l7Utils.DOM.removeClass(this.button, 'l7-button-control--column');
      if (newText) {
        var btnText = this.buttonText;
        if (!btnText) {
          var _this$button7;
          btnText = _l7Utils.DOM.create('div', 'l7-button-control__text');
          (_this$button7 = this.button) === null || _this$button7 === void 0 ? void 0 : _this$button7.appendChild(btnText);
          this.buttonText = btnText;
        }
        btnText.innerText = newText;
        _l7Utils.DOM.addClass(this.button, this.controlOption.vertical ? 'l7-button-control--column' : 'l7-button-control--row');
      } else if (!newText && this.buttonText) {
        _l7Utils.DOM.remove(this.buttonText);
        this.buttonText = undefined;
      }
    }
  }]);
  return ButtonControl;
}(_control.default);
exports.default = exports.ButtonControl = ButtonControl;