"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GeoLocate = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _lodash = require("lodash");
var _icon = require("../utils/icon");
var _buttonControl = _interopRequireDefault(require("./baseControl/buttonControl"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var GeoLocate = /*#__PURE__*/function (_ButtonControl) {
  (0, _inherits2.default)(GeoLocate, _ButtonControl);
  var _super = _createSuper(GeoLocate);
  function GeoLocate(option) {
    var _this;
    (0, _classCallCheck2.default)(this, GeoLocate);
    _this = _super.call(this, option);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getGeoLocation", function () {
      return new Promise(function (resolve, reject) {
        window.navigator.geolocation.getCurrentPosition(function (_ref) {
          var coords = _ref.coords;
          var _ref2 = coords !== null && coords !== void 0 ? coords : {},
            longitude = _ref2.longitude,
            latitude = _ref2.latitude;
          if (!(0, _lodash.isNaN)(longitude) && !(0, _lodash.isNaN)(latitude)) {
            resolve([longitude, latitude]);
          } else {
            reject();
          }
        }, function (e) {
          reject(e);
        });
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onClick", /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var transform, position, currentZoom;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (window.navigator.geolocation) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            transform = _this.controlOption.transform;
            _context.next = 5;
            return _this.getGeoLocation();
          case 5:
            position = _context.sent;
            currentZoom = _this.mapsService.getZoom();
            _context.t0 = _this.mapsService;
            _context.t1 = currentZoom > 15 ? currentZoom : 15;
            if (!transform) {
              _context.next = 15;
              break;
            }
            _context.next = 12;
            return transform(position);
          case 12:
            _context.t2 = _context.sent;
            _context.next = 16;
            break;
          case 15:
            _context.t2 = position;
          case 16:
            _context.t3 = _context.t2;
            _context.t0.setZoomAndCenter.call(_context.t0, _context.t1, _context.t3);
          case 18:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    if (!window.navigator.geolocation) {
      console.warn('当前浏览器环境不支持获取地理定位');
    }
    return _this;
  }
  (0, _createClass2.default)(GeoLocate, [{
    key: "getDefault",
    value: function getDefault(option) {
      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _get2.default)((0, _getPrototypeOf2.default)(GeoLocate.prototype), "getDefault", this).call(this, option)), {}, {
        title: '定位',
        btnIcon: (0, _icon.createL7Icon)('l7-icon-reposition')
      });
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var button = (0, _get2.default)((0, _getPrototypeOf2.default)(GeoLocate.prototype), "onAdd", this).call(this);
      button.addEventListener('click', this.onClick);
      return button;
    }

    /**
     * 通过浏览器 API 获取当前所在经纬度
     */
  }]);
  return GeoLocate;
}(_buttonControl.default);
exports.default = exports.GeoLocate = GeoLocate;