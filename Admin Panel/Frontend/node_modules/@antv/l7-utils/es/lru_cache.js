import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
/**
 * LRU Cache class with limit
 *
 * Update order for each get/set operation
 * Delete oldest when reach given limit
 */

export var LRUCache = /*#__PURE__*/function () {
  function LRUCache() {
    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;
    var destroy = arguments.length > 1 ? arguments[1] : undefined;
    _classCallCheck(this, LRUCache);
    this.limit = limit;
    this.destroy = destroy || this.defaultDestroy;
    this.order = [];
    this.clear();
  }
  _createClass(LRUCache, [{
    key: "clear",
    value: function clear() {
      var _this = this;
      this.order.forEach(function (key) {
        _this.delete(key);
      });
      this.cache = {};
      // access/update order, first item is oldest, last item is newest
      this.order = [];
    }
  }, {
    key: "get",
    value: function get(key) {
      var value = this.cache[key];
      if (value) {
        // update order
        this.deleteOrder(key);
        this.appendOrder(key);
      }
      return value;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      if (!this.cache[key]) {
        // if reach limit, delete the oldest
        if (Object.keys(this.cache).length === this.limit) {
          this.delete(this.order[0]);
        }
        this.cache[key] = value;
        this.appendOrder(key);
      } else {
        // if found in cache, delete the old one, insert new one to the first of list
        this.delete(key);
        this.cache[key] = value;
        this.appendOrder(key);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var value = this.cache[key];
      if (value) {
        this.deleteCache(key);
        this.deleteOrder(key);
        this.destroy(value, key);
      }
    }
  }, {
    key: "deleteCache",
    value: function deleteCache(key) {
      delete this.cache[key];
    }
  }, {
    key: "deleteOrder",
    value: function deleteOrder(key) {
      var index = this.order.findIndex(function (o) {
        return o === key;
      });
      if (index >= 0) {
        this.order.splice(index, 1);
      }
    }
  }, {
    key: "appendOrder",
    value: function appendOrder(key) {
      this.order.push(key);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "defaultDestroy",
    value: function defaultDestroy(value, key) {
      return null;
    }
  }]);
  return LRUCache;
}();