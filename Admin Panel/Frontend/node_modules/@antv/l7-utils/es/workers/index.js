import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { createWorker } from 'web-worker-helper';
import { lineModel } from "./lineModel";
import { pointFillModel } from "./pointFillModel";
import { polygonFillModel } from "./polygonFillModel";

// current support worker
export var WorkerSourceMap = {
  pointFill: pointFillModel,
  line: lineModel,
  polygonFill: polygonFillModel
};
var workerTypes = _objectSpread({}, WorkerSourceMap);
function worker(_x) {
  return _worker.apply(this, arguments);
}
function _worker() {
  _worker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var workerType, data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          workerType = _ref.workerType, data = _ref.data;
          if (!workerTypes[workerType]) {
            _context.next = 3;
            break;
          }
          return _context.abrupt("return", workerTypes[workerType](data));
        case 3:
          return _context.abrupt("return", Promise.reject(new Error("Worker with type \"".concat(workerType, "\" non-existent."))));
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _worker.apply(this, arguments);
}
createWorker(worker);

// export default createWorker(worker);
export { createWorker, worker };