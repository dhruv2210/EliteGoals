import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-nocheck
// tslint:disable
import { $document } from "../document";
import { Event } from "../Event";
import { getCanvas } from "../register";
var PointerEvent = /*#__PURE__*/function (_Event) {
  _inherits(PointerEvent, _Event);
  var _super = _createSuper(PointerEvent);
  function PointerEvent(type) {
    var _this;
    _classCallCheck(this, PointerEvent);
    _this = _super.call(this, type);
    _this.target = getCanvas();
    _this.currentTarget = getCanvas();
    return _this;
  }
  return _createClass(PointerEvent);
}(Event);
var CLONE_PROPS = [
// MouseEvent
'bubbles', 'cancelable', 'view', 'detail', 'screenX', 'screenY', 'clientX', 'clientY', 'ctrlKey', 'altKey', 'shiftKey', 'metaKey', 'button', 'relatedTarget',
// PointerEvent
'pointerId', 'width', 'height', 'pressure', 'tiltX', 'tiltY', 'pointerType', 'hwTimestamp', 'isPrimary',
// event instance
'pageX', 'pageY', 'timeStamp'];
var CLONE_DEFAULTS = [
// MouseEvent
false, false, null, null, 0, 0, 0, 0, false, false, false, false, 0, null,
// DOM Level 3
0,
// PointerEvent
0, 0, 0, 0, 0, 0, '', 0, false,
// event instance
0, 0, 0];
var POINTER_TYPE = 'touch';
function touchToPointer(type, touch, rawEvent) {
  var e = new PointerEvent(type);
  for (var i = 0; i < CLONE_PROPS.length; i++) {
    var p = CLONE_PROPS[i];
    e[p] = touch[p] || CLONE_DEFAULTS[i];
  }
  e.type = type;
  e.target = getCanvas();
  e.currentTarget = getCanvas();
  e.buttons = typeToButtons(type);
  e.which = e.buttons;
  e.pointerId = (touch.identifier || 0) + 2;
  e.bubbles = true;
  e.cancelable = true;
  // e.detail = this.clickCount;
  e.button = 0;
  e.width = (touch.radiusX || 0.5) * 2;
  e.height = (touch.radiusY || 0.5) * 2;
  e.pressure = touch.force || 0.5;
  e.isPrimary = isPrimaryPointer(touch);
  e.pointerType = POINTER_TYPE;

  // forward modifier keys
  e.altKey = rawEvent.altKey;
  e.ctrlKey = rawEvent.ctrlKey;
  e.metaKey = rawEvent.metaKey;
  e.shiftKey = rawEvent.shiftKey;
  if (rawEvent.preventDefault) {
    e.preventDefault = function () {
      rawEvent.preventDefault();
    };
  }
  return e;
}
function typeToButtons(type) {
  var ret = 0;
  if (type === 'touchstart' || type === 'touchmove' || type === 'pointerdown' || type === 'pointermove') {
    ret = 1;
  }
  return ret;
}
var firstPointer = null;
function isPrimaryPointer(touch) {
  return firstPointer === touch.identifier;
}
function setPrimaryPointer(touch) {
  if (firstPointer === null) {
    firstPointer = touch.identifier;
  }
}
function removePrimaryPointer(touch) {
  if (firstPointer === touch.identifier) {
    firstPointer = null;
  }
}
function eventHandlerFactory(type) {
  return function (rawEvent) {
    var changedTouches = rawEvent.changedTouches;
    for (var i = 0; i < changedTouches.length; i++) {
      var touch = changedTouches[i];
      if (i === 0 && type === 'pointerdown') {
        setPrimaryPointer(touch);
      } else if (type === 'pointerup' || type === 'pointercancel') {
        removePrimaryPointer(touch);
      }
      var event = touchToPointer(type, touch, rawEvent);
      $document.dispatchEvent(event);
    }
  };
}
var dispatchPointerDown = eventHandlerFactory('pointerdown');
var dispatchPointerMove = eventHandlerFactory('pointermove');
var dispatchPointerUp = eventHandlerFactory('pointerup');
export { dispatchPointerDown, dispatchPointerMove, dispatchPointerUp };