import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-nocheck
// tslint:disable
import { Element } from "./Element";
import * as Mixin from "./util/mixin";
function noop() {}
export var HTMLElement = /*#__PURE__*/function (_Element) {
  _inherits(HTMLElement, _Element);
  var _super = _createSuper(HTMLElement);
  function HTMLElement() {
    var _this;
    var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var level = arguments.length > 1 ? arguments[1] : undefined;
    _classCallCheck(this, HTMLElement);
    _this = _super.call(this);
    _this.className = '';
    _this.children = [];
    _this.focus = noop;
    _this.blur = noop;
    _this.insertBefore = noop;
    _this.appendChild = noop;
    _this.removeChild = noop;
    _this.remove = noop;
    _this.innerHTML = '';
    _this.tagName = tagName.toUpperCase();
    Mixin.parentNode(_assertThisInitialized(_this), level);
    Mixin.style(_assertThisInitialized(_this));
    Mixin.classList(_assertThisInitialized(_this));
    Mixin.clientRegion(_assertThisInitialized(_this));
    Mixin.offsetRegion(_assertThisInitialized(_this));
    Mixin.scrollRegion(_assertThisInitialized(_this));
    return _this;
  }
  return _createClass(HTMLElement);
}(Element);