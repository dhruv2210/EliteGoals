import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-nocheck
// tslint:disable
import EventTarget from "./EventTarget";
var _requestHeader = new Map();
var _responseHeader = new Map();
var _requestTask = new Map();
var contentTypes = {
  json: 'application/json',
  text: 'application/text',
  arraybuffer: 'application/octet-stream'
};
function _triggerEvent(type) {
  var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    target: this
  };
  if (typeof this["on".concat(type)] === 'function') {
    this["on".concat(type)].call(this, event);
  }
}
function _changeReadyState(readyState) {
  var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    readyState: readyState
  };
  this.readyState = readyState;
  _triggerEvent.call(this, 'readystatechange', event);
}
export var $XMLHttpRequest = /*#__PURE__*/function (_EventTarget) {
  _inherits($XMLHttpRequest, _EventTarget);
  var _super = _createSuper($XMLHttpRequest);
  function $XMLHttpRequest() {
    var _this;
    _classCallCheck(this, $XMLHttpRequest);
    _this = _super.call(this);
    _this.onabort = null;
    _this.onerror = null;
    _this.onload = null;
    _this.onloadstart = null;
    _this.onprogress = null;
    _this.ontimeout = null;
    _this.onloadend = null;
    _this.onreadystatechange = null;
    _this.readyState = 0;
    _this.response = null;
    _this.responseText = null;
    _this._responseType = 'text';
    _this.responseXML = null;
    _this.status = 0;
    _this.statusText = '';
    _this.upload = {};
    _this.withCredentials = false;
    _requestHeader.set('requestHeader', {
      'content-type': 'application/x-www-form-urlencoded'
    });
    return _this;
  }
  _createClass($XMLHttpRequest, [{
    key: "responseType",
    set: function set(type) {
      this._responseType = type;
    }
  }, {
    key: "abort",
    value: function abort() {
      var myRequestTask = _requestTask.get('requestTask');
      if (myRequestTask) {
        myRequestTask.abort();
      }
    }
  }, {
    key: "getAllResponseHeaders",
    value: function getAllResponseHeaders() {
      var responseHeader = _responseHeader.get('responseHeader');
      return Object.keys(responseHeader).map(function (header) {
        return "".concat(header, ": ").concat(responseHeader[header]);
      }).join('\n');
    }
  }, {
    key: "getResponseHeader",
    value: function getResponseHeader(header) {
      return _responseHeader.get('responseHeader')[header];
    }
  }, {
    key: "open",
    value: function open(method, url /* GET/POST*/, flag) {
      this._method = method;
      this._url = url;
      // _changeReadyState.call(this, XMLHttpRequest.OPENED);
    }
  }, {
    key: "overrideMimeType",
    value: function overrideMimeType() {}
  }, {
    key: "send",
    value: function send() {
      var $data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    } // if (this.readyState !== XMLHttpRequest.OPENED) {
    //   throw new Error(
    //     "Failed to execute 'send' on 'XMLHttpRequest': The object's state must be OPENED.",
    //   );
    // } else {
    //   const url = this._url;
    //   const header = _requestHeader.get('requestHeader');
    //   const responseType = this._responseType;
    //   if (contentTypes[responseType]) {
    //     header['content-type'] = contentTypes[responseType];
    //   }
    //   delete this.response;
    //   this.response = null;
    //   const onSuccess = ({ data, status, headers }) => {
    //     // status = status === undefined ? 200 : status;
    //     // try {
    //     //   if (
    //     //     data == null ||
    //     //     (data instanceof ArrayBuffer && data.byteLength == 0)
    //     //   ) {
    //     //     status = 404;
    //     //   }
    //     // } catch (e) {}
    //     // this.status = status;
    //     // if (headers) {
    //     //   _responseHeader.set('responseHeader', headers);
    //     // }
    //     // _triggerEvent.call(this, 'loadstart');
    //     // // _changeReadyState.call(this, XMLHttpRequest.HEADERS_RECEIVED);
    //     // // _changeReadyState.call(this, XMLHttpRequest.LOADING);
    //     // this.response = data;
    //     // if (data instanceof ArrayBuffer) {
    //     //   // TODO temporary solution, fix native gc error.
    //     //   this.response = data.slice(0);
    //     //   Object.defineProperty(this, 'responseText', {
    //     //     enumerable: true,
    //     //     configurable: true,
    //     //     get() {
    //     //       throw new Error(
    //     //         'InvalidStateError : responseType is ' + this._responseType,
    //     //       );
    //     //     },
    //     //   });
    //     // } else {
    //     //   this.responseText = data;
    //     // }
    //     // _changeReadyState.call(this, XMLHttpRequest.DONE);
    //     // _triggerEvent.call(this, 'load');
    //     // _triggerEvent.call(this, 'loadend');
    //   };
    //   const onFail = (e) => {
    //     const errMsg = e.message || e.errorMessage;
    //     // TODO 规范错误
    //     if (!errMsg) {
    //       return;
    //     }
    //     if (errMsg.indexOf('abort') !== -1) {
    //       _triggerEvent.call(this, 'abort', {
    //         message: errMsg + this._url,
    //       });
    //     } else {
    //       _triggerEvent.call(this, 'error', {
    //         message: errMsg + this._url,
    //       });
    //     }
    //     _triggerEvent.call(this, 'loadend');
    //   };
    //   const requestTask = my.request({
    //     $data,
    //     url,
    //     method: this._method,
    //     timeout: this.timeout ? this.timeout : 30000,
    //     headers: header,
    //     dataType: responseType,
    //     success: onSuccess,
    //     fail: onFail,
    //   });
    //   _requestTask.set('requestTask', requestTask);
    // }
  }, {
    key: "setRequestHeader",
    value: function setRequestHeader(header, value) {
      var myHeader = _requestHeader.get('requestHeader');
      myHeader[header] = value;
      _requestHeader.set('requestHeader', myHeader);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      var _this2 = this;
      if (typeof listener !== 'function') {
        return;
      }
      this['on' + type] = function () {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        event.target = event.target || _this2;
        listener.call(_this2, event);
      };
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, listener) {
      if (this['on' + type] === listener) {
        this['on' + type] = null;
      }
    }
  }]);
  return $XMLHttpRequest;
}(EventTarget);

// TODO 没法模拟 HEADERS_RECEIVED 和 LOADING 两个状态
$XMLHttpRequest.UNSEND = 0;
$XMLHttpRequest.OPENED = 1;
$XMLHttpRequest.HEADERS_RECEIVED = 2;
$XMLHttpRequest.LOADING = 3;
$XMLHttpRequest.DONE = 4;