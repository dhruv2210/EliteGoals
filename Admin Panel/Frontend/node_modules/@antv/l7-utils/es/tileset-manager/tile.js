import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import bboxPolygon from '@turf/bbox-polygon';
import { EventEmitter } from 'eventemitter3';
import { LoadTileDataStatus } from "./types";
import { getTileWarpXY, tileToBounds } from "./utils/lonlat-tile";
/**
 * 单个瓦片
 * 负责瓦片数据加载、缓存数据、缓存图层
 */
export var SourceTile = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SourceTile, _EventEmitter);
  var _super = _createSuper(SourceTile);
  // 瓦片索引

  // 循环加载瓦片

  // 瓦片大小

  // 是否可以见

  // 是否是当前层级的瓦片

  // 是否可以见发生变化

  // 瓦片的父级瓦片

  // 瓦片的子级瓦片

  // 瓦片数据

  // 瓦片属性

  // 瓦片序号

  function SourceTile(options) {
    var _this;
    _classCallCheck(this, SourceTile);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "tileSize", 256);
    _defineProperty(_assertThisInitialized(_this), "isVisible", false);
    _defineProperty(_assertThisInitialized(_this), "isCurrent", false);
    _defineProperty(_assertThisInitialized(_this), "isVisibleChange", false);
    _defineProperty(_assertThisInitialized(_this), "loadedLayers", 0);
    _defineProperty(_assertThisInitialized(_this), "isLayerLoaded", false);
    _defineProperty(_assertThisInitialized(_this), "isLoad", false);
    _defineProperty(_assertThisInitialized(_this), "isChildLoad", false);
    _defineProperty(_assertThisInitialized(_this), "parent", null);
    _defineProperty(_assertThisInitialized(_this), "children", []);
    _defineProperty(_assertThisInitialized(_this), "data", null);
    _defineProperty(_assertThisInitialized(_this), "properties", {});
    _defineProperty(_assertThisInitialized(_this), "loadDataId", 0);
    var x = options.x,
      y = options.y,
      z = options.z,
      tileSize = options.tileSize,
      _options$warp = options.warp,
      warp = _options$warp === void 0 ? true : _options$warp;
    _this.x = x;
    _this.y = y;
    _this.z = z;
    _this.warp = warp || true;
    _this.tileSize = tileSize;
    return _this;
  }

  // 是否正在请求瓦片
  _createClass(SourceTile, [{
    key: "isLoading",
    get: function get() {
      return this.loadStatus === LoadTileDataStatus.Loading;
    }

    // 是否瓦片请求成功
  }, {
    key: "isLoaded",
    get: function get() {
      return this.loadStatus === LoadTileDataStatus.Loaded;
    }

    // 是否瓦片请求失败
  }, {
    key: "isFailure",
    get: function get() {
      return this.loadStatus === LoadTileDataStatus.Failure;
    }
  }, {
    key: "setTileLayerLoaded",
    value: function setTileLayerLoaded() {
      this.isLayerLoaded = true;
    }

    // 是否瓦片请求被取消
  }, {
    key: "isCancelled",
    get: function get() {
      return this.loadStatus === LoadTileDataStatus.Cancelled;
    }

    // 是否数据请求结束
  }, {
    key: "isDone",
    get: function get() {
      return [LoadTileDataStatus.Loaded, LoadTileDataStatus.Cancelled, LoadTileDataStatus.Failure].includes(this.loadStatus);
    }

    // 瓦片的经纬度边界
  }, {
    key: "bounds",
    get: function get() {
      return tileToBounds(this.x, this.y, this.z);
    }

    // 瓦片边界面
  }, {
    key: "bboxPolygon",
    get: function get() {
      var _this$bounds = _slicedToArray(this.bounds, 4),
        minLng = _this$bounds[0],
        minLat = _this$bounds[1],
        maxLng = _this$bounds[2],
        maxLat = _this$bounds[3];
      var center = [(maxLng - minLng) / 2, (maxLat - minLat) / 2];
      var polygon = bboxPolygon(this.bounds, {
        properties: {
          key: this.key,
          id: this.key,
          bbox: this.bounds,
          center: center,
          meta: "\n      ".concat(this.key, "\n      ")
          // ${this.bbox.slice(0, 2)}
          // ${this.bbox.slice(2)}
        }
      });

      return polygon;
    }

    // 瓦片的 key
  }, {
    key: "key",
    get: function get() {
      var key = "".concat(this.x, "_").concat(this.y, "_").concat(this.z);
      return key;
    }
  }, {
    key: "layerLoad",
    value: function layerLoad() {
      this.loadedLayers++;
      this.emit('layerLoaded');
    }
    // 请求瓦片数据
  }, {
    key: "loadData",
    value: function () {
      var _loadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
        var getData, onLoad, onError, loadDataId, tileData, error, x, y, z, bounds, tileSize, warp, _getTileWarpXY, warpX, warpY, signal, params;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              getData = _ref.getData, onLoad = _ref.onLoad, onError = _ref.onError;
              this.loadDataId++;
              loadDataId = this.loadDataId; // 如果重复请求，执行最新请求
              if (this.isLoading) {
                this.abortLoad();
              }
              this.abortController = new AbortController();
              this.loadStatus = LoadTileDataStatus.Loading;
              tileData = null;
              _context.prev = 7;
              x = this.x, y = this.y, z = this.z, bounds = this.bounds, tileSize = this.tileSize, warp = this.warp; // wrap
              _getTileWarpXY = getTileWarpXY(x, y, z, warp), warpX = _getTileWarpXY.warpX, warpY = _getTileWarpXY.warpY;
              signal = this.abortController.signal;
              params = {
                x: warpX,
                y: warpY,
                z: z,
                bounds: bounds,
                tileSize: tileSize,
                signal: signal,
                warp: warp
              };
              _context.next = 14;
              return getData(params, this);
            case 14:
              tileData = _context.sent;
              _context.next = 20;
              break;
            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](7);
              error = _context.t0;
            case 20:
              if (!(loadDataId !== this.loadDataId)) {
                _context.next = 22;
                break;
              }
              return _context.abrupt("return");
            case 22:
              if (!(this.isCancelled && !tileData)) {
                _context.next = 24;
                break;
              }
              return _context.abrupt("return");
            case 24:
              if (!(error || !tileData)) {
                _context.next = 28;
                break;
              }
              this.loadStatus = LoadTileDataStatus.Failure;
              onError(error, this);
              return _context.abrupt("return");
            case 28:
              this.loadStatus = LoadTileDataStatus.Loaded;
              this.data = tileData;
              onLoad(this);
            case 31:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[7, 17]]);
      }));
      function loadData(_x) {
        return _loadData.apply(this, arguments);
      }
      return loadData;
    }() // 重新请求瓦片数据
  }, {
    key: "reloadData",
    value: function reloadData(params) {
      if (this.isLoading) {
        this.abortLoad();
      }
      this.loadData(params);
    }

    // 取消请求瓦片数据
  }, {
    key: "abortLoad",
    value: function abortLoad() {
      if (this.isLoaded || this.isCancelled) {
        return;
      }
      this.loadStatus = LoadTileDataStatus.Cancelled;
      this.abortController.abort();
      if (this.xhrCancel) {
        this.xhrCancel();
      }
    }
  }]);
  return SourceTile;
}(EventEmitter);