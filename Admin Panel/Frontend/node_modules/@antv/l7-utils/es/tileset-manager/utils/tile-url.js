import { tileToBounds } from "./lonlat-tile";
/*
 * 判断是否是一个合法的瓦片请求模版
 */
export function isURLTemplate(s) {
  return /(?=.*{z})(?=.*{x})(?=.*({y}|{-y}))/.test(s);
}

/**
 * https://github.com/openlayers/openlayers/blob/main/src/ol/tileurlfunction.js
 * @param {string} url URL.
 * @return {Array<string>} Array of urls.
 */
export function expandUrl(url) {
  var urls = [];
  var match = /\{([a-z])-([a-z])\}/.exec(url);
  if (match) {
    // char range
    var startCharCode = match[1].charCodeAt(0);
    var stopCharCode = match[2].charCodeAt(0);
    var charCode;
    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
      urls.push(url.replace(match[0], String.fromCharCode(charCode)));
    }
    return urls;
  }
  match = /\{(\d+)-(\d+)\}/.exec(url);
  if (match) {
    // number range
    var stop = parseInt(match[2], 10);
    for (var i = parseInt(match[1], 10); i <= stop; i++) {
      urls.push(url.replace(match[0], i.toString()));
    }
    return urls;
  }
  urls.push(url);
  return urls;
}

/*
 * 获取瓦片请求地址
 */
export function getURLFromTemplate(template, properties) {
  if (!template || !template.length) {
    throw new Error('url is not allowed to be empty');
  }
  var x = properties.x,
    y = properties.y,
    z = properties.z;
  var urls = expandUrl(template);
  var index = Math.abs(x + y) % urls.length;
  var url = urls[index];
  return url.replace(/\{x\}/g, x.toString()).replace(/\{y\}/g, y.toString()).replace(/\{z\}/g, z.toString()).replace(/\{bbox\}/g, tileToBounds(x, y, z).join(',')).replace(/\{-y\}/g, (Math.pow(2, z) - y - 1).toString());
}

/**
 * wmts url
 */

export function getWMTSURLFromTemplate(template, properties) {
  var x = properties.x,
    y = properties.y,
    z = properties.z,
    layer = properties.layer,
    _properties$version = properties.version,
    version = _properties$version === void 0 ? '1.0.0' : _properties$version,
    _properties$style = properties.style,
    style = _properties$style === void 0 ? 'default' : _properties$style,
    format = properties.format,
    _properties$service = properties.service,
    service = _properties$service === void 0 ? 'WMTS' : _properties$service,
    tileMatrixset = properties.tileMatrixset;
  var url = "".concat(template, "&SERVICE=").concat(service, "&REQUEST=GetTile&VERSION=").concat(version, "&LAYER=").concat(layer, "&STYLE=").concat(style, "&TILEMATRIXSET=").concat(tileMatrixset, "&FORMAT=").concat(format, "&TILECOL=").concat(x, "&TILEROW=").concat(y, "&TILEMATRIX=").concat(z);
  return url;
}