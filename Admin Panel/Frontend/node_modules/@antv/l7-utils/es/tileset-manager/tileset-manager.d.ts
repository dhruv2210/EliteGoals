import EventEmitter from 'eventemitter3';
import { SourceTile } from './tile';
import { TilesetManagerOptions } from './types';
/**
 * 管理瓦片数据
 */
export declare class TilesetManager extends EventEmitter {
    get isLoaded(): boolean;
    get tiles(): SourceTile[];
    currentTiles: SourceTile[];
    protected options: TilesetManagerOptions;
    private cacheTiles;
    private lastViewStates?;
    constructor(options: Partial<TilesetManagerOptions>);
    updateOptions(options: Partial<TilesetManagerOptions>): void;
    throttleUpdate: import("lodash").DebouncedFunc<(zoom: any, latLonBounds: any) => void>;
    update(zoom: number, latLonBounds: [number, number, number, number]): void;
    reloadAll(): void;
    pruneRequests(): void;
    getTileByLngLat(lng: number, lat: number, zoom: number): SourceTile;
    clear(): void;
    destroy(): void;
    updateTileVisible(): void;
    protected getTileIndices(zoom: number, latLonBounds: [number, number, number, number]): {
        x: number;
        y: number;
        z: number;
    }[];
    private onTileLoad;
    private onTileError;
    private onTileUnload;
    private getTileId;
    private getTile;
    private createTile;
    private resizeCacheTiles;
    private rebuildTileTree;
    private getNearestAncestor;
}
