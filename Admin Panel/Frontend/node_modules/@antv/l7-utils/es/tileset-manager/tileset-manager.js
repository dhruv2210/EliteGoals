import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import EventEmitter from 'eventemitter3';
import { throttle } from 'lodash';
import { BOUNDS_BUFFER_SCALE, DEFAULT_CACHE_SCALE, DEFAULT_EXTENT, NOOP, UPDATE_TILE_STRATEGIES } from "./const";
import { SourceTile } from "./tile";
import { UpdateTileStrategy } from "./types";
import { getLatLonBoundsBuffer, isLatLonBoundsContains } from "./utils/bound-buffer";
import { getTileIndices as _getTileIndices, osmLonLat2TileXY } from "./utils/lonlat-tile";

/**
 * 管理瓦片数据
 */
export var TilesetManager = /*#__PURE__*/function (_EventEmitter) {
  _inherits(TilesetManager, _EventEmitter);
  var _super = _createSuper(TilesetManager);
  function TilesetManager(options) {
    var _this;
    _classCallCheck(this, TilesetManager);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "currentTiles", []);
    _defineProperty(_assertThisInitialized(_this), "cacheTiles", new Map());
    _defineProperty(_assertThisInitialized(_this), "throttleUpdate", throttle(function (zoom, latLonBounds) {
      _this.update(zoom, latLonBounds);
    }, 16));
    _defineProperty(_assertThisInitialized(_this), "onTileLoad", function (tile) {
      _this.emit('tile-loaded', tile);
      _this.updateTileVisible();
    });
    _defineProperty(_assertThisInitialized(_this), "onTileError", function (error, tile) {
      _this.emit('tile-error', {
        error: error,
        tile: tile
      });
      _this.updateTileVisible();
    });
    _defineProperty(_assertThisInitialized(_this), "onTileUnload", function (tile) {
      _this.emit('tile-unload', tile);
    });
    _this.options = {
      tileSize: 256,
      minZoom: 0,
      maxZoom: Infinity,
      zoomOffset: 0,
      extent: DEFAULT_EXTENT,
      getTileData: NOOP,
      warp: true,
      // TODO 更新策略
      updateStrategy: UpdateTileStrategy.Overlap
    };
    _this.updateOptions(options);
    return _this;
  }

  // 更新配置项
  _createClass(TilesetManager, [{
    key: "isLoaded",
    get: function get() {
      return this.currentTiles.every(function (tile) {
        return tile.isDone;
      });
    }
    // 缓存的瓦片数组
  }, {
    key: "tiles",
    get: function get() {
      // 通过 zoom 层级排序，最小的层级在上面
      var tiles = Array.from(this.cacheTiles.values()).sort(function (t1, t2) {
        return t1.z - t2.z;
      });
      return tiles;
    }
    // 当前层级的瓦片
  }, {
    key: "updateOptions",
    value: function updateOptions(options) {
      var minZoom = options.minZoom === undefined ? this.options.minZoom : Math.ceil(options.minZoom);
      var maxZoom = options.maxZoom === undefined ? this.options.maxZoom : Math.floor(options.maxZoom);
      this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {
        minZoom: minZoom,
        maxZoom: maxZoom
      });
    }
  }, {
    key: "update",
    value:
    // 更新
    // 1.瓦片序号发生改变 2.瓦片新增 3.瓦片显隐控制
    function update(zoom, latLonBounds) {
      var _this2 = this;
      // 校验层级，向上取整
      var verifyZoom = Math.max(0, Math.ceil(zoom));
      if (this.lastViewStates && this.lastViewStates.zoom === verifyZoom && isLatLonBoundsContains(this.lastViewStates.latLonBoundsBuffer, latLonBounds)) {
        return;
      }

      // 扩大缓存区的边界
      var latLonBoundsBuffer = getLatLonBoundsBuffer(latLonBounds, BOUNDS_BUFFER_SCALE);
      this.lastViewStates = {
        zoom: verifyZoom,
        latLonBounds: latLonBounds,
        latLonBoundsBuffer: latLonBoundsBuffer
      };
      var isAddTile = false;
      var tileIndices = this.getTileIndices(verifyZoom, latLonBoundsBuffer).filter(function (tile) {
        // 处理数据 warp
        return _this2.options.warp || tile.x >= 0 && tile.x < Math.pow(2, verifyZoom);
      });
      this.currentTiles = tileIndices.map(function (_ref) {
        var x = _ref.x,
          y = _ref.y,
          z = _ref.z;
        var tile = _this2.getTile(x, y, z);
        if (tile) {
          var _tile, _tile2;
          var needsReload = ((_tile = tile) === null || _tile === void 0 ? void 0 : _tile.isFailure) || ((_tile2 = tile) === null || _tile2 === void 0 ? void 0 : _tile2.isCancelled);
          if (needsReload) {
            tile.loadData({
              getData: _this2.options.getTileData,
              onLoad: _this2.onTileLoad,
              onError: _this2.onTileError
            });
          }
          return tile;
        }
        tile = _this2.createTile(x, y, z);
        isAddTile = true;
        return tile;
      });
      if (isAddTile) {
        // 更新缓存
        this.resizeCacheTiles();
      }
      // 更新瓦片显示状态
      this.updateTileVisible();
      // 取消滞留请求中的瓦片
      this.pruneRequests();
    }

    // 重新加载瓦片
  }, {
    key: "reloadAll",
    value: function reloadAll() {
      var _iterator = _createForOfIteratorHelper(this.cacheTiles),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
            tileId = _step$value[0],
            tile = _step$value[1];
          if (!this.currentTiles.includes(tile)) {
            this.cacheTiles.delete(tileId);
            this.onTileUnload(tile);
            return;
          }
          this.onTileUnload(tile);
          tile.loadData({
            getData: this.options.getTileData,
            onLoad: this.onTileLoad,
            onError: this.onTileError
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    // 取消滞留请求中的瓦片
  }, {
    key: "pruneRequests",
    value: function pruneRequests() {
      var abortCandidates = [];
      var _iterator2 = _createForOfIteratorHelper(this.cacheTiles.values()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _tile3 = _step2.value;
          if (_tile3.isLoading) {
            if (!_tile3.isCurrent && !_tile3.isVisible) {
              abortCandidates.push(_tile3);
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      while (abortCandidates.length > 0) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        var tile = abortCandidates.shift();
        tile.abortLoad();
      }
    }
  }, {
    key: "getTileByLngLat",
    value: function getTileByLngLat(lng, lat, zoom) {
      var zoomOffset = this.options.zoomOffset;
      var z = Math.ceil(zoom) + zoomOffset;
      var xy = osmLonLat2TileXY(lng, lat, z);
      var tiles = this.tiles.filter(function (t) {
        return t.key === "".concat(xy[0], "_").concat(xy[1], "_").concat(z);
      });
      return tiles[0];
    }

    // 摧毁
  }, {
    key: "clear",
    value: function clear() {
      var _iterator3 = _createForOfIteratorHelper(this.cacheTiles.values()),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var tile = _step3.value;
          if (tile.isLoading) {
            tile.abortLoad();
          } else {
            this.onTileUnload(tile);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this.lastViewStates = undefined;
      this.cacheTiles.clear();
      this.currentTiles = [];
    }

    // 摧毁
  }, {
    key: "destroy",
    value: function destroy() {
      this.clear();
      this.removeAllListeners();
    }

    // 更新瓦片显隐状态
  }, {
    key: "updateTileVisible",
    value: function updateTileVisible() {
      var updateStrategy = this.options.updateStrategy;
      var beforeVisible = new Map();
      // 重置显示状态
      var _iterator4 = _createForOfIteratorHelper(this.cacheTiles.values()),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var tile = _step4.value;
          // 存储已经显示的瓦片
          beforeVisible.set(tile.key, tile.isVisible);
          tile.isCurrent = false;
          tile.isVisible = false;
        }
        // 设置当前视野的瓦片为可见
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      var _iterator5 = _createForOfIteratorHelper(this.currentTiles),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _tile4 = _step5.value;
          _tile4.isCurrent = true;
          _tile4.isVisible = true;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      var tiles = Array.from(this.cacheTiles.values());
      if (typeof updateStrategy === 'function') {
        updateStrategy(tiles);
      } else {
        UPDATE_TILE_STRATEGIES[updateStrategy](tiles);
      }

      // 检查瓦片显示状态是否发生改变
      var isVisibleChange = false;
      Array.from(this.cacheTiles.values()).forEach(function (tile) {
        if (tile.isVisible !== beforeVisible.get(tile.key)) {
          tile.isVisibleChange = true;
          isVisibleChange = true;
        } else {
          tile.isVisibleChange = false;
        }
      });
      if (isVisibleChange) {
        this.emit('tile-update');
      }
    }

    // 获取当前视野层级瓦片的所有索引
  }, {
    key: "getTileIndices",
    value: function getTileIndices(zoom, latLonBounds) {
      var _this$options = this.options,
        tileSize = _this$options.tileSize,
        extent = _this$options.extent,
        zoomOffset = _this$options.zoomOffset;
      var maxZoom = Math.floor(this.options.maxZoom);
      var minZoom = Math.ceil(this.options.minZoom);
      var indices = _getTileIndices({
        maxZoom: maxZoom,
        minZoom: minZoom,
        zoomOffset: zoomOffset,
        tileSize: tileSize,
        zoom: zoom,
        latLonBounds: latLonBounds,
        extent: extent
      });
      return indices;
    }

    // 瓦片加载成功回调
  }, {
    key: "getTileId",
    value:
    // 获取瓦片 ID
    function getTileId(x, y, z) {
      var tileId = "".concat(x, ",").concat(y, ",").concat(z);
      return tileId;
    }

    // 获取瓦片
  }, {
    key: "getTile",
    value: function getTile(x, y, z) {
      var tileId = this.getTileId(x, y, z);
      var tile = this.cacheTiles.get(tileId);
      return tile;
    }

    // 创建瓦片
  }, {
    key: "createTile",
    value: function createTile(x, y, z) {
      var tileId = this.getTileId(x, y, z);
      var tile = new SourceTile({
        x: x,
        y: y,
        z: z,
        tileSize: this.options.tileSize,
        warp: this.options.warp
      });
      this.cacheTiles.set(tileId, tile);
      tile.loadData({
        getData: this.options.getTileData,
        onLoad: this.onTileLoad,
        onError: this.onTileError
      });
      return tile;
    }

    // 当缓存超过最大值时，清除不可见的瓦片
  }, {
    key: "resizeCacheTiles",
    value: function resizeCacheTiles() {
      var maxCacheSize = DEFAULT_CACHE_SCALE * this.currentTiles.length;
      var overflown = this.cacheTiles.size > maxCacheSize;
      if (overflown) {
        var _iterator6 = _createForOfIteratorHelper(this.cacheTiles),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _step6$value = _slicedToArray(_step6.value, 2),
              tileId = _step6$value[0],
              tile = _step6$value[1];
            if (!tile.isVisible && !this.currentTiles.includes(tile)) {
              this.cacheTiles.delete(tileId);
              this.onTileUnload(tile);
            }
            if (this.cacheTiles.size <= maxCacheSize) {
              break;
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
      // 缓存更新重新计算瓦片树
      this.rebuildTileTree();
    }

    // 重新计算瓦片树
  }, {
    key: "rebuildTileTree",
    value: function rebuildTileTree() {
      // 清空瓦片上的数据
      var _iterator7 = _createForOfIteratorHelper(this.cacheTiles.values()),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var tile = _step7.value;
          tile.parent = null;
          tile.children.length = 0;
        }

        // 重新计算瓦片上的关系树
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      var _iterator8 = _createForOfIteratorHelper(this.cacheTiles.values()),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _tile5 = _step8.value;
          var parent = this.getNearestAncestor(_tile5.x, _tile5.y, _tile5.z);
          _tile5.parent = parent;
          if (parent !== null && parent !== void 0 && parent.children) {
            parent.children.push(_tile5);
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }

    // 获取瓦片的最近上级的瓦片
  }, {
    key: "getNearestAncestor",
    value: function getNearestAncestor(x, y, z) {
      while (z > this.options.minZoom) {
        x = Math.floor(x / 2);
        y = Math.floor(y / 2);
        z = z - 1;
        var parent = this.getTile(x, y, z);
        if (parent) {
          return parent;
        }
      }
      return null;
    }
  }]);
  return TilesetManager;
}(EventEmitter);