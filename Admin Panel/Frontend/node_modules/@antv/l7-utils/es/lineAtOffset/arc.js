import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { amap2Project, amap2UnProject } from "../geo";
import { Version } from "../interface/map";
// arc
export function arcLineAtOffset(source, target, offset, thetaOffset, mapVersion) {
  var segmentNumber = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 30;
  var autoFit = arguments.length > 6 ? arguments[6] : undefined;
  var pointOffset = offset;
  if (autoFit) {
    // Tip: 自动偏移到线的节点位置
    pointOffset = Math.round(offset * (segmentNumber - 1)) / (segmentNumber - 1);
  }
  if (!thetaOffset) {
    return interpolate(source, target, pointOffset, 0.314, mapVersion);
  } else {
    return interpolate(source, target, pointOffset, thetaOffset, mapVersion);
  }
}
function bezier3(arr, t) {
  var ut = 1 - t;
  return (arr[0] * ut + arr[1] * t) * ut + (arr[1] * ut + arr[2] * t) * t;
}
function calDistance(p1, p2) {
  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
}
function midPoint(source, target, thetaOffset) {
  var center = [target[0] - source[0], target[1] - source[1]]; // target - source;
  var r = calDistance(center, [0, 0]);
  var theta = Math.atan2(center[1], center[0]);
  var r2 = r / 2.0 / Math.cos(thetaOffset);
  var theta2 = theta + thetaOffset;
  var mid = [r2 * Math.cos(theta2) + source[0], r2 * Math.sin(theta2) + source[1]];
  return mid;
}
function interpolate(source, target, offset, thetaOffset, mapVersion) {
  if (mapVersion === Version['GAODE2.x']) {
    // amap2
    var sourceFlat = amap2Project(source[0], source[1]);
    var targetFlat = amap2Project(target[0], target[1]);
    var mid = midPoint(sourceFlat, targetFlat, thetaOffset);
    var x = [sourceFlat[0], mid[0], targetFlat[0]];
    var y = [sourceFlat[1], mid[1], targetFlat[1]];
    return [].concat(_toConsumableArray(amap2UnProject(bezier3(x, offset), bezier3(y, offset))), [0]);
  } else {
    // amap
    var _mid = midPoint(source, target, thetaOffset);
    var _x = [source[0], _mid[0], target[0]];
    var _y = [source[1], _mid[1], target[1]];
    return [bezier3(_x, offset), bezier3(_y, offset), 0];
  }
}