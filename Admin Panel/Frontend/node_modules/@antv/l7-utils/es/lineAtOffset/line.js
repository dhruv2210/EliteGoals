export function pathLineAtOffset(coords, offset) {
  var totalDistance = 0;
  var cachePoints = [];
  for (var i = 0; i < coords.length - 1; i++) {
    var p1 = coords[i];
    var p2 = coords[i + 1];
    var distance = calDistance(p1, p2);
    var lastTotalDistance = totalDistance;
    totalDistance += distance;
    cachePoints.push({
      p1: p1,
      p2: p2,
      totalDistance: totalDistance,
      distance: distance,
      lastTotalDistance: lastTotalDistance
    });
  }
  var offsetDistance = totalDistance * offset;
  var lng;
  var lat;
  for (var _i = 0, _cachePoints = cachePoints; _i < _cachePoints.length; _i++) {
    var point = _cachePoints[_i];
    var currentDistance = point.totalDistance;
    if (currentDistance > offsetDistance) {
      var _p = point.p1;
      var _p2 = point.p2;
      var radius = (offsetDistance - point.lastTotalDistance) / point.distance;
      var offsetPoint = mixPoint(_p2, _p, radius);
      lng = offsetPoint[0];
      lat = offsetPoint[1];
      break;
    }
  }
  return {
    lng: lng,
    lat: lat,
    height: 0
  };
}
function mixPoint(p1, p2, r) {
  return [p1[0] * r + p2[0] * (1 - r), p1[1] * r + p2[1] * (1 - r)];
}
function calDistance(p1, p2) {
  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
}