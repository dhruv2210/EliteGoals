import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { arcLineAtOffset } from "./arc";
import { greatCircleLineAtOffset } from "./greatCircle";
import { pathLineAtOffset } from "./line";
export function lineAtOffset(source, option) {
  var featureId = option.featureId;
  var features = source.data.dataArray;
  if (typeof featureId === 'number') {
    features = features.filter(function (_ref) {
      var id = _ref.id;
      return id === featureId;
    });
  }
  return features.map(function (feature) {
    var position = getLineOffsetPosition(feature, option);
    return _objectSpread(_objectSpread({}, feature), position);
  });
}
export function lineAtOffsetAsyc(source, option) {
  return new Promise(function (resolve) {
    if (source.inited) {
      resolve(lineAtOffset(source, option));
    } else {
      source.once('update', function () {
        resolve(lineAtOffset(source, option));
      });
    }
  });
}
function getLineOffsetPosition(feature, option) {
  var offset = option.offset,
    shape = option.shape,
    thetaOffset = option.thetaOffset,
    mapVersion = option.mapVersion,
    _option$segmentNumber = option.segmentNumber,
    segmentNumber = _option$segmentNumber === void 0 ? 30 : _option$segmentNumber,
    _option$autoFit = option.autoFit,
    autoFit = _option$autoFit === void 0 ? true : _option$autoFit;
  var coordinates = feature.coordinates;
  if (shape === 'line') {
    return pathLineAtOffset(coordinates, offset);
  }
  var source = coordinates[0];
  var target = coordinates[1];
  var linetheatOffset = typeof thetaOffset === 'string' ? feature[thetaOffset] || 0 : thetaOffset;
  var calFunc;
  switch (shape) {
    case 'arc':
      calFunc = arcLineAtOffset;
      break;
    case 'greatcircle':
      calFunc = greatCircleLineAtOffset;
      break;
    default:
      calFunc = arcLineAtOffset;
  }
  var _calFunc = calFunc(source, target, offset, linetheatOffset, mapVersion, segmentNumber, autoFit),
    _calFunc2 = _slicedToArray(_calFunc, 3),
    lng = _calFunc2[0],
    lat = _calFunc2[1],
    height = _calFunc2[2];
  return {
    lng: lng,
    lat: lat,
    height: height
  };
}