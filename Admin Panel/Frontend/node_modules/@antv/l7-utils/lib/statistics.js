var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/statistics.ts
var statistics_exports = {};
__export(statistics_exports, {
  getColumn: () => getColumn,
  getSatByColumn: () => getSatByColumn,
  max: () => max,
  mean: () => mean,
  min: () => min,
  mode: () => mode,
  statMap: () => statMap,
  sum: () => sum
});
module.exports = __toCommonJS(statistics_exports);
function max(x) {
  if (x.length === 0) {
    throw new Error("max requires at least one data point");
  }
  let value = x[0];
  for (let i = 1; i < x.length; i++) {
    if (x[i] > value) {
      value = x[i];
    }
  }
  return value * 1;
}
function min(x) {
  if (x.length === 0) {
    throw new Error("min requires at least one data point");
  }
  let value = x[0];
  for (let i = 1; i < x.length; i++) {
    if (x[i] < value) {
      value = x[i];
    }
  }
  return value * 1;
}
function sum(x) {
  if (x.length === 0) {
    return 0;
  }
  let sumNum = x[0] * 1;
  for (let i = 1; i < x.length; i++) {
    sumNum += x[i] * 1;
  }
  return sumNum;
}
function mean(x) {
  if (x.length === 0) {
    throw new Error("mean requires at least one data point");
  }
  return sum(x) / x.length;
}
function mode(x) {
  if (x.length === 0) {
    throw new Error("mean requires at least one data point");
  }
  if (x.length < 3) {
    return x[0];
  }
  x.sort();
  let last = x[0];
  let value = NaN;
  let maxSeen = 0;
  let seenThis = 1;
  for (let i = 1; i < x.length + 1; i++) {
    if (x[i] !== last) {
      if (seenThis > maxSeen) {
        maxSeen = seenThis;
        value = last;
      }
      seenThis = 1;
      last = x[i];
    } else {
      seenThis++;
    }
  }
  return value * 1;
}
var statMap = {
  min,
  max,
  mean,
  sum,
  mode
};
function getColumn(data, columnName) {
  return data.map((item) => {
    return item[columnName];
  });
}
function getSatByColumn(type, column) {
  return statMap[type](column);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getColumn,
  getSatByColumn,
  max,
  mean,
  min,
  mode,
  statMap,
  sum
});
