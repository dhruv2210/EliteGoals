var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lineAtOffset/line.ts
var line_exports = {};
__export(line_exports, {
  pathLineAtOffset: () => pathLineAtOffset
});
module.exports = __toCommonJS(line_exports);
function pathLineAtOffset(coords, offset) {
  let totalDistance = 0;
  const cachePoints = [];
  for (let i = 0; i < coords.length - 1; i++) {
    const p1 = coords[i];
    const p2 = coords[i + 1];
    const distance = calDistance(p1, p2);
    const lastTotalDistance = totalDistance;
    totalDistance += distance;
    cachePoints.push({
      p1,
      p2,
      totalDistance,
      distance,
      lastTotalDistance
    });
  }
  const offsetDistance = totalDistance * offset;
  let lng;
  let lat;
  for (const point of cachePoints) {
    const currentDistance = point.totalDistance;
    if (currentDistance > offsetDistance) {
      const p1 = point.p1;
      const p2 = point.p2;
      const radius = (offsetDistance - point.lastTotalDistance) / point.distance;
      const offsetPoint = mixPoint(p2, p1, radius);
      lng = offsetPoint[0];
      lat = offsetPoint[1];
      break;
    }
  }
  return {
    lng,
    lat,
    height: 0
  };
}
function mixPoint(p1, p2, r) {
  return [p1[0] * r + p2[0] * (1 - r), p1[1] * r + p2[1] * (1 - r)];
}
function calDistance(p1, p2) {
  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  pathLineAtOffset
});
