var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/worker-helper/index.ts
var worker_helper_exports = {};
__export(worker_helper_exports, {
  WorkerSourceMap: () => import_workers.WorkerSourceMap,
  executeWorkerTask: () => executeWorkerTask,
  setL7WorkerSource: () => setL7WorkerSource
});
module.exports = __toCommonJS(worker_helper_exports);
var import_web_worker_helper = require("web-worker-helper");
var import_l7_utils_worker = __toESM(require("../../dist/l7-utils.worker.js"));
var import_workers = require("../workers");
var import_worker_map = require("./worker-map");
var L7_WORKER_NAME = "l7-worker";
var WORKER_MAX_CONCURRENCY = 3;
var WORKER_REUSE = true;
function setL7WorkerSource(workerSource) {
  (0, import_worker_map.registerWorkerSource)(L7_WORKER_NAME, workerSource);
}
function getL7WorkerSource() {
  const workerSource = (0, import_worker_map.getWorkerSource)(L7_WORKER_NAME);
  if (!workerSource) {
    throw new Error(`get worker failed by workerName: ${L7_WORKER_NAME}.`);
  }
  return workerSource;
}
async function executeWorkerTask(workerType, data) {
  const source = getL7WorkerSource();
  const workerFarm = import_web_worker_helper.WorkerFarm.getWorkerFarm({
    maxConcurrency: WORKER_MAX_CONCURRENCY,
    reuseWorkers: WORKER_REUSE
  });
  const workerPool = workerFarm.getWorkerPool({ name: L7_WORKER_NAME, source });
  const job = await workerPool.startJob(
    L7_WORKER_NAME,
    (myJob, type, myData) => myJob.done(myData)
  );
  job.postMessage("process", { input: { workerType, data } });
  const result = await job.result;
  return result.result;
}
setL7WorkerSource(import_l7_utils_worker.default);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WorkerSourceMap,
  executeWorkerTask,
  setL7WorkerSource
});
