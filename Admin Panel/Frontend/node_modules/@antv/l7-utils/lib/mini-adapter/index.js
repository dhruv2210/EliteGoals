var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/index.ts
var mini_adapter_exports = {};
__export(mini_adapter_exports, {
  $XMLHttpRequest: () => $XMLHttpRequest,
  $location: () => $location,
  $window: () => $window,
  isMini: () => isMini,
  isMiniAli: () => isMiniAli,
  isMiniScene: () => isMiniScene,
  isWeChatMiniProgram: () => isWeChatMiniProgram,
  miniWindow: () => miniWindow,
  setMiniScene: () => setMiniScene
});
module.exports = __toCommonJS(mini_adapter_exports);
var import_atob = require("./atob");
var import_blob = require("./blob");
var import_devicePixelRatio = __toESM(require("./devicePixelRatio"));
var import_document = require("./document");
var import_Element = require("./Element");
var import_Event = require("./Event");
var import_EventTarget = __toESM(require("./EventTarget"));
var import_HTMLCanvasElement = require("./HTMLCanvasElement");
var import_HTMLElement = require("./HTMLElement");
var import_HTMLMediaElement = require("./HTMLMediaElement");
var import_HTMLVideoElement = require("./HTMLVideoElement");
var import_Image = require("./Image");
var import_ImageData = require("./ImageData");
var import_location = require("./location");
var import_navigator = require("./navigator");
var import_Node = require("./Node");
var import_performance = require("./performance");
var import_requestAnimationFrame = require("./requestAnimationFrame");
var import_screen = require("./screen");
var import_url = require("./url");
var import_WebGL = require("./WebGL");
var import_WebGL2 = require("./WebGL2");
var import_XMLHttpRequest = require("./XMLHttpRequest");
var import_global = require("./global");
__reExport(mini_adapter_exports, require("./EventIniter/index"), module.exports);
var isMiniScene = false;
function setMiniScene(flag) {
  isMiniScene = flag;
}
var isMiniAli = (
  // @ts-ignore
  typeof my !== "undefined" && !!my && typeof my.showToast === "function" && my.isFRM !== true
);
var isWeChatMiniProgram = typeof wx !== "undefined" && wx !== null && (typeof wx.request !== "undefined" || typeof wx.miniProgram !== "undefined");
var isMini = (isMiniAli || isWeChatMiniProgram) && isMiniScene;
var miniWindow = {
  atob: import_atob.atob,
  btoa: import_atob.btoa,
  devicePixelRatio: import_devicePixelRatio.default,
  Blob: import_blob.Blob,
  document: import_document.$document,
  Element: import_Element.Element,
  Event: import_Event.Event,
  EventTarget: import_EventTarget.default,
  HTMLCanvasElement: import_HTMLCanvasElement.HTMLCanvasElement,
  HTMLElement: import_HTMLElement.HTMLElement,
  HTMLMediaElement: import_HTMLMediaElement.HTMLMediaElement,
  HTMLVideoElement: import_HTMLVideoElement.HTMLVideoElement,
  Image: import_Image.Image,
  ImageData: import_ImageData.ImageData,
  navigator: import_navigator.navigator,
  Node: import_Node.Node,
  requestAnimationFrame: import_requestAnimationFrame.requestAnimationFrame,
  cancelAnimationFrame: import_requestAnimationFrame.cancelAnimationFrame,
  screen: import_screen.screen,
  XMLHttpRequest: import_XMLHttpRequest.$XMLHttpRequest,
  performance: import_performance.performance,
  URL: import_url.URL,
  WebGLRenderingContext: import_WebGL.WebGLRenderingContext,
  WebGL2RenderingContext: import_WebGL2.WebGL2RenderingContext,
  addEventListener(type, listener, options = {}) {
    import_document.$document.addEventListener(type, listener, options);
  },
  removeEventListener(type, listener, options) {
    import_document.$document.removeEventListener(type, listener);
  },
  dispatchEvent(event) {
    import_document.$document.dispatchEvent(event);
  },
  innerWidth: import_screen.screen.availWidth,
  innerHeight: import_screen.screen.availHeight,
  setTimeout,
  clearTimeout,
  setInterval,
  clearInterval
};
var $window = isMini ? miniWindow : import_global.globalWindow;
var $XMLHttpRequest = isMini ? import_XMLHttpRequest.$XMLHttpRequest : import_global.globalWindow.XMLHttpRequest;
var $location = isMini ? import_location.$location : import_global.globalWindow.location;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  $XMLHttpRequest,
  $location,
  $window,
  isMini,
  isMiniAli,
  isMiniScene,
  isWeChatMiniProgram,
  miniWindow,
  setMiniScene
});
