var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/blob.ts
var blob_exports = {};
__export(blob_exports, {
  Blob: () => Blob
});
module.exports = __toCommonJS(blob_exports);
var Blob = class {
  /**
   *
   * @param buffers only support zero index
   * @param type mimetype image/png image/webp...
   */
  constructor(buffers, type) {
    this.buffers = buffers;
    this.type = type;
  }
  arraybuffer() {
    return Promise.resolve(this.buffers[0]);
  }
  stream() {
    throw new Error("not implemented");
  }
  text() {
    throw new Error("not implemented");
  }
  slice(start, end, contentType) {
    throw new Error("not implemented");
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Blob
});
