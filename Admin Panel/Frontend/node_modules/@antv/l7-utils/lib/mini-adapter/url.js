var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/url.ts
var url_exports = {};
__export(url_exports, {
  URL: () => URL
});
module.exports = __toCommonJS(url_exports);
var import_atob = require("./atob");
var URL = class {
  /**
   * fake createObject, use base64 instead
   * @param blob
   */
  static createObjectURL(blob) {
    const buffer = blob.buffers[0];
    const type = blob.type;
    const base64 = _arrayBufferToBase64(buffer);
    const prefix = `data:${type};base64, `;
    return prefix + base64;
  }
  // todo: 完善URL对象
  constructor(url, host = "") {
    if (url.indexOf("http://") == 0 || url.indexOf("https://") == 0) {
      this.href = url;
      return;
    }
    this.href = host + url;
  }
};
function _arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return (0, import_atob.btoa)(binary);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  URL
});
