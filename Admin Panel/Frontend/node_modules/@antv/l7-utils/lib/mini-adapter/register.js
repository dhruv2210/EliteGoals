var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/register.ts
var register_exports = {};
__export(register_exports, {
  getCanvas: () => getCanvas,
  getCanvas2D: () => getCanvas2D,
  registerCanvas: () => registerCanvas,
  registerCanvas2D: () => registerCanvas2D
});
module.exports = __toCommonJS(register_exports);
var import_devicePixelRatio = __toESM(require("./devicePixelRatio"));
var Mixin = __toESM(require("./util/mixin"));
var canvas = {};
var canvas2D = {};
function registerCanvas(c, id) {
  canvas = c;
  canvas.id = id;
  if (!("tagName" in canvas)) {
    canvas.tagName = "CANVAS";
  }
  canvas.type = "canvas";
  Mixin.parentNode(canvas);
  Mixin.style(canvas);
  Mixin.classList(canvas);
  Mixin.clientRegion(canvas);
  Mixin.offsetRegion(canvas);
  canvas.focus = function() {
  };
  canvas.blur = function() {
  };
}
function registerCanvas2D(ctx, id) {
  const width = 1024;
  const height = 1024;
  canvas2D = {
    width,
    height,
    clientWidth: width / import_devicePixelRatio.default,
    clientHeight: height / import_devicePixelRatio.default,
    id,
    type: "canvas"
  };
  if (!("tagName" in canvas2D)) {
    canvas2D.tagName = "CANVAS";
  }
  Mixin.parentNode(canvas2D);
  Mixin.style(canvas2D);
  Mixin.classList(canvas2D);
  Mixin.clientRegion(canvas2D);
  Mixin.offsetRegion(canvas2D);
  canvas2D.getContext = function(type) {
    if (type === "2d") {
      return ctx;
    }
  };
  canvas2D.focus = function() {
  };
  canvas2D.blur = function() {
  };
}
function getCanvas() {
  return canvas;
}
function getCanvas2D() {
  return canvas2D;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getCanvas,
  getCanvas2D,
  registerCanvas,
  registerCanvas2D
});
