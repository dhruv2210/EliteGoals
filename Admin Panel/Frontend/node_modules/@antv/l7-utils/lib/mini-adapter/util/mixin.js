var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/util/mixin.ts
var mixin_exports = {};
__export(mixin_exports, {
  classList: () => classList,
  clientRegion: () => clientRegion,
  offsetRegion: () => offsetRegion,
  parentNode: () => parentNode,
  scrollRegion: () => scrollRegion,
  style: () => style
});
module.exports = __toCommonJS(mixin_exports);
var import_screen = require("../screen");
var { availWidth: innerWidth, availHeight: innerHeight } = import_screen.screen;
var documentElement = {
  style: []
};
function parentNode(obj, level) {
  if (!("parentNode" in obj)) {
    let parent;
    if (level === 0) {
      parent = () => {
        return null;
      };
    } else if (level === 1) {
      parent = () => {
        return documentElement;
      };
    } else {
      parent = () => {
        return null;
      };
    }
    Object.defineProperty(obj, "parentNode", {
      enumerable: true,
      get: parent
    });
  }
  if (!("parentElement" in obj)) {
    let parent;
    if (level === 0) {
      parent = () => {
        return null;
      };
    } else if (level === 1) {
      parent = () => {
        return documentElement;
      };
    } else {
      parent = () => {
        return null;
      };
    }
    Object.defineProperty(obj, "parentElement", {
      enumerable: true,
      get: parent
    });
  }
}
function style(obj) {
  obj.style = obj.style || {};
  Object.assign(obj.style, {
    top: "0px",
    left: "0px",
    width: innerWidth + "px",
    height: innerHeight + "px",
    margin: "0px",
    padding: "0px"
  });
}
function clientRegion(obj) {
  if (!("clientLeft" in obj)) {
    obj.clientLeft = 0;
    obj.clientTop = 0;
  }
  if (!("clientWidth" in obj)) {
    obj.clientWidth = innerWidth;
    obj.clientHeight = innerHeight;
  }
  if (!("getBoundingClientRect" in obj)) {
    obj.getBoundingClientRect = function() {
      const ret = {
        x: 0,
        y: 0,
        top: 0,
        left: 0,
        width: this.clientWidth,
        height: this.clientHeight,
        right: this.clientWidth,
        bottom: this.clientHeight
      };
      return ret;
    };
  }
}
function offsetRegion(obj) {
  if (!("offsetLeft" in obj)) {
    obj.offsetLeft = 0;
    obj.offsetTop = 0;
  }
  if (!("offsetWidth" in obj)) {
    obj.offsetWidth = innerWidth;
    obj.offsetHeight = innerHeight;
  }
}
function scrollRegion(obj) {
  if (!("scrollLeft" in obj)) {
    obj.scrollLeft = 0;
    obj.scrollTop = 0;
  }
  if (!("scrollWidth" in obj)) {
    obj.scrollWidth = innerWidth;
    obj.scrollHeight = innerHeight;
  }
}
function classList(obj) {
  const noop = () => true;
  obj.classList = [];
  obj.classList.add = noop;
  obj.classList.remove = noop;
  obj.classList.contains = noop;
  obj.classList.toggle = noop;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  classList,
  clientRegion,
  offsetRegion,
  parentNode,
  scrollRegion,
  style
});
