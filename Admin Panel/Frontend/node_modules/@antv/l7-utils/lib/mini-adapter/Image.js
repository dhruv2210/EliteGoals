var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/Image.ts
var Image_exports = {};
__export(Image_exports, {
  Image: () => Image
});
module.exports = __toCommonJS(Image_exports);
var import_register = require("./register");
var Mixin = __toESM(require("./util/mixin"));
var Image = class {
  constructor() {
    const canvas = (0, import_register.getCanvas)();
    const image = canvas.createImage && canvas.createImage() || {};
    if (!("tagName" in image)) {
      image.tagName = "IMG";
      image.__proto__ = Image.prototype;
    }
    Mixin.parentNode(image);
    Mixin.classList(image);
    Object.assign(image, {
      addEventListener(name, cb) {
        image[`on${name}`] = cb.bind(image);
      },
      removeEventListener(name) {
        image[`on${name}`] = null;
      }
    });
    return image;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Image
});
