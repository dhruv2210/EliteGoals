var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/document.ts
var document_exports = {};
__export(document_exports, {
  $document: () => $document
});
module.exports = __toCommonJS(document_exports);
var import_Event = require("./Event");
var import_HTMLElement = require("./HTMLElement");
var import_HTMLVideoElement = require("./HTMLVideoElement");
var import_Image = require("./Image");
var import_location = require("./location");
var Body = class extends import_HTMLElement.HTMLElement {
  constructor() {
    super("body", 0);
  }
  addEventListener(type, listener, options = {}) {
  }
  removeEventListener(type, listener, options) {
  }
  dispatchEvent(event) {
  }
};
var DocumentElement = class extends import_HTMLElement.HTMLElement {
  constructor() {
    super("html", 0);
  }
  addEventListener(type, listener, options = {}) {
  }
  removeEventListener(type, listener) {
  }
  dispatchEvent(event) {
  }
};
var events = {};
var $document = {
  readyState: "complete",
  visibilityState: "visible",
  // 'visible' , 'hidden'
  hidden: false,
  fullscreen: true,
  scripts: [],
  style: {},
  location: import_location.$location,
  ontouchstart: null,
  ontouchmove: null,
  ontouchend: null,
  onvisibilitychange: null,
  parentNode: null,
  parentElement: null,
  head: null,
  body: null,
  documentElement: {
    style: []
  },
  createElement(tagName) {
    tagName = tagName.toLowerCase();
    if (tagName === "canvas") {
      return my.createOffscreenCanvas(1024, 128, "2d");
    } else if (tagName === "img") {
      return new import_Image.Image();
    } else if (tagName === "video") {
      return new import_HTMLVideoElement.HTMLVideoElement();
    }
    return new import_HTMLElement.HTMLElement(tagName);
  },
  createElementNS(nameSpace, tagName) {
    return this.createElement(tagName);
  },
  createTextNode(text) {
    return text;
  },
  getElementById(id) {
    return null;
  },
  getElementsByTagName(tagName) {
    tagName = tagName.toLowerCase();
    return [];
  },
  getElementsByTagNameNS(nameSpace, tagName) {
    return this.getElementsByTagName(tagName);
  },
  getElementsByName(tagName) {
    return [];
  },
  querySelector(query) {
    return null;
  },
  querySelectorAll(query) {
    return [];
  },
  addEventListener(type, listener, options) {
    if (!events[type]) {
      events[type] = [];
    }
    events[type].push(listener);
  },
  removeEventListener(type, listener) {
    const listeners = events[type];
    if (listeners && listeners.length > 0) {
      for (let i = listeners.length; i--; i > 0) {
        if (listeners[i] === listener) {
          listeners.splice(i, 1);
          break;
        }
      }
    }
  },
  dispatchEvent(event) {
    const type = event.type;
    const listeners = events[type];
    if (listeners) {
      for (let i = 0; i < listeners.length; i++) {
        listeners[i](event);
      }
    }
    if (event.target && typeof event.target["on" + type] === "function") {
      event.target["on" + type](event);
    }
  },
  createEvent(type) {
    return new import_Event.Event(type);
  }
};
$document.documentElement = new DocumentElement();
$document.head = new import_HTMLElement.HTMLElement("head");
$document.body = new Body();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  $document
});
