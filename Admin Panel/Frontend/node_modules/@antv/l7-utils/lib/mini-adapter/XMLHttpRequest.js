var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/XMLHttpRequest.ts
var XMLHttpRequest_exports = {};
__export(XMLHttpRequest_exports, {
  $XMLHttpRequest: () => $XMLHttpRequest
});
module.exports = __toCommonJS(XMLHttpRequest_exports);
var import_EventTarget = __toESM(require("./EventTarget"));
var _requestHeader = /* @__PURE__ */ new Map();
var _responseHeader = /* @__PURE__ */ new Map();
var _requestTask = /* @__PURE__ */ new Map();
var $XMLHttpRequest = class extends import_EventTarget.default {
  constructor() {
    super();
    this.onabort = null;
    this.onerror = null;
    this.onload = null;
    this.onloadstart = null;
    this.onprogress = null;
    this.ontimeout = null;
    this.onloadend = null;
    this.onreadystatechange = null;
    this.readyState = 0;
    this.response = null;
    this.responseText = null;
    this._responseType = "text";
    this.responseXML = null;
    this.status = 0;
    this.statusText = "";
    this.upload = {};
    this.withCredentials = false;
    _requestHeader.set("requestHeader", {
      "content-type": "application/x-www-form-urlencoded"
    });
  }
  set responseType(type) {
    this._responseType = type;
  }
  abort() {
    const myRequestTask = _requestTask.get("requestTask");
    if (myRequestTask) {
      myRequestTask.abort();
    }
  }
  getAllResponseHeaders() {
    const responseHeader = _responseHeader.get("responseHeader");
    return Object.keys(responseHeader).map((header) => {
      return `${header}: ${responseHeader[header]}`;
    }).join("\n");
  }
  getResponseHeader(header) {
    return _responseHeader.get("responseHeader")[header];
  }
  open(method, url, flag) {
    this._method = method;
    this._url = url;
  }
  overrideMimeType() {
  }
  send($data = "") {
  }
  setRequestHeader(header, value) {
    const myHeader = _requestHeader.get("requestHeader");
    myHeader[header] = value;
    _requestHeader.set("requestHeader", myHeader);
  }
  addEventListener(type, listener) {
    if (typeof listener !== "function") {
      return;
    }
    this["on" + type] = (event = {}) => {
      event.target = event.target || this;
      listener.call(this, event);
    };
  }
  removeEventListener(type, listener) {
    if (this["on" + type] === listener) {
      this["on" + type] = null;
    }
  }
};
$XMLHttpRequest.UNSEND = 0;
$XMLHttpRequest.OPENED = 1;
$XMLHttpRequest.HEADERS_RECEIVED = 2;
$XMLHttpRequest.LOADING = 3;
$XMLHttpRequest.DONE = 4;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  $XMLHttpRequest
});
