var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/EventTarget.ts
var EventTarget_exports = {};
__export(EventTarget_exports, {
  default: () => EventTarget
});
module.exports = __toCommonJS(EventTarget_exports);
var _events = /* @__PURE__ */ new WeakMap();
var EventTarget = class {
  constructor() {
    _events.set(this, {});
  }
  addEventListener(type, listener, options = {}) {
    let events = _events.get(this);
    if (!events) {
      events = {};
    }
    if (!events[type]) {
      events[type] = [];
    }
    events[type].push(listener);
    _events.set(this, events);
    if (options.capture) {
    }
    if (options.once) {
    }
    if (options.passive) {
    }
  }
  removeEventListener(type, listener, options = {}) {
    const events = _events.get(this);
    if (events) {
      const listeners = events[type];
      if (listeners && listeners.length > 0) {
        for (let i = listeners.length; i--; i > 0) {
          if (listeners[i] === listener) {
            listeners.splice(i, 1);
            break;
          }
        }
      }
    }
  }
  dispatchEvent(event) {
    const listeners = _events.get(this)[event.type];
    if (listeners) {
      for (const listener of listeners) {
        listener(event);
      }
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
