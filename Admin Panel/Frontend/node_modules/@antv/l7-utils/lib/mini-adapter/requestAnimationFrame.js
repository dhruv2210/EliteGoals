var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/requestAnimationFrame.ts
var requestAnimationFrame_exports = {};
__export(requestAnimationFrame_exports, {
  cancelAnimationFrame: () => cancelAnimationFrame,
  requestAnimationFrame: () => requestAnimationFrame
});
module.exports = __toCommonJS(requestAnimationFrame_exports);
var import_register = require("./register");
var lastTime = 0;
var id = 0;
function hack(cb) {
  const now = Date.now();
  const nextTime = Math.max(lastTime + 23, now);
  id = setTimeout(() => {
    cb(lastTime = nextTime);
  }, nextTime - now);
  return id;
}
function requestAnimationFrame(cb) {
  const canvas = (0, import_register.getCanvas)();
  if (canvas.requestAnimationFrame) {
    return canvas.requestAnimationFrame(cb);
  } else {
    return hack(cb);
  }
}
function cancelAnimationFrame(id2) {
  const canvas = (0, import_register.getCanvas)();
  if (canvas.cancelAnimationFrame) {
    return canvas.cancelAnimationFrame(id2);
  } else {
    return clearTimeout(id2);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cancelAnimationFrame,
  requestAnimationFrame
});
