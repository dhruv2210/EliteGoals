var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/EventIniter/PointerEvent.ts
var PointerEvent_exports = {};
__export(PointerEvent_exports, {
  dispatchPointerDown: () => dispatchPointerDown,
  dispatchPointerMove: () => dispatchPointerMove,
  dispatchPointerUp: () => dispatchPointerUp
});
module.exports = __toCommonJS(PointerEvent_exports);
var import_document = require("../document");
var import_Event = require("../Event");
var import_register = require("../register");
var PointerEvent = class extends import_Event.Event {
  constructor(type) {
    super(type);
    this.target = (0, import_register.getCanvas)();
    this.currentTarget = (0, import_register.getCanvas)();
  }
};
var CLONE_PROPS = [
  // MouseEvent
  "bubbles",
  "cancelable",
  "view",
  "detail",
  "screenX",
  "screenY",
  "clientX",
  "clientY",
  "ctrlKey",
  "altKey",
  "shiftKey",
  "metaKey",
  "button",
  "relatedTarget",
  // PointerEvent
  "pointerId",
  "width",
  "height",
  "pressure",
  "tiltX",
  "tiltY",
  "pointerType",
  "hwTimestamp",
  "isPrimary",
  // event instance
  "pageX",
  "pageY",
  "timeStamp"
];
var CLONE_DEFAULTS = [
  // MouseEvent
  false,
  false,
  null,
  null,
  0,
  0,
  0,
  0,
  false,
  false,
  false,
  false,
  0,
  null,
  // DOM Level 3
  0,
  // PointerEvent
  0,
  0,
  0,
  0,
  0,
  0,
  "",
  0,
  false,
  // event instance
  0,
  0,
  0
];
var POINTER_TYPE = "touch";
function touchToPointer(type, touch, rawEvent) {
  const e = new PointerEvent(type);
  for (let i = 0; i < CLONE_PROPS.length; i++) {
    const p = CLONE_PROPS[i];
    e[p] = touch[p] || CLONE_DEFAULTS[i];
  }
  e.type = type;
  e.target = (0, import_register.getCanvas)();
  e.currentTarget = (0, import_register.getCanvas)();
  e.buttons = typeToButtons(type);
  e.which = e.buttons;
  e.pointerId = (touch.identifier || 0) + 2;
  e.bubbles = true;
  e.cancelable = true;
  e.button = 0;
  e.width = (touch.radiusX || 0.5) * 2;
  e.height = (touch.radiusY || 0.5) * 2;
  e.pressure = touch.force || 0.5;
  e.isPrimary = isPrimaryPointer(touch);
  e.pointerType = POINTER_TYPE;
  e.altKey = rawEvent.altKey;
  e.ctrlKey = rawEvent.ctrlKey;
  e.metaKey = rawEvent.metaKey;
  e.shiftKey = rawEvent.shiftKey;
  if (rawEvent.preventDefault) {
    e.preventDefault = () => {
      rawEvent.preventDefault();
    };
  }
  return e;
}
function typeToButtons(type) {
  let ret = 0;
  if (type === "touchstart" || type === "touchmove" || type === "pointerdown" || type === "pointermove") {
    ret = 1;
  }
  return ret;
}
var firstPointer = null;
function isPrimaryPointer(touch) {
  return firstPointer === touch.identifier;
}
function setPrimaryPointer(touch) {
  if (firstPointer === null) {
    firstPointer = touch.identifier;
  }
}
function removePrimaryPointer(touch) {
  if (firstPointer === touch.identifier) {
    firstPointer = null;
  }
}
function eventHandlerFactory(type) {
  return (rawEvent) => {
    const changedTouches = rawEvent.changedTouches;
    for (let i = 0; i < changedTouches.length; i++) {
      const touch = changedTouches[i];
      if (i === 0 && type === "pointerdown") {
        setPrimaryPointer(touch);
      } else if (type === "pointerup" || type === "pointercancel") {
        removePrimaryPointer(touch);
      }
      const event = touchToPointer(type, touch, rawEvent);
      import_document.$document.dispatchEvent(event);
    }
  };
}
var dispatchPointerDown = eventHandlerFactory("pointerdown");
var dispatchPointerMove = eventHandlerFactory("pointermove");
var dispatchPointerUp = eventHandlerFactory("pointerup");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  dispatchPointerDown,
  dispatchPointerMove,
  dispatchPointerUp
});
