var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/mini-adapter/EventIniter/TouchEvent.ts
var TouchEvent_exports = {};
__export(TouchEvent_exports, {
  dispatchMapCameraParams: () => dispatchMapCameraParams,
  dispatchTouchEnd: () => dispatchTouchEnd,
  dispatchTouchMove: () => dispatchTouchMove,
  dispatchTouchStart: () => dispatchTouchStart
});
module.exports = __toCommonJS(TouchEvent_exports);
var import_document = require("../document");
var import_Event = require("../Event");
var import_register = require("../register");
var TouchEvent = class extends import_Event.Event {
  constructor(type) {
    super(type);
    this.touches = [];
    this.targetTouches = [];
    this.changedTouches = [];
    this.target = (0, import_register.getCanvas)();
    this.currentTarget = (0, import_register.getCanvas)();
  }
};
function mapEvent(event) {
  const { x = 0, y = 0, clientX = 0, clientY = 0 } = event || {};
  if (Object.keys(event).indexOf("x") !== -1) {
    event.pageX = event.clientX = x;
    event.pageY = event.clientY = y;
  } else {
    event.x = clientX;
    event.y = clientY;
  }
}
function eventHandlerFactory(type) {
  return (rawEvent) => {
    const event = new TouchEvent(type);
    event.changedTouches = rawEvent.changedTouches;
    event.touches = rawEvent.touches;
    event.targetTouches = Array.prototype.slice.call(rawEvent.touches);
    event.timeStamp = rawEvent.timeStamp;
    event.changedTouches.forEach((e) => mapEvent(e));
    event.touches.forEach((e) => mapEvent(e));
    event.targetTouches.forEach((e) => mapEvent(e));
    import_document.$document.dispatchEvent(event);
  };
}
function eventMapHandlerFactory(type) {
  return function(rawEvent) {
    rawEvent.type = type;
    import_document.$document.dispatchEvent(rawEvent);
  };
}
var dispatchTouchStart = eventHandlerFactory("touchstart");
var dispatchTouchMove = eventHandlerFactory("touchmove");
var dispatchTouchEnd = eventHandlerFactory("touchend");
var dispatchMapCameraParams = eventMapHandlerFactory("mapCameaParams");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  dispatchMapCameraParams,
  dispatchTouchEnd,
  dispatchTouchMove,
  dispatchTouchStart
});
