var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/color.ts
var color_exports = {};
__export(color_exports, {
  decodePickingColor: () => decodePickingColor,
  encodePickingColor: () => encodePickingColor,
  generateCatRamp: () => generateCatRamp,
  generateColorRamp: () => generateColorRamp,
  generateCustomRamp: () => generateCustomRamp,
  generateLinearRamp: () => generateLinearRamp,
  generateQuantizeRamp: () => generateQuantizeRamp,
  getDefaultDomain: () => getDefaultDomain,
  isColor: () => isColor,
  rgb2arr: () => rgb2arr
});
module.exports = __toCommonJS(color_exports);
var d3 = __toESM(require("d3-color"));
var import_mini_adapter = require("./mini-adapter");
function isColor(str) {
  if (typeof str === "string") {
    return !!d3.color(str);
  } else {
    return false;
  }
}
function rgb2arr(str) {
  const color2 = d3.color(str);
  const arr = [0, 0, 0, 0];
  if (color2 != null) {
    arr[0] = color2.r / 255;
    arr[1] = color2.g / 255;
    arr[2] = color2.b / 255;
    arr[3] = color2.opacity;
  }
  return arr;
}
function decodePickingColor(color2) {
  const i1 = color2 && color2[0];
  const i2 = color2 && color2[1];
  const i3 = color2 && color2[2];
  const index = i1 + i2 * 256 + i3 * 65536 - 1;
  return index;
}
function encodePickingColor(featureIdx) {
  return [
    featureIdx + 1 & 255,
    featureIdx + 1 >> 8 & 255,
    featureIdx + 1 >> 8 >> 8 & 255
  ];
}
function generateColorRamp(colorRamp) {
  let canvas = import_mini_adapter.$window.document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  canvas.width = 256;
  canvas.height = 1;
  let data = null;
  const gradient = ctx.createLinearGradient(0, 0, 256, 1);
  const min = colorRamp.positions[0];
  const max = colorRamp.positions[colorRamp.positions.length - 1];
  for (let i = 0; i < colorRamp.colors.length; ++i) {
    const value = (colorRamp.positions[i] - min) / (max - min);
    gradient.addColorStop(value, colorRamp.colors[i]);
  }
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, 256, 1);
  if (!import_mini_adapter.isMini) {
    data = ctx.getImageData(0, 0, 256, 1).data;
    const imageData = ctx.createImageData(256, 1);
    for (let i = 0; i < imageData.data.length; i += 4) {
      imageData.data[i + 0] = data[i + 0];
      imageData.data[i + 1] = data[i + 1];
      imageData.data[i + 2] = data[i + 2];
      imageData.data[i + 3] = data[i + 3];
    }
    canvas = null;
    ctx = null;
    return imageData;
  } else {
    data = new Uint8ClampedArray(ctx.getImageData(0, 0, 256, 1).data);
    canvas = null;
    ctx = null;
    return { data, width: 256, height: 1 };
  }
}
function generateLinearRamp(colorRamp, domain) {
  let canvas = import_mini_adapter.$window.document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  canvas.width = 256;
  canvas.height = 1;
  const gradient = ctx.createLinearGradient(0, 0, 256, 1);
  const step = domain[1] - domain[0];
  for (let i = 0; i < colorRamp.colors.length; ++i) {
    const value = Math.max((colorRamp.positions[i] - domain[0]) / step, 0);
    gradient.addColorStop(value, colorRamp.colors[i]);
  }
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, 256, 1);
  const data = ctx.getImageData(0, 0, 256, 1).data;
  const imageData = toIEIMageData(ctx, data);
  canvas = null;
  ctx = null;
  return imageData;
}
function generateCatRamp(colorRamp) {
  let canvas = import_mini_adapter.$window.document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  canvas.width = 256;
  canvas.height = 1;
  const imageData = ctx.createImageData(256, 1);
  imageData.data.fill(0);
  colorRamp.positions.forEach((p, index) => {
    const colorArray = rgb2arr(colorRamp.colors[index]);
    imageData.data[p * 4 + 0] = colorArray[0] * 255;
    imageData.data[p * 4 + 1] = colorArray[1] * 255;
    imageData.data[p * 4 + 2] = colorArray[2] * 255;
    imageData.data[p * 4 + 3] = colorArray[3] * 255;
  });
  canvas = null;
  ctx = null;
  return imageData;
}
function generateQuantizeRamp(colorRamp) {
  let canvas = import_mini_adapter.$window.document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  ctx.globalAlpha = 1;
  canvas.width = 256;
  canvas.height = 1;
  const step = 256 / colorRamp.colors.length;
  for (let i = 0; i < colorRamp.colors.length; i++) {
    ctx.beginPath();
    ctx.lineWidth = 2;
    ctx.strokeStyle = colorRamp.colors[i];
    ctx.moveTo(i * step, 0);
    ctx.lineTo((i + 1) * step, 0);
    ctx.stroke();
  }
  const data = ctx.getImageData(0, 0, 256, 1).data;
  const imageData = toIEIMageData(ctx, data);
  canvas = null;
  ctx = null;
  return imageData;
}
function generateCustomRamp(colorRamp, domain) {
  let canvas = import_mini_adapter.$window.document.createElement("canvas");
  let ctx = canvas.getContext("2d");
  ctx.globalAlpha = 1;
  canvas.width = 256;
  canvas.height = 1;
  const step = domain[1] - domain[0];
  if (colorRamp.positions.length - colorRamp.colors.length !== 1) {
    console.warn(
      "positions 的数字个数应当比 colors 的样式多一个,poisitions 的首尾值一般为数据的最大最新值"
    );
  }
  for (let i = 0; i < colorRamp.colors.length; i++) {
    ctx.beginPath();
    ctx.lineWidth = 2;
    ctx.strokeStyle = colorRamp.colors[i];
    ctx.moveTo((colorRamp.positions[i] - domain[0]) / step * 255, 0);
    ctx.lineTo((colorRamp.positions[i + 1] - domain[0]) / step * 255, 0);
    ctx.stroke();
  }
  const data = ctx.getImageData(0, 0, 256, 1).data;
  const imageData = toIEIMageData(ctx, data);
  canvas = null;
  ctx = null;
  return imageData;
}
function toIEIMageData(ctx, data) {
  const imageData = ctx.createImageData(256, 1);
  for (let i = 0; i < imageData.data.length; i += 4) {
    imageData.data[i + 0] = data[i + 0];
    imageData.data[i + 1] = data[i + 1];
    imageData.data[i + 2] = data[i + 2];
    imageData.data[i + 3] = data[i + 3];
  }
  return imageData;
}
function getDefaultDomain(rampColors) {
  switch (rampColors.type) {
    case "cat":
      return [0, 255];
    default:
      return [0, 1];
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decodePickingColor,
  encodePickingColor,
  generateCatRamp,
  generateColorRamp,
  generateCustomRamp,
  generateLinearRamp,
  generateQuantizeRamp,
  getDefaultDomain,
  isColor,
  rgb2arr
});
