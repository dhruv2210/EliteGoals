var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/workers/triangulation.ts
var triangulation_exports = {};
__export(triangulation_exports, {
  LineTriangulation: () => LineTriangulation,
  PointFillTriangulation: () => PointFillTriangulation,
  polygonFillTriangulation: () => polygonFillTriangulation
});
module.exports = __toCommonJS(triangulation_exports);
var import_earcut = __toESM(require("earcut"));
var import_geo = require("../geo");
var import_extrude_polyline = __toESM(require("./extrude_polyline"));
function LineTriangulation(feature) {
  const { coordinates, originCoordinates, version } = feature;
  const line = new import_extrude_polyline.default({
    dash: true,
    join: "bevel"
  });
  if (version === "GAODE2.x") {
    let path1 = coordinates;
    if (!Array.isArray(path1[0][0])) {
      path1 = [coordinates];
    }
    let path2 = originCoordinates;
    if (!Array.isArray(path2[0][0])) {
      path2 = [originCoordinates];
    }
    for (let i = 0; i < path1.length; i++) {
      const item1 = path1[i];
      const item2 = path2[i];
      line.extrude_gaode2(item1, item2);
    }
  } else {
    let path = coordinates;
    if (path[0] && !Array.isArray(path[0][0])) {
      path = [coordinates];
    }
    path.forEach((item) => {
      line.extrude(item);
    });
  }
  const linebuffer = line.complex;
  return {
    vertices: linebuffer.positions,
    // [ x,y,z, distance, miter,total ]
    indices: linebuffer.indices,
    normals: linebuffer.normals,
    indexes: linebuffer.indexes,
    size: 6
  };
}
function PointFillTriangulation(feature) {
  const coordinates = (0, import_geo.calculateCentroid)(feature.coordinates);
  return {
    vertices: [...coordinates, ...coordinates, ...coordinates, ...coordinates],
    indices: [0, 1, 2, 2, 3, 0],
    size: coordinates.length
  };
}
function polygonFillTriangulation(feature) {
  const { coordinates } = feature;
  const flattengeo = import_earcut.default.flatten(coordinates);
  const { vertices, dimensions, holes } = flattengeo;
  const triangles = (0, import_earcut.default)(vertices, holes, dimensions);
  return {
    indices: triangles,
    vertices,
    size: dimensions
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LineTriangulation,
  PointFillTriangulation,
  polygonFillTriangulation
});
