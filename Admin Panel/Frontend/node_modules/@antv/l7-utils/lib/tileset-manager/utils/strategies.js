var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tileset-manager/utils/strategies.ts
var strategies_exports = {};
__export(strategies_exports, {
  updateTileStateOverlap: () => updateTileStateOverlap,
  updateTileStateRealtime: () => updateTileStateRealtime,
  updateTileStateReplace: () => updateTileStateReplace
});
module.exports = __toCommonJS(strategies_exports);
var TILE_STATE_DEFAULT = 0;
var TILE_STATE_VISITED = 1;
var TILE_STATE_VISIBLE = 2;
function updateTileStateRealtime(tiles) {
  tiles.forEach((tile) => {
    if (tile.isCurrent) {
      tile.isVisible = tile.isLoaded;
    }
  });
}
function updateTileStateOverlap(tiles) {
  tiles.forEach((tile) => {
    tile.properties.state = TILE_STATE_DEFAULT;
  });
  tiles.forEach((tile) => {
    if (tile.isCurrent && !getPlaceholderInAncestors(tile)) {
      getPlaceholderInChildren(tile);
    }
  });
  tiles.forEach((tile) => {
    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);
  });
}
function updateTileStateReplace(tiles) {
  tiles.forEach((tile) => {
    tile.properties.state = TILE_STATE_DEFAULT;
  });
  tiles.forEach((tile) => {
    if (tile.isCurrent) {
      getPlaceholderInAncestors(tile);
    }
  });
  const sortedTiles = tiles.slice().sort((t1, t2) => t1.z - t2.z);
  sortedTiles.forEach((tile) => {
    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);
    if (tile.children.length && (tile.isVisible || tile.properties.state & TILE_STATE_VISITED)) {
      tile.children.forEach((child) => {
        child.properties.state = TILE_STATE_VISITED;
      });
    } else if (tile.isCurrent) {
      getPlaceholderInChildren(tile);
    }
  });
}
function getPlaceholderInAncestors(tile) {
  while (tile) {
    if (tile.isLoaded) {
      tile.properties.state |= TILE_STATE_VISIBLE;
      return true;
    }
    tile = tile.parent;
  }
  return false;
}
function getPlaceholderInChildren(tile) {
  tile.children.forEach((child) => {
    if (child.isLoaded) {
      child.properties.state |= TILE_STATE_VISIBLE;
    } else {
      getPlaceholderInChildren(child);
    }
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  updateTileStateOverlap,
  updateTileStateRealtime,
  updateTileStateReplace
});
