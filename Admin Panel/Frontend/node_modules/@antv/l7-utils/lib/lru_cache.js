var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lru_cache.ts
var lru_cache_exports = {};
__export(lru_cache_exports, {
  LRUCache: () => LRUCache
});
module.exports = __toCommonJS(lru_cache_exports);
var LRUCache = class {
  constructor(limit = 50, destroy) {
    this.limit = limit;
    this.destroy = destroy || this.defaultDestroy;
    this.order = [];
    this.clear();
  }
  clear() {
    this.order.forEach((key) => {
      this.delete(key);
    });
    this.cache = {};
    this.order = [];
  }
  get(key) {
    const value = this.cache[key];
    if (value) {
      this.deleteOrder(key);
      this.appendOrder(key);
    }
    return value;
  }
  set(key, value) {
    if (!this.cache[key]) {
      if (Object.keys(this.cache).length === this.limit) {
        this.delete(this.order[0]);
      }
      this.cache[key] = value;
      this.appendOrder(key);
    } else {
      this.delete(key);
      this.cache[key] = value;
      this.appendOrder(key);
    }
  }
  delete(key) {
    const value = this.cache[key];
    if (value) {
      this.deleteCache(key);
      this.deleteOrder(key);
      this.destroy(value, key);
    }
  }
  deleteCache(key) {
    delete this.cache[key];
  }
  deleteOrder(key) {
    const index = this.order.findIndex((o) => o === key);
    if (index >= 0) {
      this.order.splice(index, 1);
    }
  }
  appendOrder(key) {
    this.order.push(key);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  defaultDestroy(value, key) {
    return null;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LRUCache
});
