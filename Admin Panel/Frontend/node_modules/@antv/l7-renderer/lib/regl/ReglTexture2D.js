var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/regl/ReglTexture2D.ts
var ReglTexture2D_exports = {};
__export(ReglTexture2D_exports, {
  default: () => ReglTexture2D
});
module.exports = __toCommonJS(ReglTexture2D_exports);
var import_l7_core = require("@antv/l7-core");
var import_constants = require("./constants");
var ReglTexture2D = class {
  constructor(reGl, options) {
    this.isDestroy = false;
    const {
      data,
      type = import_l7_core.gl.UNSIGNED_BYTE,
      width,
      height,
      flipY = false,
      format = import_l7_core.gl.RGBA,
      mipmap = false,
      wrapS = import_l7_core.gl.CLAMP_TO_EDGE,
      wrapT = import_l7_core.gl.CLAMP_TO_EDGE,
      aniso = 0,
      alignment = 1,
      premultiplyAlpha = false,
      mag = import_l7_core.gl.NEAREST,
      min = import_l7_core.gl.NEAREST,
      colorSpace = import_l7_core.gl.BROWSER_DEFAULT_WEBGL,
      x = 0,
      y = 0,
      copy = false
    } = options;
    this.width = width;
    this.height = height;
    const textureOptions = {
      width,
      height,
      // @ts-ignore
      type: import_constants.dataTypeMap[type],
      format: import_constants.formatMap[format],
      wrapS: import_constants.wrapModeMap[wrapS],
      wrapT: import_constants.wrapModeMap[wrapT],
      // @ts-ignore
      mag: import_constants.filterMap[mag],
      min: import_constants.filterMap[min],
      alignment,
      flipY,
      colorSpace: import_constants.colorSpaceMap[colorSpace],
      premultiplyAlpha,
      aniso,
      // copy pixels from current bind framebuffer
      x,
      y,
      copy
    };
    if (data) {
      textureOptions.data = data;
    }
    if (typeof mipmap === "number") {
      textureOptions.mipmap = import_constants.mipmapMap[mipmap];
    } else if (typeof mipmap === "boolean") {
      textureOptions.mipmap = mipmap;
    }
    this.texture = reGl.texture(textureOptions);
  }
  get() {
    return this.texture;
  }
  update(props = {}) {
    this.texture(props);
  }
  bind() {
    this.texture._texture.bind();
  }
  resize({ width, height }) {
    this.texture.resize(width, height);
    this.width = width;
    this.height = height;
  }
  getSize() {
    return [this.width, this.height];
  }
  destroy() {
    var _a;
    if (!this.isDestroy) {
      (_a = this.texture) == null ? void 0 : _a.destroy();
    }
    this.isDestroy = true;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
