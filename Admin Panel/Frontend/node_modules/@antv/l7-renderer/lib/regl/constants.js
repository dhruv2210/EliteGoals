var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/regl/constants.ts
var constants_exports = {};
__export(constants_exports, {
  blendEquationMap: () => blendEquationMap,
  blendFuncMap: () => blendFuncMap,
  colorSpaceMap: () => colorSpaceMap,
  cullFaceMap: () => cullFaceMap,
  dataTypeMap: () => dataTypeMap,
  depthFuncMap: () => depthFuncMap,
  filterMap: () => filterMap,
  formatMap: () => formatMap,
  mipmapMap: () => mipmapMap,
  primitiveMap: () => primitiveMap,
  stencilFuncMap: () => stencilFuncMap,
  stencilOpMap: () => stencilOpMap,
  usageMap: () => usageMap,
  wrapModeMap: () => wrapModeMap
});
module.exports = __toCommonJS(constants_exports);
var import_l7_core = require("@antv/l7-core");
var primitiveMap = {
  [import_l7_core.gl.POINTS]: "points",
  [import_l7_core.gl.LINES]: "lines",
  [import_l7_core.gl.LINE_LOOP]: "line loop",
  [import_l7_core.gl.LINE_STRIP]: "line strip",
  [import_l7_core.gl.TRIANGLES]: "triangles",
  [import_l7_core.gl.TRIANGLE_FAN]: "triangle fan",
  [import_l7_core.gl.TRIANGLE_STRIP]: "triangle strip"
};
var usageMap = {
  [import_l7_core.gl.STATIC_DRAW]: "static",
  [import_l7_core.gl.DYNAMIC_DRAW]: "dynamic",
  [import_l7_core.gl.STREAM_DRAW]: "stream"
};
var dataTypeMap = {
  [import_l7_core.gl.BYTE]: "int8",
  [import_l7_core.gl.UNSIGNED_INT]: "int16",
  [import_l7_core.gl.INT]: "int32",
  [import_l7_core.gl.UNSIGNED_BYTE]: "uint8",
  [import_l7_core.gl.UNSIGNED_SHORT]: "uint16",
  [import_l7_core.gl.UNSIGNED_INT]: "uint32",
  [import_l7_core.gl.FLOAT]: "float"
};
var formatMap = {
  [import_l7_core.gl.ALPHA]: "alpha",
  [import_l7_core.gl.LUMINANCE]: "luminance",
  [import_l7_core.gl.LUMINANCE_ALPHA]: "luminance alpha",
  [import_l7_core.gl.RGB]: "rgb",
  [import_l7_core.gl.RGBA]: "rgba",
  [import_l7_core.gl.RGBA4]: "rgba4",
  [import_l7_core.gl.RGB5_A1]: "rgb5 a1",
  [import_l7_core.gl.RGB565]: "rgb565",
  [import_l7_core.gl.DEPTH_COMPONENT]: "depth",
  [import_l7_core.gl.DEPTH_STENCIL]: "depth stencil"
};
var mipmapMap = {
  [import_l7_core.gl.DONT_CARE]: "dont care",
  [import_l7_core.gl.NICEST]: "nice",
  [import_l7_core.gl.FASTEST]: "fast"
};
var filterMap = {
  [import_l7_core.gl.NEAREST]: "nearest",
  [import_l7_core.gl.LINEAR]: "linear",
  [import_l7_core.gl.LINEAR_MIPMAP_LINEAR]: "mipmap",
  [import_l7_core.gl.NEAREST_MIPMAP_LINEAR]: "nearest mipmap linear",
  [import_l7_core.gl.LINEAR_MIPMAP_NEAREST]: "linear mipmap nearest",
  [import_l7_core.gl.NEAREST_MIPMAP_NEAREST]: "nearest mipmap nearest"
};
var wrapModeMap = {
  [import_l7_core.gl.REPEAT]: "repeat",
  [import_l7_core.gl.CLAMP_TO_EDGE]: "clamp",
  [import_l7_core.gl.MIRRORED_REPEAT]: "mirror"
};
var colorSpaceMap = {
  [import_l7_core.gl.NONE]: "none",
  [import_l7_core.gl.BROWSER_DEFAULT_WEBGL]: "browser"
};
var depthFuncMap = {
  [import_l7_core.gl.NEVER]: "never",
  [import_l7_core.gl.ALWAYS]: "always",
  [import_l7_core.gl.LESS]: "less",
  [import_l7_core.gl.LEQUAL]: "lequal",
  [import_l7_core.gl.GREATER]: "greater",
  [import_l7_core.gl.GEQUAL]: "gequal",
  [import_l7_core.gl.EQUAL]: "equal",
  [import_l7_core.gl.NOTEQUAL]: "notequal"
};
var blendEquationMap = {
  [import_l7_core.gl.FUNC_ADD]: "add",
  [import_l7_core.gl.MIN_EXT]: "min",
  [import_l7_core.gl.MAX_EXT]: "max",
  [import_l7_core.gl.FUNC_SUBTRACT]: "subtract",
  [import_l7_core.gl.FUNC_REVERSE_SUBTRACT]: "reverse subtract"
};
var blendFuncMap = {
  [import_l7_core.gl.ZERO]: "zero",
  [import_l7_core.gl.ONE]: "one",
  [import_l7_core.gl.SRC_COLOR]: "src color",
  [import_l7_core.gl.ONE_MINUS_SRC_COLOR]: "one minus src color",
  [import_l7_core.gl.SRC_ALPHA]: "src alpha",
  [import_l7_core.gl.ONE_MINUS_SRC_ALPHA]: "one minus src alpha",
  [import_l7_core.gl.DST_COLOR]: "dst color",
  [import_l7_core.gl.ONE_MINUS_DST_COLOR]: "one minus dst color",
  [import_l7_core.gl.DST_ALPHA]: "dst alpha",
  [import_l7_core.gl.ONE_MINUS_DST_ALPHA]: "one minus dst alpha",
  [import_l7_core.gl.CONSTANT_COLOR]: "constant color",
  [import_l7_core.gl.ONE_MINUS_CONSTANT_COLOR]: "one minus constant color",
  [import_l7_core.gl.CONSTANT_ALPHA]: "constant alpha",
  [import_l7_core.gl.ONE_MINUS_CONSTANT_ALPHA]: "one minus constant alpha",
  [import_l7_core.gl.SRC_ALPHA_SATURATE]: "src alpha saturate"
};
var stencilFuncMap = {
  [import_l7_core.gl.NEVER]: "never",
  [import_l7_core.gl.ALWAYS]: "always",
  [import_l7_core.gl.LESS]: "less",
  [import_l7_core.gl.LEQUAL]: "lequal",
  [import_l7_core.gl.GREATER]: "greater",
  [import_l7_core.gl.GEQUAL]: "gequal",
  [import_l7_core.gl.EQUAL]: "equal",
  [import_l7_core.gl.NOTEQUAL]: "notequal"
};
var stencilOpMap = {
  [import_l7_core.gl.ZERO]: "zero",
  [import_l7_core.gl.KEEP]: "keep",
  [import_l7_core.gl.REPLACE]: "replace",
  [import_l7_core.gl.INVERT]: "invert",
  [import_l7_core.gl.INCR]: "increment",
  [import_l7_core.gl.DECR]: "decrement",
  [import_l7_core.gl.INCR_WRAP]: "increment wrap",
  [import_l7_core.gl.DECR_WRAP]: "decrement wrap"
};
var cullFaceMap = {
  [import_l7_core.gl.FRONT]: "front",
  [import_l7_core.gl.BACK]: "back"
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  blendEquationMap,
  blendFuncMap,
  colorSpaceMap,
  cullFaceMap,
  dataTypeMap,
  depthFuncMap,
  filterMap,
  formatMap,
  mipmapMap,
  primitiveMap,
  stencilFuncMap,
  stencilOpMap,
  usageMap,
  wrapModeMap
});
