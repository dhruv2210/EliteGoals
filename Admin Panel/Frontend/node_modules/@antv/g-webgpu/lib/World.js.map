{"version":3,"sources":["../src/World.ts"],"names":["World","IDENTIFIER","ConfigService","container","engine","get","RenderEngine","configService","canvas","engineOptions","init","swapChainFormat","WebGPUConstants","TextureFormat","BGRA8Unorm","antialiasing","entity","manager","TransformComponentManager","getComponentByEntity","MeshComponentManager","config","set","Scene","Camera","View","type","renderable","getNamed","Renderable","setConfig","setEntity","geometry","Geometry","getComponent","material","Material","texture","Texture2D","params","geometrySystem","Systems","GeometrySystem","createBufferGeometry","createInstancedBufferGeometry","materialSystem","MaterialSystem","createShaderMaterial","precompiledBundle","kernel","Kernel","setBundle","JSON","parse","renderer","Renderer","systems","getAll","forEach","system","tearDown","destroy","interactor","InteractorService","worldContainer","engineClazz","navigator","gpu","WebGLEngine","WebGPUEngine","isBound","bind","to","inSingletonScope","toSelf","TextureCache","Box","whenTargetNamed","BOX","Sphere","SPHERE","Plane","PLANE","Merged","MERGED","Basic","BASIC","Point","POINT","Line","LINE","Grid","GRID","world","setContainer"],"mappings":"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","sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport {\n  ComponentManager,\n  createEntity,\n  createWorldContainer,\n  Entity,\n  GeometrySystem,\n  // container,\n  IConfig,\n  IConfigService,\n  IDENTIFIER,\n  IInteractorService,\n  IRendererService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  KernelBundle,\n  MaterialSystem,\n  MeshComponent,\n  TransformComponent,\n} from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { Container, inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry, IGeometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { IMaterial, Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { IRenderable, Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\n\n@injectable()\nexport class World {\n  public static create(config: Partial<IConfig> = {}) {\n    const worldContainer = createWorldContainer();\n\n    // bind render engine, fallback to WebGL\n    const engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n    if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n      worldContainer\n        .bind<IRendererService>(IDENTIFIER.RenderEngine)\n        // @ts-ignore\n        .to(engineClazz)\n        .inSingletonScope();\n    }\n\n    worldContainer.bind(Renderer).toSelf();\n    worldContainer.bind(Kernel).toSelf();\n    worldContainer.bind(Renderable).toSelf();\n    worldContainer.bind(View).toSelf();\n    worldContainer.bind(Camera).toSelf();\n    worldContainer.bind(Scene).toSelf();\n    worldContainer.bind(World).toSelf();\n    worldContainer.bind(TextureCache).toSelf();\n    worldContainer.bind(Texture2D).toSelf();\n\n    // bind geometries\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Box)\n      .whenTargetNamed(Geometry.BOX);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Sphere)\n      .whenTargetNamed(Geometry.SPHERE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Plane)\n      .whenTargetNamed(Geometry.PLANE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Merged)\n      .whenTargetNamed(Geometry.MERGED);\n\n    // bind materials\n    worldContainer\n      .bind<IMaterial<unknown>>(IDENTIFIER.Material)\n      .to(Basic)\n      .whenTargetNamed(Material.BASIC);\n\n    // bind renderables\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Point)\n      .whenTargetNamed(Renderable.POINT);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Line)\n      .whenTargetNamed(Renderable.LINE);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Grid)\n      .whenTargetNamed(Renderable.GRID);\n\n    const world = worldContainer.get(World);\n    world.setContainer(worldContainer);\n    world.setConfig(config);\n    return world;\n  }\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private container: Container;\n\n  public async getEngine() {\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    const { canvas, engineOptions } = this.configService.get();\n    await engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n    return engine;\n  }\n\n  /**\n   * get transform component\n   * @param entity\n   */\n  public getTransformComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<TransformComponent>>(\n      IDENTIFIER.TransformComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public getMeshComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<MeshComponent>>(\n      IDENTIFIER.MeshComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public setConfig(config: Partial<IConfig>) {\n    this.configService.set(config);\n  }\n\n  public setContainer(container: Container) {\n    this.container = container;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public createEntity() {\n    return createEntity();\n  }\n\n  public createScene() {\n    return this.container.get(Scene);\n  }\n\n  public createCamera() {\n    return this.container.get(Camera);\n  }\n\n  public createView() {\n    return this.container.get(View);\n  }\n\n  // public createLight(type: string,) {\n  //   return this.container.getNamed(IDENTIFIER.Light, type)\n  // }\n\n  public createRenderable<T>(type?: string, config?: T) {\n    const renderable: Renderable = type\n      ? this.container.getNamed(IDENTIFIER.Renderable, type)\n      : this.container.get(Renderable);\n    const entity = createEntity();\n    renderable.setConfig(config || {});\n    renderable.setEntity(entity);\n    return renderable;\n  }\n\n  public createGeometry<T>(type: string, config?: T) {\n    const geometry: Geometry = this.container.getNamed(\n      IDENTIFIER.Geometry,\n      type,\n    );\n    const entity = createEntity();\n    geometry.setConfig(config || {});\n    geometry.setEntity(entity);\n    return geometry.getComponent();\n  }\n\n  public createMaterial<T>(type: string, config?: T) {\n    const material: Material = this.container.getNamed(\n      IDENTIFIER.Material,\n      type,\n    );\n    const entity = createEntity();\n    material.setConfig(config || {});\n    material.setEntity(entity, type);\n    return material.getComponent();\n  }\n\n  public createTexture2D(\n    config: ITexture2DInitializationOptions & { url: string },\n  ) {\n    const texture = this.container.get(Texture2D);\n    texture.setConfig(config);\n    return texture;\n  }\n\n  public createBufferGeometry(params?: { vertexCount: number }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createBufferGeometry(params);\n  }\n\n  public createInstancedBufferGeometry(params: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createInstancedBufferGeometry(params);\n  }\n\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n  }) {\n    const materialSystem = this.container.getNamed<MaterialSystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.MaterialSystem,\n    );\n    return materialSystem.createShaderMaterial(params);\n  }\n\n  public createKernel(precompiledBundle: KernelBundle | string) {\n    const kernel = this.container.get(Kernel);\n    if (typeof precompiledBundle === 'string') {\n      kernel.setBundle(JSON.parse(precompiledBundle));\n    } else {\n      kernel.setBundle(precompiledBundle);\n    }\n    kernel.init();\n    return kernel;\n  }\n\n  public createRenderer() {\n    const renderer = this.container.get(Renderer);\n    renderer.container = this.container;\n    renderer.init();\n    return renderer;\n  }\n\n  public destroy() {\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n    systems.forEach((system) => {\n      if (system.tearDown) {\n        system.tearDown();\n      }\n    });\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    engine.destroy();\n    const interactor = this.container.get<IInteractorService>(\n      IDENTIFIER.InteractorService,\n    );\n    interactor.destroy();\n  }\n}\n"],"file":"World.js"}