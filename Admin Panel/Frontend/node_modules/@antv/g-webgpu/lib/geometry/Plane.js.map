{"version":3,"sources":["../../src/geometry/Plane.ts"],"names":["Plane","config","halfExtents","widthSegments","lengthSegments","positions","normals","uvs","indices","vcounter","i","j","x","y","z","u","v","push","aabb","component","getComponent","Uint32Array","from","vertexCount","attributes","dirty","name","data","Float32Array","arrayStride","stepMode","shaderLocation","offset","format","Geometry"],"mappings":"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","sourcesContent":["import { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Geometry } from '.';\n\nexport interface IPlaneGeometryParams {\n  halfExtents: vec3;\n  widthSegments: number;\n  lengthSegments: number;\n}\n\n@injectable()\n/**\n * borrow from playcanvas\n */\nexport class Plane extends Geometry<Partial<IPlaneGeometryParams>> {\n  protected onEntityCreated() {\n    const {\n      halfExtents = [0.5, 0.5],\n      widthSegments = 5,\n      lengthSegments = 5,\n    } = this.config;\n\n    const positions: number[] = [];\n    const normals: number[] = [];\n    const uvs: number[] = [];\n    const indices: number[] = [];\n    let vcounter = 0;\n\n    for (let i = 0; i <= widthSegments; i++) {\n      for (let j = 0; j <= lengthSegments; j++) {\n        const x = -halfExtents[0] + (2.0 * halfExtents[0] * i) / widthSegments;\n        const y = 0.0;\n        const z = -(\n          -halfExtents[1] +\n          (2.0 * halfExtents[1] * j) / lengthSegments\n        );\n        const u = i / widthSegments;\n        const v = j / lengthSegments;\n\n        positions.push(x, y, z);\n        normals.push(0.0, 1.0, 0.0);\n        uvs.push(u, v);\n\n        if (i < widthSegments && j < lengthSegments) {\n          indices.push(vcounter + lengthSegments + 1, vcounter + 1, vcounter);\n          indices.push(\n            vcounter + lengthSegments + 1,\n            vcounter + lengthSegments + 2,\n            vcounter + 1,\n          );\n        }\n\n        vcounter++;\n      }\n    }\n\n    // generate AABB\n    const aabb = generateAABBFromVertices(positions);\n\n    const component = this.getComponent();\n    component.indices = Uint32Array.from(indices);\n    component.aabb = aabb;\n    component.vertexCount = vcounter;\n    component.attributes = [\n      {\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 1,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 2,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    ];\n\n    // TODO: barycentric & tangent\n  }\n}\n"],"file":"Plane.js"}