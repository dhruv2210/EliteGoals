{"version":3,"sources":["../../src/geometry/Box.ts"],"names":["primitiveUv1Padding","primitiveUv1PaddingScale","Box","config","widthSegments","heightSegments","depthSegments","halfExtents","vec3","fromValues","ws","hs","ds","hex","hey","hez","corners","faceAxes","faceNormals","sides","FRONT","BACK","TOP","BOTTOM","RIGHT","LEFT","positions","normals","uvs","uvs1","indices","vcounter","generateFace","side","uSegments","vSegments","u","v","i","j","temp1","create","temp2","temp3","r","lerp","sub","add","push","Math","floor","aabb","component","getComponent","Uint32Array","from","vertexCount","attributes","dirty","name","data","Float32Array","arrayStride","stepMode","shaderLocation","offset","format","Geometry"],"mappings":"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","sourcesContent":["import { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Geometry } from '.';\n\nexport interface IBoxGeometryParams {\n  halfExtents: vec3;\n  widthSegments: number;\n  heightSegments: number;\n  depthSegments: number;\n}\n\nconst primitiveUv1Padding = 4.0 / 64;\nconst primitiveUv1PaddingScale = 1.0 - primitiveUv1Padding * 2;\n\n@injectable()\n/**\n * borrow from playcanvas:\n * Creates a procedural box-shaped mesh\n */\nexport class Box extends Geometry<Partial<IBoxGeometryParams>> {\n  protected onEntityCreated() {\n    const {\n      widthSegments = 1,\n      heightSegments = 1,\n      depthSegments = 1,\n      halfExtents = vec3.fromValues(0.5, 0.5, 0.5),\n    } = this.config;\n    const ws = widthSegments;\n    const hs = heightSegments;\n    const ds = depthSegments;\n    const [hex, hey, hez] = halfExtents;\n\n    const corners = [\n      vec3.fromValues(-hex, -hey, hez),\n      vec3.fromValues(hex, -hey, hez),\n      vec3.fromValues(hex, hey, hez),\n      vec3.fromValues(-hex, hey, hez),\n      vec3.fromValues(hex, -hey, -hez),\n      vec3.fromValues(-hex, -hey, -hez),\n      vec3.fromValues(-hex, hey, -hez),\n      vec3.fromValues(hex, hey, -hez),\n    ];\n\n    const faceAxes = [\n      [0, 1, 3], // FRONT\n      [4, 5, 7], // BACK\n      [3, 2, 6], // TOP\n      [1, 0, 4], // BOTTOM\n      [1, 4, 2], // RIGHT\n      [5, 0, 6], // LEFT\n    ];\n\n    const faceNormals = [\n      [0, 0, 1], // FRONT\n      [0, 0, -1], // BACK\n      [0, 1, 0], // TOP\n      [0, -1, 0], // BOTTOM\n      [1, 0, 0], // RIGHT\n      [-1, 0, 0], // LEFT\n    ];\n\n    const sides = {\n      FRONT: 0,\n      BACK: 1,\n      TOP: 2,\n      BOTTOM: 3,\n      RIGHT: 4,\n      LEFT: 5,\n    };\n\n    const positions: number[] = [];\n    const normals: number[] = [];\n    const uvs: number[] = [];\n    const uvs1: number[] = [];\n    const indices: number[] = [];\n    let vcounter = 0;\n\n    const generateFace = (\n      side: number,\n      uSegments: number,\n      vSegments: number,\n    ) => {\n      let u;\n      let v;\n      let i;\n      let j;\n\n      for (i = 0; i <= uSegments; i++) {\n        for (j = 0; j <= vSegments; j++) {\n          const temp1 = vec3.create();\n          const temp2 = vec3.create();\n          const temp3 = vec3.create();\n          const r = vec3.create();\n          vec3.lerp(\n            temp1,\n            corners[faceAxes[side][0]],\n            corners[faceAxes[side][1]],\n            i / uSegments,\n          );\n          vec3.lerp(\n            temp2,\n            corners[faceAxes[side][0]],\n            corners[faceAxes[side][2]],\n            j / vSegments,\n          );\n          vec3.sub(temp3, temp2, corners[faceAxes[side][0]]);\n          vec3.add(r, temp1, temp3);\n          u = i / uSegments;\n          v = j / vSegments;\n\n          positions.push(r[0], r[1], r[2]);\n          normals.push(\n            faceNormals[side][0],\n            faceNormals[side][1],\n            faceNormals[side][2],\n          );\n          uvs.push(u, v);\n          // pack as 3x2\n          // 1/3 will be empty, but it's either that or stretched pixels\n          // TODO: generate non-rectangular lightMaps, so we could use space without stretching\n          u /= 3;\n          v /= 3;\n          u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n          v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n          u += (side % 3) / 3;\n          v += Math.floor(side / 3) / 3;\n          uvs1.push(u, v);\n\n          if (i < uSegments && j < vSegments) {\n            indices.push(vcounter + vSegments + 1, vcounter + 1, vcounter);\n            indices.push(\n              vcounter + vSegments + 1,\n              vcounter + vSegments + 2,\n              vcounter + 1,\n            );\n          }\n\n          vcounter++;\n        }\n      }\n    };\n\n    generateFace(sides.FRONT, ws, hs);\n    generateFace(sides.BACK, ws, hs);\n    generateFace(sides.TOP, ws, ds);\n    generateFace(sides.BOTTOM, ws, ds);\n    generateFace(sides.RIGHT, ds, hs);\n    generateFace(sides.LEFT, ds, hs);\n\n    // generate AABB\n    const aabb = generateAABBFromVertices(positions);\n\n    const component = this.getComponent();\n    component.indices = Uint32Array.from(indices);\n    component.aabb = aabb;\n    component.vertexCount = vcounter;\n    component.attributes = [\n      {\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 1,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 2,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    ];\n\n    // TODO: barycentric & tangent\n  }\n}\n"],"file":"Box.js"}