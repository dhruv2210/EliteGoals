{"version":3,"sources":["../../../src/renderable/grid/index.ts"],"names":["Grid","IDENTIFIER","Systems","MaterialSystem","GeometrySystem","ShaderModuleService","name","data","mesh","getMeshComponent","material","setUniform","shaderModuleService","registerModule","vs","gridVert","fs","gridFrag","getModule","extractedUniforms","uniforms","materialSystem","createShaderMaterial","vertexShader","fragmentShader","setMaterial","geometry","geometrySystem","createBufferGeometry","vertexCount","setGeometry","setCull","enable","face","gl","BACK","setDepth","func","LESS","setAttributes","gridColor","config","gridSize","setIndex","setAttribute","Float32Array","from","arrayStride","stepMode","attributes","shaderLocation","offset","format","Renderable"],"mappings":"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","sourcesContent":["import {\n  BufferData,\n  GeometrySystem,\n  gl,\n  IDENTIFIER,\n  IShaderModuleService,\n  MaterialSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { Renderable } from '../Renderable';\nimport gridFrag from './shaders/webgl.grid.frag.glsl';\nimport gridVert from './shaders/webgl.grid.vert.glsl';\n\ninterface IGridConfig {\n  gridColor: number[];\n  gridSize: number;\n}\n\n@injectable()\nexport class Grid extends Renderable<Partial<IGridConfig>> {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.MaterialSystem)\n  private readonly materialSystem: MaterialSystem;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.GeometrySystem)\n  private readonly geometrySystem: GeometrySystem;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  protected onAttributeChanged({\n    name,\n    data,\n  }: {\n    name: string;\n    data: BufferData;\n  }) {\n    const mesh = this.getMeshComponent();\n    if (mesh && mesh.material) {\n      if (name === 'gridColor') {\n        mesh.material.setUniform('u_GridColor', data);\n        mesh.material.setUniform('u_GridColor2', data);\n      } else if (name === 'gridSize') {\n        mesh.material.setUniform('u_GridSize', data);\n        mesh.material.setUniform('u_GridSize2', data);\n      }\n    }\n  }\n\n  protected onEntityCreated() {\n    this.shaderModuleService.registerModule('grid', {\n      vs: gridVert,\n      fs: gridFrag,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('grid');\n\n    const material = this.materialSystem.createShaderMaterial({\n      vertexShader: vs!,\n      fragmentShader: fs!,\n    });\n    this.setMaterial(material);\n\n    const geometry = this.geometrySystem.createBufferGeometry({\n      vertexCount: 4,\n    });\n    this.setGeometry(geometry);\n\n    material\n      .setCull({\n        enable: false,\n        face: gl.BACK,\n      })\n      .setDepth({\n        enable: true,\n        func: gl.LESS,\n      });\n\n    // @ts-ignore\n    material.setUniform(extractedUniforms);\n\n    this.setAttributes({\n      gridColor: this.config.gridColor,\n      gridSize: this.config.gridSize,\n    });\n\n    geometry.setIndex([0, 3, 2, 2, 1, 0]);\n\n    geometry.setAttribute(\n      'a_Position',\n      Float32Array.from([-4, -1, -4, 4, -1, -4, 4, -1, 4, -4, -1, 4]),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n  }\n}\n"],"file":"index.js"}