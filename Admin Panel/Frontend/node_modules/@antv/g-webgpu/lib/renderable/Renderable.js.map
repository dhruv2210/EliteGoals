{"version":3,"sources":["../../src/renderable/Renderable.ts"],"names":["Renderable","IDENTIFIER","MeshComponentManager","CullableComponentManager","TransformComponentManager","Systems","SceneGraphSystem","attributes","config","meshComponent","transformComponent","entity","cullable","create","mesh","transform","onEntityCreated","material","geometry","Object","keys","forEach","name","undefined","onAttributeChanged","data","visible","children","childEntity","child","getComponentByEntity","parentRenderable","sceneGraphSystem","attach","detach","detachChildren","setUniform","convertAttributeName2UniformName","attributeName","POINT","LINE","GRID"],"mappings":"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","sourcesContent":["import {\n  BufferData,\n  ComponentManager,\n  CullableComponent,\n  Entity,\n  GeometryComponent,\n  HierarchyComponent,\n  IDENTIFIER,\n  MaterialComponent,\n  MeshComponent,\n  SceneGraphSystem,\n  TransformComponent,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\n\nexport interface IRenderable<T> {\n  setConfig(config: T): void;\n  setAttributes(attributes: Record<string, BufferData | undefined>): void;\n  setEntity(entity: Entity): void;\n  setMaterial(material: MaterialComponent): void;\n  setGeometry(geometry: GeometryComponent): void;\n}\n\n@injectable()\nexport class Renderable<T = {}> implements IRenderable<T> {\n  public static POINT = 'point';\n  public static LINE = 'line';\n  public static GRID = 'grid';\n\n  protected attributes: Record<string, BufferData> = {};\n  protected config: T;\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.SceneGraphSystem)\n  private readonly sceneGraphSystem: SceneGraphSystem;\n\n  private meshComponent: MeshComponent;\n  private transformComponent: TransformComponent;\n\n  private entity: Entity;\n\n  public getEntity() {\n    return this.entity;\n  }\n\n  public getTransformComponent() {\n    return this.transformComponent;\n  }\n\n  public getMeshComponent() {\n    return this.meshComponent;\n  }\n\n  public setConfig(config: T) {\n    this.config = config;\n  }\n\n  public setEntity(entity: Entity) {\n    this.entity = entity;\n    this.cullable.create(entity);\n    this.meshComponent = this.mesh.create(entity);\n    this.transformComponent = this.transform.create(entity);\n    this.onEntityCreated();\n  }\n\n  public setMaterial(material: MaterialComponent) {\n    this.meshComponent.material = material;\n    return this;\n  }\n\n  public setGeometry(geometry: GeometryComponent) {\n    this.meshComponent.geometry = geometry;\n    return this;\n  }\n\n  public setAttributes(attributes: Record<string, BufferData | undefined>) {\n    Object.keys(attributes).forEach((name) => {\n      if (\n        attributes[name] !== undefined &&\n        attributes[name] !== this.attributes[name]\n      ) {\n        this.onAttributeChanged({\n          name,\n          data: attributes[name]!,\n        });\n        this.attributes[name] = attributes[name]!;\n      }\n    });\n  }\n\n  public setVisible(visible: boolean) {\n    this.meshComponent.visible = visible;\n    this.meshComponent.children.forEach((childEntity) => {\n      const child = this.mesh.getComponentByEntity(childEntity);\n      if (child) {\n        child.visible = visible;\n      }\n    });\n    return this;\n  }\n\n  public isVisible() {\n    return this.meshComponent.visible;\n  }\n\n  public attach(parentRenderable: Renderable<T>) {\n    this.sceneGraphSystem.attach(this.entity, parentRenderable.entity);\n    return this;\n  }\n\n  public detach() {\n    this.sceneGraphSystem.detach(this.entity);\n    return this;\n  }\n\n  public detachChildren() {\n    this.sceneGraphSystem.detachChildren(this.entity);\n    return this;\n  }\n\n  protected onEntityCreated() {\n    //\n  }\n\n  protected onAttributeChanged({\n    name,\n    data,\n  }: {\n    name: string;\n    data: BufferData;\n  }) {\n    if (this.meshComponent && this.meshComponent.material) {\n      this.meshComponent.material.setUniform(\n        this.convertAttributeName2UniformName(name),\n        data,\n      );\n    }\n  }\n\n  protected convertAttributeName2UniformName(attributeName: string) {\n    return attributeName;\n  }\n}\n"],"file":"Renderable.js"}