{"version":3,"sources":["../../src/texture/Texture2D.ts"],"names":["Texture2D","TextureCache","IDENTIFIER","RenderEngine","config","loaded","texture","url","Promise","resolve","reject","existed","textureCache","get","image","Image","crossOrigin","src","onload","engine","createTexture2D","data","width","height","flipY","set","onerror"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAWA;;AACA;;;;;;;;IAGaA,S,WADZ,4B,UAEE,uBAAOC,mBAAP,C,UAGA,uBAAOC,wBAAWC,YAAlB,C;;;;;SAGOC,M;SACAC,M,GAAS,K;SACTC,O;;;;;8BAESF,M,EAA2D;AAC1E,WAAKA,MAAL,GAAcA,MAAd;AACD;;;+BAEiB;AAChB,aAAO,KAAKC,MAAZ;AACD,K,CAED;AACA;AACA;AACA;AACA;;;;;;;;;;;;qBAGM,KAAKD,MAAL,CAAYG,G;;;;;iDACP,IAAIC,OAAJ,CAAwB,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClD,sBAAMC,OAAO,GAAG,KAAI,CAACC,YAAL,CAAkBC,GAAlB,CAAsB,KAAI,CAACT,MAAL,CAAYG,GAAlC,CAAhB;;AACA,sBAAII,OAAJ,EAAa;AACXF,oBAAAA,OAAO,CAACE,OAAD,CAAP;AACD,mBAFD,MAEO;AACL,wBAAMG,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,oBAAAA,KAAK,CAACE,WAAN,GAAoB,WAApB;AACAF,oBAAAA,KAAK,CAACG,GAAN,GAAY,KAAI,CAACb,MAAL,CAAYG,GAAxB;;AACAO,oBAAAA,KAAK,CAACI,MAAN,GAAe,YAAM;AACnB,0BAAMZ,OAAO,GAAG,KAAI,CAACa,MAAL,CAAYC,eAAZ,iCACX,KAAI,CAAChB,MADM;AAEdiB,wBAAAA,IAAI,EAAEP,KAFQ;AAGdQ,wBAAAA,KAAK,EAAER,KAAK,CAACQ,KAHC;AAIdC,wBAAAA,MAAM,EAAET,KAAK,CAACS,MAJA;AAKdC,wBAAAA,KAAK,EAAE;AALO,yBAAhB;;AAOA,sBAAA,KAAI,CAACZ,YAAL,CAAkBa,GAAlB,CAAsB,KAAI,CAACrB,MAAL,CAAYG,GAAlC,EAAuCD,OAAvC;;AACA,sBAAA,KAAI,CAACA,OAAL,GAAeA,OAAf;AACA,sBAAA,KAAI,CAACD,MAAL,GAAc,IAAd;AACAI,sBAAAA,OAAO,CAACH,OAAD,CAAP;AACD,qBAZD;;AAaAQ,oBAAAA,KAAK,CAACY,OAAN,GAAgB,YAAM;AACpBhB,sBAAAA,MAAM;AACP,qBAFD;AAGD;AACF,iBAzBM,C;;;AA2BP,qBAAKL,MAAL,GAAc,IAAd;AACA,qBAAKC,OAAL,GAAe,KAAKa,MAAL,CAAYC,eAAZ,CAA4B,KAAKhB,MAAjC,CAAf;iDACO,KAAKE,O","sourcesContent":["import {\n  IClearOptions,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  IShaderModuleService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  IView,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable } from 'inversify';\nimport { TextureCache } from './Cache';\n\n@injectable()\nexport class Texture2D {\n  @inject(TextureCache)\n  private readonly textureCache: TextureCache;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  private config: ITexture2DInitializationOptions & { url: string };\n  private loaded = false;\n  private texture: ITexture2D;\n\n  public setConfig(config: ITexture2DInitializationOptions & { url: string }) {\n    this.config = config;\n  }\n\n  public isLoaded() {\n    return this.loaded;\n  }\n\n  // public update(config: ITexture2DInitializationOptions) {\n  //   if (this.loaded && this.texture) {\n  //     const t = this.texture.get();\n  //   }\n  // }\n\n  public async load() {\n    if (this.config.url) {\n      return new Promise<ITexture2D>((resolve, reject) => {\n        const existed = this.textureCache.get(this.config.url);\n        if (existed) {\n          resolve(existed);\n        } else {\n          const image = new Image();\n          image.crossOrigin = 'Anonymous';\n          image.src = this.config.url;\n          image.onload = () => {\n            const texture = this.engine.createTexture2D({\n              ...this.config,\n              data: image,\n              width: image.width,\n              height: image.height,\n              flipY: true,\n            });\n            this.textureCache.set(this.config.url, texture);\n            this.texture = texture;\n            this.loaded = true;\n            resolve(texture);\n          };\n          image.onerror = () => {\n            reject();\n          };\n        }\n      });\n    } else {\n      this.loaded = true;\n      this.texture = this.engine.createTexture2D(this.config);\n      return this.texture;\n    }\n  }\n}\n"],"file":"Texture2D.js"}