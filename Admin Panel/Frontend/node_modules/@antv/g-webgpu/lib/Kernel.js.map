{"version":3,"sources":["../src/Kernel.ts"],"names":["Kernel","IDENTIFIER","RenderEngine","ConfigService","entity","model","dirty","compiledBundle","initPromise","configService","get","canvas","engineOptions","engine","init","swapChainFormat","WebGPUConstants","TextureFormat","BGRA8Unorm","antialiasing","bundle","JSON","parse","stringify","dispatch","context","maxIteration","name","data","isNumberLikeData","existedDefine","defines","find","b","value","existedBinding","uniforms","isReferer","storageClass","STORAGE_CLASS","Uniform","updateUniform","updateBuffer","Object","keys","forEach","key","setBinding","iteration","compile","beginFrame","clear","filter","confirmInput","i","run","endFrame","readData","target","supportWebGPU","useWGSL","Target","WGSL","GLSL450","GLSL100","shader","shaders","define","runtime","valuePlaceHolder","DefineValuePlaceholder","replace","uniform","StorageBuffer","sizePerElement","type","AST_TOKEN_TYPES","FloatArray","Vector4FloatArray","Float32Array","output","length","fill","createComputeModel"],"mappings":"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","sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  DefineValuePlaceholder,\n  IComputeModel,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  KernelBundle,\n  STORAGE_CLASS,\n  Target,\n} from '@antv/g-webgpu-core';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { createCanvas } from './utils/canvas';\nimport isArray from './utils/is-array';\nimport { isNumber } from './utils/is-number';\nimport { isTypedArray } from './utils/is-typedarray';\n\n@injectable()\nexport class Kernel {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private entity = createEntity();\n\n  private model: IComputeModel;\n\n  private dirty: boolean = true;\n\n  private compiledBundle: KernelBundle;\n\n  private initPromise: Promise<void>;\n\n  public init() {\n    const { canvas, engineOptions } = this.configService.get();\n\n    this.initPromise = this.engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n  }\n\n  public setBundle(bundle: KernelBundle) {\n    // deep clone\n    this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n  }\n\n  public setDispatch(dispatch: [number, number, number]) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.dispatch = dispatch;\n    }\n    return this;\n  }\n\n  public setMaxIteration(maxIteration: number) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.maxIteration = maxIteration;\n    }\n    return this;\n  }\n\n  public setBinding(\n    name:\n      | string\n      | Record<\n          string,\n          | number\n          | number[]\n          | Float32Array\n          | Uint8Array\n          | Uint16Array\n          | Uint32Array\n          | Int8Array\n          | Int16Array\n          | Int32Array\n          | Kernel\n        >,\n    data?:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Kernel,\n  ) {\n    if (typeof name === 'string') {\n      const isNumberLikeData =\n        isNumber(data) || isTypedArray(data) || isArray(data);\n      if (this.compiledBundle && this.compiledBundle.context) {\n        // set define, eg. setBinding('MAX_LENGTH', 10)\n        const existedDefine = this.compiledBundle.context.defines.find(\n          (b) => b.name === name,\n        );\n        if (existedDefine) {\n          existedDefine.value = data as number;\n          return this;\n        }\n\n        // set uniform\n        const existedBinding = this.compiledBundle.context.uniforms.find(\n          (b) => b.name === name,\n        );\n        if (existedBinding) {\n          // update uniform or buffer\n          if (isNumberLikeData) {\n            // @ts-ignore\n            existedBinding.data = data;\n            existedBinding.isReferer = false;\n\n            if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateUniform(name, data);\n              }\n            } else {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateBuffer(name, data);\n              }\n            }\n          } else {\n            // update with another kernel\n            existedBinding.isReferer = true;\n            // @ts-ignore\n            existedBinding.data = data as Kernel;\n          }\n        }\n      }\n    } else {\n      Object.keys(name).forEach((key) => {\n        this.setBinding(key, name[key]);\n      });\n    }\n    return this;\n  }\n\n  public async execute(iteration: number = 1) {\n    if (this.dirty) {\n      if (this.compiledBundle.context) {\n        if (iteration > 1) {\n          this.compiledBundle.context.maxIteration = iteration;\n        } else {\n          this.compiledBundle.context.maxIteration++;\n        }\n      }\n      await this.compile();\n      this.dirty = false;\n    }\n\n    this.engine.beginFrame();\n\n    // 首先开启当前 frame 的 compute pass\n    this.engine.clear({});\n\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.uniforms\n        .filter(({ isReferer }) => isReferer)\n        .forEach(({ data, name }) => {\n          // @ts-ignore\n          this.model.confirmInput((data as Kernel).model, name);\n        });\n    }\n    for (let i = 0; i < iteration; i++) {\n      this.model.run();\n    }\n\n    this.engine.endFrame();\n    return this;\n  }\n\n  /**\n   * read output from GPUBuffer\n   */\n  public async getOutput() {\n    return this.model.readData();\n  }\n\n  private async compile() {\n    await this.initPromise;\n\n    const context = {\n      ...this.compiledBundle.context!,\n    };\n\n    const target = this.engine.supportWebGPU\n      ? this.engine.useWGSL\n        ? Target.WGSL\n        : Target.GLSL450\n      : Target.GLSL100;\n    let shader = this.compiledBundle.shaders[target];\n\n    // this.bindings?.forEach(({ name, data }) => {\n    //   if (name === name.toUpperCase()) {\n    //     const define = context.defines.find((d) => d.name === name);\n    //     if (define) {\n    //       // @ts-ignore\n    //       define.value = data;\n    //     }\n    //   }\n    // });\n\n    // 生成运行时 define\n    context.defines\n      .filter((define) => define.runtime)\n      .forEach((define) => {\n        const valuePlaceHolder = `${DefineValuePlaceholder}${define.name}`;\n        shader = shader.replace(valuePlaceHolder, `${define.value}`);\n      });\n\n    context.shader = shader;\n\n    // 添加 uniform 绑定的数据\n    context.uniforms.forEach((uniform) => {\n      // const binding = this.bindings.find((b) => b.name === uniform.name);\n      // if (binding) {\n      //   // @ts-ignore\n      //   uniform.data = binding.referer || binding.data;\n      //   // @ts-ignore\n      //   uniform.isReferer = !!binding.referer;\n      // }\n\n      // 未指定数据，尝试根据 uniform 类型初始化\n      if (!uniform.data) {\n        if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n          let sizePerElement = 1;\n          if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n            sizePerElement = 1;\n          } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n            sizePerElement = 4;\n          }\n          uniform.data = new Float32Array(\n            context.output.length! * sizePerElement,\n          ).fill(0);\n        }\n      }\n    });\n    // } else if (uniform.type === 'image2D') {\n    //   // @ts-ignore\n    //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n    // }\n\n    this.compiledBundle.context = context;\n    this.model = await this.engine.createComputeModel(\n      this.compiledBundle.context,\n    );\n  }\n}\n"],"file":"Kernel.js"}