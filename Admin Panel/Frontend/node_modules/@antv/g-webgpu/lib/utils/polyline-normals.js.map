{"version":3,"sources":["../../src/utils/polyline-normals.ts"],"names":["extrusions","positions","out","point","normal","scale","addNext","push","length","points","closed","indexOffset","lineA","lineB","tangent","miter","_lastFlip","_started","_normal","tmp","count","miterLimit","attrPos","attrIndex","attrCounters","slice","total","i","index","last","cur","next","miterLen","flip","bevel","isFinite","normals"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { copy, create, dot } from 'gl-vec2';\n// @ts-ignore\nimport { computeMiter, direction, normal } from 'polyline-miter-util';\n\nfunction extrusions(\n  positions: number[][],\n  out: any,\n  point: number[],\n  normal: number[],\n  scale: number,\n) {\n  addNext(out, normal, -scale);\n  addNext(out, normal, scale);\n  positions.push(point);\n  positions.push(point);\n}\n\nfunction addNext(out: any[][], normal: number[], length: number) {\n  out.push([[normal[0], normal[1]], length]);\n}\n\nexport default function(\n  points: number[][],\n  closed: boolean,\n  indexOffset?: number,\n) {\n  const lineA = [0, 0];\n  const lineB = [0, 0];\n  const tangent = [0, 0];\n  const miter = [0, 0];\n  let _lastFlip = -1;\n  let _started = false;\n  let _normal: any = null;\n  const tmp = create();\n  let count = indexOffset || 0;\n  const miterLimit = 3;\n\n  const out: any = [];\n  const attrPos: number[][] = [];\n  const attrIndex = [];\n  const attrCounters: number[] = [0, 0];\n  if (closed) {\n    points = points.slice();\n    points.push(points[0]);\n  }\n\n  const total = points.length;\n  for (let i = 1; i < total; i++) {\n    const index = count;\n    const last = points[i - 1];\n    const cur = points[i];\n    const next = i < points.length - 1 ? points[i + 1] : null;\n\n    attrCounters.push(i / total, i / total);\n\n    direction(lineA, cur, last);\n\n    if (!_normal) {\n      _normal = [0, 0];\n      normal(_normal, lineA);\n    }\n\n    if (!_started) {\n      _started = true;\n      extrusions(attrPos, out, last, _normal, 1);\n    }\n\n    attrIndex.push([index + 0, index + 1, index + 2]);\n\n    if (!next) {\n      // no miter, simple segment\n      normal(_normal, lineA); // reset normal\n      extrusions(attrPos, out, cur, _normal, 1);\n      attrIndex.push(\n        _lastFlip === 1\n          ? [index, index + 2, index + 3]\n          : [index + 2, index + 1, index + 3],\n      );\n\n      count += 2;\n    } else {\n      // miter with last\n      // get unit dir of next line\n      direction(lineB, next, cur);\n\n      // stores tangent & miter\n      let miterLen = computeMiter(tangent, miter, lineA, lineB, 1);\n\n      // get orientation\n      let flip = dot(tangent, _normal) < 0 ? -1 : 1;\n\n      const bevel = miterLen > miterLimit;\n\n      // 处理相邻线段重叠的情况\n      if (!isFinite(miterLen)) {\n        normal(_normal, lineA); // reset normal\n        extrusions(attrPos, out, cur, _normal, 1);\n        attrIndex.push(\n          _lastFlip === 1\n            ? [index, index + 2, index + 3]\n            : [index + 2, index + 1, index + 3],\n        );\n\n        count += 2;\n        _lastFlip = flip;\n        continue;\n      }\n\n      if (bevel) {\n        miterLen = miterLimit;\n        attrCounters.push(i / total);\n\n        // next two points in our first segment\n        addNext(out, _normal, -flip);\n        attrPos.push(cur);\n        addNext(out, miter, miterLen * flip);\n        attrPos.push(cur);\n\n        attrIndex.push(\n          _lastFlip !== -flip\n            ? [index, index + 2, index + 3]\n            : [index + 2, index + 1, index + 3],\n        );\n\n        // now add the bevel triangle\n        attrIndex.push([index + 2, index + 3, index + 4]);\n\n        normal(tmp, lineB);\n        copy(_normal, tmp); // store normal for next round\n\n        addNext(out, _normal, -flip);\n        attrPos.push(cur);\n\n        // the miter is now the normal for our next join\n        count += 3;\n      } else {\n        // miter\n        // next two points for our miter join\n        extrusions(attrPos, out, cur, miter, miterLen);\n        attrIndex.push(\n          _lastFlip === 1\n            ? [index, index + 2, index + 3]\n            : [index + 2, index + 1, index + 3],\n        );\n\n        flip = -1;\n\n        // the miter is now the normal for our next join\n        copy(_normal, miter);\n        count += 2;\n      }\n      _lastFlip = flip;\n    }\n  }\n\n  return {\n    normals: out,\n    attrIndex,\n    attrPos,\n    attrCounters,\n  };\n}\n"],"file":"polyline-normals.js"}