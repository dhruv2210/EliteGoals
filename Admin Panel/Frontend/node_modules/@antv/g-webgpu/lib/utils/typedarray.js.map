{"version":3,"sources":["../../src/utils/typedarray.ts"],"names":["merge","a","b","Error","length","Object","prototype","toString","call","c","constructor","set"],"mappings":";;;;;;;AAAO,SAASA,KAAT,CAAeC,CAAf,EAAgCC,CAAhC,EAAiD;AACtD;AACA,MAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACD,GAJqD,CAMtD;AACA;AACA;;;AACA,MAAI,CAACD,CAAD,IAAMA,CAAC,CAACE,MAAF,KAAa,CAAvB,EAA0B;AACxB,WAAOH,CAAP;AACD;;AACD,MAAI,CAACA,CAAD,IAAMA,CAAC,CAACG,MAAF,KAAa,CAAvB,EAA0B;AACxB,WAAOF,CAAP;AACD,GAdqD,CAgBtD;;;AACA,MAAIG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,CAA/B,MAAsCI,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,CAA/B,CAA1C,EAA6E;AAC3E,UAAM,IAAIC,KAAJ,CACJ,4EADI,CAAN;AAGD,GArBqD,CAuBtD;;;AACA,MAAMM,CAAC,GAAG,IAAIR,CAAC,CAACS,WAAN,CAAkBT,CAAC,CAACG,MAAF,GAAWF,CAAC,CAACE,MAA/B,CAAV;AACAK,EAAAA,CAAC,CAACE,GAAF,CAAMV,CAAN;AACAQ,EAAAA,CAAC,CAACE,GAAF,CAAMT,CAAN,EAASD,CAAC,CAACG,MAAX;AAEA,SAAOK,CAAP;AACD","sourcesContent":["export function merge(a: Float32Array, b: Float32Array) {\n  // Checks for truthy values on both arrays\n  if (!a && !b) {\n    throw new Error('Please specify valid arguments for parameters a and b.');\n  }\n\n  // Checks for truthy values or empty arrays on each argument\n  // to avoid the unnecessary construction of a new array and\n  // the type comparison\n  if (!b || b.length === 0) {\n    return a;\n  }\n  if (!a || a.length === 0) {\n    return b;\n  }\n\n  // Make sure that both typed arrays are of the same type\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    throw new Error(\n      'The types of the two arguments passed for parameters a and b do not match.',\n    );\n  }\n\n  // @ts-ignore\n  const c = new a.constructor(a.length + b.length);\n  c.set(a);\n  c.set(b, a.length);\n\n  return c;\n}\n"],"file":"typedarray.js"}