{"version":3,"sources":["../../../src/renderable/point/index.ts"],"names":["gl","IDENTIFIER","inject","injectable","named","encodePickingColor","Renderable","pointShapes","Point","Systems","MaterialSystem","GeometrySystem","ShaderModuleService","name","data","mesh","getMeshComponent","material","setUniform","shaderModuleService","registerModule","vs","pointVert","fs","pointFrag","getModule","extractedUniforms","uniforms","materialSystem","createShaderMaterial","vertexShader","fragmentShader","cull","enable","depth","blend","func","srcRGB","SRC_ALPHA","dstRGB","ONE_MINUS_SRC_ALPHA","srcAlpha","dstAlpha","u_device_pixel_ratio","window","devicePixelRatio","attributes","buildAttributes","geometry","geometrySystem","createInstancedBufferGeometry","maxInstancedCount","instancedOffsets","length","vertexCount","setIndex","setAttribute","Float32Array","from","positions","arrayStride","stepMode","shaderLocation","offset","format","instancedColors","instancedSizes","instancedShapes","instancedPickingColors","setMaterial","setGeometry","config","index","push","id","indexOf","shape","color","position","size","Array","isArray","forEach","i","buildAttribute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAGEA,EAHF,EAIEC,UAJF,QAOO,qBAPP;AAQA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,QAA0C,WAA1C;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAASC,UAAT,QAA2B,eAA3B;;;;;;;AAIA,IAAMC,WAAW,GAAG,CAClB,QADkB,EAElB,UAFkB,EAGlB,QAHkB,EAIlB,UAJkB,EAKlB,SALkB,EAMlB,SANkB,EAOlB,UAPkB,EAQlB,SARkB,EASlB,QATkB,CAApB;AA8CA;AAJA;AACA;AACA;AAEA,IAAaC,KAAb,WADCL,UAAU,EACX,UAGGD,MAAM,CAACD,UAAU,CAACQ,OAAZ,CAHT,UAIGL,KAAK,CAACH,UAAU,CAACS,cAAZ,CAJR,UAOGR,MAAM,CAACD,UAAU,CAACQ,OAAZ,CAPT,UAQGL,KAAK,CAACH,UAAU,CAACU,cAAZ,CARR,UAWGT,MAAM,CAACD,UAAU,CAACW,mBAAZ,CAXT;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6CAoBK;AAAA,UALDC,IAKC,QALDA,IAKC;AAAA,UAJDC,IAIC,QAJDA,IAIC;AACD,UAAMC,IAAI,GAAG,KAAKC,gBAAL,EAAb;;AACA,UAAID,IAAI,IAAIA,IAAI,CAACE,QAAjB,EAA2B;AACzB,YAAIJ,IAAI,KAAK,aAAb,EAA4B;AAC1BE,UAAAA,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAyB,gBAAzB,EAA2CJ,IAA3C;AACD,SAFD,MAEO,IAAID,IAAI,KAAK,aAAb,EAA4B;AACjCE,UAAAA,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAyB,gBAAzB,EAA2CJ,IAA3C;AACD,SAFM,MAEA,IAAID,IAAI,KAAK,eAAb,EAA8B;AACnCE,UAAAA,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAyB,kBAAzB,EAA6CJ,IAA7C;AACD,SAFM,MAEA,IAAID,IAAI,KAAK,SAAb,EAAwB;AAC7BE,UAAAA,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAyB,WAAzB,EAAsCJ,IAAtC;AACD,SAFM,MAEA,IAAID,IAAI,KAAK,MAAb,EAAqB;AAC1BE,UAAAA,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAyB,QAAzB,EAAmCJ,IAAnC;AACD;AACF;AACF;AAnCH;AAAA;AAAA,sCAqC8B;AAC1B,WAAKK,mBAAL,CAAyBC,cAAzB,CAAwC,MAAxC,EAAgD;AAC9CC,QAAAA,EAAE,EAAEC,SAD0C;AAE9CC,QAAAA,EAAE,EAAEC;AAF0C,OAAhD;;AAD0B,kCAStB,KAAKL,mBAAL,CAAyBM,SAAzB,CAAmC,MAAnC,CATsB;AAAA,UAMxBJ,EANwB,yBAMxBA,EANwB;AAAA,UAOxBE,EAPwB,yBAOxBA,EAPwB;AAAA,UAQdG,iBARc,yBAQxBC,QARwB;;AAW1B,UAAMV,QAAQ,GAAG,KAAKW,cAAL,CAAoBC,oBAApB,CAAyC;AACxDC,QAAAA,YAAY,EAAET,EAD0C;AAExDU,QAAAA,cAAc,EAAER,EAFwC;AAGxDS,QAAAA,IAAI,EAAE;AACJC,UAAAA,MAAM,EAAE;AADJ,SAHkD;AAMxDC,QAAAA,KAAK,EAAE;AACLD,UAAAA,MAAM,EAAE;AADH,SANiD;AASxDE,QAAAA,KAAK,EAAE;AACLF,UAAAA,MAAM,EAAE,IADH;AAELG,UAAAA,IAAI,EAAE;AACJC,YAAAA,MAAM,EAAErC,EAAE,CAACsC,SADP;AAEJC,YAAAA,MAAM,EAAEvC,EAAE,CAACwC,mBAFP;AAGJC,YAAAA,QAAQ,EAAE,CAHN;AAIJC,YAAAA,QAAQ,EAAE;AAJN;AAFD;AATiD,OAAzC,CAAjB,CAX0B,CA+B1B;;AACAzB,MAAAA,QAAQ,CAACC,UAAT;AACEyB,QAAAA,oBAAoB,EAAEC,MAAM,CAACC;AAD/B,SAEKnB,iBAFL;AAKA,UAAMoB,UAAU,GAAG,KAAKC,eAAL,EAAnB;AAEA,UAAMC,QAAQ,GAAG,KAAKC,cAAL,CAAoBC,6BAApB,CAAkD;AACjEC,QAAAA,iBAAiB,EAAEL,UAAU,CAACM,gBAAX,CAA4BC,MAA5B,GAAqC,CADS;AAEjEC,QAAAA,WAAW,EAAE;AAFoD,OAAlD,CAAjB;AAKAN,MAAAA,QAAQ,CAACO,QAAT,CAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAlB;AAEAP,MAAAA,QAAQ,CAACQ,YAAT,CAAsB,UAAtB,EAAkCC,YAAY,CAACC,IAAb,CAAkBZ,UAAU,CAACa,SAA7B,CAAlC,EAA2E;AACzEC,QAAAA,WAAW,EAAE,IAAI,CADwD;AAEzEC,QAAAA,QAAQ,EAAE,QAF+D;AAGzEf,QAAAA,UAAU,EAAE,CACV;AACEgB,UAAAA,cAAc,EAAE,CADlB;AAEEC,UAAAA,MAAM,EAAE,CAFV;AAGEC,UAAAA,MAAM,EAAE;AAHV,SADU;AAH6D,OAA3E;AAYAhB,MAAAA,QAAQ,CAACQ,YAAT,CACE,QADF,EAEEC,YAAY,CAACC,IAAb,CAAkBZ,UAAU,CAACM,gBAA7B,CAFF,EAGE;AACEQ,QAAAA,WAAW,EAAE,IAAI,CADnB;AAEEC,QAAAA,QAAQ,EAAE,UAFZ;AAGEf,QAAAA,UAAU,EAAE,CACV;AACEgB,UAAAA,cAAc,EAAE,CADlB;AAEEC,UAAAA,MAAM,EAAE,CAFV;AAGEC,UAAAA,MAAM,EAAE;AAHV,SADU;AAHd,OAHF;AAgBAhB,MAAAA,QAAQ,CAACQ,YAAT,CACE,OADF,EAEEC,YAAY,CAACC,IAAb,CAAkBZ,UAAU,CAACmB,eAA7B,CAFF,EAGE;AACEL,QAAAA,WAAW,EAAE,IAAI,CADnB;AAEEC,QAAAA,QAAQ,EAAE,UAFZ;AAGEf,QAAAA,UAAU,EAAE,CACV;AACEgB,UAAAA,cAAc,EAAE,CADlB;AAEEC,UAAAA,MAAM,EAAE,CAFV;AAGEC,UAAAA,MAAM,EAAE;AAHV,SADU;AAHd,OAHF;AAgBAhB,MAAAA,QAAQ,CAACQ,YAAT,CACE,MADF,EAEEC,YAAY,CAACC,IAAb,CAAkBZ,UAAU,CAACoB,cAA7B,CAFF,EAGE;AACEN,QAAAA,WAAW,EAAE,CADf;AAEEC,QAAAA,QAAQ,EAAE,UAFZ;AAGEf,QAAAA,UAAU,EAAE,CACV;AACEgB,UAAAA,cAAc,EAAE,CADlB;AAEEC,UAAAA,MAAM,EAAE,CAFV;AAGEC,UAAAA,MAAM,EAAE;AAHV,SADU;AAHd,OAHF;AAgBAhB,MAAAA,QAAQ,CAACQ,YAAT,CACE,OADF,EAEEC,YAAY,CAACC,IAAb,CAAkBZ,UAAU,CAACqB,eAA7B,CAFF,EAGE;AACEP,QAAAA,WAAW,EAAE,CADf;AAEEC,QAAAA,QAAQ,EAAE,UAFZ;AAGEf,QAAAA,UAAU,EAAE,CACV;AACEgB,UAAAA,cAAc,EAAE,CADlB;AAEEC,UAAAA,MAAM,EAAE,CAFV;AAGEC,UAAAA,MAAM,EAAE;AAHV,SADU;AAHd,OAHF;AAgBAhB,MAAAA,QAAQ,CAACQ,YAAT,CACE,gBADF,EAEEC,YAAY,CAACC,IAAb,CAAkBZ,UAAU,CAACsB,sBAA7B,CAFF,EAGE;AACER,QAAAA,WAAW,EAAE,IAAI,CADnB;AAEEC,QAAAA,QAAQ,EAAE,UAFZ;AAGEf,QAAAA,UAAU,EAAE,CACV;AACEgB,UAAAA,cAAc,EAAE,CADlB;AAEEC,UAAAA,MAAM,EAAE,CAFV;AAGEC,UAAAA,MAAM,EAAE;AAHV,SADU;AAHd,OAHF;AAgBA,WAAKK,WAAL,CAAiBpD,QAAjB;AACA,WAAKqD,WAAL,CAAiBtB,QAAjB;AACD;AAjLH;AAAA;AAAA,mCAoLIuB,MApLJ,EAqLIzB,UArLJ,EAsLI0B,KAtLJ,EAuLI;AAAA;;AACA,+BAAA1B,UAAU,CAACsB,sBAAX,EAAkCK,IAAlC,iDACKpE,kBAAkB,CAACkE,MAAM,CAACG,EAAP,IAAaF,KAAd,CADvB;;AAIA1B,MAAAA,UAAU,CAACqB,eAAX,CAA2BM,IAA3B,CACElE,WAAW,CAACoE,OAAZ,CAAoBJ,MAAM,CAACK,KAAP,IAAgB,QAApC,CADF;;AAGA,gCAAA9B,UAAU,CAACmB,eAAX,EAA2BQ,IAA3B,kDAAoCF,MAAM,CAACM,KAAP,IAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAApD;;AACA,gCAAA/B,UAAU,CAACM,gBAAX,EAA4BqB,IAA5B,kDAAqCF,MAAM,CAACO,QAAP,IAAmB,CAAC,CAAD,EAAI,CAAJ,CAAxD;;AACA,gCAAAhC,UAAU,CAACoB,cAAX,EAA0BO,IAA1B,kDAAmCF,MAAM,CAACQ,IAAP,IAAe,CAAC,GAAD,EAAM,GAAN,CAAlD;AACD;AAlMH;AAAA;AAAA,sCAoM4B;AAAA;;AACxB,UAAMjC,UAA+B,GAAG;AACtCa,QAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAC,CAAvB,EAA0B,CAA1B,CAD2B;AAEtCP,QAAAA,gBAAgB,EAAE,EAFoB;AAGtCa,QAAAA,eAAe,EAAE,EAHqB;AAItCC,QAAAA,cAAc,EAAE,EAJsB;AAKtCC,QAAAA,eAAe,EAAE,EALqB;AAMtCC,QAAAA,sBAAsB,EAAE;AANc,OAAxC;;AASA,UAAIY,KAAK,CAACC,OAAN,CAAc,KAAKV,MAAnB,CAAJ,EAAgC;AAC9B,aAAKA,MAAL,CAAYW,OAAZ,CAAoB,UAACX,MAAD,EAASY,CAAT,EAAe;AACjC,UAAA,MAAI,CAACC,cAAL,CAAoBb,MAApB,EAA4BzB,UAA5B,EAAwCqC,CAAxC;AACD,SAFD;AAGD,OAJD,MAIO;AACL,aAAKC,cAAL,CAAoB,KAAKb,MAAzB,EAAiCzB,UAAjC,EAA6C,CAA7C;AACD;;AAED,aAAOA,UAAP;AACD;AAvNH;;AAAA;AAAA,EAA2BxC,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  BufferData,\n  GeometrySystem,\n  gl,\n  IDENTIFIER,\n  IShaderModuleService,\n  MaterialSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { encodePickingColor } from '../../utils/picking';\nimport { Renderable } from '../Renderable';\nimport pointFrag from './shaders/webgl.point.frag.glsl';\nimport pointVert from './shaders/webgl.point.vert.glsl';\n\nconst pointShapes = [\n  'circle',\n  'triangle',\n  'square',\n  'pentagon',\n  'hexagon',\n  'octogon',\n  'hexagram',\n  'rhombus',\n  'vesica',\n];\n\ninterface IPointConfig {\n  id: number;\n  shape:\n    | 'circle'\n    | 'triangle'\n    | 'square'\n    | 'pentagon'\n    | 'hexagon'\n    | 'octogon'\n    | 'hexagram'\n    | 'rhombus'\n    | 'vesica';\n  position: [number, number];\n  size: [number, number];\n  color: [number, number, number, number]; // sRGB\n  opacity: number;\n  strokeWidth: number;\n  strokeOpacity: number;\n  strokeColor: [number, number, number, number]; // sRGB\n}\n\ninterface IInstanceAttributes {\n  positions: number[];\n  instancedOffsets: number[];\n  instancedColors: number[];\n  instancedSizes: number[];\n  instancedShapes: number[];\n  instancedPickingColors: number[];\n}\n\n/**\n * Use SDF to draw 2D point with stroke.\n */\n@injectable()\nexport class Point extends Renderable<\n  Partial<IPointConfig> | Array<Partial<IPointConfig>>\n> {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.MaterialSystem)\n  private readonly materialSystem: MaterialSystem;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.GeometrySystem)\n  private readonly geometrySystem: GeometrySystem;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  protected onAttributeChanged({\n    name,\n    data,\n  }: {\n    name: string;\n    data: BufferData;\n  }) {\n    const mesh = this.getMeshComponent();\n    if (mesh && mesh.material) {\n      if (name === 'strokeWidth') {\n        mesh.material.setUniform('u_stroke_width', data);\n      } else if (name === 'strokeColor') {\n        mesh.material.setUniform('u_stroke_color', data);\n      } else if (name === 'strokeOpacity') {\n        mesh.material.setUniform('u_stroke_opacity', data);\n      } else if (name === 'opacity') {\n        mesh.material.setUniform('u_opacity', data);\n      } else if (name === 'blur') {\n        mesh.material.setUniform('u_blur', data);\n      }\n    }\n  }\n\n  protected onEntityCreated() {\n    this.shaderModuleService.registerModule('grid', {\n      vs: pointVert,\n      fs: pointFrag,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('grid');\n\n    const material = this.materialSystem.createShaderMaterial({\n      vertexShader: vs!,\n      fragmentShader: fs!,\n      cull: {\n        enable: false,\n      },\n      depth: {\n        enable: false,\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          srcAlpha: 1,\n          dstAlpha: 1,\n        },\n      },\n    });\n\n    // TODO: support define stroke-relative props per point\n    material.setUniform({\n      u_device_pixel_ratio: window.devicePixelRatio,\n      ...extractedUniforms,\n    });\n\n    const attributes = this.buildAttributes();\n\n    const geometry = this.geometrySystem.createInstancedBufferGeometry({\n      maxInstancedCount: attributes.instancedOffsets.length / 2,\n      vertexCount: 6,\n    });\n\n    geometry.setIndex([0, 2, 1, 0, 3, 2]);\n\n    geometry.setAttribute('position', Float32Array.from(attributes.positions), {\n      arrayStride: 4 * 2,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 0,\n          offset: 0,\n          format: 'float2',\n        },\n      ],\n    });\n\n    geometry.setAttribute(\n      'offset',\n      Float32Array.from(attributes.instancedOffsets),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'instance',\n        attributes: [\n          {\n            shaderLocation: 1,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute(\n      'color',\n      Float32Array.from(attributes.instancedColors),\n      {\n        arrayStride: 4 * 4,\n        stepMode: 'instance',\n        attributes: [\n          {\n            shaderLocation: 2,\n            offset: 0,\n            format: 'float4',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute(\n      'size',\n      Float32Array.from(attributes.instancedSizes),\n      {\n        arrayStride: 4,\n        stepMode: 'instance',\n        attributes: [\n          {\n            shaderLocation: 3,\n            offset: 0,\n            format: 'float',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute(\n      'shape',\n      Float32Array.from(attributes.instancedShapes),\n      {\n        arrayStride: 4,\n        stepMode: 'instance',\n        attributes: [\n          {\n            shaderLocation: 4,\n            offset: 0,\n            format: 'float',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute(\n      'a_PickingColor',\n      Float32Array.from(attributes.instancedPickingColors),\n      {\n        arrayStride: 4 * 3,\n        stepMode: 'instance',\n        attributes: [\n          {\n            shaderLocation: 6,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n    );\n\n    this.setMaterial(material);\n    this.setGeometry(geometry);\n  }\n\n  private buildAttribute(\n    config: Partial<IPointConfig>,\n    attributes: IInstanceAttributes,\n    index: number,\n  ) {\n    attributes.instancedPickingColors.push(\n      ...encodePickingColor(config.id || index),\n    );\n\n    attributes.instancedShapes.push(\n      pointShapes.indexOf(config.shape || 'circle'),\n    );\n    attributes.instancedColors.push(...(config.color || [1, 0, 0, 1]));\n    attributes.instancedOffsets.push(...(config.position || [0, 0]));\n    attributes.instancedSizes.push(...(config.size || [0.2, 0.2]));\n  }\n\n  private buildAttributes() {\n    const attributes: IInstanceAttributes = {\n      positions: [1, 1, 1, -1, -1, -1, -1, 1],\n      instancedOffsets: [],\n      instancedColors: [],\n      instancedSizes: [],\n      instancedShapes: [],\n      instancedPickingColors: [],\n    };\n\n    if (Array.isArray(this.config)) {\n      this.config.forEach((config, i) => {\n        this.buildAttribute(config, attributes, i);\n      });\n    } else {\n      this.buildAttribute(this.config, attributes, 0);\n    }\n\n    return attributes;\n  }\n}\n"],"file":"index.js"}