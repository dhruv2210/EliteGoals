{"version":3,"sources":["../../../src/renderable/line/index.ts"],"names":["gl","IDENTIFIER","inject","injectable","named","getNormals","Renderable","Line","Systems","MaterialSystem","GeometrySystem","ShaderModuleService","vertexCount","name","data","mesh","getMeshComponent","material","setUniform","colors","Array","fill","undefined","map","reduce","prev","cur","geometry","setAttribute","Float32Array","from","arrayStride","stepMode","attributes","shaderLocation","offset","format","shaderModuleService","registerModule","vs","lineVert","fs","lineFrag","getModule","extractedUniforms","uniforms","materialSystem","createShaderMaterial","vertexShader","fragmentShader","config","points","normals","attrIndex","attrPos","attrCounters","length","geometrySystem","createBufferGeometry","setMaterial","setGeometry","setCull","enable","face","BACK","setAttributes","dashArray","dashOffset","dashRatio","thickness","attrNormal","attrMiter","forEach","n","norm","miter","push","setIndex","color"],"mappings":"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","sourcesContent":["import {\n  BufferData,\n  GeometrySystem,\n  gl,\n  IDENTIFIER,\n  IShaderModuleService,\n  MaterialSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { encodePickingColor } from '../../utils/picking';\nimport getNormals from '../../utils/polyline-normals';\nimport { Renderable } from '../Renderable';\nimport lineFrag from './shaders/webgl.line.frag.glsl';\nimport lineVert from './shaders/webgl.line.vert.glsl';\n\ninterface ILineConfig {\n  id: number;\n  points: number[][];\n  thickness: number;\n  color: [number, number, number, number]; // sRGB\n  dashOffset: number;\n  dashArray: number;\n  dashRatio: number;\n}\n\n@injectable()\nexport class Line extends Renderable<Partial<ILineConfig>> {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.MaterialSystem)\n  private readonly materialSystem: MaterialSystem;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.GeometrySystem)\n  private readonly geometrySystem: GeometrySystem;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  private vertexCount: number;\n\n  protected onAttributeChanged({\n    name,\n    data,\n  }: {\n    name: string;\n    data: BufferData;\n  }) {\n    const mesh = this.getMeshComponent();\n    if (mesh && mesh.material) {\n      switch (name) {\n        case 'dashArray':\n          mesh.material.setUniform('u_dash_array', data);\n          break;\n        case 'dashOffset':\n          mesh.material.setUniform('u_dash_offset', data);\n          break;\n        case 'dashRatio':\n          mesh.material.setUniform('u_dash_ratio', data);\n          break;\n        case 'thickness':\n          mesh.material.setUniform('u_thickness', data);\n          break;\n        case 'color':\n          const colors = new Array(this.vertexCount)\n            .fill(undefined)\n            .map(() => data)\n            .reduce((prev, cur) => {\n              // @ts-ignore\n              return [...prev, ...cur];\n            }, []);\n          // @ts-ignore\n          mesh.geometry.setAttribute('a_color', Float32Array.from(colors), {\n            arrayStride: 4 * 4,\n            stepMode: 'vertex',\n            attributes: [\n              {\n                shaderLocation: 1,\n                offset: 0,\n                format: 'float4',\n              },\n            ],\n          });\n          break;\n      }\n    }\n  }\n\n  protected onEntityCreated() {\n    this.shaderModuleService.registerModule('line', {\n      vs: lineVert,\n      fs: lineFrag,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('line');\n\n    const material = this.materialSystem.createShaderMaterial({\n      vertexShader: vs!,\n      fragmentShader: fs!,\n    });\n\n    const { normals, attrIndex, attrPos, attrCounters } = getNormals(\n      this.config.points!,\n      false,\n    );\n    const vertexCount = attrPos.length;\n    this.vertexCount = vertexCount;\n    const geometry = this.geometrySystem.createBufferGeometry({\n      vertexCount,\n    });\n\n    this.setMaterial(material);\n    this.setGeometry(geometry);\n\n    material\n      .setCull({\n        enable: false,\n        face: gl.BACK,\n      })\n      // @ts-ignore\n      .setUniform(extractedUniforms);\n\n    this.setAttributes({\n      dashArray: this.config.dashArray,\n      dashOffset: this.config.dashOffset,\n      dashRatio: this.config.dashRatio,\n      thickness: this.config.thickness,\n    });\n\n    const attrNormal: number[][] = [];\n    const attrMiter: number[] = [];\n\n    normals.forEach((n: number[][]) => {\n      const norm = n[0];\n      const miter = n[1];\n      attrNormal.push([norm[0], norm[1]]);\n      // @ts-ignore\n      attrMiter.push(miter);\n    });\n\n    // [[0,1,2], [2,1,3]]\n    geometry.setIndex(\n      attrIndex.reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []),\n    );\n\n    geometry.setAttribute(\n      'a_pos',\n      Float32Array.from(\n        attrPos.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    const colors = new Array(vertexCount)\n      .fill(undefined)\n      .map(() => [...this.config.color!])\n      .reduce((prev, cur) => {\n        return [...prev, ...cur];\n      }, []);\n    geometry.setAttribute('a_color', Float32Array.from(colors), {\n      arrayStride: 4 * 4,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float4',\n        },\n      ],\n    });\n\n    geometry.setAttribute('a_line_miter', Float32Array.from(attrMiter), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n\n    geometry.setAttribute(\n      'a_line_normal',\n      Float32Array.from(\n        attrNormal.reduce((prev, cur) => {\n          return [...prev, ...cur];\n        }, []),\n      ),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 3,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n\n    geometry.setAttribute('a_counters', Float32Array.from(attrCounters), {\n      arrayStride: 4 * 1,\n      stepMode: 'vertex',\n      attributes: [\n        {\n          shaderLocation: 4,\n          offset: 0,\n          format: 'float',\n        },\n      ],\n    });\n  }\n}\n"],"file":"index.js"}