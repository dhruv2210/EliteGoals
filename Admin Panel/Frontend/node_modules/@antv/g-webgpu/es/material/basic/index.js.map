{"version":3,"sources":["../../../src/material/basic/index.ts"],"names":["IDENTIFIER","mat3","inject","injectable","Material","Basic","RenderEngine","ShaderModuleService","component","getComponent","vertexShaderGLSL","engine","supportWebGPU","webgpuVertexShaderGLSL","webglVertexShaderGLSL","fragmentShaderGLSL","webgpuFragmentShaderGLSL","webglFragmentShaderGLSL","shaderModuleService","registerModule","vs","fs","getModule","extractedUniforms","uniforms","setUniform","config","map","setDefines","USE_UV","USE_MAP","uvTransform","create"],"mappings":";;;;;;;;;;;;;;;;AAAA,SACEA,UADF,QAIO,qBAJP;AAKA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,WAAnC;AACA,SAASC,QAAT,QAAyB,IAAzB;;;;;;;;;;;;;AAgBA;AAJA;AACA;AACA;AACA;AACaC,KAAb,WALCF,UAAU,EAKX,UACGD,MAAM,CAACF,UAAU,CAACM,YAAZ,CADT,UAIGJ,MAAM,CAACF,UAAU,CAACO,mBAAZ,CAJT;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,sCAO8B;AAC1B,UAAMC,SAAS,GAAG,KAAKC,YAAL,EAAlB;AACA,UAAMC,gBAAgB,GAAG,KAAKC,MAAL,CAAYC,aAAZ,GACrBC,sBADqB,GAErBC,qBAFJ;AAGA,UAAMC,kBAAkB,GAAG,KAAKJ,MAAL,CAAYC,aAAZ,GACvBI,wBADuB,GAEvBC,uBAFJ;AAIA,WAAKC,mBAAL,CAAyBC,cAAzB,CAAwC,gBAAxC,EAA0D;AACxDC,QAAAA,EAAE,EAAEV,gBADoD;AAExDW,QAAAA,EAAE,EAAEN;AAFoD,OAA1D;;AAT0B,kCAiBtB,KAAKG,mBAAL,CAAyBI,SAAzB,CAAmC,gBAAnC,CAjBsB;AAAA,UAcxBF,EAdwB,yBAcxBA,EAdwB;AAAA,UAexBC,EAfwB,yBAexBA,EAfwB;AAAA,UAgBdE,iBAhBc,yBAgBxBC,QAhBwB;;AAmB1BhB,MAAAA,SAAS,CAACE,gBAAV,GAA6BU,EAA7B;AACAZ,MAAAA,SAAS,CAACO,kBAAV,GAA+BM,EAA/B,CApB0B,CAqB1B;;AACAb,MAAAA,SAAS,CAACiB,UAAV,CAAqBF,iBAArB;;AAEA,UAAI,KAAKG,MAAL,CAAYC,GAAhB,EAAqB;AACnBnB,QAAAA,SAAS,CAACoB,UAAV,CAAqB;AACnBC,UAAAA,MAAM,EAAE,CADW;AAEnBC,UAAAA,OAAO,EAAE;AAFU,SAArB;AAIAtB,QAAAA,SAAS,CAACiB,UAAV,CAAqB;AACnB;AACAE,UAAAA,GAAG,EAAE,KAAKD,MAAL,CAAYC,GAFE;AAGnBI,UAAAA,WAAW,EAAE9B,IAAI,CAAC+B,MAAL;AAHM,SAArB;AAKD;AACF;AA1CH;;AAAA;AAAA,EAA2B5B,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  IDENTIFIER,\n  IRendererService,\n  IShaderModuleService,\n} from '@antv/g-webgpu-core';\nimport { mat3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Material } from '..';\nimport { Texture2D } from '../../texture/Texture2D';\nimport webglFragmentShaderGLSL from './shaders/webgl.basic.frag.glsl';\nimport webglVertexShaderGLSL from './shaders/webgl.basic.vert.glsl';\nimport webgpuFragmentShaderGLSL from './shaders/webgpu.basic.frag.glsl';\nimport webgpuVertexShaderGLSL from './shaders/webgpu.basic.vert.glsl';\n\nexport interface IBasicMaterialParams {\n  map: Texture2D;\n}\n\n@injectable()\n/**\n * This material is not affected by lights.\n * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial\n */\nexport class Basic extends Material<Partial<IBasicMaterialParams>> {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  protected onEntityCreated() {\n    const component = this.getComponent();\n    const vertexShaderGLSL = this.engine.supportWebGPU\n      ? webgpuVertexShaderGLSL\n      : webglVertexShaderGLSL;\n    const fragmentShaderGLSL = this.engine.supportWebGPU\n      ? webgpuFragmentShaderGLSL\n      : webglFragmentShaderGLSL;\n\n    this.shaderModuleService.registerModule('material-basic', {\n      vs: vertexShaderGLSL,\n      fs: fragmentShaderGLSL,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('material-basic');\n\n    component.vertexShaderGLSL = vs!;\n    component.fragmentShaderGLSL = fs!;\n    // @ts-ignore\n    component.setUniform(extractedUniforms);\n\n    if (this.config.map) {\n      component.setDefines({\n        USE_UV: 1,\n        USE_MAP: 1,\n      });\n      component.setUniform({\n        // @ts-ignore\n        map: this.config.map,\n        uvTransform: mat3.create(),\n      });\n    }\n  }\n}\n"],"file":"index.js"}