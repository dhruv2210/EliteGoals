{"version":3,"sources":["../src/World.ts"],"names":["createEntity","createWorldContainer","IDENTIFIER","WebGLEngine","WebGPUEngine","WebGPUConstants","inject","injectable","Camera","Geometry","Box","Merged","Plane","Sphere","Kernel","Material","Basic","Grid","Line","Point","Renderable","Renderer","Scene","TextureCache","Texture2D","createCanvas","View","World","ConfigService","container","engine","get","RenderEngine","configService","canvas","engineOptions","init","swapChainFormat","TextureFormat","BGRA8Unorm","antialiasing","entity","manager","TransformComponentManager","getComponentByEntity","MeshComponentManager","config","set","type","renderable","getNamed","setConfig","setEntity","geometry","getComponent","material","texture","params","geometrySystem","Systems","GeometrySystem","createBufferGeometry","createInstancedBufferGeometry","materialSystem","MaterialSystem","createShaderMaterial","precompiledBundle","kernel","setBundle","JSON","parse","renderer","systems","getAll","forEach","system","tearDown","destroy","interactor","InteractorService","worldContainer","engineClazz","navigator","gpu","isBound","bind","to","inSingletonScope","toSelf","whenTargetNamed","BOX","SPHERE","PLANE","MERGED","BASIC","POINT","LINE","GRID","world","setContainer"],"mappings":"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","sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport {\n  ComponentManager,\n  createEntity,\n  createWorldContainer,\n  Entity,\n  GeometrySystem,\n  // container,\n  IConfig,\n  IConfigService,\n  IDENTIFIER,\n  IInteractorService,\n  IRendererService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  KernelBundle,\n  MaterialSystem,\n  MeshComponent,\n  TransformComponent,\n} from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { Container, inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry, IGeometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { IMaterial, Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { IRenderable, Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\n\n@injectable()\nexport class World {\n  public static create(config: Partial<IConfig> = {}) {\n    const worldContainer = createWorldContainer();\n\n    // bind render engine, fallback to WebGL\n    const engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n    if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n      worldContainer\n        .bind<IRendererService>(IDENTIFIER.RenderEngine)\n        // @ts-ignore\n        .to(engineClazz)\n        .inSingletonScope();\n    }\n\n    worldContainer.bind(Renderer).toSelf();\n    worldContainer.bind(Kernel).toSelf();\n    worldContainer.bind(Renderable).toSelf();\n    worldContainer.bind(View).toSelf();\n    worldContainer.bind(Camera).toSelf();\n    worldContainer.bind(Scene).toSelf();\n    worldContainer.bind(World).toSelf();\n    worldContainer.bind(TextureCache).toSelf();\n    worldContainer.bind(Texture2D).toSelf();\n\n    // bind geometries\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Box)\n      .whenTargetNamed(Geometry.BOX);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Sphere)\n      .whenTargetNamed(Geometry.SPHERE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Plane)\n      .whenTargetNamed(Geometry.PLANE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Merged)\n      .whenTargetNamed(Geometry.MERGED);\n\n    // bind materials\n    worldContainer\n      .bind<IMaterial<unknown>>(IDENTIFIER.Material)\n      .to(Basic)\n      .whenTargetNamed(Material.BASIC);\n\n    // bind renderables\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Point)\n      .whenTargetNamed(Renderable.POINT);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Line)\n      .whenTargetNamed(Renderable.LINE);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Grid)\n      .whenTargetNamed(Renderable.GRID);\n\n    const world = worldContainer.get(World);\n    world.setContainer(worldContainer);\n    world.setConfig(config);\n    return world;\n  }\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private container: Container;\n\n  public async getEngine() {\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    const { canvas, engineOptions } = this.configService.get();\n    await engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n    return engine;\n  }\n\n  /**\n   * get transform component\n   * @param entity\n   */\n  public getTransformComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<TransformComponent>>(\n      IDENTIFIER.TransformComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public getMeshComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<MeshComponent>>(\n      IDENTIFIER.MeshComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public setConfig(config: Partial<IConfig>) {\n    this.configService.set(config);\n  }\n\n  public setContainer(container: Container) {\n    this.container = container;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public createEntity() {\n    return createEntity();\n  }\n\n  public createScene() {\n    return this.container.get(Scene);\n  }\n\n  public createCamera() {\n    return this.container.get(Camera);\n  }\n\n  public createView() {\n    return this.container.get(View);\n  }\n\n  // public createLight(type: string,) {\n  //   return this.container.getNamed(IDENTIFIER.Light, type)\n  // }\n\n  public createRenderable<T>(type?: string, config?: T) {\n    const renderable: Renderable = type\n      ? this.container.getNamed(IDENTIFIER.Renderable, type)\n      : this.container.get(Renderable);\n    const entity = createEntity();\n    renderable.setConfig(config || {});\n    renderable.setEntity(entity);\n    return renderable;\n  }\n\n  public createGeometry<T>(type: string, config?: T) {\n    const geometry: Geometry = this.container.getNamed(\n      IDENTIFIER.Geometry,\n      type,\n    );\n    const entity = createEntity();\n    geometry.setConfig(config || {});\n    geometry.setEntity(entity);\n    return geometry.getComponent();\n  }\n\n  public createMaterial<T>(type: string, config?: T) {\n    const material: Material = this.container.getNamed(\n      IDENTIFIER.Material,\n      type,\n    );\n    const entity = createEntity();\n    material.setConfig(config || {});\n    material.setEntity(entity, type);\n    return material.getComponent();\n  }\n\n  public createTexture2D(\n    config: ITexture2DInitializationOptions & { url: string },\n  ) {\n    const texture = this.container.get(Texture2D);\n    texture.setConfig(config);\n    return texture;\n  }\n\n  public createBufferGeometry(params?: { vertexCount: number }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createBufferGeometry(params);\n  }\n\n  public createInstancedBufferGeometry(params: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createInstancedBufferGeometry(params);\n  }\n\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n  }) {\n    const materialSystem = this.container.getNamed<MaterialSystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.MaterialSystem,\n    );\n    return materialSystem.createShaderMaterial(params);\n  }\n\n  public createKernel(precompiledBundle: KernelBundle | string) {\n    const kernel = this.container.get(Kernel);\n    if (typeof precompiledBundle === 'string') {\n      kernel.setBundle(JSON.parse(precompiledBundle));\n    } else {\n      kernel.setBundle(precompiledBundle);\n    }\n    kernel.init();\n    return kernel;\n  }\n\n  public createRenderer() {\n    const renderer = this.container.get(Renderer);\n    renderer.container = this.container;\n    renderer.init();\n    return renderer;\n  }\n\n  public destroy() {\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n    systems.forEach((system) => {\n      if (system.tearDown) {\n        system.tearDown();\n      }\n    });\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    engine.destroy();\n    const interactor = this.container.get<IInteractorService>(\n      IDENTIFIER.InteractorService,\n    );\n    interactor.destroy();\n  }\n}\n"],"file":"World.js"}