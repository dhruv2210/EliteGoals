{"version":3,"sources":["../src/Renderer.ts"],"names":["IDENTIFIER","WebGPUConstants","inject","injectable","Renderer","RenderEngine","ShaderModuleService","ConfigService","container","inited","rendering","pendings","views","size","shaderModule","registerBuiltinModules","registerModule","vs","uvVertDeclaration","uvVertMain","fs","uvFragDeclaration","mapFragDeclaration","mapFragMain","systems","getAll","Systems","config","configService","get","canvas","engine","init","swapChainFormat","TextureFormat","BGRA8Unorm","antialiasing","system","initialize","length","forEach","pending","beginFrame","execute","endFrame","options","clear","unshift","shift","width","height","getCanvas"],"mappings":"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","sourcesContent":["import {\n  IClearOptions,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  IShaderModuleService,\n  ISystem,\n  IView,\n} from '@antv/g-webgpu-core';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { Container, inject, injectable, multiInject } from 'inversify';\nimport mapFragDeclaration from './material/shaders/map.frag.declaration.glsl';\nimport mapFragMain from './material/shaders/map.frag.main.glsl';\nimport uvFragDeclaration from './material/shaders/uv.frag.declaration.glsl';\nimport uvVertDeclaration from './material/shaders/uv.vert.declaration.glsl';\nimport uvVertMain from './material/shaders/uv.vert.main.glsl';\n\n@injectable()\nexport class Renderer {\n  public container: Container;\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModule: IShaderModuleService;\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  // @multiInject(IDENTIFIER.Systems)\n  // private readonly systems: ISystem[];\n\n  private inited: boolean = false;\n\n  private rendering: boolean = false;\n\n  private pendings: Array<() => void> = [];\n\n  private views: IView[] = [];\n  private size: { width: number; height: number };\n\n  public async init() {\n    // 模块化处理\n    this.shaderModule.registerBuiltinModules();\n    this.shaderModule.registerModule('uv.vert.declaration', {\n      vs: uvVertDeclaration,\n    });\n    this.shaderModule.registerModule('uv.vert.main', {\n      vs: uvVertMain,\n    });\n    this.shaderModule.registerModule('uv.frag.declaration', {\n      fs: uvFragDeclaration,\n    });\n    this.shaderModule.registerModule('map.frag.declaration', {\n      fs: mapFragDeclaration,\n    });\n    this.shaderModule.registerModule('map.frag.main', {\n      fs: mapFragMain,\n    });\n\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n\n    const config = this.configService.get();\n\n    if (config.canvas) {\n      await this.engine.init({\n        canvas: config.canvas,\n        swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n        antialiasing: false,\n      });\n\n      for (const system of systems) {\n        if (system.initialize) {\n          await system.initialize();\n        }\n      }\n\n      this.inited = true;\n    }\n  }\n\n  public async render(...views: IView[]) {\n    if (!this.inited || this.rendering) {\n      return;\n    }\n\n    if (this.pendings.length) {\n      this.pendings.forEach((pending) => {\n        pending();\n      });\n    }\n\n    this.rendering = true;\n    this.engine.beginFrame();\n\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n    for (const system of systems) {\n      if (system.execute) {\n        await system.execute(views);\n      }\n    }\n\n    // 录制一遍绘制命令，后续直接播放\n    // if (this.useRenderBundle) {\n    //   if (!this.renderBundleRecorded) {\n    //     this.engine.startRecordBundle();\n    //     if (this.onUpdate) {\n    //       await this.onUpdate(this.engine);\n    //     }\n    //     this.renderBundle = this.engine.stopRecordBundle();\n    //     this.renderBundleRecorded = true;\n    //   }\n    //   this.engine.executeBundles([this.renderBundle]);\n    // } else {\n    //   if (this.onUpdate) {\n    //     await this.onUpdate(this.engine);\n    //   }\n    // }\n\n    this.engine.endFrame();\n    this.rendering = false;\n  }\n\n  public clear(options: IClearOptions) {\n    if (this.inited) {\n      this.engine.clear(options);\n    } else {\n      this.pendings.unshift(() => {\n        this.engine.clear(options);\n        this.pendings.shift();\n      });\n    }\n    return this;\n  }\n\n  // public setScissor(\n  //   scissor: Partial<{\n  //     enable: boolean;\n  //     box: {\n  //       x: number;\n  //       y: number;\n  //       width: number;\n  //       height: number;\n  //     };\n  //   }>,\n  // ) {\n  //   this.engine.setScissor(scissor);\n  //   return this;\n  // }\n\n  public setSize({ width, height }: { width: number; height: number }) {\n    const canvas = this.engine.getCanvas();\n    this.size = { width, height };\n    canvas.width = width;\n    canvas.height = height;\n    return this;\n  }\n\n  public getSize() {\n    return this.size;\n  }\n}\n"],"file":"Renderer.js"}