{"version":3,"sources":["../src/Kernel.ts"],"names":["AST_TOKEN_TYPES","createEntity","DefineValuePlaceholder","IDENTIFIER","STORAGE_CLASS","Target","WebGPUConstants","inject","injectable","createCanvas","isArray","isNumber","isTypedArray","Kernel","RenderEngine","ConfigService","entity","model","dirty","compiledBundle","initPromise","configService","get","canvas","engineOptions","engine","init","swapChainFormat","TextureFormat","BGRA8Unorm","antialiasing","bundle","JSON","parse","stringify","dispatch","context","maxIteration","name","data","isNumberLikeData","existedDefine","defines","find","b","value","existedBinding","uniforms","isReferer","storageClass","Uniform","updateUniform","updateBuffer","Object","keys","forEach","key","setBinding","iteration","compile","beginFrame","clear","filter","confirmInput","i","run","endFrame","readData","target","supportWebGPU","useWGSL","WGSL","GLSL450","GLSL100","shader","shaders","define","runtime","valuePlaceHolder","replace","uniform","StorageBuffer","sizePerElement","type","FloatArray","Vector4FloatArray","Float32Array","output","length","fill","createComputeModel"],"mappings":"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","sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  DefineValuePlaceholder,\n  IComputeModel,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  KernelBundle,\n  STORAGE_CLASS,\n  Target,\n} from '@antv/g-webgpu-core';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { createCanvas } from './utils/canvas';\nimport isArray from './utils/is-array';\nimport { isNumber } from './utils/is-number';\nimport { isTypedArray } from './utils/is-typedarray';\n\n@injectable()\nexport class Kernel {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private entity = createEntity();\n\n  private model: IComputeModel;\n\n  private dirty: boolean = true;\n\n  private compiledBundle: KernelBundle;\n\n  private initPromise: Promise<void>;\n\n  public init() {\n    const { canvas, engineOptions } = this.configService.get();\n\n    this.initPromise = this.engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n  }\n\n  public setBundle(bundle: KernelBundle) {\n    // deep clone\n    this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n  }\n\n  public setDispatch(dispatch: [number, number, number]) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.dispatch = dispatch;\n    }\n    return this;\n  }\n\n  public setMaxIteration(maxIteration: number) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.maxIteration = maxIteration;\n    }\n    return this;\n  }\n\n  public setBinding(\n    name:\n      | string\n      | Record<\n          string,\n          | number\n          | number[]\n          | Float32Array\n          | Uint8Array\n          | Uint16Array\n          | Uint32Array\n          | Int8Array\n          | Int16Array\n          | Int32Array\n          | Kernel\n        >,\n    data?:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Kernel,\n  ) {\n    if (typeof name === 'string') {\n      const isNumberLikeData =\n        isNumber(data) || isTypedArray(data) || isArray(data);\n      if (this.compiledBundle && this.compiledBundle.context) {\n        // set define, eg. setBinding('MAX_LENGTH', 10)\n        const existedDefine = this.compiledBundle.context.defines.find(\n          (b) => b.name === name,\n        );\n        if (existedDefine) {\n          existedDefine.value = data as number;\n          return this;\n        }\n\n        // set uniform\n        const existedBinding = this.compiledBundle.context.uniforms.find(\n          (b) => b.name === name,\n        );\n        if (existedBinding) {\n          // update uniform or buffer\n          if (isNumberLikeData) {\n            // @ts-ignore\n            existedBinding.data = data;\n            existedBinding.isReferer = false;\n\n            if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateUniform(name, data);\n              }\n            } else {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateBuffer(name, data);\n              }\n            }\n          } else {\n            // update with another kernel\n            existedBinding.isReferer = true;\n            // @ts-ignore\n            existedBinding.data = data as Kernel;\n          }\n        }\n      }\n    } else {\n      Object.keys(name).forEach((key) => {\n        this.setBinding(key, name[key]);\n      });\n    }\n    return this;\n  }\n\n  public async execute(iteration: number = 1) {\n    if (this.dirty) {\n      if (this.compiledBundle.context) {\n        if (iteration > 1) {\n          this.compiledBundle.context.maxIteration = iteration;\n        } else {\n          this.compiledBundle.context.maxIteration++;\n        }\n      }\n      await this.compile();\n      this.dirty = false;\n    }\n\n    this.engine.beginFrame();\n\n    // 首先开启当前 frame 的 compute pass\n    this.engine.clear({});\n\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.uniforms\n        .filter(({ isReferer }) => isReferer)\n        .forEach(({ data, name }) => {\n          // @ts-ignore\n          this.model.confirmInput((data as Kernel).model, name);\n        });\n    }\n    for (let i = 0; i < iteration; i++) {\n      this.model.run();\n    }\n\n    this.engine.endFrame();\n    return this;\n  }\n\n  /**\n   * read output from GPUBuffer\n   */\n  public async getOutput() {\n    return this.model.readData();\n  }\n\n  private async compile() {\n    await this.initPromise;\n\n    const context = {\n      ...this.compiledBundle.context!,\n    };\n\n    const target = this.engine.supportWebGPU\n      ? this.engine.useWGSL\n        ? Target.WGSL\n        : Target.GLSL450\n      : Target.GLSL100;\n    let shader = this.compiledBundle.shaders[target];\n\n    // this.bindings?.forEach(({ name, data }) => {\n    //   if (name === name.toUpperCase()) {\n    //     const define = context.defines.find((d) => d.name === name);\n    //     if (define) {\n    //       // @ts-ignore\n    //       define.value = data;\n    //     }\n    //   }\n    // });\n\n    // 生成运行时 define\n    context.defines\n      .filter((define) => define.runtime)\n      .forEach((define) => {\n        const valuePlaceHolder = `${DefineValuePlaceholder}${define.name}`;\n        shader = shader.replace(valuePlaceHolder, `${define.value}`);\n      });\n\n    context.shader = shader;\n\n    // 添加 uniform 绑定的数据\n    context.uniforms.forEach((uniform) => {\n      // const binding = this.bindings.find((b) => b.name === uniform.name);\n      // if (binding) {\n      //   // @ts-ignore\n      //   uniform.data = binding.referer || binding.data;\n      //   // @ts-ignore\n      //   uniform.isReferer = !!binding.referer;\n      // }\n\n      // 未指定数据，尝试根据 uniform 类型初始化\n      if (!uniform.data) {\n        if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n          let sizePerElement = 1;\n          if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n            sizePerElement = 1;\n          } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n            sizePerElement = 4;\n          }\n          uniform.data = new Float32Array(\n            context.output.length! * sizePerElement,\n          ).fill(0);\n        }\n      }\n    });\n    // } else if (uniform.type === 'image2D') {\n    //   // @ts-ignore\n    //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n    // }\n\n    this.compiledBundle.context = context;\n    this.model = await this.engine.createComputeModel(\n      this.compiledBundle.context,\n    );\n  }\n}\n"],"file":"Kernel.js"}