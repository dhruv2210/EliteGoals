{"version":3,"sources":["../../src/geometry/Merged.ts"],"names":["AABB","injectable","Geometry","isNumber","isTypedArray","merge","Merged","config","geometries","mergedComponent","getComponent","aabb","mergedAttributes","mergedIndices","indexOffset","forEach","geometry","indices","vertexCount","attributes","add","push","map","index","attribute","i","dirty","data","concat","Uint32Array","from"],"mappings":"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","sourcesContent":["import { AABB, GeometryComponent } from '@antv/g-webgpu-core';\nimport { injectable } from 'inversify';\nimport { Geometry } from '.';\nimport { isNumber } from '../utils/is-number';\nimport { isTypedArray } from '../utils/is-typedarray';\nimport { merge } from '../utils/typedarray';\n\nexport interface IMergedGeometryParams {\n  geometries: GeometryComponent[];\n}\n\n@injectable()\n/**\n * merge many geometries into one, use a batch of draw calls\n */\nexport class Merged extends Geometry<Partial<IMergedGeometryParams>> {\n  protected onEntityCreated() {\n    const { geometries = [] } = this.config;\n\n    const mergedComponent = this.getComponent();\n    mergedComponent.aabb = new AABB();\n\n    const mergedAttributes: GeometryComponent['attributes'] = [];\n    const mergedIndices: number[] = [];\n    let indexOffset = 0;\n    geometries.forEach((geometry) => {\n      const { aabb, indices, vertexCount, attributes } = geometry;\n\n      // merge aabb\n      mergedComponent.aabb.add(aabb);\n      mergedComponent.vertexCount += vertexCount;\n\n      // merge indices\n      if (indices) {\n        mergedIndices.push(...indices.map((index) => index + indexOffset));\n      }\n      indexOffset += vertexCount;\n\n      // merge attributes\n      attributes.forEach((attribute, i) => {\n        if (!mergedAttributes[i]) {\n          mergedAttributes[i] = attribute;\n          mergedAttributes[i].dirty = true;\n        } else {\n          if (attribute.data) {\n            if (isNumber(attribute.data)) {\n              // @ts-ignore\n              mergedAttributes[i].push(attribute.data);\n            } else if (isTypedArray(attribute.data)) {\n              // @ts-ignore\n              mergedAttributes[i].data = merge(\n                // @ts-ignore\n                mergedAttributes[i].data,\n                attribute.data,\n              );\n            } else {\n              // @ts-ignore\n              mergedAttributes[i].data = mergedAttributes[i].data.concat(\n                attribute.data,\n              );\n            }\n          }\n        }\n      });\n    });\n\n    mergedComponent.attributes = mergedAttributes;\n    mergedComponent.indices = Uint32Array.from(mergedIndices);\n    mergedComponent.dirty = true;\n  }\n}\n"],"file":"Merged.js"}