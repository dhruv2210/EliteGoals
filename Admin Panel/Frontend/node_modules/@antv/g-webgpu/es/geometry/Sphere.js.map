{"version":3,"sources":["../../src/geometry/Sphere.ts"],"names":["generateAABBFromVertices","injectable","Geometry","Sphere","config","radius","latitudeBands","longitudeBands","positions","normals","uvs","indices","lat","theta","Math","PI","sinTheta","sin","cosTheta","cos","lon","phi","sinPhi","cosPhi","x","y","z","u","v","push","first","second","aabb","component","getComponent","Uint32Array","from","vertexCount","length","attributes","dirty","name","data","Float32Array","arrayStride","stepMode","shaderLocation","offset","format"],"mappings":"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","sourcesContent":["import { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Geometry } from '.';\n\nexport interface ISphereGeometryParams {\n  radius: number;\n  latitudeBands: number;\n  longitudeBands: number;\n}\n\n@injectable()\n/**\n * borrow from playcanvas\n */\nexport class Sphere extends Geometry<Partial<ISphereGeometryParams>> {\n  protected onEntityCreated() {\n    const {\n      radius = 0.5,\n      latitudeBands = 16,\n      longitudeBands = 16,\n    } = this.config;\n\n    const positions: number[] = [];\n    const normals: number[] = [];\n    const uvs: number[] = [];\n    const indices: number[] = [];\n\n    for (let lat = 0; lat <= latitudeBands; lat++) {\n      const theta = (lat * Math.PI) / latitudeBands;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n\n      for (let lon = 0; lon <= longitudeBands; lon++) {\n        // Sweep the sphere from the positive Z axis to match a 3DS Max sphere\n        const phi = (lon * 2 * Math.PI) / longitudeBands - Math.PI / 2.0;\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n\n        const x = cosPhi * sinTheta;\n        const y = cosTheta;\n        const z = sinPhi * sinTheta;\n        const u = 1.0 - lon / longitudeBands;\n        const v = 1.0 - lat / latitudeBands;\n\n        positions.push(x * radius, y * radius, z * radius);\n        normals.push(x, y, z);\n        uvs.push(u, v);\n      }\n    }\n\n    for (let lat = 0; lat < latitudeBands; ++lat) {\n      for (let lon = 0; lon < longitudeBands; ++lon) {\n        const first = lat * (longitudeBands + 1) + lon;\n        const second = first + longitudeBands + 1;\n\n        indices.push(first + 1, second, first);\n        indices.push(first + 1, second + 1, second);\n      }\n    }\n\n    // generate AABB\n    const aabb = generateAABBFromVertices(positions);\n\n    const component = this.getComponent();\n    component.indices = Uint32Array.from(indices);\n    component.aabb = aabb;\n    component.vertexCount = positions.length / 3;\n    component.attributes = [\n      {\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 1,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 2,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    ];\n\n    // TODO: barycentric & tangent\n  }\n}\n"],"file":"Sphere.js"}