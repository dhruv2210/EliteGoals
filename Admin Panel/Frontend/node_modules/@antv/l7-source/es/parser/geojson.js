import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _typeof from "@babel/runtime/helpers/esm/typeof";
// @ts-ignore
import rewind from '@mapbox/geojson-rewind';
import { getCoords } from '@turf/invariant';
import { flattenEach } from '@turf/meta';
function djb2hash(field) {
  var str = field.toString();
  var hash = 5381;
  var i = str.length;
  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
   * integers. Since we want the results to be always positive, convert the
   * signed int to an unsigned by doing an unsigned bitshift. */
  return hash >>> 0;
}
function getFeatureID(feature, key) {
  if (key === undefined) {
    return null;
  }

  // @ts-ignore
  if (_typeof(feature.properties[key]) * 1 === 'number') {
    // @ts-ignore
    return feature.properties[key] * 1;
  }
  if (feature.properties && feature.properties[key]) {
    // 根据 properties 要素的属性进行编码
    return djb2hash(feature.properties[key] + '') % 1000019;
  }
  return null;
}
export default function geoJSON(data, cfg) {
  var resultData = [];
  var featureKeys = {};
  if (!data.features) {
    data.features = [];
    return {
      dataArray: []
    };
  }
  data.features = data.features.filter(function (item) {
    var geometry = item.geometry;
    return item != null && geometry && geometry.type && geometry.coordinates && geometry.coordinates.length > 0;
  });
  rewind(data, true); // 设置地理多边形方向 If clockwise is true, the outer ring is clockwise, otherwise it is counterclockwise.

  if (data.features.length === 0) {
    return {
      dataArray: [],
      featureKeys: featureKeys
    };
  }

  // multi feature 情况拆分
  flattenEach(data, function (currentFeature, featureIndex) {
    var featureId = getFeatureID(currentFeature, cfg === null || cfg === void 0 ? void 0 : cfg.featureId);
    if (featureId === null) {
      featureId = featureIndex;
    }
    var sortedID = featureId;
    var coord = getCoords(currentFeature);
    var dataItem = _objectSpread(_objectSpread({}, currentFeature.properties), {}, {
      coordinates: coord,
      _id: sortedID
    });
    resultData.push(dataItem);
  });
  return {
    dataArray: resultData,
    featureKeys: featureKeys
  };
}