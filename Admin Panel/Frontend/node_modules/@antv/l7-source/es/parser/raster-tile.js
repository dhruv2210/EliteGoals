import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { RasterTileType } from '@antv/l7-core';
import { getCustomData, getCustomImageData } from "../utils/tile/getCustomData";
import { defaultFormat, getTileBuffer, getTileImage } from "../utils/tile/getRasterTile";
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0,
  warp: true
};
export var rasterDataTypes = [RasterTileType.ARRAYBUFFER, RasterTileType.RGB];
function isUrlError(url) {
  if (Array.isArray(url) && url.length === 0) {
    return true;
  }
  if (!Array.isArray(url) && typeof url !== 'string') {
    return true;
  }
  return false;
}
/**
 *
 * @param data
 * @param cfg
 * @returns
 */
export default function rasterTile(data) {
  var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (isUrlError(data)) {
    throw new Error('tile server url is error');
  }
  var tileDataType = (cfg === null || cfg === void 0 ? void 0 : cfg.dataType) || RasterTileType.IMAGE;
  // Tip: RasterTileType.RGB 是彩色多通道的数据纹理，同样走数据纹理的请求
  if (tileDataType === RasterTileType.RGB) {
    tileDataType = RasterTileType.ARRAYBUFFER;
  }
  var getTileData = function getTileData(tileParams, tile) {
    switch (tileDataType) {
      case RasterTileType.IMAGE:
        return getTileImage(data, tileParams, tile, cfg);
      case RasterTileType.CUSTOMIMAGE:
      case RasterTileType.CUSTOMTERRAINRGB:
        return getCustomImageData(
        // 自定义地形请求方式数据
        tile, // @ts-ignore
        cfg === null || cfg === void 0 ? void 0 : cfg.getCustomData);
      case RasterTileType.ARRAYBUFFER:
        return getTileBuffer(data, tileParams, tile, (cfg === null || cfg === void 0 ? void 0 : cfg.format) || defaultFormat, cfg === null || cfg === void 0 ? void 0 : cfg.operation);
      case RasterTileType.CUSTOMARRAYBUFFER:
      case RasterTileType.CUSTOMRGB:
        return getCustomData(tile, // @ts-ignore
        cfg === null || cfg === void 0 ? void 0 : cfg.getCustomData, (cfg === null || cfg === void 0 ? void 0 : cfg.format) || defaultFormat, cfg === null || cfg === void 0 ? void 0 : cfg.operation);
      default:
        return getTileImage(data, tileParams, tile, cfg);
    }
  };
  var tilesetOptions = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_CONFIG), cfg), {}, {
    getTileData: getTileData
  });
  return {
    data: data,
    dataArray: [],
    tilesetOptions: tilesetOptions,
    isTile: true
  };
}