import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0
};
var getVectorTile = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", new Promise(function (resolve) {
            var _tile$bounds = _slicedToArray(tile.bounds, 4),
              minLng = _tile$bounds[0],
              minLat = _tile$bounds[1],
              maxLng = _tile$bounds[2],
              maxLat = _tile$bounds[3];
            // minLng/maxLat ---- maxLng/maxLat
            // |                    |
            // |                    |
            // |                    |
            // minLng/minLat --- maxLng/minLat

            var vectorTile = {
              layers: {
                // Tip: fixed SourceLayer Name
                testTile: {
                  features: [{
                    type: 'Feature',
                    properties: {
                      key: tile.x + '/' + tile.y + '/' + tile.z,
                      textLng: (minLng + maxLng) / 2,
                      textLat: (minLat + maxLat) / 2
                    },
                    geometry: {
                      type: 'LineString',
                      coordinates: [[maxLng, maxLat], [maxLng, minLat], [minLng, minLat], [minLng, minLat]]
                    }
                  }]
                }
              }
            };
            resolve(vectorTile);
          }));
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getVectorTile(_x) {
    return _ref.apply(this, arguments);
  };
}();
export default function mapboxVectorTile(data, cfg) {
  var getTileData = function getTileData(tile) {
    return getVectorTile(tile);
  };
  var tilesetOptions = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_CONFIG), cfg), {}, {
    getTileData: getTileData
  });
  return {
    data: data,
    dataArray: [],
    tilesetOptions: tilesetOptions,
    isTile: true
  };
}