import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getArrayBuffer, getURLFromTemplate } from '@antv/l7-utils';
import VectorSource from "../source/vector";
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0,
  warp: true
};
var getVectorTile = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, tileParams, tile, requestParameters, getCustomData) {
    var tileUrl;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          tileUrl = getURLFromTemplate(url, tileParams);
          return _context.abrupt("return", new Promise(function (resolve) {
            if (getCustomData) {
              getCustomData({
                x: tile.x,
                y: tile.y,
                z: tile.z
              }, function (err, data) {
                if (err || !data) {
                  resolve(undefined);
                } else {
                  var vectorSource = new VectorSource(data, tile.x, tile.y, tile.z);
                  resolve(vectorSource);
                }
              });
            } else {
              var xhr = getArrayBuffer(_objectSpread(_objectSpread({}, requestParameters), {}, {
                url: tileUrl
              }), function (err, data) {
                if (err || !data) {
                  resolve(undefined);
                } else {
                  var vectorSource = new VectorSource(data, tile.x, tile.y, tile.z);
                  resolve(vectorSource);
                }
              });
              tile.xhrCancel = function () {
                return xhr.abort();
              };
            }
          }));
        case 2:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getVectorTile(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();
export default function mapboxVectorTile(data, cfg) {
  // TODO: 后续考虑支持多服务
  var url = Array.isArray(data) ? data[0] : data;
  var getTileData = function getTileData(tileParams, tile) {
    return getVectorTile(url, tileParams, tile, cfg === null || cfg === void 0 ? void 0 : cfg.requestParameters, cfg === null || cfg === void 0 ? void 0 : cfg.getCustomData);
  };
  var tilesetOptions = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_CONFIG), cfg), {}, {
    getTileData: getTileData
  });
  return {
    data: url,
    dataArray: [],
    tilesetOptions: tilesetOptions,
    isTile: true
  };
}