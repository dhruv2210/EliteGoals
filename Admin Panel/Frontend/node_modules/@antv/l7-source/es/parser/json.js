import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
// @ts-ignore

// @ts-ignore
import rewind from '@mapbox/geojson-rewind';
import { getCoords } from '@turf/invariant';
import { flattenEach } from '@turf/meta';
export default function json(data, cfg) {
  var x = cfg.x,
    y = cfg.y,
    x1 = cfg.x1,
    y1 = cfg.y1,
    coordinates = cfg.coordinates,
    geometry = cfg.geometry;
  var resultData = [];
  if (!Array.isArray(data)) {
    return {
      dataArray: []
    };
  }

  // GeoJson geometry 数据
  if (geometry) {
    data.filter(function (item) {
      return item[geometry] && item[geometry].type && item[geometry].coordinates && item[geometry].coordinates.length > 0;
    }).forEach(function (col, index) {
      var rewindGeometry = rewind(_objectSpread({}, col[geometry]), true);
      // multi feature 情况拆分
      flattenEach(rewindGeometry, function (currentFeature) {
        var coord = getCoords(currentFeature);
        var dataItem = _objectSpread(_objectSpread({}, col), {}, {
          _id: index,
          coordinates: coord
        });
        resultData.push(dataItem);
      });
    });
    return {
      dataArray: resultData
    };
  }
  for (var featureIndex = 0; featureIndex < data.length; featureIndex++) {
    var col = data[featureIndex];
    var coords = [];

    // GeoJson coordinates 数据
    // 仅支持 Point LineString Polygon 三种 coordinates
    if (coordinates) {
      var type = 'Polygon';
      if (!Array.isArray(coordinates[0])) {
        type = 'Point';
      }
      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {
        type = 'LineString';
      }
      var rewindGeometry = rewind({
        type: type,
        coordinates: _toConsumableArray(col[coordinates])
      }, true);
      coords = rewindGeometry.coordinates;
    } else if (x && y && x1 && y1) {
      // 起终点数据
      var from = [parseFloat(col[x]), parseFloat(col[y])];
      var to = [parseFloat(col[x1]), parseFloat(col[y1])];
      coords = [from, to];
    } else if (x && y) {
      // 点数据
      coords = [parseFloat(col[x]), parseFloat(col[y])];
    }
    var dataItem = _objectSpread(_objectSpread({}, col), {}, {
      _id: featureIndex,
      coordinates: coords
    });
    resultData.push(dataItem);
  }
  return {
    dataArray: resultData
  };
}