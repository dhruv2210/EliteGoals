import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { VectorTile } from '@mapbox/vector-tile';
import Protobuf from 'pbf';
var VectorSource = /*#__PURE__*/function () {
  function VectorSource(data, x, y, z) {
    _classCallCheck(this, VectorSource);
    _defineProperty(this, "vectorLayerCache", {});
    this.x = x;
    this.y = y;
    this.z = z;
    this.vectorTile = new VectorTile(new Protobuf(data));
  }
  _createClass(VectorSource, [{
    key: "getTileData",
    value: function getTileData(sourceLayer) {
      if (!sourceLayer || !this.vectorTile.layers[sourceLayer]) {
        return [];
      }
      // 优先走缓存
      if (this.vectorLayerCache[sourceLayer]) {
        return this.vectorLayerCache[sourceLayer];
      }
      var vectorTile = this.vectorTile.layers[sourceLayer];

      // @ts-ignore
      if (Array.isArray(vectorTile.features)) {
        // 数据不需要被解析 geojson-vt 类型
        // @ts-ignore
        this.vectorLayerCache[sourceLayer] = vectorTile.features;
        // @ts-ignore
        return vectorTile.features;
      }
      var features = [];
      for (var i = 0; i < vectorTile.length; i++) {
        var vectorTileFeature = vectorTile.feature(i);
        var feature = vectorTileFeature.toGeoJSON(this.x, this.y, this.z);
        features.push(_objectSpread(_objectSpread({}, feature), {}, {
          properties: _objectSpread({
            id: feature.id
          }, feature.properties)
        }));
      }
      this.vectorLayerCache[sourceLayer] = features;
      return features;
    }
  }, {
    key: "getFeatureById",
    value: function getFeatureById() {
      throw new Error('Method not implemented.');
    }
  }]);
  return VectorSource;
}();
export { VectorSource as default };