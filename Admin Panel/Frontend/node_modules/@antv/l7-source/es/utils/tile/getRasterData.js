import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getArrayBuffer, makeXMLHttpRequestPromise } from '@antv/l7-utils';
import { processRasterData } from "../bandOperation/bands";
import { bindCancel, getTileBandParams } from "./request";
export var getRasterFile = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, requestParameters, callback, rasterFormat, operation) {
    var tileBandParams, _yield$getMultiArrayB, rasterFiles, xhrList, errList, xhr;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          // Tip: 至少存在一个请求文件的 url，处理得到标准的 ITileBand[] url 路径和 bands 参数
          tileBandParams = getTileBandParams(requestParameters.url);
          if (!(tileBandParams.length > 1)) {
            _context.next = 15;
            break;
          }
          _context.next = 4;
          return getMultiArrayBuffer(tileBandParams, requestParameters);
        case 4:
          _yield$getMultiArrayB = _context.sent;
          rasterFiles = _yield$getMultiArrayB.rasterFiles;
          xhrList = _yield$getMultiArrayB.xhrList;
          errList = _yield$getMultiArrayB.errList;
          // 多波段计算
          bindCancel(tile, xhrList);
          if (!(errList.length > 0)) {
            _context.next = 12;
            break;
          }
          callback(errList, null);
          return _context.abrupt("return");
        case 12:
          processRasterData(rasterFiles, rasterFormat, operation, callback);
          _context.next = 17;
          break;
        case 15:
          xhr = getArrayBuffer(requestParameters, function (err, imgData) {
            if (err) {
              callback(err);
            } else if (imgData) {
              var _rasterFiles = [{
                data: imgData,
                bands: tileBandParams[0].bands
              }];
              processRasterData(_rasterFiles, rasterFormat, operation, callback);
            }
          });
          bindCancel(tile, [xhr]);
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getRasterFile(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * get multi raster files async
 * @param tileBandParams
 * @param requestParameters
 * @returns
 */
function getMultiArrayBuffer(_x6, _x7) {
  return _getMultiArrayBuffer.apply(this, arguments);
}
function _getMultiArrayBuffer() {
  _getMultiArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tileBandParams, requestParameters) {
    var rasterFiles, xhrList, errList, i, tileBandParam, params, bands, _yield$makeXMLHttpReq, err, data, xhr;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          rasterFiles = [];
          xhrList = [];
          errList = []; // tslint:disable-next-line: prefer-for-of
          i = 0;
        case 4:
          if (!(i < tileBandParams.length)) {
            _context2.next = 20;
            break;
          }
          tileBandParam = tileBandParams[i];
          params = _objectSpread(_objectSpread({}, requestParameters), {}, {
            url: tileBandParam.url
          });
          bands = tileBandParam.bands;
          _context2.next = 10;
          return makeXMLHttpRequestPromise(_objectSpread(_objectSpread({}, params), {}, {
            type: 'arrayBuffer'
          }));
        case 10:
          _yield$makeXMLHttpReq = _context2.sent;
          err = _yield$makeXMLHttpReq.err;
          data = _yield$makeXMLHttpReq.data;
          xhr = _yield$makeXMLHttpReq.xhr;
          if (err) {
            errList.push(err);
          }
          xhrList.push(xhr);
          rasterFiles.push({
            data: data,
            bands: bands
          });
        case 17:
          i++;
          _context2.next = 4;
          break;
        case 20:
          return _context2.abrupt("return", {
            rasterFiles: rasterFiles,
            xhrList: xhrList,
            errList: errList
          });
        case 21:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _getMultiArrayBuffer.apply(this, arguments);
}