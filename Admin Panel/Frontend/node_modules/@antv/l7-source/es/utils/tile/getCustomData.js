import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// import { bindCancel } from './request';
import { formatImage } from '@antv/l7-utils';
import { processRasterData } from "../bandOperation/bands";
export var getCustomData = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, getCustomDataFunc, rasterFormat, operation) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            getCustomDataFunc({
              x: tile.x,
              y: tile.y,
              z: tile.z
            }, function (err, data) {
              if (err || data.length === 0) {
                reject(err);
                return;
              }
              if (data) {
                processRasterData([{
                  data: data,
                  bands: [0]
                }], rasterFormat, operation, function (error, img) {
                  if (error) {
                    reject(error);
                  } else if (img) {
                    resolve(img);
                  }
                });
              }
            });
          }));
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getCustomData(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
export var getCustomImageData = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tile, getCustomDataFunc) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt("return", new Promise(function (resolve, reject) {
            getCustomDataFunc({
              x: tile.x,
              y: tile.y,
              z: tile.z
            }, function (err, data) {
              if (err || !data) {
                reject(err);
                return;
              }
              if (data instanceof ArrayBuffer) {
                formatImage(data, function (error, image) {
                  if (error) {
                    reject(error);
                  }
                  resolve(image);
                });
              } else if (data instanceof HTMLImageElement) {
                resolve(data);
              } else {
                reject(err);
              }
            });
          }));
        case 1:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getCustomImageData(_x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();