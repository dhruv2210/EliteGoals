import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { getImage, getURLFromTemplate, getWMTSURLFromTemplate } from '@antv/l7-utils';
import { getRasterFile } from "./getRasterData";
import { getTileUrl } from "./request";

/**
 * 用于获取 raster data 的瓦片，如 tiff、lerc、dem 等
 * 支持多文件模式
 * @param url
 * @param tileParams
 * @param tile
 * @param rasterFormat
 * @returns
 */
export var getTileBuffer = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, tileParams, tile, rasterFormat, operation) {
    var requestParameters;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          requestParameters = {
            // getTileUrl 将原始的 url 路径进行转化（多服务器）
            url: getTileUrl(url, tileParams)
          };
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            getRasterFile(tile, requestParameters, function (err, img) {
              if (err) {
                reject(err);
              } else if (img) {
                resolve(img);
              }
            }, rasterFormat, operation);
          }));
        case 2:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function getTileBuffer(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * 获取图片格式的文件 jpg、png 等
 * @param url
 * @param tileParams
 * @param tile
 * @returns
 */
export var getTileImage = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, tileParams, tile, cfg) {
    var imageUrl, templateUrl, getWMTSURLFromTemplateNew, getURLFromTemplateNew;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          // TODO: 后续考虑支持加载多服务
          templateUrl = Array.isArray(url) ? url[0] : url;
          if (cfg.wmtsOptions) {
            getWMTSURLFromTemplateNew = (cfg === null || cfg === void 0 ? void 0 : cfg.getURLFromTemplate) || getWMTSURLFromTemplate;
            imageUrl = getWMTSURLFromTemplateNew(templateUrl, _objectSpread(_objectSpread({}, tileParams), cfg.wmtsOptions));
          } else {
            getURLFromTemplateNew = (cfg === null || cfg === void 0 ? void 0 : cfg.getURLFromTemplate) || getURLFromTemplate;
            imageUrl = getURLFromTemplateNew(templateUrl, tileParams);
          }
          return _context2.abrupt("return", new Promise(function (resolve, reject) {
            var _cfg$requestParameter;
            var xhr = getImage({
              url: imageUrl,
              type: (cfg === null || cfg === void 0 ? void 0 : (_cfg$requestParameter = cfg.requestParameters) === null || _cfg$requestParameter === void 0 ? void 0 : _cfg$requestParameter.type) || 'arrayBuffer'
            }, function (err, img) {
              if (err) {
                reject(err);
              } else if (img) {
                resolve(img);
              }
            }, cfg.transformResponse);
            tile.xhrCancel = function () {
              return xhr.abort();
            };
          }));
        case 3:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getTileImage(_x6, _x7, _x8, _x9) {
    return _ref2.apply(this, arguments);
  };
}();
export var defaultFormat = function defaultFormat() {
  return {
    rasterData: new Uint8Array([0]),
    width: 1,
    height: 1
  };
};