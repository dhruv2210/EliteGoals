import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { calculate } from "./math";
import { operationsSchema } from "./operationSchema";
/**
 * 执行波段计算 format + operation
 * @param imageDataList
 * @param rasterFormat
 * @param operation
 * @returns
 */
export function bandsOperation(_x, _x2, _x3) {
  return _bandsOperation.apply(this, arguments);
}
function _bandsOperation() {
  _bandsOperation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageDataList, rasterFormat, operation) {
    var formatData, bandsData, _bandsData$, width, height, rasterData;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!(imageDataList.length === 0)) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return", {
            rasterData: [0],
            width: 1,
            heigh: 1
          });
        case 2:
          _context.next = 4;
          return Promise.all(imageDataList.map(function (_ref) {
            var data = _ref.data,
              _ref$bands = _ref.bands,
              bands = _ref$bands === void 0 ? [0] : _ref$bands;
            return rasterFormat(data, bands);
          }));
        case 4:
          formatData = _context.sent;
          bandsData = []; // Tip: rasterFormat 返回值 rasterData|rasterData[]
          formatData.forEach(function (d) {
            Array.isArray(d) ? bandsData.push.apply(bandsData, _toConsumableArray(d)) : bandsData.push(d);
          });
          // 多个栅格数据必须是相同大小才能进行相互之间的运算
          _bandsData$ = bandsData[0], width = _bandsData$.width, height = _bandsData$.height;
          _context.t0 = _typeof(operation);
          _context.next = _context.t0 === 'function' ? 11 : _context.t0 === 'object' ? 13 : 15;
          break;
        case 11:
          rasterData = operation(bandsData);
          return _context.abrupt("break", 16);
        case 13:
          // 波段计算表达式 - operation
          // operation: ['+', ['band', 0], 1]
          /**
           * operation: {
           *  r: ['+', ['band', 0], 1],
           *  g: ['+', ['band', 0], 1],
           *  b: ['+', ['band', 0], 1],
           * }
           */
          if (!Array.isArray(operation)) {
            // RGB 三通道
            rasterData = processSchemaOperation(operation, bandsData);
          } else {
            // 数值计算
            rasterData = {
              rasterData: calculate(operation, bandsData)
            };
          }
          return _context.abrupt("break", 16);
        case 15:
          rasterData = {
            rasterData: bandsData[0].rasterData
          };
        case 16:
          return _context.abrupt("return", _objectSpread(_objectSpread({}, rasterData), {}, {
            width: width,
            height: height
          }));
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _bandsOperation.apply(this, arguments);
}
function processSchemaOperation(operation, bandsData) {
  var schema = operationsSchema[operation.type];
  if (schema.type === 'function') {
    // @ts-ignore
    return schema.method(bandsData, operation === null || operation === void 0 ? void 0 : operation.options);
  } else if (schema.type === 'operation') {
    if (operation.type === 'rgb') {
      // TODO 临时处理
      // @ts-ignore
      return getRgbBands(schema.expression, bandsData);
    } else {
      // @ts-ignore
      return {
        rasterData: calculate(schema.expression, bandsData)
      };
    }
  }
}
function getRgbBands(operation, bandsData) {
  if (operation.r === undefined) {
    console.warn('Channel R lost in Operation! Use band[0] to fill!');
  }
  if (operation.g === undefined) {
    console.warn('Channel G lost in Operation! Use band[0] to fill!');
  }
  if (operation.b === undefined) {
    console.warn('Channel B lost in Operation! Use band[0] to fill!');
  }
  var r = calculate(operation.r || ['band', 0], bandsData);
  var g = calculate(operation.g || ['band', 0], bandsData);
  var b = calculate(operation.b || ['band', 0], bandsData);
  return [r, g, b];
}

/**
 * 处理每个请求得到的栅格文件数据
 */
export function processRasterData(_x4, _x5, _x6, _x7) {
  return _processRasterData.apply(this, arguments);
}
function _processRasterData() {
  _processRasterData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(rasterFiles, rasterFormat, operation, callback) {
    var rasterData;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return bandsOperation(rasterFiles, rasterFormat, operation);
        case 2:
          rasterData = _context2.sent;
          // 目前 max｜min 没有生效

          callback(null, {
            data: rasterData
          });
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _processRasterData.apply(this, arguments);
}