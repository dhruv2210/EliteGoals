import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
export var operationsSchema = {
  nd: {
    type: 'operation',
    expression: ['/', ['-', ['band', 1], ['band', 0]],
    // R > NIR
    ['+', ['band', 1], ['band', 0]]]
  },
  rgb: {
    type: 'function',
    method: strethRgb2minMax
  }
};
function strethRgb2minMax(bandsData, options) {
  var channelR = bandsData[0].rasterData;
  var channelG = bandsData[1].rasterData;
  var channelB = bandsData[2].rasterData;
  var data = [];
  var _ref = (options === null || options === void 0 ? void 0 : options.countCut) || [2, 98],
    _ref2 = _slicedToArray(_ref, 2),
    low = _ref2[0],
    high = _ref2[1];
  var minMaxR = (options === null || options === void 0 ? void 0 : options.RMinMax) || percentile(channelR, low, high);
  var minMaxG = (options === null || options === void 0 ? void 0 : options.GMinMax) || percentile(channelG, low, high);
  var minMaxB = (options === null || options === void 0 ? void 0 : options.BMinMax) || percentile(channelB, low, high);
  for (var i = 0; i < channelR.length; i++) {
    data.push(Math.max(0, channelR[i] - minMaxR[0]));
    data.push(Math.max(0, channelG[i] - minMaxG[0]));
    data.push(Math.max(0, channelB[i] - minMaxB[0]));
  }
  return {
    rasterData: data,
    rMinMax: minMaxR,
    gMinMax: minMaxG,
    bMinMax: minMaxB
  };
}

// https://gis.stackexchange.com/questions/324888/what-does-cumulative-count-cut-actually-do

function percentile(data, minPercent, maxPercent) {
  // 计算效率问题
  var sortData = data.slice().sort(function (a, b) {
    return a - b;
  });
  var dataLength = sortData.length;
  var min = sortData[Math.ceil(dataLength * minPercent / 100)];
  var max = sortData[Math.ceil(dataLength * maxPercent / 100)];
  return [min, max];
}