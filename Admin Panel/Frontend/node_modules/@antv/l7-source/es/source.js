import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-ignore
import { SyncHook } from '@antv/async-hook';
import { bBoxToBounds, extent, padBounds, TilesetManager } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
import { cloneDeep, isFunction, isString, mergeWith } from 'lodash';
// @ts-ignore
// tslint:disable-next-line:no-submodule-imports

import { getParser, getTransform } from "./factory";
import { cluster } from "./transform/cluster";
import { statMap } from "./utils/statistics";
import { getColumn } from "./utils/util";
function mergeCustomizer(objValue, srcValue) {
  if (Array.isArray(srcValue)) {
    return srcValue;
  }
}
//
var Source = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Source, _EventEmitter);
  var _super = _createSuper(Source);
  function Source(data, cfg) {
    var _this;
    _classCallCheck(this, Source);
    _this = _super.call(this);
    // this.rawData = cloneDeep(data);
    _defineProperty(_assertThisInitialized(_this), "type", 'source');
    _defineProperty(_assertThisInitialized(_this), "isTile", false);
    _defineProperty(_assertThisInitialized(_this), "inited", false);
    _defineProperty(_assertThisInitialized(_this), "hooks", {
      init: new SyncHook()
    });
    _defineProperty(_assertThisInitialized(_this), "parser", {
      type: 'geojson'
    });
    _defineProperty(_assertThisInitialized(_this), "transforms", []);
    _defineProperty(_assertThisInitialized(_this), "cluster", false);
    _defineProperty(_assertThisInitialized(_this), "clusterOptions", {
      enable: false,
      radius: 40,
      maxZoom: 20,
      zoom: -99,
      method: 'count'
    });
    _defineProperty(_assertThisInitialized(_this), "invalidExtent", false);
    _defineProperty(_assertThisInitialized(_this), "dataArrayChanged", false);
    _defineProperty(_assertThisInitialized(_this), "cfg", {
      autoRender: true
    });
    _this.originData = data;
    _this.initCfg(cfg);
    _this.init().then(function () {
      _this.inited = true;
      _this.emit('update', {
        type: 'inited'
      });
    });
    return _this;
  }
  _createClass(Source, [{
    key: "getSourceCfg",
    value:
    // 生命周期钩子

    function getSourceCfg() {
      return this.cfg;
    }
  }, {
    key: "getClusters",
    value: function getClusters(zoom) {
      return this.clusterIndex.getClusters(this.caculClusterExtent(2), zoom);
    }
  }, {
    key: "getClustersLeaves",
    value: function getClustersLeaves(id) {
      return this.clusterIndex.getLeaves(id, Infinity);
    }
  }, {
    key: "getParserType",
    value: function getParserType() {
      return this.parser.type;
    }
  }, {
    key: "updateClusterData",
    value: function updateClusterData(zoom) {
      var _this2 = this;
      var _this$clusterOptions = this.clusterOptions,
        _this$clusterOptions$ = _this$clusterOptions.method,
        method = _this$clusterOptions$ === void 0 ? 'sum' : _this$clusterOptions$,
        field = _this$clusterOptions.field;
      var data = this.clusterIndex.getClusters(this.caculClusterExtent(2), Math.floor(zoom));
      this.clusterOptions.zoom = zoom;
      data.forEach(function (p) {
        if (!p.id) {
          p.properties.point_count = 1;
        }
      });
      if (field || isFunction(method)) {
        data = data.map(function (item) {
          var id = item.id;
          if (id) {
            var points = _this2.clusterIndex.getLeaves(id, Infinity);
            var properties = points.map(function (d) {
              return d.properties;
            });
            var statNum;
            if (isString(method) && field) {
              var column = getColumn(properties, field);
              statNum = statMap[method](column);
            }
            if (isFunction(method)) {
              statNum = method(properties);
            }
            item.properties.stat = statNum;
          } else {
            item.properties.point_count = 1;
          }
          return item;
        });
      }
      this.data = getParser('geojson')({
        type: 'FeatureCollection',
        features: data
      });
      this.executeTrans();
    }
  }, {
    key: "getFeatureById",
    value: function getFeatureById(id) {
      var _ref = this.parser,
        _ref$type = _ref.type,
        type = _ref$type === void 0 ? 'geojson' : _ref$type,
        geometry = _ref.geometry;
      if (type === 'geojson' && !this.cluster) {
        var feature = id < this.originData.features.length ? this.originData.features[id] : 'null';
        var newFeature = cloneDeep(feature);
        if (newFeature !== null && newFeature !== void 0 && newFeature.properties && (this.transforms.length !== 0 || this.dataArrayChanged)) {
          // 如果数据进行了transforms 属性会发生改变 或者数据dataArray发生更新
          var item = this.data.dataArray.find(function (dataItem) {
            return dataItem._id === id;
          });
          newFeature.properties = item;
        }
        return newFeature;
      } else if (type === 'json' && geometry) {
        return this.data.dataArray.find(function (dataItem) {
          return dataItem._id === id;
        });
      } else {
        return id < this.data.dataArray.length ? this.data.dataArray[id] : 'null';
      }
    }
  }, {
    key: "updateFeaturePropertiesById",
    value: function updateFeaturePropertiesById(id, properties) {
      this.data.dataArray = this.data.dataArray.map(function (dataItem) {
        if (dataItem._id === id) {
          return _objectSpread(_objectSpread({}, dataItem), properties);
        }
        return dataItem;
      });
      this.dataArrayChanged = true;
      this.emit('update', {
        type: 'update'
      });
    }
  }, {
    key: "getFeatureId",
    value: function getFeatureId(field, value) {
      var feature = this.data.dataArray.find(function (dataItem) {
        return dataItem[field] === value;
      });
      return feature === null || feature === void 0 ? void 0 : feature._id;
    }
  }, {
    key: "setData",
    value: function setData(data, options) {
      var _this3 = this;
      this.originData = data;
      this.dataArrayChanged = false;
      this.initCfg(options);
      this.init().then(function () {
        _this3.emit('update', {
          type: 'update'
        });
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$tileset;
      this.removeAllListeners();
      this.originData = null;
      this.clusterIndex = null;
      // @ts-ignore
      this.data = null;
      (_this$tileset = this.tileset) === null || _this$tileset === void 0 ? void 0 : _this$tileset.destroy();
    }
  }, {
    key: "processData",
    value: function () {
      var _processData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this4 = this;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", new Promise(function (resolve, reject) {
                try {
                  _this4.excuteParser();
                  _this4.initCluster();
                  _this4.executeTrans();
                  resolve({});
                } catch (err) {
                  reject(err);
                }
              }));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function processData() {
        return _processData.apply(this, arguments);
      }
      return processData;
    }()
  }, {
    key: "initCfg",
    value: function initCfg(option) {
      this.cfg = mergeWith(this.cfg, option, mergeCustomizer);
      var cfg = this.cfg;
      if (cfg) {
        if (cfg.parser) {
          this.parser = cfg.parser;
        }
        if (cfg.transforms) {
          this.transforms = cfg.transforms;
        }
        this.cluster = cfg.cluster || false;
        if (cfg.clusterOptions) {
          this.cluster = true;
          this.clusterOptions = _objectSpread(_objectSpread({}, this.clusterOptions), cfg.clusterOptions);
        }
      }
    }
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.inited = false;
              _context2.next = 3;
              return this.processData();
            case 3:
              this.inited = true;
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
    /**
     * 数据解析
     */
  }, {
    key: "excuteParser",
    value: function excuteParser() {
      // 耗时计算测试
      // let t = new Date().getTime();
      // let c = 0
      // while(c < 100000000) {
      //   c++
      // }
      // console.log('t', new Date().getTime() - t)
      var parser = this.parser;
      var type = parser.type || 'geojson';
      var sourceParser = getParser(type);
      this.data = sourceParser(this.originData, parser);

      // 为瓦片图层的父图层创建数据瓦片金字塔管理器
      this.tileset = this.initTileset();

      // 判断当前 source 是否需要计算范围
      if (parser.cancelExtent) {
        return;
      }

      // 计算范围
      this.extent = extent(this.data.dataArray);
      this.setCenter(this.extent);
      this.invalidExtent = this.extent[0] === this.extent[2] || this.extent[1] === this.extent[3];
    }
  }, {
    key: "setCenter",
    value: function setCenter(bbox) {
      this.center = [(bbox[0] + bbox[2]) / 2, (bbox[1] + bbox[3]) / 2];
      if (isNaN(this.center[0]) || isNaN(this.center[1])) {
        // this.center = [NaN, NaN] // Infinity - Infinity = NaN
        // 默认设置为大地原点
        this.center = [108.92361111111111, 34.54083333333333];
      }
    }

    /**
     * 瓦片数据管理器
     */
  }, {
    key: "initTileset",
    value: function initTileset() {
      var tilesetOptions = this.data.tilesetOptions;
      if (!tilesetOptions) {
        return;
      }
      this.isTile = true;
      if (this.tileset) {
        this.tileset.updateOptions(tilesetOptions);
        return this.tileset;
      }
      var tileset = new TilesetManager(_objectSpread({}, tilesetOptions));
      return tileset;
    }

    /**
     * 数据统计
     */
  }, {
    key: "executeTrans",
    value: function executeTrans() {
      var _this5 = this;
      var trans = this.transforms;
      trans.forEach(function (tran) {
        var type = tran.type;
        var data = getTransform(type)(_this5.data, tran);
        Object.assign(_this5.data, data);
      });
    }

    /**
     * 数据聚合
     */
  }, {
    key: "initCluster",
    value: function initCluster() {
      if (!this.cluster) {
        return;
      }
      var clusterOptions = this.clusterOptions || {};
      this.clusterIndex = cluster(this.data, clusterOptions);
    }
  }, {
    key: "caculClusterExtent",
    value: function caculClusterExtent(bufferRatio) {
      var newBounds = [[-Infinity, -Infinity], [Infinity, Infinity]];
      if (!this.invalidExtent) {
        newBounds = padBounds(bBoxToBounds(this.extent), bufferRatio);
      }
      return newBounds[0].concat(newBounds[1]);
    }
  }]);
  return Source;
}(EventEmitter);
export { Source as default };