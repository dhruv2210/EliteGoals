var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/parser/mvt.ts
var mvt_exports = {};
__export(mvt_exports, {
  default: () => mapboxVectorTile
});
module.exports = __toCommonJS(mvt_exports);
var import_l7_utils = require("@antv/l7-utils");
var import_vector = __toESM(require("../source/vector"));
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0,
  warp: true
};
var getVectorTile = async (url, tileParams, tile, requestParameters, getCustomData) => {
  const tileUrl = (0, import_l7_utils.getURLFromTemplate)(url, tileParams);
  return new Promise((resolve) => {
    if (getCustomData) {
      getCustomData(
        {
          x: tile.x,
          y: tile.y,
          z: tile.z
        },
        (err, data) => {
          if (err || !data) {
            resolve(void 0);
          } else {
            const vectorSource = new import_vector.default(data, tile.x, tile.y, tile.z);
            resolve(vectorSource);
          }
        }
      );
    } else {
      const xhr = (0, import_l7_utils.getArrayBuffer)(
        {
          ...requestParameters,
          url: tileUrl
        },
        (err, data) => {
          if (err || !data) {
            resolve(void 0);
          } else {
            const vectorSource = new import_vector.default(data, tile.x, tile.y, tile.z);
            resolve(vectorSource);
          }
        }
      );
      tile.xhrCancel = () => xhr.abort();
    }
  });
};
function mapboxVectorTile(data, cfg) {
  const url = Array.isArray(data) ? data[0] : data;
  const getTileData = (tileParams, tile) => getVectorTile(
    url,
    tileParams,
    tile,
    cfg == null ? void 0 : cfg.requestParameters,
    cfg == null ? void 0 : cfg.getCustomData
  );
  const tilesetOptions = {
    ...DEFAULT_CONFIG,
    ...cfg,
    getTileData
  };
  return {
    data: url,
    dataArray: [],
    tilesetOptions,
    isTile: true
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
