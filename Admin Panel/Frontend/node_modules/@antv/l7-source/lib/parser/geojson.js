var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/parser/geojson.ts
var geojson_exports = {};
__export(geojson_exports, {
  default: () => geoJSON
});
module.exports = __toCommonJS(geojson_exports);
var import_geojson_rewind = __toESM(require("@mapbox/geojson-rewind"));
var import_invariant = require("@turf/invariant");
var import_meta = require("@turf/meta");
function djb2hash(field) {
  const str = field.toString();
  let hash = 5381;
  let i = str.length;
  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }
  return hash >>> 0;
}
function getFeatureID(feature, key) {
  if (key === void 0) {
    return null;
  }
  if (typeof feature.properties[key] * 1 === "number") {
    return feature.properties[key] * 1;
  }
  if (feature.properties && feature.properties[key]) {
    return djb2hash(feature.properties[key] + "") % 1000019;
  }
  return null;
}
function geoJSON(data, cfg) {
  const resultData = [];
  const featureKeys = {};
  if (!data.features) {
    data.features = [];
    return {
      dataArray: []
    };
  }
  data.features = data.features.filter((item) => {
    const geometry = item.geometry;
    return item != null && geometry && geometry.type && geometry.coordinates && geometry.coordinates.length > 0;
  });
  (0, import_geojson_rewind.default)(data, true);
  if (data.features.length === 0) {
    return {
      dataArray: [],
      featureKeys
    };
  }
  (0, import_meta.flattenEach)(
    data,
    (currentFeature, featureIndex) => {
      let featureId = getFeatureID(currentFeature, cfg == null ? void 0 : cfg.featureId);
      if (featureId === null) {
        featureId = featureIndex;
      }
      const sortedID = featureId;
      const coord = (0, import_invariant.getCoords)(currentFeature);
      const dataItem = {
        ...currentFeature.properties,
        coordinates: coord,
        _id: sortedID
      };
      resultData.push(dataItem);
    }
  );
  return {
    dataArray: resultData,
    featureKeys
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
