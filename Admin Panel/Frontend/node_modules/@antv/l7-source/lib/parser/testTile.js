var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/parser/testTile.ts
var testTile_exports = {};
__export(testTile_exports, {
  default: () => mapboxVectorTile
});
module.exports = __toCommonJS(testTile_exports);
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0
};
var getVectorTile = async (tile) => {
  return new Promise((resolve) => {
    const [minLng, minLat, maxLng, maxLat] = tile.bounds;
    const vectorTile = {
      layers: {
        // Tip: fixed SourceLayer Name
        testTile: {
          features: [
            {
              type: "Feature",
              properties: {
                key: tile.x + "/" + tile.y + "/" + tile.z,
                textLng: (minLng + maxLng) / 2,
                textLat: (minLat + maxLat) / 2
              },
              geometry: {
                type: "LineString",
                coordinates: [
                  [maxLng, maxLat],
                  [maxLng, minLat],
                  [minLng, minLat],
                  [minLng, minLat]
                ]
              }
            }
          ]
        }
      }
    };
    resolve(vectorTile);
  });
};
function mapboxVectorTile(data, cfg) {
  const getTileData = (tile) => getVectorTile(tile);
  const tilesetOptions = {
    ...DEFAULT_CONFIG,
    ...cfg,
    getTileData
  };
  return {
    data,
    dataArray: [],
    tilesetOptions,
    isTile: true
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
