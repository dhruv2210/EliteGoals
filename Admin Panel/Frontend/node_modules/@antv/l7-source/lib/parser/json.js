var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/parser/json.ts
var json_exports = {};
__export(json_exports, {
  default: () => json
});
module.exports = __toCommonJS(json_exports);
var import_geojson_rewind = __toESM(require("@mapbox/geojson-rewind"));
var import_invariant = require("@turf/invariant");
var import_meta = require("@turf/meta");
function json(data, cfg) {
  const { x, y, x1, y1, coordinates, geometry } = cfg;
  const resultData = [];
  if (!Array.isArray(data)) {
    return {
      dataArray: []
    };
  }
  if (geometry) {
    data.filter((item) => {
      return item[geometry] && item[geometry].type && item[geometry].coordinates && item[geometry].coordinates.length > 0;
    }).forEach((col, index) => {
      const rewindGeometry = (0, import_geojson_rewind.default)({ ...col[geometry] }, true);
      (0, import_meta.flattenEach)(
        rewindGeometry,
        (currentFeature) => {
          const coord = (0, import_invariant.getCoords)(currentFeature);
          const dataItem = {
            ...col,
            _id: index,
            coordinates: coord
          };
          resultData.push(dataItem);
        }
      );
    });
    return {
      dataArray: resultData
    };
  }
  for (let featureIndex = 0; featureIndex < data.length; featureIndex++) {
    const col = data[featureIndex];
    let coords = [];
    if (coordinates) {
      let type = "Polygon";
      if (!Array.isArray(coordinates[0])) {
        type = "Point";
      }
      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {
        type = "LineString";
      }
      const rewindGeometry = (0, import_geojson_rewind.default)(
        {
          type,
          coordinates: [...col[coordinates]]
        },
        true
      );
      coords = rewindGeometry.coordinates;
    } else if (x && y && x1 && y1) {
      const from = [parseFloat(col[x]), parseFloat(col[y])];
      const to = [parseFloat(col[x1]), parseFloat(col[y1])];
      coords = [from, to];
    } else if (x && y) {
      coords = [parseFloat(col[x]), parseFloat(col[y])];
    }
    const dataItem = {
      ...col,
      _id: featureIndex,
      coordinates: coords
    };
    resultData.push(dataItem);
  }
  return {
    dataArray: resultData
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
