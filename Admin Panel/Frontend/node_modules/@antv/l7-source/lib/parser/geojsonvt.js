var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/parser/geojsonvt.ts
var geojsonvt_exports = {};
__export(geojsonvt_exports, {
  default: () => geojsonVTTile
});
module.exports = __toCommonJS(geojsonvt_exports);
var import_geojson_vt = __toESM(require("geojson-vt"));
var import_geojsonvt = __toESM(require("../source/geojsonvt"));
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0
};
function signedArea(ring) {
  let sum = 0;
  for (let i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {
    p1 = ring[i];
    p2 = ring[j];
    sum += (p2.x - p1.x) * (p1.y + p2.y);
  }
  return sum;
}
function classifyRings(rings) {
  const len = rings.length;
  if (len <= 1) {
    return [rings];
  }
  const polygons = [];
  let polygon;
  let ccw;
  for (let i = 0; i < len; i++) {
    const area = signedArea(rings[i]);
    if (area === 0) {
      continue;
    }
    if (ccw === void 0) {
      ccw = area < 0;
    }
    if (ccw === area < 0) {
      if (polygon) {
        polygons.push(polygon);
      }
      polygon = [rings[i]];
    } else {
      polygon.push(rings[i]);
    }
  }
  if (polygon) {
    polygons.push(polygon);
  }
  return polygons;
}
var VectorTileFeatureTypes = ["Unknown", "Point", "LineString", "Polygon"];
function GetGeoJSON(extent, x, y, z, vectorTileFeature) {
  let coords = vectorTileFeature.geometry;
  const currenType = vectorTileFeature.type;
  const currentProperties = vectorTileFeature.tags;
  const currentId = vectorTileFeature.id;
  const size = extent * Math.pow(2, z);
  const x0 = extent * x;
  const y0 = extent * y;
  let type = VectorTileFeatureTypes[currenType];
  let i;
  let j;
  function project(line) {
    for (let index = 0; index < line.length; index++) {
      const p = line[index];
      if (p[3]) {
        break;
      }
      const y2 = 180 - (p[1] + y0) * 360 / size;
      const lng = (p[0] + x0) * 360 / size - 180;
      const lat = 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;
      line[index] = [lng, lat, 0, 1];
    }
  }
  switch (currenType) {
    case 1:
      const points = [];
      for (i = 0; i < coords.length; i++) {
        points[i] = coords[i][0];
      }
      coords = points;
      project(coords);
      break;
    case 2:
      for (i = 0; i < coords.length; i++) {
        project(coords[i]);
      }
      break;
    case 3:
      coords = classifyRings(coords);
      for (i = 0; i < coords.length; i++) {
        for (j = 0; j < coords[i].length; j++) {
          project(coords[i][j]);
        }
      }
      break;
  }
  if (coords.length === 1) {
    coords = coords[0];
  } else {
    type = "Multi" + type;
  }
  const result = {
    type: "Feature",
    geometry: {
      type,
      coordinates: coords
    },
    properties: currentProperties,
    id: currentId,
    tileOrigin: [0, 0],
    coord: ""
  };
  return result;
}
var getVectorTile = async (tile, tileIndex, tileParams, extent) => {
  return new Promise((resolve) => {
    const tileData = tileIndex.getTile(tile.z, tile.x, tile.y);
    const features = tileData ? tileData.features.map((vectorTileFeature) => {
      return GetGeoJSON(
        extent,
        tileParams.x,
        tileParams.y,
        tileParams.z,
        vectorTileFeature
      );
    }) : [];
    const vectorTile = {
      layers: {
        defaultLayer: {
          // @ts-ignore
          features
        }
      }
    };
    const vectorSource = new import_geojsonvt.default(vectorTile, tile.x, tile.y, tile.z);
    resolve(vectorSource);
  });
};
function getOption(cfg) {
  const defaultOptions = {
    // geojson-vt default options
    maxZoom: 14,
    // max zoom to preserve detail on
    indexMaxZoom: 5,
    // max zoom in the tile index
    indexMaxPoints: 1e5,
    // max number of points per tile in the tile index
    tolerance: 3,
    // simplification tolerance (higher means simpler)
    extent: 4096,
    // tile extent
    buffer: 64,
    // tile buffer on each side
    lineMetrics: false,
    // whether to calculate line metrics
    promoteId: null,
    // name of a feature property to be promoted to feature.id
    generateId: true,
    // whether to generate feature ids. Cannot be used with promoteId
    debug: 0
    // logging level (0, 1 or 2)
  };
  if (cfg === void 0 || typeof cfg.geojsonvtOptions === "undefined") {
    return defaultOptions;
  } else {
    return { ...defaultOptions, ...cfg.geojsonvtOptions };
  }
}
function geojsonVTTile(data, cfg) {
  const geojsonOptions = getOption(cfg);
  const extent = geojsonOptions.extent || 4096;
  const tileIndex = (0, import_geojson_vt.default)(data, geojsonOptions);
  const getTileData = (tileParams, tile) => {
    return getVectorTile(tile, tileIndex, tileParams, extent);
  };
  const tilesetOptions = {
    ...DEFAULT_CONFIG,
    ...cfg,
    getTileData
  };
  return {
    data,
    dataArray: [],
    tilesetOptions,
    isTile: true
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
