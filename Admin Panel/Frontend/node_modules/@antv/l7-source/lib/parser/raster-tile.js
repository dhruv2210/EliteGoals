var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/parser/raster-tile.ts
var raster_tile_exports = {};
__export(raster_tile_exports, {
  default: () => rasterTile,
  rasterDataTypes: () => rasterDataTypes
});
module.exports = __toCommonJS(raster_tile_exports);
var import_l7_core = require("@antv/l7-core");
var import_getCustomData = require("../utils/tile/getCustomData");
var import_getRasterTile = require("../utils/tile/getRasterTile");
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0,
  warp: true
};
var rasterDataTypes = [import_l7_core.RasterTileType.ARRAYBUFFER, import_l7_core.RasterTileType.RGB];
function isUrlError(url) {
  if (Array.isArray(url) && url.length === 0) {
    return true;
  }
  if (!Array.isArray(url) && typeof url !== "string") {
    return true;
  }
  return false;
}
function rasterTile(data, cfg = {}) {
  if (isUrlError(data)) {
    throw new Error("tile server url is error");
  }
  let tileDataType = (cfg == null ? void 0 : cfg.dataType) || import_l7_core.RasterTileType.IMAGE;
  if (tileDataType === import_l7_core.RasterTileType.RGB) {
    tileDataType = import_l7_core.RasterTileType.ARRAYBUFFER;
  }
  const getTileData = (tileParams, tile) => {
    switch (tileDataType) {
      case import_l7_core.RasterTileType.IMAGE:
        return (0, import_getRasterTile.getTileImage)(data, tileParams, tile, cfg);
      case import_l7_core.RasterTileType.CUSTOMIMAGE:
      case import_l7_core.RasterTileType.CUSTOMTERRAINRGB:
        return (0, import_getCustomData.getCustomImageData)(
          // 自定义地形请求方式数据
          tile,
          // @ts-ignore
          cfg == null ? void 0 : cfg.getCustomData
        );
      case import_l7_core.RasterTileType.ARRAYBUFFER:
        return (0, import_getRasterTile.getTileBuffer)(
          data,
          tileParams,
          tile,
          (cfg == null ? void 0 : cfg.format) || import_getRasterTile.defaultFormat,
          cfg == null ? void 0 : cfg.operation
        );
      case import_l7_core.RasterTileType.CUSTOMARRAYBUFFER:
      case import_l7_core.RasterTileType.CUSTOMRGB:
        return (0, import_getCustomData.getCustomData)(
          tile,
          // @ts-ignore
          cfg == null ? void 0 : cfg.getCustomData,
          (cfg == null ? void 0 : cfg.format) || import_getRasterTile.defaultFormat,
          cfg == null ? void 0 : cfg.operation
        );
      default:
        return (0, import_getRasterTile.getTileImage)(data, tileParams, tile, cfg);
    }
  };
  const tilesetOptions = { ...DEFAULT_CONFIG, ...cfg, getTileData };
  return {
    data,
    dataArray: [],
    tilesetOptions,
    isTile: true
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rasterDataTypes
});
