var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default,
  getParser: () => import_factory2.getParser,
  getTransform: () => import_factory2.getTransform,
  rasterDataTypes: () => import_raster_tile.rasterDataTypes,
  registerParser: () => import_factory2.registerParser,
  registerTransform: () => import_factory2.registerTransform
});
module.exports = __toCommonJS(src_exports);
var import_factory = require("./factory");
var import_csv = __toESM(require("./parser/csv"));
var import_geojson = __toESM(require("./parser/geojson"));
var import_geojsonvt = __toESM(require("./parser/geojsonvt"));
var import_image = __toESM(require("./parser/image"));
var import_json = __toESM(require("./parser/json"));
var import_mvt = __toESM(require("./parser/mvt"));
var import_raster = __toESM(require("./parser/raster"));
var import_raster_tile = __toESM(require("./parser/raster-tile"));
var import_rasterRgb = __toESM(require("./parser/rasterRgb"));
var import_testTile = __toESM(require("./parser/testTile"));
var import_source = __toESM(require("./source"));
var import_cluster = require("./transform/cluster");
var import_filter = require("./transform/filter");
var import_grid = require("./transform/grid");
var import_hexagon = require("./transform/hexagon");
var import_join = require("./transform/join");
var import_map = require("./transform/map");
var import_factory2 = require("./factory");
__reExport(src_exports, require("./interface"), module.exports);
__reExport(src_exports, require("./source/index"), module.exports);
(0, import_factory.registerParser)("rasterTile", import_raster_tile.default);
(0, import_factory.registerParser)("mvt", import_mvt.default);
(0, import_factory.registerParser)("geojsonvt", import_geojsonvt.default);
(0, import_factory.registerParser)("testTile", import_testTile.default);
(0, import_factory.registerParser)("geojson", import_geojson.default);
(0, import_factory.registerParser)("image", import_image.default);
(0, import_factory.registerParser)("csv", import_csv.default);
(0, import_factory.registerParser)("json", import_json.default);
(0, import_factory.registerParser)("raster", import_raster.default);
(0, import_factory.registerParser)("rasterRgb", import_rasterRgb.default);
(0, import_factory.registerTransform)("cluster", import_cluster.cluster);
(0, import_factory.registerTransform)("filter", import_filter.filter);
(0, import_factory.registerTransform)("join", import_join.join);
(0, import_factory.registerTransform)("map", import_map.map);
(0, import_factory.registerTransform)("grid", import_grid.aggregatorToGrid);
(0, import_factory.registerTransform)("hexagon", import_hexagon.pointToHexbin);
var src_default = import_source.default;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getParser,
  getTransform,
  rasterDataTypes,
  registerParser,
  registerTransform
});
