var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/bandOperation/bands.ts
var bands_exports = {};
__export(bands_exports, {
  bandsOperation: () => bandsOperation,
  processRasterData: () => processRasterData
});
module.exports = __toCommonJS(bands_exports);
var import_math = require("./math");
var import_operationSchema = require("./operationSchema");
async function bandsOperation(imageDataList, rasterFormat, operation) {
  if (imageDataList.length === 0) {
    return {
      rasterData: [0],
      width: 1,
      heigh: 1
    };
  }
  const formatData = await Promise.all(
    imageDataList.map(({ data, bands = [0] }) => rasterFormat(data, bands))
  );
  const bandsData = [];
  formatData.forEach((d) => {
    Array.isArray(d) ? bandsData.push(...d) : bandsData.push(d);
  });
  const { width, height } = bandsData[0];
  let rasterData;
  switch (typeof operation) {
    case "function":
      rasterData = operation(bandsData);
      break;
    case "object":
      if (!Array.isArray(operation)) {
        rasterData = processSchemaOperation(
          operation,
          bandsData
        );
      } else {
        rasterData = { rasterData: (0, import_math.calculate)(operation, bandsData) };
      }
      break;
    default:
      rasterData = { rasterData: bandsData[0].rasterData };
  }
  return {
    ...rasterData,
    width,
    height
  };
}
function processSchemaOperation(operation, bandsData) {
  const schema = import_operationSchema.operationsSchema[operation.type];
  if (schema.type === "function") {
    return schema.method(bandsData, operation == null ? void 0 : operation.options);
  } else if (schema.type === "operation") {
    if (operation.type === "rgb") {
      return getRgbBands(schema.expression, bandsData);
    } else {
      return { rasterData: (0, import_math.calculate)(schema.expression, bandsData) };
    }
  }
}
function getRgbBands(operation, bandsData) {
  if (operation.r === void 0) {
    console.warn("Channel R lost in Operation! Use band[0] to fill!");
  }
  if (operation.g === void 0) {
    console.warn("Channel G lost in Operation! Use band[0] to fill!");
  }
  if (operation.b === void 0) {
    console.warn("Channel B lost in Operation! Use band[0] to fill!");
  }
  const r = (0, import_math.calculate)(operation.r || ["band", 0], bandsData);
  const g = (0, import_math.calculate)(operation.g || ["band", 0], bandsData);
  const b = (0, import_math.calculate)(operation.b || ["band", 0], bandsData);
  return [r, g, b];
}
async function processRasterData(rasterFiles, rasterFormat, operation, callback) {
  const rasterData = await bandsOperation(rasterFiles, rasterFormat, operation);
  callback(null, { data: rasterData });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bandsOperation,
  processRasterData
});
