var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/tile/getRasterData.ts
var getRasterData_exports = {};
__export(getRasterData_exports, {
  getRasterFile: () => getRasterFile
});
module.exports = __toCommonJS(getRasterData_exports);
var import_l7_utils = require("@antv/l7-utils");
var import_bands = require("../bandOperation/bands");
var import_request = require("./request");
var getRasterFile = async (tile, requestParameters, callback, rasterFormat, operation) => {
  const tileBandParams = (0, import_request.getTileBandParams)(requestParameters.url);
  if (tileBandParams.length > 1) {
    const { rasterFiles, xhrList, errList } = await getMultiArrayBuffer(
      tileBandParams,
      requestParameters
    );
    (0, import_request.bindCancel)(tile, xhrList);
    if (errList.length > 0) {
      callback(errList, null);
      return;
    }
    (0, import_bands.processRasterData)(rasterFiles, rasterFormat, operation, callback);
  } else {
    const xhr = (0, import_l7_utils.getArrayBuffer)(requestParameters, (err, imgData) => {
      if (err) {
        callback(err);
      } else if (imgData) {
        const rasterFiles = [
          {
            data: imgData,
            bands: tileBandParams[0].bands
          }
        ];
        (0, import_bands.processRasterData)(rasterFiles, rasterFormat, operation, callback);
      }
    });
    (0, import_request.bindCancel)(tile, [xhr]);
  }
};
async function getMultiArrayBuffer(tileBandParams, requestParameters) {
  const rasterFiles = [];
  const xhrList = [];
  const errList = [];
  for (let i = 0; i < tileBandParams.length; i++) {
    const tileBandParam = tileBandParams[i];
    const params = {
      ...requestParameters,
      url: tileBandParam.url
    };
    const bands = tileBandParam.bands;
    const { err, data, xhr } = await (0, import_l7_utils.makeXMLHttpRequestPromise)({
      ...params,
      type: "arrayBuffer"
    });
    if (err) {
      errList.push(err);
    }
    xhrList.push(xhr);
    rasterFiles.push({
      data,
      bands
    });
  }
  return { rasterFiles, xhrList, errList };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getRasterFile
});
