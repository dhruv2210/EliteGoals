var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/transform/cluster.ts
var cluster_exports = {};
__export(cluster_exports, {
  cluster: () => cluster,
  formatData: () => formatData
});
module.exports = __toCommonJS(cluster_exports);
var import_supercluster = __toESM(require("supercluster/dist/supercluster"));
function cluster(data, option) {
  const { radius = 40, maxZoom = 18, minZoom = 0, zoom = 2 } = option;
  if (data.pointIndex) {
    const clusterData = data.pointIndex.getClusters(
      data.extent,
      Math.floor(zoom)
    );
    data.dataArray = formatData(clusterData);
    return data;
  }
  const pointIndex = new import_supercluster.default({
    radius,
    minZoom,
    maxZoom
  });
  const geojson = {
    type: "FeatureCollection",
    features: []
  };
  geojson.features = data.dataArray.map((item) => {
    return {
      type: "Feature",
      geometry: {
        type: "Point",
        coordinates: item.coordinates
      },
      properties: {
        ...item
      }
    };
  });
  pointIndex.load(geojson.features);
  return pointIndex;
}
function formatData(clusterPoint) {
  return clusterPoint.map((point, index) => {
    return {
      coordinates: point.geometry.coordinates,
      _id: index + 1,
      ...point.properties
    };
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cluster,
  formatData
});
