var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/source/vector.ts
var vector_exports = {};
__export(vector_exports, {
  default: () => VectorSource
});
module.exports = __toCommonJS(vector_exports);
var import_vector_tile = require("@mapbox/vector-tile");
var import_pbf = __toESM(require("pbf"));
var VectorSource = class {
  constructor(data, x, y, z) {
    this.vectorLayerCache = {};
    this.x = x;
    this.y = y;
    this.z = z;
    this.vectorTile = new import_vector_tile.VectorTile(new import_pbf.default(data));
  }
  getTileData(sourceLayer) {
    if (!sourceLayer || !this.vectorTile.layers[sourceLayer]) {
      return [];
    }
    if (this.vectorLayerCache[sourceLayer]) {
      return this.vectorLayerCache[sourceLayer];
    }
    const vectorTile = this.vectorTile.layers[sourceLayer];
    if (Array.isArray(vectorTile.features)) {
      this.vectorLayerCache[sourceLayer] = vectorTile.features;
      return vectorTile.features;
    }
    const features = [];
    for (let i = 0; i < vectorTile.length; i++) {
      const vectorTileFeature = vectorTile.feature(i);
      const feature = vectorTileFeature.toGeoJSON(this.x, this.y, this.z);
      features.push({
        ...feature,
        properties: {
          id: feature.id,
          ...feature.properties
        }
      });
    }
    this.vectorLayerCache[sourceLayer] = features;
    return features;
  }
  getFeatureById() {
    throw new Error("Method not implemented.");
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
