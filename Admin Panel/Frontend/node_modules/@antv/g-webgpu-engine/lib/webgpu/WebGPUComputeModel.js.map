{"version":3,"sources":["../../src/webgpu/WebGPUComputeModel.ts"],"names":["WebGPUComputeModel","engine","context","entity","uniformGPUBufferLayout","uniformBuffer","vertexBuffers","outputBuffer","bindGroupEntries","bindGroup","computePipeline","compileComputePipelineStageDescriptor","shader","computeStage","buffers","uniforms","filter","uniform","storageClass","STORAGE_CLASS","StorageBuffer","Uniform","bufferBindingIndex","length","offset","mergedUniformData","forEach","data","push","name","originDataLength","padding","space","i","WebGPUBuffer","Array","Float32Array","usage","WebGPUConstants","BufferUsage","CopyDst","binding","resource","buffer","get","type","AST_TOKEN_TYPES","Vector4FloatArray","FloatArray","gpuBuffer","output","isFinite","Number","Storage","CopySrc","typedArrayConstructor","isReferer","model","refer","undefined","device","createComputePipeline","console","log","createBindGroup","layout","getBindGroupLayout","entries","destroy","Object","keys","bufferName","byteCount","BYTES_PER_ELEMENT","gpuReadBuffer","createBuffer","size","GPUBufferUsage","COPY_DST","MAP_READ","encoder","createCommandEncoder","copyBufferToBuffer","queue","isSafari","getQueue","defaultQueue","submit","finish","mapAsync","MapMode","Read","arraybuffer","getMappedRange","typedArray","slice","unmap","currentComputePass","setPipeline","setBindGroup","dispatch","subData","uniformName","find","l","inputName","inputBuffer","source","shaderVersion","compileRawShaderToSpirV","glslang","compileGLSL","computeCode","computeShader","options","useWGSL","compileShaderToSpirV","module","createShaderModule","code","isWHLSL","entryPoint"],"mappings":"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","sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  GLSLContext,\n  IComputeModel,\n  isSafari,\n  STORAGE_CLASS,\n} from '@antv/g-webgpu-core';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { WebGPUEngine } from '.';\nimport { isNumber } from '../utils/is-number';\nimport WebGPUBuffer from './WebGPUBuffer';\n\nexport default class WebGPUComputeModel implements IComputeModel {\n  private entity = createEntity();\n  /**\n   * 用于后续渲染时动态更新\n   */\n  private uniformGPUBufferLayout: Array<{\n    name: string;\n    offset: number;\n  }> = [];\n\n  private uniformBuffer: WebGPUBuffer;\n  private vertexBuffers: Record<string, WebGPUBuffer> = {};\n  private outputBuffer: WebGPUBuffer;\n  private bindGroupEntries: GPUBindGroupEntry[];\n  private bindGroup: GPUBindGroup;\n\n  private computePipeline: GPUComputePipeline;\n\n  constructor(private engine: WebGPUEngine, private context: GLSLContext) {}\n\n  public async init() {\n    const { computeStage } = await this.compileComputePipelineStageDescriptor(\n      this.context.shader!,\n    );\n\n    const buffers = this.context.uniforms.filter(\n      (uniform) => uniform.storageClass === STORAGE_CLASS.StorageBuffer,\n    );\n    const uniforms = this.context.uniforms.filter(\n      (uniform) => uniform.storageClass === STORAGE_CLASS.Uniform,\n    );\n\n    let bufferBindingIndex = uniforms.length ? 1 : 0;\n    this.bindGroupEntries = [];\n    if (bufferBindingIndex) {\n      let offset = 0;\n      // FIXME: 所有 uniform 合并成一个 buffer，固定使用 Float32Array 存储，确实会造成一些内存的浪费\n      // we use std140 layout @see https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)\n      const mergedUniformData: number[] = [];\n      uniforms.forEach((uniform) => {\n        if (isNumber(uniform.data)) {\n          this.uniformGPUBufferLayout.push({\n            name: uniform.name,\n            offset,\n          });\n          offset += 4;\n          // @ts-ignore\n          mergedUniformData.push(uniform.data);\n        } else {\n          // @ts-ignore\n          let originDataLength = uniform.data?.length || 1;\n          if (originDataLength === 3) {\n            // vec3 -> vec4\n            // @see http://ptgmedia.pearsoncmg.com/images/9780321552624/downloads/0321552628_AppL.pdf\n            originDataLength = 4;\n            // @ts-ignore\n            uniform.data.push(0);\n          }\n          // 4 elements per block/line\n          const padding = (offset / 4) % 4;\n          if (padding > 0) {\n            const space = 4 - padding;\n            if (originDataLength > 1 && originDataLength <= space) {\n              if (originDataLength === 2) {\n                if (space === 3) {\n                  offset += 4;\n                  mergedUniformData.push(0);\n                }\n                // @ts-ignore\n                mergedUniformData.push(...uniform.data);\n                this.uniformGPUBufferLayout.push({\n                  name: uniform.name,\n                  offset,\n                });\n              }\n            } else {\n              for (let i = 0; i < space; i++) {\n                offset += 4;\n                mergedUniformData.push(0);\n              }\n              // @ts-ignore\n              mergedUniformData.push(...uniform.data);\n              this.uniformGPUBufferLayout.push({\n                name: uniform.name,\n                offset,\n              });\n            }\n          }\n\n          offset += 4 * originDataLength;\n        }\n      });\n\n      this.uniformBuffer = new WebGPUBuffer(this.engine, {\n        // TODO: 处理 Struct 和 boolean\n        // @ts-ignore\n        data:\n          mergedUniformData instanceof Array\n            ? // @ts-ignore\n              new Float32Array(mergedUniformData)\n            : mergedUniformData,\n        usage:\n          WebGPUConstants.BufferUsage.Uniform |\n          WebGPUConstants.BufferUsage.CopyDst,\n      });\n\n      this.bindGroupEntries.push({\n        binding: 0,\n        resource: {\n          buffer: this.uniformBuffer.get(),\n        },\n      });\n    }\n\n    // create GPUBuffers for storeage buffers\n    buffers.forEach((buffer) => {\n      if (buffer.data !== null) {\n        if (\n          buffer.type === AST_TOKEN_TYPES.Vector4FloatArray ||\n          buffer.type === AST_TOKEN_TYPES.FloatArray\n        ) {\n          let gpuBuffer;\n          if (buffer.name === this.context.output.name) {\n            gpuBuffer = new WebGPUBuffer(this.engine, {\n              // @ts-ignore\n              data: isFinite(Number(buffer.data)) ? [buffer.data] : buffer.data,\n              usage:\n                WebGPUConstants.BufferUsage.Storage |\n                WebGPUConstants.BufferUsage.CopyDst |\n                WebGPUConstants.BufferUsage.CopySrc,\n            });\n            this.outputBuffer = gpuBuffer;\n            this.context.output = {\n              name: buffer.name,\n              // @ts-ignore\n              length: isFinite(Number(buffer.data)) ? 1 : buffer.data.length,\n              typedArrayConstructor: Float32Array,\n              gpuBuffer: gpuBuffer.get(),\n            };\n          } else {\n            if (buffer.isReferer) {\n              // @ts-ignore\n              if (buffer.data.model && buffer.data.model.outputBuffer) {\n                // @ts-ignore\n                gpuBuffer = (buffer.data.model as WebGPUComputeModel)\n                  .outputBuffer;\n              } else {\n                // referred kernel haven't been executed\n              }\n            } else {\n              gpuBuffer = new WebGPUBuffer(this.engine, {\n                // @ts-ignore\n                data: isFinite(Number(buffer.data))\n                  ? [buffer.data]\n                  : buffer.data,\n                usage:\n                  WebGPUConstants.BufferUsage.Storage |\n                  WebGPUConstants.BufferUsage.CopyDst |\n                  WebGPUConstants.BufferUsage.CopySrc,\n              });\n            }\n          }\n\n          // @ts-ignore\n          this.vertexBuffers[buffer.name] = gpuBuffer;\n          this.bindGroupEntries.push({\n            binding: bufferBindingIndex,\n            resource: {\n              name: buffer.name,\n              refer: gpuBuffer ? undefined : buffer.data,\n              // @ts-ignore\n              buffer: gpuBuffer ? gpuBuffer.get() : undefined,\n            },\n          });\n          bufferBindingIndex++;\n        }\n      }\n    });\n\n    // create compute pipeline layout\n    this.computePipeline = this.engine.device.createComputePipeline({\n      computeStage,\n    });\n\n    console.log(this.bindGroupEntries);\n\n    this.bindGroup = this.engine.device.createBindGroup({\n      layout: this.computePipeline.getBindGroupLayout(0),\n      entries: this.bindGroupEntries,\n    });\n  }\n\n  public destroy(): void {\n    if (this.uniformBuffer) {\n      this.uniformBuffer.destroy();\n    }\n\n    Object.keys(this.vertexBuffers).forEach((bufferName) =>\n      this.vertexBuffers[bufferName].destroy(),\n    );\n  }\n\n  public async readData() {\n    const { output } = this.context;\n    if (output) {\n      const { length, typedArrayConstructor, gpuBuffer } = output;\n      if (gpuBuffer) {\n        // await gpuBuffer.mapAsync(WebGPUConstants.MapMode.Read);\n        // const arraybuffer = gpuBuffer.getMappedRange();\n        // let arraybuffer;\n\n        // if (isSafari) {\n        //   arraybuffer = await gpuBuffer.mapReadAsync();\n        // } else {\n        const byteCount = length! * typedArrayConstructor!.BYTES_PER_ELEMENT;\n\n        // @see https://developers.google.com/web/updates/2019/08/get-started-with-gpu-compute-on-the-web\n        const gpuReadBuffer = this.engine.device.createBuffer({\n          size: byteCount,\n          usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n        });\n        const encoder = this.engine.device.createCommandEncoder();\n        encoder.copyBufferToBuffer(gpuBuffer, 0, gpuReadBuffer, 0, byteCount);\n        const queue: GPUQueue = isSafari\n          ? // @ts-ignore\n            this.engine.device.getQueue()\n          : this.engine.device.defaultQueue;\n        queue.submit([encoder.finish()]);\n\n        await gpuReadBuffer.mapAsync(WebGPUConstants.MapMode.Read);\n        const arraybuffer = gpuReadBuffer.getMappedRange();\n        const typedArray = new typedArrayConstructor!(arraybuffer.slice(0));\n        gpuReadBuffer.unmap();\n\n        return typedArray;\n      }\n    }\n    return new Float32Array();\n  }\n\n  public run() {\n    if (this.engine.currentComputePass) {\n      this.engine.currentComputePass.setPipeline(this.computePipeline);\n\n      // this.bindGroupEntries.forEach((entry) => {\n      //   if (!entry.resource.buffer) {\n      //     // get referred kernel's output\n      //     const gpuBuffer = (entry.resource.refer.model as WebGPUComputeModel)\n      //       .outputBuffer;\n      //     this.vertexBuffers[entry.resource.name] = gpuBuffer;\n      //     entry.resource.buffer = gpuBuffer.get();\n      //   }\n      // });\n\n      // const bindGroup = this.engine.device.createBindGroup({\n      //   layout: this.computePipeline.getBindGroupLayout(0),\n      //   entries: this.bindGroupEntries,\n      // });\n      this.engine.currentComputePass.setBindGroup(0, this.bindGroup);\n      this.engine.currentComputePass.dispatch(...this.context.dispatch);\n    }\n  }\n\n  public updateBuffer(\n    bufferName: string,\n    data:\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n    offset: number = 0,\n  ) {\n    const buffer = this.vertexBuffers[bufferName];\n    if (buffer) {\n      buffer.subData({ data, offset });\n    }\n  }\n\n  public updateUniform(\n    uniformName: string,\n    data:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n  ) {\n    const layout = this.uniformGPUBufferLayout.find(\n      (l) => l.name === uniformName,\n    );\n\n    if (layout) {\n      this.uniformBuffer.subData({\n        data: Number.isFinite(data)\n          ? new Float32Array([data as number])\n          : new Float32Array(\n              data as\n                | number[]\n                | Float32Array\n                | Uint8Array\n                | Uint16Array\n                | Uint32Array\n                | Int8Array\n                | Int16Array\n                | Int32Array,\n            ),\n        offset: layout.offset,\n      });\n    }\n  }\n\n  public confirmInput(model: IComputeModel, inputName: string): void {\n    // copy output GPUBuffer of kernel\n    const inputBuffer = this.vertexBuffers[inputName];\n    const outputBuffer = (model as WebGPUComputeModel).outputBuffer;\n\n    if (inputBuffer && outputBuffer && inputBuffer !== outputBuffer) {\n      const encoder = this.engine.device.createCommandEncoder();\n      const {\n        length,\n        typedArrayConstructor,\n      } = (model as WebGPUComputeModel).context.output;\n      const byteCount = length! * typedArrayConstructor!.BYTES_PER_ELEMENT;\n      encoder.copyBufferToBuffer(\n        outputBuffer.get(),\n        0,\n        inputBuffer.get(),\n        0,\n        byteCount,\n      );\n      const queue: GPUQueue = isSafari\n        ? // @ts-ignore\n          this.engine.device.getQueue()\n        : this.engine.device.defaultQueue;\n      queue.submit([encoder.finish()]);\n    }\n  }\n\n  private compileShaderToSpirV(\n    source: string,\n    type: string,\n    shaderVersion: string,\n  ): Promise<Uint32Array> {\n    return this.compileRawShaderToSpirV(shaderVersion + source, type);\n  }\n\n  private compileRawShaderToSpirV(\n    source: string,\n    type: string,\n  ): Promise<Uint32Array> {\n    return this.engine.glslang.compileGLSL(source, type);\n  }\n\n  private async compileComputePipelineStageDescriptor(\n    computeCode: string,\n  ): Promise<Pick<GPUComputePipelineDescriptor, 'computeStage'>> {\n    let computeShader: Uint32Array | string = computeCode;\n    const shaderVersion = '#version 450\\n';\n    if (!this.engine.options.useWGSL) {\n      computeShader = await this.compileShaderToSpirV(\n        computeCode,\n        'compute',\n        shaderVersion,\n      );\n    }\n\n    return {\n      computeStage: {\n        module: this.engine.device.createShaderModule({\n          code: computeShader,\n          // @ts-ignore\n          isWHLSL: isSafari,\n        }),\n        entryPoint: 'main',\n      },\n    };\n  }\n}\n"],"file":"WebGPUComputeModel.js"}