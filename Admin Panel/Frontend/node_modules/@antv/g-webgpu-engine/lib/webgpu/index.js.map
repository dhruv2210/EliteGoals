{"version":3,"sources":["../../src/webgpu/index.ts"],"names":["WebGPUEngine","supportWebGPU","useWGSL","options","canvas","context","glslang","adapter","device","swapChain","mainPassSampleCount","mainTexture","depthTexture","mainColorAttachments","mainTextureExtends","mainDepthAttachment","uploadEncoder","renderEncoder","computeEncoder","renderTargetEncoder","commandBuffers","Array","fill","undefined","currentRenderPass","mainRenderPass","currentRenderTargetViewDescriptor","currentComputePass","bundleEncoder","tempBuffers","currentRenderTarget","uploadEncoderDescriptor","label","renderEncoderDescriptor","renderTargetEncoderDescriptor","computeEncoderDescriptor","pipelines","computePipelines","defaultSampleCount","clearDepthValue","clearStencilValue","transientViewport","x","Infinity","y","width","height","cachedViewport","clear","framebuffer","color","depth","stencil","supportCompute","startComputePass","endRenderTargetRenderPass","startRenderTargetRenderPass","loadValue","WebGPUConstants","LoadOp","Load","depthLoadValue","stencilLoadValue","endMainRenderPass","startMainRenderPass","createModel","model","WebGPUModel","init","createAttribute","WebGPUAttribute","createBuffer","WebGPUBuffer","createElements","WebGPUElements","createTexture2D","WebGPUTexture2D","createFramebuffer","WebGPUFramebuffer","useFramebuffer","drawCommands","unbindFramebuffer","dimension","TextureViewDimension","E2d","arrayLayerCount","aspect","TextureAspect","All","createComputeModel","WebGPUComputeModel","getCanvas","getGLContext","Error","viewport","renderPass","getCurrentRenderPass","setViewport","readPixels","config","antialiasing","initGlslang","initContextAndSwapChain","initMainAttachments","scissor","destroy","forEach","buffer","createCommandEncoder","endComputePass","finish","isSafari","getQueue","submit","filter","defaultQueue","navigator","gpu","requestAdapter","requestDevice","getContext","configureSwapChain","format","swapChainFormat","usage","TextureUsage","OutputAttachment","CopySrc","mainTextureDescriptor","size","mipLevelCount","sampleCount","TextureDimension","TextureFormat","BGRA8Unorm","createTexture","attachment","createDefaultView","createView","storeOp","StoreOp","Store","getCurrentTexture","depthTextureDescriptor","Depth24PlusStencil8","depthStoreOp","stencilStoreOp","beginComputePass","resolveTarget","beginRenderPass","colorAttachments","depthStencilAttachment","renderTarget","clearColor","clearDepth","clearStencil","gpuTexture","get","texture","colorTextureView","depthStencilTexture","depthStencilTextureView","endPass","resetCachedViewport"],"mappings":"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","sourcesContent":["/**\n * implements renderService with WebGPU API\n * @see https://webgpu.io/\n * @see https://github.com/BabylonJS/Babylon.js/blob/WebGPU/src/Engines/webgpuEngine.ts\n */\nimport {\n  GLSLContext,\n  IAttribute,\n  IAttributeInitializationOptions,\n  IBuffer,\n  IBufferInitializationOptions,\n  IClearOptions,\n  IElements,\n  IElementsInitializationOptions,\n  IFramebuffer,\n  IFramebufferInitializationOptions,\n  IModel,\n  IModelInitializationOptions,\n  IReadPixelsOptions,\n  IRendererConfig,\n  IRendererService,\n  isSafari,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  IViewport,\n} from '@antv/g-webgpu-core';\n// import { Glslang } from '@webgpu/glslang/dist/web-devel/glslang.onefile';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { vec4 } from 'gl-matrix';\nimport { injectable } from 'inversify';\nimport glslang from './glslang';\nimport WebGPUAttribute from './WebGPUAttribute';\nimport WebGPUBuffer from './WebGPUBuffer';\nimport WebGPUComputeModel from './WebGPUComputeModel';\nimport WebGPUElements from './WebGPUElements';\nimport WebGPUFramebuffer from './WebGPUFramebuffer';\nimport WebGPUModel from './WebGPUModel';\nimport WebGPUTexture2D from './WebGPUTexture2D';\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/**\n * regl renderer\n */\n@injectable()\nexport class WebGPUEngine implements IRendererService {\n  public supportWebGPU = true;\n  public useWGSL = false;\n\n  public options: IRendererConfig;\n  public canvas: HTMLCanvasElement;\n  public context: GPUCanvasContext;\n  public glslang: any;\n  public adapter: GPUAdapter;\n  public device: GPUDevice;\n  public swapChain: GPUSwapChain;\n\n  public mainPassSampleCount: number;\n\n  public mainTexture: GPUTexture;\n  public depthTexture: GPUTexture;\n  public mainColorAttachments: GPURenderPassColorAttachmentDescriptor[];\n  public mainTextureExtends: GPUExtent3D;\n  public mainDepthAttachment: GPURenderPassDepthStencilAttachmentDescriptor;\n\n  // Frame Life Cycle (recreated each frame)\n  public uploadEncoder: GPUCommandEncoder;\n  public renderEncoder: GPUCommandEncoder;\n  public computeEncoder: GPUCommandEncoder;\n  public renderTargetEncoder: GPUCommandEncoder;\n  public commandBuffers: GPUCommandBuffer[] = new Array(4).fill(undefined);\n\n  // Frame Buffer Life Cycle (recreated for each render target pass)\n  public currentRenderPass: GPURenderPassEncoder | null = null;\n  public mainRenderPass: GPURenderPassEncoder | null = null;\n  public currentRenderTargetViewDescriptor: GPUTextureViewDescriptor;\n  public currentComputePass: GPUComputePassEncoder | null = null;\n  public bundleEncoder: GPURenderBundleEncoder | null;\n  public tempBuffers: GPUBuffer[] = [];\n  public currentRenderTarget: WebGPUFramebuffer | null = null;\n\n  public readonly uploadEncoderDescriptor = { label: 'upload' };\n  public readonly renderEncoderDescriptor = { label: 'render' };\n  public readonly renderTargetEncoderDescriptor = { label: 'renderTarget' };\n  public readonly computeEncoderDescriptor = { label: 'compute' };\n\n  /**\n   * 通过名称访问\n   */\n  private pipelines: {\n    [pipelineName: string]: GPURenderPipeline;\n  } = {};\n  private computePipelines: {\n    [pipelineName: string]: GPUComputePipeline;\n  } = {};\n\n  private readonly defaultSampleCount = 4;\n  private readonly clearDepthValue = 1;\n  private readonly clearStencilValue = 0;\n  private transientViewport: IViewport = {\n    x: Infinity,\n    y: 0,\n    width: 0,\n    height: 0,\n  };\n  private cachedViewport: IViewport = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  };\n\n  public isFloatSupported() {\n    return true;\n  }\n\n  public async init(config: IRendererConfig): Promise<void> {\n    this.canvas = config.canvas!;\n    this.options = config;\n    this.useWGSL = !!config.useWGSL;\n    this.mainPassSampleCount = config.antialiasing\n      ? this.defaultSampleCount\n      : 1;\n\n    await this.initGlslang();\n    this.initContextAndSwapChain();\n    this.initMainAttachments();\n  }\n\n  public setScissor(\n    scissor: Partial<{\n      enable: boolean;\n      box: { x: number; y: number; width: number; height: number };\n    }>,\n  ): void {\n    throw new Error('Method not implemented.');\n  }\n\n  public clear = (options: IClearOptions): void => {\n    const { framebuffer, color, depth, stencil } = options;\n\n    if (this.options.supportCompute) {\n      this.startComputePass();\n    }\n\n    // We need to recreate the render pass so that the new parameters for clear color / depth / stencil are taken into account\n    if (this.currentRenderTarget) {\n      if (this.currentRenderPass) {\n        this.endRenderTargetRenderPass();\n      }\n      this.startRenderTargetRenderPass(\n        this.currentRenderTarget!,\n        color ? color : null,\n        !!depth,\n        !!stencil,\n      );\n    } else {\n      // if (this.useReverseDepthBuffer) {\n      //     this._depthCullingState.depthFunc = Constants.GREATER;\n      // }\n\n      this.mainColorAttachments[0].loadValue = color\n        ? color\n        : WebGPUConstants.LoadOp.Load;\n\n      this.mainDepthAttachment.depthLoadValue = depth\n        ? depth\n        : WebGPUConstants.LoadOp.Load;\n      this.mainDepthAttachment.stencilLoadValue = stencil\n        ? this.clearStencilValue\n        : WebGPUConstants.LoadOp.Load;\n\n      if (this.mainRenderPass) {\n        this.endMainRenderPass();\n      }\n\n      this.startMainRenderPass();\n    }\n  };\n\n  public createModel = async (\n    options: IModelInitializationOptions,\n  ): Promise<IModel> => {\n    const model = new WebGPUModel(this, options);\n    await model.init();\n    return model;\n  };\n\n  public createAttribute = (\n    options: IAttributeInitializationOptions,\n  ): IAttribute => {\n    return new WebGPUAttribute(this, options);\n  };\n\n  public createBuffer = (options: IBufferInitializationOptions): IBuffer => {\n    return new WebGPUBuffer(this, options);\n  };\n\n  public createElements = (\n    options: IElementsInitializationOptions,\n  ): IElements => {\n    return new WebGPUElements(this, options);\n  };\n\n  public createTexture2D = (\n    options: ITexture2DInitializationOptions,\n  ): ITexture2D => {\n    return new WebGPUTexture2D(this, options);\n  };\n\n  public createFramebuffer = (\n    options: IFramebufferInitializationOptions,\n  ): IFramebuffer => {\n    return new WebGPUFramebuffer(this, options);\n  };\n\n  public useFramebuffer = (\n    framebuffer: IFramebuffer | null,\n    drawCommands: () => void,\n  ): void => {\n    // bind\n    if (this.currentRenderTarget) {\n      this.unbindFramebuffer(this.currentRenderTarget);\n    }\n    this.currentRenderTarget = framebuffer as WebGPUFramebuffer;\n\n    // TODO: use mipmap options in framebuffer\n    this.currentRenderTargetViewDescriptor = {\n      dimension: WebGPUConstants.TextureViewDimension.E2d,\n      // mipLevelCount: bindWithMipMaps ? WebGPUTextureHelper.computeNumMipmapLevels(texture.width, texture.height) - lodLevel : 1,\n      // baseArrayLayer: faceIndex,\n      // baseMipLevel: lodLevel,\n      arrayLayerCount: 1,\n      aspect: WebGPUConstants.TextureAspect.All,\n    };\n\n    this.currentRenderPass = null;\n\n    drawCommands();\n  };\n\n  public createComputeModel = async (context: GLSLContext) => {\n    const model = new WebGPUComputeModel(this, context);\n    await model.init();\n    return model;\n  };\n\n  public getCanvas = (): HTMLCanvasElement => {\n    return this.canvas;\n  };\n\n  public getGLContext = (): WebGLRenderingContext => {\n    throw new Error('Method not implemented.');\n  };\n\n  public viewport = ({\n    x,\n    y,\n    width,\n    height,\n  }: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }): void => {\n    if (!this.currentRenderPass) {\n      // call viewport() before current render pass created\n      this.transientViewport = { x, y, width, height };\n    } else if (this.transientViewport.x !== Infinity) {\n      const renderPass = this.getCurrentRenderPass();\n      // @see https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setviewport\n      renderPass.setViewport(\n        this.transientViewport.x,\n        this.transientViewport.y,\n        this.transientViewport.width,\n        this.transientViewport.height,\n        0,\n        1,\n      );\n    } else if (\n      x !== this.cachedViewport.x ||\n      y !== this.cachedViewport.y ||\n      width !== this.cachedViewport.width ||\n      height !== this.cachedViewport.height\n    ) {\n      this.cachedViewport = { x, y, width, height };\n      const renderPass = this.getCurrentRenderPass();\n      renderPass.setViewport(x, y, width, height, 0, 1);\n    }\n  };\n\n  public readPixels = (options: IReadPixelsOptions): Uint8Array => {\n    throw new Error('Method not implemented.');\n  };\n\n  public destroy(): void {\n    if (this.mainTexture) {\n      this.mainTexture.destroy();\n    }\n    if (this.depthTexture) {\n      this.depthTexture.destroy();\n    }\n    this.tempBuffers.forEach((buffer) => buffer.destroy());\n    this.tempBuffers = [];\n  }\n\n  public beginFrame() {\n    this.uploadEncoder = this.device.createCommandEncoder(\n      this.uploadEncoderDescriptor,\n    );\n    this.renderEncoder = this.device.createCommandEncoder(\n      this.renderEncoderDescriptor,\n    );\n    this.renderTargetEncoder = this.device.createCommandEncoder(\n      this.renderTargetEncoderDescriptor,\n    );\n    if (this.options.supportCompute) {\n      this.computeEncoder = this.device.createCommandEncoder(\n        this.computeEncoderDescriptor,\n      );\n    }\n  }\n\n  public endFrame() {\n    if (this.options.supportCompute) {\n      this.endComputePass();\n    }\n\n    this.endMainRenderPass();\n\n    this.commandBuffers[0] = this.uploadEncoder.finish();\n    this.commandBuffers[1] = this.renderEncoder.finish();\n    if (this.options.supportCompute) {\n      this.commandBuffers[2] = this.computeEncoder.finish();\n    }\n    this.commandBuffers[3] = this.renderTargetEncoder.finish();\n\n    if (isSafari) {\n      this.device\n        // @ts-ignore\n        .getQueue()\n        .submit(this.commandBuffers.filter((buffer) => buffer));\n    } else {\n      this.device.defaultQueue.submit(\n        this.commandBuffers.filter((buffer) => buffer),\n      );\n    }\n  }\n\n  public getCurrentRenderPass(): GPURenderPassEncoder {\n    if (this.currentRenderTarget && !this.currentRenderPass) {\n      this.startRenderTargetRenderPass(\n        this.currentRenderTarget,\n        null,\n        false,\n        false,\n      );\n    } else if (!this.currentRenderPass) {\n      this.startMainRenderPass();\n    }\n\n    return this.currentRenderPass!;\n  }\n\n  private async initGlslang() {\n    this.glslang = await glslang();\n    this.adapter = (await navigator?.gpu?.requestAdapter()) as GPUAdapter;\n    this.device = (await this.adapter.requestDevice()) as GPUDevice;\n  }\n\n  private initContextAndSwapChain() {\n    this.context = (this.canvas.getContext(\n      isSafari ? 'gpu' : 'gpupresent',\n    ) as unknown) as GPUCanvasContext;\n    this.swapChain = this.context.configureSwapChain({\n      device: this.device,\n      format: this.options.swapChainFormat!,\n      usage:\n        WebGPUConstants.TextureUsage.OutputAttachment |\n        WebGPUConstants.TextureUsage.CopySrc,\n    });\n  }\n\n  private initMainAttachments() {\n    this.mainTextureExtends = {\n      width: this.canvas.width,\n      height: this.canvas.height,\n      depth: 1,\n    };\n\n    if (this.options.antialiasing) {\n      const mainTextureDescriptor = {\n        size: this.mainTextureExtends,\n        // TODO: arrayLayerCount is deprecated: use size.depth\n        // arrayLayerCount: 1,\n        mipLevelCount: 1,\n        sampleCount: this.mainPassSampleCount,\n        dimension: WebGPUConstants.TextureDimension.E2d,\n        format: WebGPUConstants.TextureFormat.BGRA8Unorm,\n        usage: WebGPUConstants.TextureUsage.OutputAttachment,\n      };\n\n      if (this.mainTexture) {\n        this.mainTexture.destroy();\n      }\n      this.mainTexture = this.device.createTexture(mainTextureDescriptor);\n      this.mainColorAttachments = [\n        {\n          attachment: isSafari\n            ? // @ts-ignore\n              this.mainTexture.createDefaultView()\n            : this.mainTexture.createView(),\n          loadValue: [0, 0, 0, 1],\n          storeOp: WebGPUConstants.StoreOp.Store,\n        },\n      ];\n    } else {\n      this.mainColorAttachments = [\n        {\n          attachment: isSafari\n            ? // @ts-ignore\n              this.swapChain.getCurrentTexture().createDefaultView()\n            : this.swapChain.getCurrentTexture().createView(),\n          loadValue: [0, 0, 0, 1],\n          storeOp: WebGPUConstants.StoreOp.Store,\n        },\n      ];\n    }\n\n    const depthTextureDescriptor = {\n      size: this.mainTextureExtends,\n      // arrayLayerCount: 1,\n      mipLevelCount: 1,\n      sampleCount: this.mainPassSampleCount,\n      dimension: WebGPUConstants.TextureDimension.E2d,\n      format: isSafari\n        ? 'depth32float-stencil8'\n        : WebGPUConstants.TextureFormat.Depth24PlusStencil8,\n      usage: WebGPUConstants.TextureUsage.OutputAttachment,\n    };\n\n    if (this.depthTexture) {\n      this.depthTexture.destroy();\n    }\n\n    this.depthTexture = this.device.createTexture(\n      // @ts-ignore\n      depthTextureDescriptor,\n    );\n    this.mainDepthAttachment = {\n      attachment: isSafari\n        ? // @ts-ignore\n          this.depthTexture.createDefaultView()\n        : this.depthTexture.createView(),\n      depthLoadValue: this.clearDepthValue,\n      depthStoreOp: WebGPUConstants.StoreOp.Store,\n      stencilLoadValue: this.clearStencilValue,\n      stencilStoreOp: WebGPUConstants.StoreOp.Store,\n    };\n  }\n\n  private startComputePass() {\n    if (this.currentComputePass) {\n      this.endComputePass();\n    }\n\n    this.currentComputePass = this.computeEncoder.beginComputePass();\n  }\n\n  private startMainRenderPass() {\n    if (this.currentRenderPass && !this.currentRenderTarget) {\n      this.endMainRenderPass();\n    }\n\n    // Resolve in case of MSAA\n    if (this.options.antialiasing) {\n      this.mainColorAttachments[0].resolveTarget = isSafari\n        ? // @ts-ignore\n          this.swapChain.getCurrentTexture().createDefaultView()\n        : this.swapChain.getCurrentTexture().createView();\n    } else {\n      this.mainColorAttachments[0].attachment = isSafari\n        ? // @ts-ignore\n          this.swapChain.getCurrentTexture().createDefaultView()\n        : this.swapChain.getCurrentTexture().createView();\n    }\n\n    this.currentRenderPass = this.renderEncoder.beginRenderPass({\n      colorAttachments: this.mainColorAttachments,\n      depthStencilAttachment: this.mainDepthAttachment, // TODO: use framebuffer's depth & stencil\n    });\n\n    this.mainRenderPass = this.currentRenderPass;\n\n    if (this.cachedViewport) {\n      this.viewport(this.cachedViewport);\n    }\n  }\n\n  private startRenderTargetRenderPass(\n    renderTarget: WebGPUFramebuffer,\n    clearColor: [number, number, number, number] | null,\n    clearDepth: boolean,\n    clearStencil: boolean = false,\n  ) {\n    const gpuTexture = renderTarget.get().color?.texture;\n    let colorTextureView: GPUTextureView;\n    if (gpuTexture) {\n      colorTextureView = gpuTexture.createView(\n        this.currentRenderTargetViewDescriptor,\n      );\n    }\n\n    const depthStencilTexture = renderTarget.get().depth?.texture;\n    let depthStencilTextureView;\n    if (depthStencilTexture) {\n      depthStencilTextureView = depthStencilTexture.createView();\n    }\n\n    const renderPass = this.renderTargetEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: colorTextureView!,\n          loadValue:\n            clearColor !== null ? clearColor : WebGPUConstants.LoadOp.Load,\n          storeOp: WebGPUConstants.StoreOp.Store,\n        },\n      ],\n      depthStencilAttachment:\n        depthStencilTexture && depthStencilTextureView\n          ? {\n              attachment: depthStencilTextureView,\n              depthLoadValue: clearDepth\n                ? this.clearDepthValue\n                : WebGPUConstants.LoadOp.Load,\n              depthStoreOp: WebGPUConstants.StoreOp.Store,\n              stencilLoadValue: clearStencil\n                ? this.clearStencilValue\n                : WebGPUConstants.LoadOp.Load,\n              stencilStoreOp: WebGPUConstants.StoreOp.Store,\n            }\n          : undefined,\n    });\n\n    this.currentRenderPass = renderPass;\n\n    if (this.cachedViewport) {\n      this.viewport(this.cachedViewport);\n    }\n\n    // TODO WEBGPU set the scissor rect and the stencil reference value\n  }\n\n  private endMainRenderPass() {\n    if (\n      this.currentRenderPass === this.mainRenderPass &&\n      this.currentRenderPass !== null\n    ) {\n      this.currentRenderPass.endPass();\n      this.resetCachedViewport();\n      this.currentRenderPass = null;\n      this.mainRenderPass = null;\n    }\n  }\n\n  private endComputePass() {\n    if (this.currentComputePass) {\n      this.currentComputePass.endPass();\n      this.currentComputePass = null;\n    }\n  }\n\n  private endRenderTargetRenderPass() {\n    if (this.currentRenderPass) {\n      this.currentRenderPass.endPass();\n      this.resetCachedViewport();\n    }\n  }\n\n  private resetCachedViewport() {\n    this.cachedViewport = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  private unbindFramebuffer(framebuffer: WebGPUFramebuffer) {\n    // unbind\n    if (\n      this.currentRenderPass &&\n      this.currentRenderPass !== this.mainRenderPass\n    ) {\n      this.endRenderTargetRenderPass();\n    }\n\n    this.transientViewport.x = Infinity;\n    this.currentRenderTarget = null;\n\n    // if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\n    //   this._generateMipmaps(texture);\n    // }\n\n    this.currentRenderPass = this.mainRenderPass;\n  }\n}\n"],"file":"index.js"}