{"version":3,"sources":["../../src/shape/Ray.ts"],"names":["tmpVecA","vec3","create","tmpVecB","tmpVecC","tmpVecD","tmpVecE","Ray","origin","direction","fromValues","aabb","intersection","intersectAABBWithIntersection","intersectsAABBWithoutIntersection","sphere","m","sub","center","normalize","copy","b","dot","c","radius","discr","t","Math","abs","sqrt","scaleAndAdd","plane","distance","normal","intersects","diff","cross","prod","absDiff","absDir","rayDir","set","mul","halfExtents","tMin","getMin","tMax","getMax","dir","Number","MAX_VALUE","realMin","min","realMax","max","minMax","maxMin"],"mappings":"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","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { AABB } from './AABB';\nimport { BoundingSphere } from './BoundingSphere';\nimport { Plane } from './Plane';\n\nconst tmpVecA = vec3.create();\nconst tmpVecB = vec3.create();\nconst tmpVecC = vec3.create();\nconst tmpVecD = vec3.create();\nconst tmpVecE = vec3.create();\n\n/**\n * 包含求交方法：\n * * intersectsShape(Shape, intersection) 返回交点和求交结果\n * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Ray.js\n */\nexport class Ray {\n  public origin: vec3;\n  public direction: vec3;\n\n  constructor(origin: vec3, direction: vec3) {\n    this.origin = origin || vec3.create();\n    this.direction = direction || vec3.fromValues(0, 0, -1);\n  }\n\n  public intersectsAABB(aabb: AABB, intersection?: vec3) {\n    return intersection\n      ? this.intersectAABBWithIntersection(aabb, intersection)\n      : this.intersectsAABBWithoutIntersection(aabb);\n  }\n\n  public intersectsSphere(sphere: BoundingSphere, intersection?: vec3) {\n    const m = vec3.sub(tmpVecA, this.origin, sphere.center);\n    vec3.normalize(tmpVecB, vec3.copy(tmpVecB, this.direction));\n    const b = vec3.dot(m, tmpVecB);\n    const c = vec3.dot(m, m) - sphere.radius * sphere.radius;\n\n    // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)\n    if (c > 0 && b > 0) {\n      return null;\n    }\n\n    const discr = b * b - c;\n    // a negative discriminant corresponds to ray missing sphere\n    if (discr < 0) {\n      return false;\n    }\n\n    // ray intersects sphere, compute smallest t value of intersection\n    const t = Math.abs(-b - Math.sqrt(discr));\n\n    // if t is negative, ray started inside sphere so clamp t to zero\n    if (intersection) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, t);\n    }\n\n    return true;\n  }\n\n  public intersectsPlane(plane: Plane, intersection?: vec3) {\n    const t =\n      (plane.distance - vec3.dot(plane.normal, this.origin)) /\n      vec3.dot(plane.normal, this.direction);\n    const intersects = t >= 0;\n    if (intersects && intersection) {\n      vec3.scaleAndAdd(intersection, this.origin, this.direction, t);\n    }\n\n    return intersects;\n  }\n\n  /**\n   * faster than implements like Three.js\n   * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n   */\n  private intersectsAABBWithoutIntersection(aabb: AABB) {\n    const diff = tmpVecA;\n    const cross = tmpVecB;\n    const prod = tmpVecC;\n    const absDiff = tmpVecD;\n    const absDir = tmpVecE;\n    const rayDir = this.direction;\n\n    vec3.sub(diff, this.origin, aabb.center);\n    vec3.set(absDiff, Math.abs(diff[0]), Math.abs(diff[1]), Math.abs(diff[2]));\n    vec3.mul(prod, diff, rayDir);\n\n    if (\n      (absDiff[0] > aabb.halfExtents[0] && prod[0] >= 0) ||\n      (absDiff[1] > aabb.halfExtents[1] && prod[1] >= 0) ||\n      (absDiff[2] > aabb.halfExtents[2] && prod[2] >= 0)\n    ) {\n      return false;\n    }\n\n    vec3.set(\n      absDir,\n      Math.abs(rayDir[0]),\n      Math.abs(rayDir[1]),\n      Math.abs(rayDir[2]),\n    );\n    vec3.cross(cross, rayDir, diff);\n    vec3.set(cross, Math.abs(cross[0]), Math.abs(cross[1]), Math.abs(cross[2]));\n\n    return !(\n      cross[0] >\n        aabb.halfExtents[1] * absDir[2] + aabb.halfExtents[2] * absDir[1] ||\n      cross[1] >\n        aabb.halfExtents[0] * absDir[2] + aabb.halfExtents[2] * absDir[0] ||\n      cross[2] >\n        aabb.halfExtents[0] * absDir[1] + aabb.halfExtents[1] * absDir[0]\n    );\n  }\n\n  private intersectAABBWithIntersection(aabb: AABB, intersection: vec3) {\n    const tMin = vec3.copy(vec3.create(), aabb.getMin());\n    vec3.sub(tMin, tMin, this.origin);\n    const tMax = vec3.copy(vec3.create(), aabb.getMax());\n    vec3.sub(tMax, tMax, this.origin);\n    const dir = this.direction;\n\n    // Ensure that we are not dividing it by zero\n    if (dir[0] === 0) {\n      tMin[0] = tMin[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[0] = tMax[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[0] /= dir[0];\n      tMax[0] /= dir[0];\n    }\n    if (dir[1] === 0) {\n      tMin[1] = tMin[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[1] = tMax[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[1] /= dir[1];\n      tMax[1] /= dir[1];\n    }\n    if (dir[2] === 0) {\n      tMin[2] = tMin[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[2] = tMax[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[2] /= dir[2];\n      tMax[2] /= dir[2];\n    }\n\n    const realMin = vec3.set(\n      tmpVecC,\n      Math.min(tMin[0], tMax[0]),\n      Math.min(tMin[1], tMax[1]),\n      Math.min(tMin[2], tMax[2]),\n    );\n    const realMax = vec3.set(\n      tmpVecD,\n      Math.max(tMin[0], tMax[0]),\n      Math.max(tMin[1], tMax[1]),\n      Math.max(tMin[2], tMax[2]),\n    );\n\n    const minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n    const maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n\n    const intersects = minMax >= maxMin && maxMin >= 0;\n\n    if (intersects) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, maxMin);\n    }\n\n    return intersects;\n  }\n}\n"],"file":"Ray.js"}