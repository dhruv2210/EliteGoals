{"version":3,"sources":["../../src/shape/Plane.ts"],"names":["Plane","distance","normal","pnVertexFlag","vec3","fromValues","updatePNVertexFlag","Number","point","dot","invLen","len","scale","start","end","d0","distanceToPoint","d1","t","intersects","lerp"],"mappings":";;;;;;;;;;;;;AAAA;;IAEaA,K;AAIX;AACF;AACA;AAGE,iBAAYC,QAAZ,EAA+BC,MAA/B,EAA8C;AAAA;AAAA,SARvCD,QAQuC;AAAA,SAPvCC,MAOuC;AAAA,SAFvCC,YAEuC;AAC5C,SAAKF,QAAL,GAAgBA,QAAQ,IAAI,CAA5B;AACA,SAAKC,MAAL,GAAcA,MAAM,IAAIE,eAAKC,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAxB;AACA,SAAKC,kBAAL;AACD;;;;yCAE2B;AAC1B,WAAKH,YAAL,GACE,CAACI,MAAM,CAAC,KAAKL,MAAL,CAAY,CAAZ,KAAkB,CAAnB,CAAN,IAA+B,CAAhC,KACCK,MAAM,CAAC,KAAKL,MAAL,CAAY,CAAZ,KAAkB,CAAnB,CAAN,IAA+B,CADhC,IAEAK,MAAM,CAAC,KAAKL,MAAL,CAAY,CAAZ,KAAkB,CAAnB,CAHR;AAID;;;oCAEsBM,K,EAAa;AAClC,aAAOJ,eAAKK,GAAL,CAASD,KAAT,EAAgB,KAAKN,MAArB,IAA+B,KAAKD,QAA3C;AACD;;;gCAEkB;AACjB,UAAMS,MAAM,GAAG,IAAIN,eAAKO,GAAL,CAAS,KAAKT,MAAd,CAAnB;;AACAE,qBAAKQ,KAAL,CAAW,KAAKV,MAAhB,EAAwB,KAAKA,MAA7B,EAAqCQ,MAArC;;AACA,WAAKT,QAAL,IAAiBS,MAAjB;AACD;;;mCAEqBG,K,EAAaC,G,EAAWN,K,EAAc;AAC1D,UAAMO,EAAE,GAAG,KAAKC,eAAL,CAAqBH,KAArB,CAAX;AACA,UAAMI,EAAE,GAAG,KAAKD,eAAL,CAAqBF,GAArB,CAAX;AACA,UAAMI,CAAC,GAAGH,EAAE,IAAIA,EAAE,GAAGE,EAAT,CAAZ;AACA,UAAME,UAAU,GAAGD,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAlC;;AACA,UAAIC,UAAU,IAAIX,KAAlB,EAAyB;AACvBJ,uBAAKgB,IAAL,CAAUZ,KAAV,EAAiBK,KAAjB,EAAwBC,GAAxB,EAA6BI,CAA7B;AACD;;AACD,aAAOC,UAAP;AACD","sourcesContent":["import { vec3 } from 'gl-matrix';\n\nexport class Plane {\n  public distance: number;\n  public normal: vec3;\n\n  /**\n   * lookup table for p-vertex & n-vertex when doing frustum culling\n   */\n  public pnVertexFlag: number;\n\n  constructor(distance?: number, normal?: vec3) {\n    this.distance = distance || 0;\n    this.normal = normal || vec3.fromValues(0, 1, 0);\n    this.updatePNVertexFlag();\n  }\n\n  public updatePNVertexFlag() {\n    this.pnVertexFlag =\n      (Number(this.normal[0] >= 0) << 8) +\n      (Number(this.normal[1] >= 0) << 4) +\n      Number(this.normal[2] >= 0);\n  }\n\n  public distanceToPoint(point: vec3) {\n    return vec3.dot(point, this.normal) - this.distance;\n  }\n\n  public normalize() {\n    const invLen = 1 / vec3.len(this.normal);\n    vec3.scale(this.normal, this.normal, invLen);\n    this.distance *= invLen;\n  }\n\n  public intersectsLine(start: vec3, end: vec3, point?: vec3) {\n    const d0 = this.distanceToPoint(start);\n    const d1 = this.distanceToPoint(end);\n    const t = d0 / (d0 - d1);\n    const intersects = t >= 0 && t <= 1;\n    if (intersects && point) {\n      vec3.lerp(point, start, end, t);\n    }\n    return intersects;\n  }\n}\n"],"file":"Plane.js"}