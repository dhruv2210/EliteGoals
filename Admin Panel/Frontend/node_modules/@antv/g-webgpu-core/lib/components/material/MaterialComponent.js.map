{"version":3,"sources":["../../../src/components/material/MaterialComponent.ts"],"names":["MaterialComponent","data","vertexShaderGLSL","fragmentShaderGLSL","defines","dirty","uniforms","cull","enable","face","gl","BACK","depth","blend","entity","type","Object","assign","name","keys","forEach","key","setUniform","existedUniform","find","u","push","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;IAMaA,iB;;;;;AAKX;AAsBA,6BAAYC,IAAZ,EAAqE;AAAA;;AAAA;AACnE,8BAAMA,IAAN;AADmE,UA1B9DC,gBA0B8D;AAAA,UAxB9DC,kBAwB8D;AAAA,UArB9DC,OAqB8D,GArBlB,EAqBkB;AAAA,UAnB9DC,KAmB8D,GAnBtD,IAmBsD;AAAA,UAjB9DC,QAiB8D,GAjBhC,EAiBgC;AAAA,UAf9DC,IAe8D,GAflB;AACjDC,MAAAA,MAAM,EAAE,IADyC;AAEjDC,MAAAA,IAAI,EAAEC,KAAGC;AAFwC,KAekB;AAAA,UAV9DC,KAU8D,GAVhB;AACnDJ,MAAAA,MAAM,EAAE;AAD2C,KAUgB;AAAA,UAN9DK,KAM8D;AAAA,UAJ9DC,MAI8D;AAAA,UAF9DC,IAE8D;AAGnEC,IAAAA,MAAM,CAACC,MAAP,8CAAoBhB,IAApB;AAHmE;AAIpE;;;;+BAEiBG,O,EAA2C;AAC3D,WAAKA,OAAL,mCAAoB,KAAKA,OAAzB,GAAqCA,OAArC;AACA,aAAO,IAAP;AACD;;;4BAEcG,I,EAA2C;AACxD,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAP;AACD;;;6BAEeK,K,EAA6C;AAC3D,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACD;;;6BAEeC,K,EAA6C;AAC3D,WAAKA,KAAL,GAAaA,KAAb;AACA,aAAO,IAAP;AACD;;;+BAGCK,I,EACAjB,I,EACA;AAAA;;AACA,UAAI,OAAOiB,IAAP,KAAgB,QAApB,EAA8B;AAC5BF,QAAAA,MAAM,CAACG,IAAP,CAAYD,IAAZ,EAAkBE,OAAlB,CAA0B,UAACC,GAAD;AAAA,iBAAS,MAAI,CAACC,UAAL,CAAgBD,GAAhB,EAAqBH,IAAI,CAACG,GAAD,CAAzB,CAAT;AAAA,SAA1B;AACA,eAAO,IAAP;AACD;;AAED,UAAME,cAAc,GAAG,KAAKjB,QAAL,CAAckB,IAAd,CAAmB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACP,IAAF,KAAWA,IAAlB;AAAA,OAAnB,CAAvB;;AACA,UAAI,CAACK,cAAL,EAAqB;AACnB,aAAKjB,QAAL,CAAcoB,IAAd,CAAmB;AACjBR,UAAAA,IAAI,EAAJA,IADiB;AAEjBb,UAAAA,KAAK,EAAE,IAFU;AAGjBJ,UAAAA,IAAI,EAAEA;AAHW,SAAnB;AAKD,OAND,MAMO;AACLsB,QAAAA,cAAc,CAAClB,KAAf,GAAuB,IAAvB;AACAkB,QAAAA,cAAc,CAACtB,IAAf,GAAsBA,IAAtB;AACD;;AAED,WAAKI,KAAL,GAAa,IAAb;AACA,aAAO,IAAP;AACD;;;EA5EoCsB,2B","sourcesContent":["import { Entity, gl } from '../..';\nimport { Component } from '../../ComponentManager';\nimport { NonFunctionProperties } from '../../ComponentManager';\nimport { IModelInitializationOptions } from '../renderer/IModel';\nimport { BufferData } from '../renderer/IRendererService';\nimport { IUniformBinding } from './interface';\n\nexport class MaterialComponent extends Component<MaterialComponent> {\n  public vertexShaderGLSL: string;\n\n  public fragmentShaderGLSL: string;\n\n  // control flow in shaders, eg. USE_UV, USE_MAP...\n  public defines: Record<string, boolean | number> = {};\n\n  public dirty = true;\n\n  public uniforms: IUniformBinding[] = [];\n\n  public cull: IModelInitializationOptions['cull'] = {\n    enable: true,\n    face: gl.BACK,\n  };\n\n  public depth: IModelInitializationOptions['depth'] = {\n    enable: true,\n  };\n\n  public blend: IModelInitializationOptions['blend'];\n\n  public entity: Entity;\n\n  public type: string;\n\n  constructor(data: Partial<NonFunctionProperties<MaterialComponent>>) {\n    super(data);\n\n    Object.assign(this, data);\n  }\n\n  public setDefines(defines: Record<string, boolean | number>) {\n    this.defines = { ...this.defines, ...defines };\n    return this;\n  }\n\n  public setCull(cull: IModelInitializationOptions['cull']) {\n    this.cull = cull;\n    return this;\n  }\n\n  public setDepth(depth: IModelInitializationOptions['depth']) {\n    this.depth = depth;\n    return this;\n  }\n\n  public setBlend(blend: IModelInitializationOptions['blend']) {\n    this.blend = blend;\n    return this;\n  }\n\n  public setUniform(\n    name: string | Record<string, BufferData>,\n    data?: BufferData,\n  ) {\n    if (typeof name !== 'string') {\n      Object.keys(name).forEach((key) => this.setUniform(key, name[key]));\n      return this;\n    }\n\n    const existedUniform = this.uniforms.find((u) => u.name === name);\n    if (!existedUniform) {\n      this.uniforms.push({\n        name,\n        dirty: true,\n        data: data!,\n      });\n    } else {\n      existedUniform.dirty = true;\n      existedUniform.data = data!;\n    }\n\n    this.dirty = true;\n    return this;\n  }\n}\n"],"file":"MaterialComponent.js"}