{"version":3,"sources":["../../../src/components/scenegraph/System.ts"],"names":["SceneGraphSystem","IDENTIFIER","HierarchyComponentManager","TransformComponentManager","MeshComponentManager","runTransformUpdateSystem","runHierarchyUpdateSystem","hierarchy","clear","transform","forEach","entity","isDirty","isLocalDirty","setMeshAABBDirty","mesh","getComponentByEntity","updateTransform","parentComponent","transformChild","transformParent","parentID","updateTransformWithParent","parent","isChildAlreadyInLocalSpace","contains","detach","create","children","indexOf","push","getCount","i","parentCandidateEntity","getEntity","j","childCandidateEntity","getComponent","moveItem","parentcomponent","matrixTransform","mat4","invert","worldTransform","self","applyTransform","removeKeepSorted","index","splice","aabbDirty"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Entity, ISystem } from '../..';\nimport { Component } from '../../ComponentManager';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { MeshComponent } from '../mesh/MeshComponent';\nimport { HierarchyComponent } from './HierarchyComponent';\nimport { TransformComponent } from './TransformComponent';\n\n@injectable()\nexport class SceneGraphSystem implements ISystem {\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  public async execute() {\n    this.runTransformUpdateSystem();\n    this.runHierarchyUpdateSystem();\n  }\n\n  public tearDown() {\n    this.hierarchy.clear();\n    this.transform.clear();\n  }\n\n  public getHierarchyComponentManager() {\n    return this.hierarchy;\n  }\n\n  public getTransformComponentManager() {\n    return this.transform;\n  }\n\n  public runTransformUpdateSystem() {\n    // 原版基于 JobSystem 实现\n    this.transform.forEach((entity, transform) => {\n      if (transform.isDirty() || transform.isLocalDirty()) {\n        this.setMeshAABBDirty(this.mesh.getComponentByEntity(entity));\n        transform.updateTransform();\n      }\n    });\n  }\n\n  public runHierarchyUpdateSystem() {\n    this.hierarchy.forEach((entity, parentComponent) => {\n      const transformChild = this.transform.getComponentByEntity(entity);\n      const transformParent = this.transform.getComponentByEntity(\n        parentComponent.parentID,\n      );\n      if (transformChild !== null && transformParent !== null) {\n        transformChild.updateTransformWithParent(transformParent);\n      }\n    });\n  }\n\n  public attach(\n    entity: Entity,\n    parent: Entity,\n    isChildAlreadyInLocalSpace?: boolean,\n  ) {\n    if (this.hierarchy.contains(entity)) {\n      this.detach(entity);\n    }\n\n    this.hierarchy.create(entity, {\n      parentID: parent,\n    });\n    const mesh = this.mesh.getComponentByEntity(parent);\n    // inform parent mesh to update its aabb\n    this.setMeshAABBDirty(mesh);\n    if (mesh && mesh.children.indexOf(entity) === -1) {\n      mesh.children.push(entity);\n    }\n\n    if (this.hierarchy.getCount() > 1) {\n      for (let i = this.hierarchy.getCount() - 1; i > 0; --i) {\n        const parentCandidateEntity = this.hierarchy.getEntity(i);\n        // const parentCandidateComponent = this.hierarchy.getComponent(i);\n        for (let j = 0; j < i; ++j) {\n          const childCandidateEntity = this.hierarchy.getComponent(j);\n\n          if (childCandidateEntity.parentID === parentCandidateEntity) {\n            this.hierarchy.moveItem(i, j);\n            ++i; // next outer iteration will check the same index again as parent candidate, however things were moved upwards, so it will be a different entity!\n            break;\n          }\n        }\n      }\n    }\n\n    // Re-query parent after potential MoveItem(), because it invalidates references:\n    const parentcomponent = this.hierarchy.getComponentByEntity(entity);\n\n    let transformParent = this.transform.getComponentByEntity(parent);\n    if (transformParent === null) {\n      transformParent = this.transform.create(parent);\n    }\n\n    let transformChild = this.transform.getComponentByEntity(entity);\n    if (transformChild === null) {\n      transformChild = this.transform.create(entity);\n      // after transforms.Create(), transform_parent pointer could have become invalidated!\n      transformParent = this.transform.getComponentByEntity(parent);\n    }\n\n    transformChild.parent = transformParent;\n\n    if (!isChildAlreadyInLocalSpace && transformParent) {\n      transformChild.matrixTransform(\n        mat4.invert(mat4.create(), transformParent.worldTransform),\n      );\n      transformChild.updateTransform();\n    }\n    if (transformParent) {\n      transformChild.updateTransformWithParent(transformParent);\n    }\n  }\n\n  public detach(entity: Entity) {\n    const self = this.hierarchy.getComponentByEntity(entity);\n    if (self !== null) {\n      const transform = this.transform.getComponentByEntity(entity);\n      if (transform !== null) {\n        transform.parent = null;\n        transform.applyTransform();\n      }\n\n      this.hierarchy.removeKeepSorted(entity);\n\n      // inform parent mesh to update its aabb\n      const mesh = this.mesh.getComponentByEntity(self.parentID);\n      if (mesh) {\n        const index = mesh.children.indexOf(entity);\n        mesh.children.splice(index, 1);\n      }\n      this.setMeshAABBDirty(mesh);\n    }\n  }\n\n  public detachChildren(parent: Entity) {\n    const mesh = this.mesh.getComponentByEntity(parent);\n    if (mesh) {\n      mesh.children = [];\n    }\n    for (let i = 0; i < this.hierarchy.getCount(); ) {\n      if (this.hierarchy.getComponent(i)?.parentID === parent) {\n        const entity = this.hierarchy.getEntity(i);\n        this.detach(entity);\n      } else {\n        ++i;\n      }\n    }\n  }\n\n  private setMeshAABBDirty(\n    mesh: (Component<MeshComponent> & MeshComponent) | null,\n  ) {\n    if (mesh) {\n      mesh.aabbDirty = true;\n    }\n  }\n}\n"],"file":"System.js"}