{"version":3,"sources":["../../../src/components/renderer/System.ts"],"names":["RendererSystem","IDENTIFIER","Systems","FrameGraphSystem","RenderPassFactory","ConfigService","ResourcePool","views","renderPassFactory","RenderPass","setupRenderPass","setup","executeRenderPass","execute","renderPass","frameGraphSystem","addPass","CopyPass","setupCopyPass","executeCopyPass","tearDownCopyPass","tearDown","copyPass","present","data","output","resourcePool","clean","position","view","pickingPass","PixelPickingPass","pick"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAIA;;AAEA;;AAIA;;;;IAGaA,c,WADZ,4B,UAEE,uBAAOC,uBAAWC,OAAlB,C,UACA,sBAAMD,uBAAWE,gBAAjB,C,UAGA,uBAAOF,uBAAWG,iBAAlB,C,UAGA,uBAAOH,uBAAWI,aAAlB,C,UAGA,uBAAOJ,uBAAWK,YAAlB,C;;;;;;;;;;;;8GAGoBC,K;;;;;;;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;wCAKI,KAAKC,iBAAL,CAAuCC,uBAAWR,UAAlD,C,EAFKS,e,yBAAPC,K,EACSC,iB,yBAATC,O;AAEIC,gBAAAA,U,GAAa,KAAKC,gBAAL,CAAsBC,OAAtB,CACjBP,uBAAWR,UADM,EAEjBS,eAFiB,EAGjBE,iBAHiB,C;yCAUf,KAAKJ,iBAAL,CAAqCS,mBAAShB,UAA9C,C,EAHKiB,a,0BAAPP,K,EACSQ,e,0BAATN,O,EACUO,gB,0BAAVC,Q;AAEIC,gBAAAA,Q,GAAW,KAAKP,gBAAL,CAAsBC,OAAtB,CACfC,mBAAShB,UADM,EAEfiB,aAFe,EAGfC,eAHe,EAIfC,gBAJe,C;AAOjB,qBAAKL,gBAAL,CAAsBQ,OAAtB,CAA8BD,QAAQ,CAACE,IAAT,CAAcC,MAA5C,E,CACA;;;;;;;;;;;;;;;;;;+BAGgB;AAChB,WAAKC,YAAL,CAAkBC,KAAlB;AACD;;;yBAEWC,Q,EAAoCC,I,EAAa;AAC3D,UAAMC,WAAW,GAAG,KAAKtB,iBAAL,CAClBuB,mCAAiB9B,UADC,CAApB;AAIA,aAAO6B,WAAW,CAACE,IAAZ,CAAiBJ,QAAjB,EAA2BC,IAA3B,CAAP;AACD","sourcesContent":["import { inject, injectable, named } from 'inversify';\nimport { IConfigService, ISystem } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { ResourcePool } from '../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../framegraph/System';\nimport { IView } from './IRendererService';\nimport { CopyPass, CopyPassData } from './passes/CopyPass';\nimport { IRenderPass } from './passes/IRenderPass';\nimport {\n  PixelPickingPass,\n  PixelPickingPassData,\n} from './passes/PixelPickingPass';\nimport { RenderPass, RenderPassData } from './passes/RenderPass';\n\n@injectable()\nexport class RendererSystem implements ISystem {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.FrameGraphSystem)\n  private readonly frameGraphSystem: FrameGraphSystem;\n\n  @inject(IDENTIFIER.RenderPassFactory)\n  private readonly renderPassFactory: <T>(name: string) => IRenderPass<T>;\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  public async execute(views: IView[]) {\n    // const pixelPickingPass = this.renderPassFactory<PixelPickingPassData>(\n    //   PixelPickingPass.IDENTIFIER,\n    // );\n    // const {\n    //   setup: setupPixelPickingPass,\n    //   execute: executePixelPickingPass,\n    //   tearDown: tearDownPickingPass,\n    // } = pixelPickingPass;\n    // this.frameGraphSystem.addPass<PixelPickingPassData>(\n    //   PixelPickingPass.IDENTIFIER,\n    //   setupPixelPickingPass,\n    //   executePixelPickingPass,\n    //   tearDownPickingPass,\n    // );\n\n    const {\n      setup: setupRenderPass,\n      execute: executeRenderPass,\n    } = this.renderPassFactory<RenderPassData>(RenderPass.IDENTIFIER);\n    const renderPass = this.frameGraphSystem.addPass<RenderPassData>(\n      RenderPass.IDENTIFIER,\n      setupRenderPass,\n      executeRenderPass,\n    );\n\n    const {\n      setup: setupCopyPass,\n      execute: executeCopyPass,\n      tearDown: tearDownCopyPass,\n    } = this.renderPassFactory<CopyPassData>(CopyPass.IDENTIFIER);\n    const copyPass = this.frameGraphSystem.addPass<CopyPassData>(\n      CopyPass.IDENTIFIER,\n      setupCopyPass,\n      executeCopyPass,\n      tearDownCopyPass,\n    );\n\n    this.frameGraphSystem.present(copyPass.data.output);\n    // this.frameGraphSystem.present(renderPass.data.output);\n  }\n\n  public tearDown() {\n    this.resourcePool.clean();\n  }\n\n  public pick(position: { x: number; y: number }, view: IView) {\n    const pickingPass = this.renderPassFactory<PixelPickingPassData>(\n      PixelPickingPass.IDENTIFIER,\n    ) as PixelPickingPass;\n\n    return pickingPass.pick(position, view);\n  }\n}\n"],"file":"System.js"}