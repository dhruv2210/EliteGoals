{"version":3,"sources":["../../../../src/components/renderer/passes/CopyPass.ts"],"names":["CopyPass","IDENTIFIER","RenderEngine","ResourcePool","model","setup","fg","passNode","pass","renderPass","getPass","RenderPass","output","createRenderTarget","width","height","data","input","read","write","execute","engine","createModel","createAttribute","createBuffer","vs","supportWebGPU","copyVertWebGPU","copyVert","fs","copyFragWebGPU","copyFrag","attributes","a_Position","buffer","type","gl","FLOAT","size","arrayStride","stepMode","shaderLocation","offset","format","uniforms","u_Texture","depth","enable","count","blend","resourceNode","getResourceNode","framebuffer","resourcePool","getOrCreateResource","resource","useFramebuffer","clear","color","stencil","draw","tearDown","undefined"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport copyFrag from '../../../services/shader-module/shaders/webgl.copy.frag.glsl';\nimport copyVert from '../../../services/shader-module/shaders/webgl.copy.vert.glsl';\nimport copyFragWebGPU from '../../../services/shader-module/shaders/webgpu.copy.frag.glsl';\nimport copyVertWebGPU from '../../../services/shader-module/shaders/webgpu.copy.vert.glsl';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { gl } from '../gl';\nimport { IModel } from '../IModel';\nimport { IRendererService } from '../IRendererService';\nimport { IRenderPass } from './IRenderPass';\nimport { RenderPass, RenderPassData } from './RenderPass';\n\nexport interface CopyPassData {\n  input: FrameGraphHandle;\n  output: FrameGraphHandle;\n}\n\n@injectable()\nexport class CopyPass implements IRenderPass<CopyPassData> {\n  public static IDENTIFIER = 'Copy Pass';\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  private model: IModel | undefined;\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<CopyPassData>,\n  ): void => {\n    const renderPass = fg.getPass<RenderPassData>(RenderPass.IDENTIFIER);\n    if (renderPass) {\n      const output = fg.createRenderTarget(passNode, 'render to screen', {\n        width: 1,\n        height: 1,\n      });\n\n      pass.data = {\n        input: passNode.read(renderPass.data.output),\n        output: passNode.write(fg, output),\n      };\n    }\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<CopyPassData>,\n  ): Promise<void> => {\n    const { createModel, createAttribute, createBuffer } = this.engine;\n\n    if (!this.model) {\n      const model = await createModel({\n        vs: this.engine.supportWebGPU ? copyVertWebGPU : copyVert,\n        fs: this.engine.supportWebGPU ? copyFragWebGPU : copyFrag,\n        attributes: {\n          // rendering a fullscreen triangle instead of quad\n          // @see https://www.saschawillems.de/blog/2016/08/13/vulkan-tutorial-on-rendering-a-fullscreen-quad-without-buffers/\n          a_Position: createAttribute({\n            buffer: createBuffer({\n              data: [-4, -4, 4, -4, 0, 4],\n              type: gl.FLOAT,\n            }),\n            size: 2,\n            arrayStride: 2 * 4,\n            stepMode: 'vertex',\n            attributes: [\n              {\n                shaderLocation: 0,\n                offset: 0,\n                format: 'float2',\n              },\n            ],\n          }),\n        },\n        uniforms: {\n          // @ts-ignore\n          u_Texture: null,\n        },\n        depth: {\n          enable: false,\n        },\n        count: 3,\n        blend: {\n          // copy pass 需要混合\n          // enable: this.getName() === 'copy',\n          enable: true,\n        },\n      });\n      this.model = model;\n    }\n\n    // 实例化资源\n    const resourceNode = fg.getResourceNode(pass.data.input);\n    const framebuffer = this.resourcePool.getOrCreateResource(\n      resourceNode.resource,\n    );\n\n    this.engine.useFramebuffer(null, () => {\n      this.engine.clear({\n        framebuffer: null,\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n      });\n      this.model!.draw({\n        uniforms: {\n          u_Texture: framebuffer,\n          // u_ViewportSize: [width, height],\n        },\n      });\n    });\n  };\n\n  public tearDown = () => {\n    this.model = undefined;\n  };\n}\n"],"file":"CopyPass.js"}