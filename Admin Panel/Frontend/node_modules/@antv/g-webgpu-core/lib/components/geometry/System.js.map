{"version":3,"sources":["../../../src/components/geometry/System.ts"],"names":["GeometrySystem","IDENTIFIER","GeometryComponentManager","RenderEngine","geometry","forEach","entity","component","dirty","attributes","attribute","data","buffer","engine","createBuffer","type","gl","FLOAT","subData","offset","indices","indicesBuffer","createElements","count","length","UNSIGNED_INT","usage","STATIC_DRAW","_","destroy","clear","vertexCount","create","maxInstancedCount"],"mappings":"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","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, ISystem } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { generateAABBFromVertices } from '../../utils/aabb';\nimport { gl } from '../renderer/gl';\nimport { IBuffer } from '../renderer/IBuffer';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { GeometryComponent } from './GeometryComponent';\n\n@injectable()\nexport class GeometrySystem implements ISystem {\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute() {\n    this.geometry.forEach((entity, component) => {\n      // build buffers for each geometry\n      if (component.dirty) {\n        component.attributes.forEach((attribute) => {\n          if (attribute.dirty && attribute.data) {\n            if (!attribute.buffer) {\n              attribute.buffer = this.engine.createBuffer({\n                data: attribute.data,\n                type: gl.FLOAT,\n              });\n            } else {\n              attribute.buffer?.subData({\n                data: attribute.data,\n                // TODO: support offset in subdata\n                offset: 0,\n              });\n            }\n            attribute.dirty = false;\n          }\n        });\n\n        // create index buffer if needed\n        if (component.indices) {\n          if (!component.indicesBuffer) {\n            component.indicesBuffer = this.engine.createElements({\n              data: component.indices,\n              count: component.indices.length,\n              type: gl.UNSIGNED_INT,\n              usage: gl.STATIC_DRAW,\n            });\n          } else {\n            component.indicesBuffer.subData({\n              data: component.indices,\n              offset: 0,\n            });\n          }\n        }\n        component.dirty = false;\n      }\n    });\n  }\n\n  public tearDown() {\n    this.geometry.forEach((_, geometry) => {\n      if (geometry.indicesBuffer) {\n        geometry.indicesBuffer.destroy();\n      }\n\n      geometry.attributes.forEach((attribute) => {\n        if (attribute.buffer) {\n          attribute.buffer.destroy();\n        }\n      });\n    });\n    this.geometry.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/BufferGeometry\n   */\n  public createBufferGeometry(\n    { vertexCount }: { vertexCount: number } = { vertexCount: 3 },\n  ) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      vertexCount,\n    });\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/InstancedBufferGeometry\n   */\n  public createInstancedBufferGeometry({\n    maxInstancedCount,\n    vertexCount,\n  }: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      maxInstancedCount,\n      vertexCount,\n    });\n  }\n}\n"],"file":"System.js"}