{"version":3,"sources":["../../src/utils/math.ts"],"names":["getAngle","angle","undefined","createVec3","x","y","z","vec3","fromValues","length","clone","getRotationScale","matrix","result","decodePickingColor","color","i1","i2","i3","index","encodePickingColor","featureIdx"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAEO,SAASA,QAAT,CAAkBC,KAAlB,EAA6C;AAClD,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,WAAO,CAAP;AACD,GAFD,MAEO,IAAID,KAAK,GAAG,GAAR,IAAeA,KAAK,GAAG,CAAC,GAA5B,EAAiC;AACtC,WAAOA,KAAK,GAAG,GAAf;AACD;;AACD,SAAOA,KAAP;AACD;;AAEM,SAASE,UAAT,CAAoBC,CAApB,EAA6CC,CAA7C,EAAyDC,CAAzD,EAAqE;AAC1E,MAAI,wBAASF,CAAT,CAAJ,EAAiB;AACf,WAAOG,eAAKC,UAAL,CAAgBJ,CAAhB,EAA6BC,CAA7B,EAA0CC,CAA1C,CAAP;AACD;;AAED,MAAKF,CAAD,CAAYK,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAOF,eAAKG,KAAL,CAAWN,CAAX,CAAP;AACD,GAPyE,CAS1E;;;AACA,SAAOG,eAAKC,UAAL,CAAgBJ,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,EAA4BA,CAAC,CAAC,CAAD,CAA7B,CAAP;AACD;;AAEM,SAASO,gBAAT,CAA0BC,MAA1B,EAAwCC,MAAxC,EAAsD;AAC3DA,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,CAAD,CAAlB;AACAC,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYD,MAAM,CAAC,EAAD,CAAlB;AACA,SAAOC,MAAP;AACD;;AAEM,SAASC,kBAAT,CAA4BC,KAA5B,EAAuD;AAAA,4CACvCA,KADuC;AAAA,MACrDC,EADqD;AAAA,MACjDC,EADiD;AAAA,MAC7CC,EAD6C,cAE5D;;;AACA,MAAMC,KAAK,GAAGH,EAAE,GAAGC,EAAE,GAAG,GAAV,GAAgBC,EAAE,GAAG,KAArB,GAA6B,CAA3C;AACA,SAAOC,KAAP;AACD;;AAEM,SAASC,kBAAT,CACLC,UADK,EAEqB;AAC1B,SAAO,CACJA,UAAU,GAAG,CAAd,GAAmB,GADd,EAEHA,UAAU,GAAG,CAAd,IAAoB,CAArB,GAA0B,GAFrB,EAGFA,UAAU,GAAG,CAAd,IAAoB,CAArB,IAA2B,CAA5B,GAAiC,GAH5B,CAAP;AAKD","sourcesContent":["import { mat3, mat4, vec3, vec4 } from 'gl-matrix';\nimport { isNumber } from './is-number';\n\nexport function getAngle(angle: number | undefined) {\n  if (angle === undefined) {\n    return 0;\n  } else if (angle > 360 || angle < -360) {\n    return angle % 360;\n  }\n  return angle;\n}\n\nexport function createVec3(x: number | vec3 | vec4, y?: number, z?: number) {\n  if (isNumber(x)) {\n    return vec3.fromValues(x as number, y as number, z as number);\n  }\n\n  if ((x as vec3).length === 3) {\n    return vec3.clone(x as vec3);\n  }\n\n  // @ts-ignore\n  return vec3.fromValues(x[0], x[1], x[2]);\n}\n\nexport function getRotationScale(matrix: mat4, result: mat3) {\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[4];\n  result[4] = matrix[5];\n  result[5] = matrix[6];\n  result[6] = matrix[8];\n  result[7] = matrix[9];\n  result[8] = matrix[10];\n  return result;\n}\n\nexport function decodePickingColor(color: Uint8Array): number {\n  const [i1, i2, i3] = color;\n  // 1 was added to seperate from no selection\n  const index = i1 + i2 * 256 + i3 * 65536 - 1;\n  return index;\n}\n\nexport function encodePickingColor(\n  featureIdx: number,\n): [number, number, number] {\n  return [\n    (featureIdx + 1) & 255,\n    ((featureIdx + 1) >> 8) & 255,\n    (((featureIdx + 1) >> 8) >> 8) & 255,\n  ];\n}\n"],"file":"math.js"}