{"version":3,"sources":["../../../src/services/interactor/IteractorService.ts"],"names":["IInteractorEvent","InteractorService","canvas","event","args"],"mappings":";;;;;;;;;;;;;AAAA;;;;IAUYA,gB;;;WAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,gCAAAA,gB;;IAWCC,iB,WADZ,4B;;;;;;;2BAEeC,M,EAAiC,CAAE;;;uBACvCC,K,EAAyBC,I,EAAsB,CAAE;;;8BAC1C,CAAE;;;iCACC,CAAE;;;8BACL,CAAE","sourcesContent":["import { injectable } from 'inversify';\n\nexport interface IInteractorService {\n  listen(canvas: HTMLCanvasElement): void;\n  disconnect(): void;\n  connect(): void;\n  destroy(): void;\n  on(event: IInteractorEvent, args?: unknown): void;\n}\n\nexport enum IInteractorEvent {\n  PANSTART = 'PANSTART',\n  PANEND = 'PANEND',\n  PANMOVE = 'PANMOVE',\n  PINCH = 'PINCH',\n  KEYDOWN = 'KEYDOWN',\n  KEYUP = 'KEYUP',\n  HOVER = 'HOVER',\n}\n\n@injectable()\nexport class InteractorService implements IInteractorService {\n  public listen(canvas: HTMLCanvasElement): void {}\n  public on(event: IInteractorEvent, args?: unknown): void {}\n  public connect() {}\n  public disconnect() {}\n  public destroy() {}\n}\n"],"file":"IteractorService.js"}