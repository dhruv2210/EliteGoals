{"version":3,"sources":["../../../src/services/shader-module/ShaderModuleService.ts"],"names":["injectable","extractUniforms","uniq","precisionRegExp","globalDefaultprecision","includeRegExp","ShaderModuleService","moduleCache","rawContentCache","destroy","registerModule","vs","pickingVert","fs","pickingFrag","sdf2dFrag","moduleName","moduleParams","declaredUniforms","uniforms","extractedVS","content","vsUniforms","extractedFS","fsUniforms","rawVS","rawFS","processModule","vsIncludeList","includeList","fsIncludeList","compiledFs","concat","reduce","prev","cur","test","trim","rawContent","type","compiled","replace","_","strMatch","includeOpt","split","includeName","indexOf","txt","push"],"mappings":"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","sourcesContent":["import { injectable } from 'inversify';\nimport { extractUniforms } from '../../utils/shader-module';\nimport { uniq } from '../../utils/uniq';\nimport pickingFrag from './shaders/webgl.picking.frag.glsl';\nimport pickingVert from './shaders/webgl.picking.vert.glsl';\nimport sdf2dFrag from './shaders/webgl.sdf2d.frag.glsl';\n\nconst precisionRegExp = /precision\\s+(high|low|medium)p\\s+float/;\nconst globalDefaultprecision =\n  '#ifdef GL_FRAGMENT_PRECISION_HIGH\\n precision highp float;\\n #else\\n precision mediump float;\\n#endif\\n';\nconst includeRegExp = /#pragma include ([\"^+\"]?[\"\\ \"[a-zA-Z_0-9](.*)\"]*?)/g;\n\nimport { IUniform } from '../../components/renderer/IUniform';\n\n/**\n * 提供 ShaderModule 管理服务\n */\n\nexport interface IModuleParams {\n  vs?: string;\n  fs?: string;\n  uniforms?: {\n    [key: string]: IUniform;\n  };\n}\n\nexport interface IShaderModuleService {\n  registerModule(moduleName: string, moduleParams: IModuleParams): void;\n  getModule(moduleName: string): IModuleParams;\n\n  /**\n   * 注册内置 shader module\n   */\n  registerBuiltinModules(): void;\n  destroy(): void;\n}\n\n@injectable()\nexport default class ShaderModuleService implements IShaderModuleService {\n  private moduleCache: { [key: string]: IModuleParams } = {};\n  private rawContentCache: { [key: string]: IModuleParams } = {};\n\n  public registerBuiltinModules() {\n    this.destroy();\n    this.registerModule('picking', { vs: pickingVert, fs: pickingFrag });\n    this.registerModule('sdf2d', { vs: '', fs: sdf2dFrag });\n  }\n\n  public registerModule(moduleName: string, moduleParams: IModuleParams) {\n    // prevent registering the same module multiple times\n    if (this.rawContentCache[moduleName]) {\n      return;\n    }\n\n    const { vs = '', fs = '', uniforms: declaredUniforms } = moduleParams;\n    const { content: extractedVS, uniforms: vsUniforms } = extractUniforms(vs);\n    const { content: extractedFS, uniforms: fsUniforms } = extractUniforms(fs);\n\n    this.rawContentCache[moduleName] = {\n      fs: extractedFS,\n      uniforms: {\n        ...vsUniforms,\n        ...fsUniforms,\n        ...declaredUniforms,\n      },\n      vs: extractedVS,\n    };\n  }\n  public destroy() {\n    this.moduleCache = {};\n    this.rawContentCache = {};\n  }\n  public getModule(moduleName: string): IModuleParams {\n    if (this.moduleCache[moduleName]) {\n      return this.moduleCache[moduleName];\n    }\n\n    const rawVS = this.rawContentCache[moduleName].vs || '';\n    const rawFS = this.rawContentCache[moduleName].fs || '';\n\n    const { content: vs, includeList: vsIncludeList } = this.processModule(\n      rawVS,\n      [],\n      'vs',\n    );\n    const { content: fs, includeList: fsIncludeList } = this.processModule(\n      rawFS,\n      [],\n      'fs',\n    );\n    let compiledFs = fs;\n    // TODO: extract uniforms and their default values from GLSL\n    const uniforms: {\n      [key: string]: any;\n    } = uniq(vsIncludeList.concat(fsIncludeList).concat(moduleName)).reduce(\n      (prev, cur: string) => {\n        return {\n          ...prev,\n          ...this.rawContentCache[cur].uniforms,\n        };\n      },\n      {},\n    );\n\n    /**\n     * set default precision for fragment shader\n     * https://stackoverflow.com/questions/28540290/why-it-is-necessary-to-set-precision-for-the-fragment-shader\n     */\n    if (!precisionRegExp.test(fs)) {\n      compiledFs = globalDefaultprecision + fs;\n    }\n\n    this.moduleCache[moduleName] = {\n      fs: compiledFs.trim(),\n      uniforms,\n      vs: vs.trim(),\n    };\n    return this.moduleCache[moduleName];\n  }\n\n  private processModule(\n    rawContent: string,\n    includeList: string[],\n    type: 'vs' | 'fs',\n  ): {\n    content: string;\n    includeList: string[];\n  } {\n    const compiled = rawContent.replace(includeRegExp, (_, strMatch) => {\n      const includeOpt = strMatch.split(' ');\n      const includeName = includeOpt[0].replace(/\"/g, '');\n\n      if (includeList.indexOf(includeName) > -1) {\n        return '';\n      }\n\n      const txt = this.rawContentCache[includeName][type];\n      includeList.push(includeName);\n\n      const { content } = this.processModule(txt || '', includeList, type);\n      return content;\n    });\n\n    return {\n      content: compiled,\n      includeList,\n    };\n  }\n}\n"],"file":"ShaderModuleService.js"}