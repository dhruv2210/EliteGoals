{"version":3,"sources":["../../../src/services/interactor/IteractorService.ts"],"names":["injectable","IInteractorEvent","InteractorService","canvas","event","args"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,WAA3B;AAUA,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAWZ,WAAaC,iBAAb,WADCF,UAAU,EACX;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2BACgBG,MADhB,EACiD,CAAE;AADnD;AAAA;AAAA,uBAEYC,KAFZ,EAEqCC,IAFrC,EAE2D,CAAE;AAF7D;AAAA;AAAA,8BAGmB,CAAE;AAHrB;AAAA;AAAA,iCAIsB,CAAE;AAJxB;AAAA;AAAA,8BAKmB,CAAE;AALrB;;AAAA;AAAA","sourcesContent":["import { injectable } from 'inversify';\n\nexport interface IInteractorService {\n  listen(canvas: HTMLCanvasElement): void;\n  disconnect(): void;\n  connect(): void;\n  destroy(): void;\n  on(event: IInteractorEvent, args?: unknown): void;\n}\n\nexport enum IInteractorEvent {\n  PANSTART = 'PANSTART',\n  PANEND = 'PANEND',\n  PANMOVE = 'PANMOVE',\n  PINCH = 'PINCH',\n  KEYDOWN = 'KEYDOWN',\n  KEYUP = 'KEYUP',\n  HOVER = 'HOVER',\n}\n\n@injectable()\nexport class InteractorService implements IInteractorService {\n  public listen(canvas: HTMLCanvasElement): void {}\n  public on(event: IInteractorEvent, args?: unknown): void {}\n  public connect() {}\n  public disconnect() {}\n  public destroy() {}\n}\n"],"file":"IteractorService.js"}