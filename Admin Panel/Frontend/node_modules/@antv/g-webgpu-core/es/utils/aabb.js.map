{"version":3,"sources":["../../src/utils/aabb.ts"],"names":["vec3","AABB","generateAABBFromVertices","positions","aabb","min","fromValues","max","i","length","x","y","z","setMinMax"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,SAASC,IAAT,QAAqB,eAArB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,SAAlC,EAA6D;AAClE,MAAMC,IAAI,GAAG,IAAIH,IAAJ,EAAb;AACA,MAAMI,GAAG,GAAGL,IAAI,CAACM,UAAL,CAAgBH,SAAS,CAAC,CAAD,CAAzB,EAA8BA,SAAS,CAAC,CAAD,CAAvC,EAA4CA,SAAS,CAAC,CAAD,CAArD,CAAZ;AACA,MAAMI,GAAG,GAAGP,IAAI,CAACM,UAAL,CAAgBH,SAAS,CAAC,CAAD,CAAzB,EAA8BA,SAAS,CAAC,CAAD,CAAvC,EAA4CA,SAAS,CAAC,CAAD,CAArD,CAAZ;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,SAAS,CAACM,MAA9B,GAAwC;AACtC,QAAMC,CAAC,GAAGP,SAAS,CAACK,CAAC,EAAF,CAAnB;AACA,QAAMG,CAAC,GAAGR,SAAS,CAACK,CAAC,EAAF,CAAnB;AACA,QAAMI,CAAC,GAAGT,SAAS,CAACK,CAAC,EAAF,CAAnB;;AACA,QAAIE,CAAC,GAAGL,GAAG,CAAC,CAAD,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASK,CAAT;AACD;;AACD,QAAIC,CAAC,GAAGN,GAAG,CAAC,CAAD,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASM,CAAT;AACD;;AACD,QAAIC,CAAC,GAAGP,GAAG,CAAC,CAAD,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASO,CAAT;AACD;;AACD,QAAIF,CAAC,GAAGH,GAAG,CAAC,CAAD,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASG,CAAT;AACD;;AACD,QAAIC,CAAC,GAAGJ,GAAG,CAAC,CAAD,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASI,CAAT;AACD;;AACD,QAAIC,CAAC,GAAGL,GAAG,CAAC,CAAD,CAAX,EAAgB;AACdA,MAAAA,GAAG,CAAC,CAAD,CAAH,GAASK,CAAT;AACD;AACF;;AAEDR,EAAAA,IAAI,CAACS,SAAL,CAAeR,GAAf,EAAoBE,GAApB;AACA,SAAOH,IAAP;AACD","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { AABB } from '../shape/AABB';\n\n/**\n * generate AABB with positions\n * @param positions [x1,y1,z1, x2,y2,z2]\n */\nexport function generateAABBFromVertices(positions: number[]): AABB {\n  const aabb = new AABB();\n  const min = vec3.fromValues(positions[0], positions[1], positions[2]);\n  const max = vec3.fromValues(positions[0], positions[1], positions[2]);\n\n  for (let i = 3; i < positions.length; ) {\n    const x = positions[i++];\n    const y = positions[i++];\n    const z = positions[i++];\n    if (x < min[0]) {\n      min[0] = x;\n    }\n    if (y < min[1]) {\n      min[1] = y;\n    }\n    if (z < min[2]) {\n      min[2] = z;\n    }\n    if (x > max[0]) {\n      max[0] = x;\n    }\n    if (y > max[1]) {\n      max[1] = y;\n    }\n    if (z > max[2]) {\n      max[2] = z;\n    }\n  }\n\n  aabb.setMinMax(min, max);\n  return aabb;\n}\n"],"file":"aabb.js"}