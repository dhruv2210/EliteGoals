{"version":3,"sources":["../../../../src/components/renderer/passes/PixelPickingPass.ts"],"names":["inject","injectable","IDENTIFIER","decodePickingColor","RenderPass","PickingStage","NONE","ENCODE","HIGHLIGHT","PixelPickingPass","RenderEngine","ResourcePool","RenderPassFactory","MeshComponentManager","pickingFBO","views","highlightEnabled","highlightColor","alreadyInRendering","setup","fg","passNode","pass","output","createRenderTarget","width","height","data","write","hasSideEffect","execute","view","getViewport","resourceNode","getResourceNode","resourcePool","getOrCreateResource","resource","resize","engine","useFramebuffer","clear","framebuffer","color","stencil","depth","renderPass","renderPassFactory","meshes","scene","getScene","getEntities","meshEntity","mesh","getComponentByEntity","material","setUniform","push","renderView","forEach","pick","x","y","readPixels","xInDevicePixel","window","devicePixelRatio","yInDevicePixel","pickedColors","pickedFeatureIdx","Math","round","Uint8Array","highlightPickedFeature","enabled"],"mappings":"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","sourcesContent":["import { inject, injectable, named } from 'inversify';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { decodePickingColor } from '../../../utils/math';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { IRendererService, IView } from '../IRendererService';\nimport { IRenderPass } from './IRenderPass';\nimport { RenderPass, RenderPassData } from './RenderPass';\n\nexport interface PixelPickingPassData {\n  output: FrameGraphHandle;\n}\n\nconst PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0,\n};\n\n/**\n * color-based picking\n * @see https://threejsfundamentals.org/threejs/lessons/threejs-picking.html\n */\n@injectable()\nexport class PixelPickingPass implements IRenderPass<PixelPickingPassData> {\n  public static IDENTIFIER = 'PixelPicking Pass';\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  @inject(IDENTIFIER.RenderPassFactory)\n  private readonly renderPassFactory: <T>(name: string) => IRenderPass<T>;\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  private pickingFBO: IFramebuffer;\n  private views: IView[];\n  private highlightEnabled = true;\n  private highlightColor = [255, 0, 0, 255];\n\n  /**\n   * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n   */\n  private alreadyInRendering: boolean = false;\n\n  public enableHighlight(enabled: boolean) {\n    this.highlightEnabled = enabled;\n  }\n\n  public setHighlightColor(color: number[]) {\n    this.highlightColor = color;\n  }\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<PixelPickingPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'picking fbo', {\n      width: 1,\n      height: 1,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n\n    // 防止被 FrameGraph 剔除\n    passNode.hasSideEffect = true;\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<PixelPickingPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    this.views = views;\n\n    if (this.alreadyInRendering) {\n      return;\n    }\n\n    for (const view of views) {\n      const { width, height } = view.getViewport();\n      // throttled\n      this.alreadyInRendering = true;\n\n      // 实例化资源\n      const resourceNode = fg.getResourceNode(pass.data.output);\n      this.pickingFBO = this.resourcePool.getOrCreateResource(\n        resourceNode.resource,\n      );\n\n      // TODO: only draw 1x1 quad, with offset camera\n      this.pickingFBO.resize({ width, height });\n      this.engine.useFramebuffer(this.pickingFBO, () => {\n        this.engine.clear({\n          framebuffer: this.pickingFBO,\n          color: [0, 0, 0, 0],\n          stencil: 0,\n          depth: 1,\n        });\n\n        // 渲染\n        const renderPass = this.renderPassFactory<RenderPassData>(\n          RenderPass.IDENTIFIER,\n        );\n\n        // 修改所有\n        const meshes: MeshComponent[] = [];\n        const scene = view.getScene();\n        for (const meshEntity of scene.getEntities()) {\n          const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n          const material = mesh.material;\n          material.setUniform('u_PickingStage', PickingStage.ENCODE);\n          meshes.push(mesh);\n        }\n\n        // @ts-ignore\n        renderPass.renderView(view);\n        meshes.forEach((mesh) => {\n          const material = mesh.material;\n          material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n        });\n\n        this.alreadyInRendering = false;\n      });\n    }\n  };\n\n  public pick = ({ x, y }: { x: number; y: number }, view: IView) => {\n    const { readPixels, useFramebuffer } = this.engine;\n    const { width, height } = view.getViewport();\n    const xInDevicePixel = x * window.devicePixelRatio;\n    const yInDevicePixel = y * window.devicePixelRatio;\n    // const xInDevicePixel = x;\n    // const yInDevicePixel = y;\n    if (\n      xInDevicePixel > width ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height ||\n      yInDevicePixel < 0\n    ) {\n      return;\n    }\n\n    let pickedColors: Uint8Array | undefined;\n    let pickedFeatureIdx: number | undefined;\n    useFramebuffer(this.pickingFBO, () => {\n      // avoid realloc\n      pickedColors = readPixels({\n        x: Math.round(xInDevicePixel),\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.round(height - (y + 1) * window.devicePixelRatio),\n        // y: Math.round(height - (y + 1)),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: this.pickingFBO,\n      });\n\n      if (\n        pickedColors[0] !== 0 ||\n        pickedColors[1] !== 0 ||\n        pickedColors[2] !== 0\n      ) {\n        pickedFeatureIdx = decodePickingColor(pickedColors);\n\n        if (this.highlightEnabled) {\n          // 高亮\n          this.highlightPickedFeature(pickedColors, view);\n        }\n      }\n    });\n    return pickedFeatureIdx;\n  };\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   */\n  private highlightPickedFeature(\n    pickedColors: Uint8Array | undefined,\n    view: IView,\n  ) {\n    if (pickedColors) {\n      for (const meshEntity of view.getScene().getEntities()) {\n        const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n        const material = mesh.material;\n        material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n\n        material.setUniform('u_PickingColor', [\n          pickedColors[0],\n          pickedColors[1],\n          pickedColors[2],\n        ]);\n        material.setUniform('u_HighlightColor', this.highlightColor);\n      }\n    }\n  }\n}\n"],"file":"PixelPickingPass.js"}