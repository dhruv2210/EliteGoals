{"version":3,"sources":["../../../../src/components/renderer/passes/RenderPass.ts"],"names":["mat4","inject","injectable","named","IDENTIFIER","gl","RenderPass","MeshComponentManager","GeometryComponentManager","MaterialComponentManager","CullableComponentManager","TransformComponentManager","HierarchyComponentManager","Systems","FrameGraphSystem","RenderEngine","ResourcePool","modelCache","setup","fg","passNode","pass","output","createRenderTarget","width","height","usage","RENDER_ATTACHMENT","SAMPLED","COPY_SRC","data","write","execute","views","resourceNode","getResourceNode","framebuffer","resourcePool","getOrCreateResource","resource","view","initView","canvas","engine","getCanvas","resize","setScissor","enable","clear","color","getClearColor","depth","useFramebuffer","renderView","scene","getScene","camera","getCamera","viewMatrix","getViewTransform","viewProjectionMatrix","multiply","create","getPerspective","getFrustum","extractFromVPMatrix","getViewport","x","y","viewport","getEntities","meshEntity","renderMesh","mesh","getComponentByEntity","visible","material","geometry","dirty","transform","modelViewMatrix","worldTransform","setUniform","projectionMatrix","modelMatrix","cameraPosition","getPosition","u_viewport","model","draw","uniforms","reduce","cur","prev","name","forEach","u","modelCacheKey","entity","createModel","createAttribute","modelInitializationOptions","vs","vertexShaderGLSL","fs","fragmentShaderGLSL","defines","attributes","buffer","arrayStride","stepMode","divisor","scissor","box","cull","blend","indicesBuffer","elements","maxInstancedCount","instances","count","vertexCount","initMesh"],"mappings":"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","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { Entity } from '../../..';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { GeometryComponent } from '../../geometry/GeometryComponent';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { CullableComponent } from '../../mesh/CullableComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { HierarchyComponent } from '../../scenegraph/HierarchyComponent';\nimport { TransformComponent } from '../../scenegraph/TransformComponent';\nimport { gl } from '../gl';\nimport { IAttribute } from '../IAttribute';\nimport { IModel, IModelInitializationOptions } from '../IModel';\nimport { ICamera, IRendererService, IView } from '../IRendererService';\nimport { IUniform } from '../IUniform';\nimport { IRenderPass } from './IRenderPass';\n\nexport interface RenderPassData {\n  output: FrameGraphHandle;\n}\n\n@injectable()\nexport class RenderPass implements IRenderPass<RenderPassData> {\n  public static IDENTIFIER = 'Render Pass';\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.FrameGraphSystem)\n  private readonly frameGraphSystem: FrameGraphSystem;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  private modelCache: Record<string, IModel> = {};\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<RenderPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'color buffer', {\n      width: 1,\n      height: 1,\n      usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<RenderPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    const resourceNode = fg.getResourceNode(pass.data.output);\n    const framebuffer = this.resourcePool.getOrCreateResource(\n      resourceNode.resource,\n    );\n\n    // initialize model of each mesh\n    for (const view of views) {\n      await this.initView(view);\n    }\n\n    const canvas = this.engine.getCanvas();\n    framebuffer.resize({\n      width: canvas.width,\n      height: canvas.height,\n    });\n\n    this.engine.setScissor({\n      enable: false,\n    });\n    this.engine.clear({\n      framebuffer,\n      color: views[0].getClearColor(), // TODO: use clearColor defined in view\n      depth: 1,\n    });\n\n    this.engine.useFramebuffer(framebuffer, () => {\n      for (const view of views) {\n        // must do rendering in a sync way\n        this.renderView(view);\n      }\n    });\n  };\n\n  public renderView(view: IView) {\n    const scene = view.getScene();\n    const camera = view.getCamera();\n\n    // get VP matrix from camera\n    const viewMatrix = camera.getViewTransform()!;\n    const viewProjectionMatrix = mat4.multiply(\n      mat4.create(),\n      camera.getPerspective(),\n      viewMatrix,\n    );\n    // TODO: use cached planes if camera was not changed\n    camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n\n    const { x, y, width, height } = view.getViewport();\n    this.engine.viewport({\n      x,\n      y,\n      width,\n      height,\n    });\n    // this.engine.setScissor({\n    //   enable: true,\n    //   box: { x, y, width, height },\n    // });\n    // this.engine.clear({\n    //   // framebuffer,\n    //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n    //   depth: 1,\n    // });\n\n    for (const meshEntity of scene.getEntities()) {\n      this.renderMesh(meshEntity, {\n        camera,\n        view,\n        viewMatrix,\n      });\n    }\n  }\n\n  private renderMesh(\n    meshEntity: Entity,\n    {\n      camera,\n      view,\n      viewMatrix,\n    }: {\n      camera: ICamera;\n      view: IView;\n      viewMatrix: mat4;\n    },\n  ) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh || !mesh.visible) {\n      return;\n    }\n\n    // filter meshes with frustum culling\n    // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n    //   return;\n    // }\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    // geometry 在自己的 System 中完成脏检查后的更新\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    // get model matrix from mesh\n    const transform = this.transform.getComponentByEntity(meshEntity)!;\n\n    const modelViewMatrix = mat4.multiply(\n      mat4.create(),\n      viewMatrix,\n      transform.worldTransform,\n    );\n    const { width, height } = view.getViewport();\n\n    // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n    material.setUniform({\n      projectionMatrix: camera.getPerspective(),\n      modelViewMatrix,\n      modelMatrix: transform.worldTransform,\n      viewMatrix,\n      cameraPosition: camera.getPosition(),\n      u_viewport: [width, height],\n    });\n\n    if (mesh.model) {\n      mesh.model.draw({\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n      });\n\n      material.uniforms.forEach((u) => {\n        u.dirty = false;\n      });\n      material.dirty = false;\n    }\n  }\n\n  private async initMesh(meshEntity: Entity, view: IView) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh) {\n      return;\n    }\n\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    if (!mesh.model) {\n      const modelCacheKey = `m-${material.entity}-g-${geometry.entity}`;\n      if (this.modelCache[modelCacheKey]) {\n        mesh.model = this.modelCache[modelCacheKey];\n        return;\n      }\n\n      material.setUniform({\n        projectionMatrix: 1,\n        modelViewMatrix: 1,\n        modelMatrix: 1,\n        viewMatrix: 1,\n        cameraPosition: 1,\n        u_viewport: 1,\n      });\n\n      const { createModel, createAttribute } = this.engine;\n      const modelInitializationOptions: IModelInitializationOptions = {\n        vs: material.vertexShaderGLSL,\n        fs: material.fragmentShaderGLSL,\n        defines: material.defines,\n        attributes: geometry.attributes.reduce(\n          (cur: { [key: string]: IAttribute }, prev) => {\n            if (prev.data && prev.buffer) {\n              cur[prev.name] = createAttribute({\n                buffer: prev.buffer,\n                attributes: prev.attributes,\n                arrayStride: prev.arrayStride,\n                stepMode: prev.stepMode,\n                divisor: prev.stepMode === 'vertex' ? 0 : 1,\n              });\n            }\n            return cur;\n          },\n          {},\n        ),\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n        scissor: {\n          enable: true,\n          // @ts-ignore\n          box: () => view.getViewport(),\n        },\n      };\n\n      if (material.cull) {\n        modelInitializationOptions.cull = material.cull;\n      }\n      if (material.depth) {\n        modelInitializationOptions.depth = material.depth;\n      }\n      if (material.blend) {\n        modelInitializationOptions.blend = material.blend;\n      }\n\n      if (geometry.indicesBuffer) {\n        modelInitializationOptions.elements = geometry.indicesBuffer;\n      }\n\n      if (geometry.maxInstancedCount) {\n        modelInitializationOptions.instances = geometry.maxInstancedCount;\n        modelInitializationOptions.count = geometry.vertexCount || 3;\n      }\n\n      mesh.model = await createModel(modelInitializationOptions);\n      this.modelCache[modelCacheKey] = mesh.model;\n    }\n  }\n\n  private async initView(view: IView) {\n    const scene = view.getScene();\n    for (const meshEntity of scene.getEntities()) {\n      await this.initMesh(meshEntity, view);\n    }\n  }\n}\n"],"file":"RenderPass.js"}