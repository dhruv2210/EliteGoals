{"version":3,"sources":["../../../src/components/renderer/System.ts"],"names":["inject","injectable","named","IDENTIFIER","CopyPass","PixelPickingPass","RenderPass","RendererSystem","Systems","FrameGraphSystem","RenderPassFactory","ConfigService","ResourcePool","views","renderPassFactory","setupRenderPass","setup","executeRenderPass","execute","renderPass","frameGraphSystem","addPass","setupCopyPass","executeCopyPass","tearDownCopyPass","tearDown","copyPass","present","data","output","resourcePool","clean","position","view","pickingPass","pick"],"mappings":";;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,QAA0C,WAA1C;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AAIA,SAASC,QAAT,QAAuC,mBAAvC;AAEA,SACEC,gBADF,QAGO,2BAHP;AAIA,SAASC,UAAT,QAA2C,qBAA3C;AAGA,WAAaC,cAAb,WADCN,UAAU,EACX,UACGD,MAAM,CAACG,UAAU,CAACK,OAAZ,CADT,UAEGN,KAAK,CAACC,UAAU,CAACM,gBAAZ,CAFR,UAKGT,MAAM,CAACG,UAAU,CAACO,iBAAZ,CALT,UAQGV,MAAM,CAACG,UAAU,CAACQ,aAAZ,CART,UAWGX,MAAM,CAACG,UAAU,CAACS,YAAZ,CAXT;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+FAcuBC,KAdvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BJ,wCAiCQ,KAAKC,iBAAL,CAAuCR,UAAU,CAACH,UAAlD,CAjCR,EA+BaY,eA/Bb,yBA+BMC,KA/BN,EAgCeC,iBAhCf,yBAgCMC,OAhCN;AAkCUC,gBAAAA,UAlCV,GAkCuB,KAAKC,gBAAL,CAAsBC,OAAtB,CACjBf,UAAU,CAACH,UADM,EAEjBY,eAFiB,EAGjBE,iBAHiB,CAlCvB;AAAA,yCA4CQ,KAAKH,iBAAL,CAAqCV,QAAQ,CAACD,UAA9C,CA5CR,EAyCamB,aAzCb,0BAyCMN,KAzCN,EA0CeO,eA1Cf,0BA0CML,OA1CN,EA2CgBM,gBA3ChB,0BA2CMC,QA3CN;AA6CUC,gBAAAA,QA7CV,GA6CqB,KAAKN,gBAAL,CAAsBC,OAAtB,CACfjB,QAAQ,CAACD,UADM,EAEfmB,aAFe,EAGfC,eAHe,EAIfC,gBAJe,CA7CrB;AAoDI,qBAAKJ,gBAAL,CAAsBO,OAAtB,CAA8BD,QAAQ,CAACE,IAAT,CAAcC,MAA5C,EApDJ,CAqDI;;AArDJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAwDoB;AAChB,WAAKC,YAAL,CAAkBC,KAAlB;AACD;AA1DH;AAAA;AAAA,yBA4DcC,QA5Dd,EA4DkDC,IA5DlD,EA4D+D;AAC3D,UAAMC,WAAW,GAAG,KAAKpB,iBAAL,CAClBT,gBAAgB,CAACF,UADC,CAApB;AAIA,aAAO+B,WAAW,CAACC,IAAZ,CAAiBH,QAAjB,EAA2BC,IAA3B,CAAP;AACD;AAlEH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { inject, injectable, named } from 'inversify';\nimport { IConfigService, ISystem } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { ResourcePool } from '../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../framegraph/System';\nimport { IView } from './IRendererService';\nimport { CopyPass, CopyPassData } from './passes/CopyPass';\nimport { IRenderPass } from './passes/IRenderPass';\nimport {\n  PixelPickingPass,\n  PixelPickingPassData,\n} from './passes/PixelPickingPass';\nimport { RenderPass, RenderPassData } from './passes/RenderPass';\n\n@injectable()\nexport class RendererSystem implements ISystem {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.FrameGraphSystem)\n  private readonly frameGraphSystem: FrameGraphSystem;\n\n  @inject(IDENTIFIER.RenderPassFactory)\n  private readonly renderPassFactory: <T>(name: string) => IRenderPass<T>;\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  public async execute(views: IView[]) {\n    // const pixelPickingPass = this.renderPassFactory<PixelPickingPassData>(\n    //   PixelPickingPass.IDENTIFIER,\n    // );\n    // const {\n    //   setup: setupPixelPickingPass,\n    //   execute: executePixelPickingPass,\n    //   tearDown: tearDownPickingPass,\n    // } = pixelPickingPass;\n    // this.frameGraphSystem.addPass<PixelPickingPassData>(\n    //   PixelPickingPass.IDENTIFIER,\n    //   setupPixelPickingPass,\n    //   executePixelPickingPass,\n    //   tearDownPickingPass,\n    // );\n\n    const {\n      setup: setupRenderPass,\n      execute: executeRenderPass,\n    } = this.renderPassFactory<RenderPassData>(RenderPass.IDENTIFIER);\n    const renderPass = this.frameGraphSystem.addPass<RenderPassData>(\n      RenderPass.IDENTIFIER,\n      setupRenderPass,\n      executeRenderPass,\n    );\n\n    const {\n      setup: setupCopyPass,\n      execute: executeCopyPass,\n      tearDown: tearDownCopyPass,\n    } = this.renderPassFactory<CopyPassData>(CopyPass.IDENTIFIER);\n    const copyPass = this.frameGraphSystem.addPass<CopyPassData>(\n      CopyPass.IDENTIFIER,\n      setupCopyPass,\n      executeCopyPass,\n      tearDownCopyPass,\n    );\n\n    this.frameGraphSystem.present(copyPass.data.output);\n    // this.frameGraphSystem.present(renderPass.data.output);\n  }\n\n  public tearDown() {\n    this.resourcePool.clean();\n  }\n\n  public pick(position: { x: number; y: number }, view: IView) {\n    const pickingPass = this.renderPassFactory<PixelPickingPassData>(\n      PixelPickingPass.IDENTIFIER,\n    ) as PixelPickingPass;\n\n    return pickingPass.pick(position, view);\n  }\n}\n"],"file":"System.js"}