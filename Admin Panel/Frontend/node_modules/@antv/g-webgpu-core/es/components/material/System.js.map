{"version":3,"sources":["../../../src/components/material/System.ts"],"names":["inject","injectable","createEntity","IDENTIFIER","MaterialSystem","MaterialComponentManager","RenderEngine","ShaderModuleService","material","clear","params","entity","vertexShaderGLSL","vertexShader","fragmentShaderGLSL","fragmentShader","uniforms","engine","supportWebGPU","moduleName","shaderModule","registerModule","vs","fs","materialModule","getModule","Object","keys","map","uniformName","dirty","name","data","create"],"mappings":";;;;;;;;;;;;;;;AACA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,WAAnC;AACA,SAASC,YAAT,QAA+D,OAA/D;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AAQA,WAAaC,cAAb,WADCH,UAAU,EACX,UACGD,MAAM,CAACG,UAAU,CAACE,wBAAZ,CADT,UAIGL,MAAM,CAACG,UAAU,CAACG,YAAZ,CAJT,UAOGN,MAAM,CAACG,UAAU,CAACI,mBAAZ,CAPT;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BA2BoB;AAChB,WAAKC,QAAL,CAAcC,KAAd;AACD;AAED;AACF;AACA;;AAjCA;AAAA;AAAA,yCAkC8BC,MAlC9B,EAwCK;AACD,UAAMC,MAAM,GAAGT,YAAY,EAA3B;AAEA,UAAIU,gBAAgB,GAAGF,MAAM,CAACG,YAA9B;AACA,UAAIC,kBAAkB,GAAGJ,MAAM,CAACK,cAAhC;AACA,UAAIC,QAA2B,GAAG,EAAlC;;AAEA,UAAI,CAAC,KAAKC,MAAL,CAAYC,aAAjB,EAAgC;AAC9B,YAAMC,UAAU,sBAAeR,MAAf,CAAhB;AACA,aAAKS,YAAL,CAAkBC,cAAlB,CAAiCF,UAAjC,EAA6C;AAC3CG,UAAAA,EAAE,EAAEZ,MAAM,CAACG,YADgC;AAE3CU,UAAAA,EAAE,EAAEb,MAAM,CAACK;AAFgC,SAA7C;AAKA,YAAMS,cAAc,GAAG,KAAKJ,YAAL,CAAkBK,SAAlB,CAA4BN,UAA5B,CAAvB;AACAP,QAAAA,gBAAgB,GAAGY,cAAc,CAACF,EAAlC;AACAR,QAAAA,kBAAkB,GAAGU,cAAc,CAACD,EAApC;;AACA,YAAIC,cAAc,CAACR,QAAnB,EAA6B;AAC3B;AACAA,UAAAA,QAAQ,GAAGU,MAAM,CAACC,IAAP,CAAYH,cAAc,CAACR,QAA3B,EAAqCY,GAArC,CAAyC,UAACC,WAAD;AAAA,mBAAkB;AACpEC,cAAAA,KAAK,EAAE,IAD6D;AAEpEC,cAAAA,IAAI,EAAEF,WAF8D;AAGpE;AACAG,cAAAA,IAAI,EAAER,cAAc,CAACR,QAAf,CAAwBa,WAAxB;AAJ8D,aAAlB;AAAA,WAAzC,CAAX;AAMD;AACF;;AAED,aAAO,KAAKrB,QAAL,CAAcyB,MAAd,CAAqBtB,MAArB;AACLC,QAAAA,gBAAgB,EAAhBA,gBADK;AAELE,QAAAA,kBAAkB,EAAlBA;AAFK,SAGFJ,MAHE;AAILM,QAAAA,QAAQ,EAARA;AAJK,SAAP;AAMD;AA1EH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, Entity, ISystem, IUniformBinding } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { IShaderModuleService } from '../../services';\nimport { getLengthFromFormat } from '../../utils/shader';\nimport { IModelInitializationOptions } from '../renderer/IModel';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { MaterialComponent } from './MaterialComponent';\n\n@injectable()\nexport class MaterialSystem implements ISystem {\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModule: IShaderModuleService;\n\n  public async execute() {\n    // await Promise.all(\n    //   this.material.map(async (entity, component) => {\n    //     // if (component.dirty) {\n    //     // TODO: 使用 cache 避免同类材质的重复编译\n    //     // component.stageDescriptor = await this.engine.compilePipelineStageDescriptor(\n    //     //   component.vertexShaderGLSL,\n    //     //   component.fragmentShaderGLSL,\n    //     //   null,\n    //     // );\n    //     // this.generateUniforms(component);\n    //     //   component.dirty = false;\n    //     // }\n    //   }),\n    // );\n  }\n\n  public tearDown() {\n    this.material.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial\n   */\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n    cull?: IModelInitializationOptions['cull'];\n    depth?: IModelInitializationOptions['depth'];\n    blend?: IModelInitializationOptions['blend'];\n  }) {\n    const entity = createEntity();\n\n    let vertexShaderGLSL = params.vertexShader;\n    let fragmentShaderGLSL = params.fragmentShader;\n    let uniforms: IUniformBinding[] = [];\n\n    if (!this.engine.supportWebGPU) {\n      const moduleName = `material-${entity}`;\n      this.shaderModule.registerModule(moduleName, {\n        vs: params.vertexShader,\n        fs: params.fragmentShader,\n      });\n\n      const materialModule = this.shaderModule.getModule(moduleName);\n      vertexShaderGLSL = materialModule.vs!;\n      fragmentShaderGLSL = materialModule.fs!;\n      if (materialModule.uniforms) {\n        // @ts-ignore\n        uniforms = Object.keys(materialModule.uniforms).map((uniformName) => ({\n          dirty: true,\n          name: uniformName,\n          // @ts-ignore\n          data: materialModule.uniforms[uniformName],\n        }));\n      }\n    }\n\n    return this.material.create(entity, {\n      vertexShaderGLSL,\n      fragmentShaderGLSL,\n      ...params,\n      uniforms,\n    });\n  }\n}\n"],"file":"System.js"}