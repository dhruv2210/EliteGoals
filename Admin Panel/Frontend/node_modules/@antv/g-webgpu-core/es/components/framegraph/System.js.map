{"version":3,"sources":["../../../src/components/framegraph/System.ts"],"names":["inject","injectable","IDENTIFIER","FrameGraphHandle","FrameGraphPass","PassNode","ResourceEntry","ResourceNode","FrameGraphSystem","RenderEngine","passNodes","resourceNodes","frameGraphPasses","views","compile","executePassNodes","forEach","pass","tearDown","reset","name","setup","execute","frameGraphPass","passNode","push","find","p","refCount","writes","length","hasSideEffect","reads","handle","index","readerCount","stack","node","pNode","pop","writer","resource","r","refs","pResource","first","last","priority","resoureNode","pFirst","pLast","devirtualize","destroy","entries","preExecuteDevirtualize","engine","preExecuteDestroy","postExecuteDevirtualize","postExecuteDestroy","resourceEntry","resourceNode","version","fgh","descriptor","createResourceNode","input","addPass","fg","read"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { ISystem, IView } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { FrameGraphHandle, TextureDescriptor } from './FrameGraphHandle';\nimport { FrameGraphPass } from './FrameGraphPass';\nimport { PassNode } from './PassNode';\nimport { ResourceEntry } from './ResourceEntry';\nimport { ResourceNode } from './ResourceNode';\n\n/**\n * ported from FrameGraph implemented by SakuraRender\n * @see https://zhuanlan.zhihu.com/p/98572442\n * @see https://github.com/SaeruHikari/Sakura/blob/RenderGraph/SakuraCore/Source/Framework/GraphicTypes/FrameGraph/SakuraFrameGraph.cpp\n */\n@injectable()\nexport class FrameGraphSystem implements ISystem {\n  public passNodes: PassNode[] = [];\n\n  public resourceNodes: ResourceNode[] = [];\n\n  public frameGraphPasses: Array<FrameGraphPass<any>> = [];\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute(views: IView[]) {\n    // this.engine.beginFrame();\n    this.compile();\n    await this.executePassNodes(views);\n    // this.engine.endFrame();\n  }\n\n  public tearDown() {\n    this.frameGraphPasses.forEach((pass) => {\n      if (pass.tearDown) {\n        pass.tearDown();\n      }\n    });\n    this.reset();\n  }\n\n  public addPass<PassData>(\n    name: string,\n    setup: (\n      fg: FrameGraphSystem,\n      passNode: PassNode,\n      pass: FrameGraphPass<PassData>,\n    ) => void,\n    execute: (\n      fg: FrameGraphSystem,\n      pass: FrameGraphPass<PassData>,\n      views: IView[],\n    ) => Promise<void>,\n    tearDown?: () => void,\n  ) {\n    const frameGraphPass = new FrameGraphPass<PassData>();\n    frameGraphPass.execute = execute;\n    if (tearDown) {\n      frameGraphPass.tearDown = tearDown;\n    }\n    frameGraphPass.name = name;\n\n    const passNode = new PassNode();\n    passNode.name = name;\n    this.passNodes.push(passNode);\n\n    this.frameGraphPasses.push(frameGraphPass);\n\n    setup(this, passNode, frameGraphPass);\n\n    return frameGraphPass;\n  }\n\n  public getPass<T>(name: string): FrameGraphPass<T> | undefined {\n    return this.frameGraphPasses.find((p) => p.name === name);\n  }\n\n  public compile() {\n    for (const pass of this.passNodes) {\n      pass.refCount = pass.writes.length + (pass.hasSideEffect ? 1 : 0);\n\n      pass.reads.forEach((handle) => {\n        this.resourceNodes[handle.index].readerCount++;\n      });\n    }\n\n    const stack: ResourceNode[] = [];\n    for (const node of this.resourceNodes) {\n      if (node.readerCount === 0) {\n        stack.push(node);\n      }\n    }\n    while (stack.length) {\n      const pNode = stack.pop();\n      const writer = pNode && pNode.writer;\n      if (writer) {\n        if (--writer.refCount === 0) {\n          // this pass is culled\n          // assert(!writer->hasSideEffect);\n          for (const resource of writer.reads) {\n            const r = this.resourceNodes[resource.index];\n            if (--r.readerCount === 0) {\n              stack.push(r);\n            }\n          }\n        }\n      }\n    }\n\n    // update the final reference counts\n    this.resourceNodes.forEach((node) => {\n      node.resource.refs += node.readerCount;\n    });\n\n    for (const pass of this.passNodes) {\n      if (!pass.refCount) {\n        continue;\n      }\n      for (const resource of pass.reads) {\n        const pResource = this.resourceNodes[resource.index].resource;\n        pResource.first = pResource.first ? pResource.first : pass;\n        pResource.last = pass;\n      }\n      for (const resource of pass.writes) {\n        const pResource = this.resourceNodes[resource.index].resource;\n        pResource.first = pResource.first ? pResource.first : pass;\n        pResource.last = pass;\n      }\n    }\n\n    for (let priority = 0; priority < 2; priority++) {\n      for (const resoureNode of this.resourceNodes) {\n        const resource = resoureNode.resource;\n        if (resource.priority === priority && resource.refs) {\n          const pFirst = resource.first;\n          const pLast = resource.last;\n          if (pFirst && pLast) {\n            pFirst.devirtualize.push(resource);\n            pLast.destroy.push(resource);\n          }\n        }\n      }\n    }\n  }\n\n  public async executePassNodes(views: IView[]) {\n    for (const [index, node] of this.passNodes.entries()) {\n      if (node.refCount) {\n        for (const resource of node.devirtualize) {\n          resource.preExecuteDevirtualize(this.engine);\n        }\n\n        for (const resource of node.destroy) {\n          resource.preExecuteDestroy(this.engine);\n        }\n\n        await this.frameGraphPasses[index].execute(\n          this,\n          this.frameGraphPasses[index],\n          views,\n        );\n\n        for (const resource of node.devirtualize) {\n          resource.postExecuteDevirtualize(this.engine);\n        }\n\n        for (const resource of node.destroy) {\n          resource.postExecuteDestroy(this.engine);\n        }\n      }\n    }\n    this.reset();\n  }\n\n  public reset() {\n    this.passNodes = [];\n    this.resourceNodes = [];\n    this.frameGraphPasses = [];\n  }\n\n  public getResourceNode(r: FrameGraphHandle) {\n    return this.resourceNodes[r.index];\n  }\n\n  public createResourceNode(resourceEntry: ResourceEntry) {\n    const resourceNode = new ResourceNode();\n    resourceNode.resource = resourceEntry;\n    resourceNode.version = resourceEntry.version;\n\n    this.resourceNodes.push(resourceNode);\n\n    const fgh = new FrameGraphHandle();\n    fgh.index = this.resourceNodes.length - 1;\n\n    return fgh;\n  }\n\n  public createTexture(\n    passNode: PassNode,\n    name: string,\n    descriptor: TextureDescriptor,\n  ) {\n    const resource = new ResourceEntry();\n    resource.name = name;\n    resource.descriptor = descriptor;\n    return this.createResourceNode(resource);\n  }\n\n  public createRenderTarget(\n    passNode: PassNode,\n    name: string,\n    descriptor: TextureDescriptor,\n  ) {\n    const resource = new ResourceEntry();\n    resource.name = name;\n    resource.descriptor = descriptor;\n    return this.createResourceNode(resource);\n  }\n\n  public present(input: FrameGraphHandle) {\n    this.addPass<{}>(\n      'Present',\n      (fg, passNode) => {\n        passNode.read(input);\n        passNode.hasSideEffect = true;\n      },\n      async () => {\n        // 不需要执行\n      },\n    );\n  }\n}\n"],"file":"System.js"}