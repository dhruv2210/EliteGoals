{"version":3,"sources":["../../../src/components/geometry/GeometryComponent.ts"],"names":["mat3","vec3","vec4","Component","isTypedArray","GeometryComponent","data","dirty","attributes","indices","indicesBuffer","vertexCount","maxInstancedCount","aabb","entity","Object","assign","name","descriptor","bufferGetter","existed","find","a","push","Uint32Array","buffer","matrix","positionAttribute","normalAttribute","length","i","position","fromValues","transformMat4","set","normalMatrix","normalFromMat4","create","normal","transformMat3","normalize"],"mappings":"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","sourcesContent":["import { mat3, mat4, vec3, vec4 } from 'gl-matrix';\nimport { Entity } from '../..';\nimport { Component } from '../../ComponentManager';\nimport { NonFunctionProperties } from '../../ComponentManager';\nimport { AABB } from '../../shape/AABB';\nimport { isTypedArray } from '../../utils/is-typedarray';\nimport { IBuffer } from '../renderer/IBuffer';\nimport { IElements } from '../renderer/IElements';\nimport { BufferData } from '../renderer/IRendererService';\n\nexport class GeometryComponent extends Component<GeometryComponent> {\n  public dirty: boolean = true;\n\n  public attributes: Array<\n    {\n      dirty: boolean;\n      name: string;\n      data?: BufferData;\n      buffer?: IBuffer;\n      // 结合 Compute Pipeline 时，需要在运行时获取 PingPong buffer\n      bufferGetter?: () => IBuffer;\n    } & GPUVertexBufferLayoutDescriptor\n  > = [];\n\n  public indices: Uint32Array | null;\n  public indicesBuffer: IElements | null;\n\n  public vertexCount: number = 0;\n\n  // instanced count\n  public maxInstancedCount: number;\n\n  public aabb: AABB;\n\n  public entity: Entity;\n\n  constructor(data: Partial<NonFunctionProperties<GeometryComponent>>) {\n    super(data);\n\n    Object.assign(this, data);\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/BufferAttribute\n   */\n  public setAttribute(\n    name: string,\n    data: BufferData,\n    descriptor: GPUVertexBufferLayoutDescriptor,\n    bufferGetter?: () => IBuffer,\n  ) {\n    const existed = this.attributes.find((a) => a.name === name);\n    if (!existed) {\n      this.attributes.push({\n        dirty: true,\n        name,\n        data,\n        ...descriptor,\n        bufferGetter,\n      });\n    } else {\n      existed.data = data;\n      existed.dirty = true;\n    }\n    this.dirty = true;\n    return this;\n  }\n\n  public setIndex(data: number[] | Uint8Array | Uint16Array | Uint32Array) {\n    this.indices = new Uint32Array(\n      // @ts-ignore\n      data.buffer ? data.buffer : (data as number[]),\n    );\n    this.dirty = true;\n    return this;\n  }\n\n  /**\n   * when merge all the geometries into one, we need to transform every vertex's position\n   * and every face's normal\n   */\n  public applyMatrix(matrix: mat4) {\n    const positionAttribute = this.attributes.find(\n      ({ name }) => name === 'position',\n    );\n    const normalAttribute = this.attributes.find(\n      ({ name }) => name === 'normal',\n    );\n\n    if (positionAttribute) {\n      positionAttribute.dirty = true;\n\n      // @ts-ignore\n      if (positionAttribute.data && positionAttribute.data.length) {\n        // @ts-ignore\n        for (let i = 0; i < positionAttribute.data.length; i += 3) {\n          const position = vec4.fromValues(\n            // @ts-ignore\n            positionAttribute.data[i] as number,\n            // @ts-ignore\n            positionAttribute.data[i + 1] as number,\n            // @ts-ignore\n            positionAttribute.data[i + 2] as number,\n            1,\n          );\n          vec4.transformMat4(position, position, matrix);\n          if (isTypedArray(positionAttribute.data)) {\n            // @ts-ignore\n            positionAttribute.data.set(\n              [position[0], position[1], position[2]],\n              i,\n            );\n          } else {\n            // @ts-ignore\n            positionAttribute.data[i] = position[0];\n            // @ts-ignore\n            positionAttribute.data[i + 1] = position[1];\n            // @ts-ignore\n            positionAttribute.data[i + 2] = position[2];\n          }\n        }\n      }\n    }\n\n    if (normalAttribute) {\n      const normalMatrix = mat3.normalFromMat4(mat3.create(), matrix);\n      // @ts-ignore\n      if (normalAttribute.data && normalAttribute.data.length) {\n        // @ts-ignore\n        for (let i = 0; i < normalAttribute.data.length; i += 3) {\n          const normal = vec3.fromValues(\n            // @ts-ignore\n            normalAttribute.data[i] as number,\n            // @ts-ignore\n            normalAttribute.data[i + 1] as number,\n            // @ts-ignore\n            normalAttribute.data[i + 2] as number,\n          );\n          vec3.transformMat3(normal, normal, normalMatrix);\n          vec3.normalize(normal, normal);\n          if (isTypedArray(normalAttribute.data)) {\n            // @ts-ignore\n            normalAttribute.data.set([normal[0], normal[1], normal[2]], i);\n          } else {\n            // @ts-ignore\n            normalAttribute.data[i] = normal[0];\n            // @ts-ignore\n            normalAttribute.data[i + 1] = normal[1];\n            // @ts-ignore\n            normalAttribute.data[i + 2] = normal[2];\n          }\n        }\n      }\n    }\n  }\n}\n"],"file":"GeometryComponent.js"}