{"version":3,"sources":["../../../src/components/geometry/System.ts"],"names":["inject","injectable","createEntity","IDENTIFIER","gl","GeometrySystem","GeometryComponentManager","RenderEngine","geometry","forEach","entity","component","dirty","attributes","attribute","data","buffer","engine","createBuffer","type","FLOAT","subData","offset","indices","indicesBuffer","createElements","count","length","UNSIGNED_INT","usage","STATIC_DRAW","_","destroy","clear","vertexCount","create","maxInstancedCount"],"mappings":"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","sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { createEntity, ISystem } from '../..';\nimport { ComponentManager } from '../../ComponentManager';\nimport { IDENTIFIER } from '../../identifier';\nimport { generateAABBFromVertices } from '../../utils/aabb';\nimport { gl } from '../renderer/gl';\nimport { IBuffer } from '../renderer/IBuffer';\nimport { BufferData, IRendererService } from '../renderer/IRendererService';\nimport { GeometryComponent } from './GeometryComponent';\n\n@injectable()\nexport class GeometrySystem implements ISystem {\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  public async execute() {\n    this.geometry.forEach((entity, component) => {\n      // build buffers for each geometry\n      if (component.dirty) {\n        component.attributes.forEach((attribute) => {\n          if (attribute.dirty && attribute.data) {\n            if (!attribute.buffer) {\n              attribute.buffer = this.engine.createBuffer({\n                data: attribute.data,\n                type: gl.FLOAT,\n              });\n            } else {\n              attribute.buffer?.subData({\n                data: attribute.data,\n                // TODO: support offset in subdata\n                offset: 0,\n              });\n            }\n            attribute.dirty = false;\n          }\n        });\n\n        // create index buffer if needed\n        if (component.indices) {\n          if (!component.indicesBuffer) {\n            component.indicesBuffer = this.engine.createElements({\n              data: component.indices,\n              count: component.indices.length,\n              type: gl.UNSIGNED_INT,\n              usage: gl.STATIC_DRAW,\n            });\n          } else {\n            component.indicesBuffer.subData({\n              data: component.indices,\n              offset: 0,\n            });\n          }\n        }\n        component.dirty = false;\n      }\n    });\n  }\n\n  public tearDown() {\n    this.geometry.forEach((_, geometry) => {\n      if (geometry.indicesBuffer) {\n        geometry.indicesBuffer.destroy();\n      }\n\n      geometry.attributes.forEach((attribute) => {\n        if (attribute.buffer) {\n          attribute.buffer.destroy();\n        }\n      });\n    });\n    this.geometry.clear();\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/BufferGeometry\n   */\n  public createBufferGeometry(\n    { vertexCount }: { vertexCount: number } = { vertexCount: 3 },\n  ) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      vertexCount,\n    });\n  }\n\n  /**\n   * @see https://threejs.org/docs/#api/en/core/InstancedBufferGeometry\n   */\n  public createInstancedBufferGeometry({\n    maxInstancedCount,\n    vertexCount,\n  }: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const entity = createEntity();\n    return this.geometry.create(entity, {\n      maxInstancedCount,\n      vertexCount,\n    });\n  }\n}\n"],"file":"System.js"}