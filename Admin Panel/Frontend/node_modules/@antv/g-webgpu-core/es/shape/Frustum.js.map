{"version":3,"sources":["../../src/shape/Frustum.ts"],"names":["vec3","Plane","Mask","Frustum","planes","i","push","vpMatrix","m0","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","set","normal","distance","forEach","plane","normalize","updatePNVertexFlag"],"mappings":"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","sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\nimport { AABB } from './AABB';\nimport { Plane } from './Plane';\n\nexport enum Mask {\n  OUTSIDE = 0xffffffff,\n  INSIDE = 0x00000000,\n  INDETERMINATE = 0x7fffffff,\n}\n\nexport class Frustum {\n  public planes: Plane[] = [];\n\n  constructor(planes?: Plane[]) {\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (let i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n\n  /**\n   * extract 6 planes from vpMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   * @param vpMatrix viewProjectionMatrix\n   */\n  public extractFromVPMatrix(vpMatrix: mat4) {\n    const [\n      m0,\n      m1,\n      m2,\n      m3,\n      m4,\n      m5,\n      m6,\n      m7,\n      m8,\n      m9,\n      m10,\n      m11,\n      m12,\n      m13,\n      m14,\n      m15,\n    ] = vpMatrix;\n\n    // right\n    vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n    this.planes[0].distance = -(m15 - m12);\n\n    // left\n    vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n    this.planes[1].distance = -(m15 + m12);\n\n    // bottom\n    vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n    this.planes[2].distance = -(m15 + m13);\n\n    // top\n    vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n    this.planes[3].distance = -(m15 - m13);\n\n    // far\n    vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n    this.planes[4].distance = -(m15 - m14);\n\n    // near\n    vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n    this.planes[5].distance = -(m15 + m14);\n\n    this.planes.forEach((plane) => {\n      plane.normalize();\n      plane.updatePNVertexFlag();\n    });\n  }\n}\n"],"file":"Frustum.js"}