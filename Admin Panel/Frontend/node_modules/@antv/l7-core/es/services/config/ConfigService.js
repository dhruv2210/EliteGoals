import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
var _dec, _class;
// import Ajv from 'ajv';
import { injectable } from 'inversify';
import { merge } from 'lodash';
import 'reflect-metadata';
import { MaskOperation } from "../layer/ILayerService";
import WarnInfo from "./warnInfo";

/**
 * 场景默认配置项
 */
var defaultSceneConfig = {
  id: 'map',
  logoPosition: 'bottomleft',
  logoVisible: true,
  antialias: true,
  stencil: true,
  isMini: false,
  preserveDrawingBuffer: false,
  pickBufferScale: 1.0,
  fitBoundsOptions: {
    animate: false
  }
};

/**
 * 图层基类默认样式属性
 */
var defaultLayerConfig = {
  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],
  size: 10,
  shape: 'circle',
  scales: {},
  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],
  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],
  minZoom: -1,
  maxZoom: 24,
  visible: true,
  autoFit: false,
  pickingBuffer: 0,
  enablePropagation: false,
  zIndex: 0,
  blend: 'normal',
  maskLayers: [],
  enableMask: true,
  maskOperation: MaskOperation.AND,
  pickedFeatureID: -1,
  enableMultiPassRenderer: false,
  enablePicking: true,
  active: false,
  activeColor: '#2f54eb',
  enableHighlight: false,
  enableSelect: false,
  highlightColor: '#2f54eb',
  activeMix: 0,
  selectColor: 'blue',
  selectMix: 0,
  enableTAA: false,
  jitterScale: 1,
  enableLighting: false,
  animateOption: {
    enable: false,
    interval: 0.2,
    duration: 4,
    trailLength: 0.15
  },
  forward: true // 默认是正方向
};

// @see https://github.com/epoberezkin/ajv#options
// const ajv = new Ajv({
//   allErrors: true,
//   verbose: true,
// });
var GlobalConfigService = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {
  function GlobalConfigService() {
    _classCallCheck(this, GlobalConfigService);
    _defineProperty(this, "sceneConfigCache", {});
    _defineProperty(this, "layerConfigCache", {});
    _defineProperty(this, "layerAttributeConfigCache", {});
  }
  _createClass(GlobalConfigService, [{
    key: "getSceneConfig",
    value:
    /**
     * 保存每一种 Layer 配置项的校验器
     */
    // private layerConfigValidatorCache: {
    //   [layerName: string]: Ajv.ValidateFunction;
    // } = {};

    function getSceneConfig(sceneId) {
      return this.sceneConfigCache[sceneId];
    }
  }, {
    key: "getSceneWarninfo",
    value: function getSceneWarninfo(id) {
      return WarnInfo[id];
    }
  }, {
    key: "setSceneConfig",
    value: function setSceneConfig(sceneId, config) {
      this.sceneConfigCache[sceneId] = _objectSpread(_objectSpread({}, defaultSceneConfig), config);
    }

    // public validateSceneConfig(data: object) {
    //   return this.validate(this.sceneConfigValidator, data);
    // }

    // public validateMapConfig(data: object) {
    //   return this.validate(this.mapConfigValidator, data);
    // }
  }, {
    key: "getLayerConfig",
    value: function getLayerConfig(layerId) {
      // @ts-ignore
      return this.layerConfigCache[layerId];
    }
  }, {
    key: "setLayerConfig",
    value: function setLayerConfig(sceneId, layerId, config) {
      // @ts-ignore
      this.layerConfigCache[layerId] = _objectSpread({}, merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));
    }
  }, {
    key: "getAttributeConfig",
    value: function getAttributeConfig(layerId) {
      return this.layerAttributeConfigCache[layerId];
    }
  }, {
    key: "setAttributeConfig",
    value: function setAttributeConfig(layerId, attr) {
      // TODO
      this.layerAttributeConfigCache[layerId] = _objectSpread(_objectSpread({}, this.layerAttributeConfigCache[layerId]), attr);
    }
  }, {
    key: "clean",
    value: function clean() {
      this.sceneConfigCache = {};
      this.layerConfigCache = {};
    }

    // @postConstruct()
    // private registerSceneConfigSchemaValidator() {
    //   this.sceneConfigValidator = ajv.compile(sceneConfigSchema);
    //   this.mapConfigValidator = ajv.compile(mapConfigSchema);
    // }

    // private validate(
    //   validateFunc: Ajv.ValidateFunction | undefined,
    //   data: object,
    // ) {
    //   if (validateFunc) {
    //     const valid = validateFunc(data);
    //     if (!valid) {
    //       return {
    //         valid,
    //         errors: validateFunc.errors,
    //         errorText: ajv.errorsText(validateFunc.errors),
    //       };
    //     }
    //   }
    //   return {
    //     valid: true,
    //     errors: null,
    //     errorText: null,
    //   };
    // }
  }]);
  return GlobalConfigService;
}()) || _class);
export { GlobalConfigService as default };