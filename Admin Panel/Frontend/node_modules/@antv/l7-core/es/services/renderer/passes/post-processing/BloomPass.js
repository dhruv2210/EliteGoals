import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { injectable } from 'inversify';
import { isNil } from 'lodash';
import 'reflect-metadata';
/* babel-plugin-inline-import '../../../../shaders/post-processing/bloom.glsl' */
var blur = "varying vec2 v_UV;\n\nuniform float u_BloomFinal: 0.0;\nuniform sampler2D u_Texture;\nuniform sampler2D u_Texture2;\n\nuniform vec2 u_ViewportSize: [1.0, 1.0];\nuniform float u_radius: 5.0;\nuniform float u_intensity: 0.3;\nuniform float u_baseRadio: 0.5;\n\n// https://github.com/Jam3/glsl-fast-gaussian-blur/blob/master/9.glsl\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3846153846) * direction;\n  vec2 off2 = vec2(3.2307692308) * direction;\n  color += texture2D(image, uv) * 0.2270270270;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n  return color;\n}\n\nfloat luminance(vec4 color) {\n  return  0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;\n}\n\nvoid main() {\n  // vec4 baseColor = texture2D(u_Texture, v_UV);\n\n  float r = sqrt(u_radius);\n\n  vec4 c1 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(u_radius, 0.0));\n  // c1 *= luminance(c1);\n  vec4 c2 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(0.0, u_radius));\n  // c2 *= luminance(c2);\n  vec4 c3 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, r));\n  // c3 *= luminance(c3);\n  vec4 c4 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, -r));\n  // c4 *= luminance(c4);\n  vec4 inbloomColor = (c1 + c2 + c3 + c4) * 0.25;\n\n  // float lum = luminance(inbloomColor);\n  // inbloomColor.rgb *= lum;\n\n  if(u_BloomFinal > 0.0) {\n    vec4 baseColor = texture2D(u_Texture2, v_UV);\n    float baselum = luminance(baseColor);\n    gl_FragColor = mix(inbloomColor, baseColor, u_baseRadio);\n    if(baselum <= 0.2) {\n      gl_FragColor = inbloomColor * u_intensity;\n    }\n  } else {\n    gl_FragColor = inbloomColor;\n  }\n}";
/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */
var quad = "attribute vec2 a_Position;\n\nvarying vec2 v_UV;\n\nvoid main() {\n  v_UV = 0.5 * (a_Position + 1.0);\n  gl_Position = vec4(a_Position, 0., 1.);\n}";
import BasePostProcessingPass from "../BasePostProcessingPass";
var BloomPass = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_BasePostProcessingPa) {
  _inherits(BloomPass, _BasePostProcessingPa);
  var _super = _createSuper(BloomPass);
  function BloomPass() {
    _classCallCheck(this, BloomPass);
    return _super.apply(this, arguments);
  }
  _createClass(BloomPass, [{
    key: "setupShaders",
    value: function setupShaders() {
      this.shaderModuleService.registerModule('blur-pass', {
        vs: quad,
        fs: blur
      });
      var _this$shaderModuleSer = this.shaderModuleService.getModule('blur-pass'),
        vs = _this$shaderModuleSer.vs,
        fs = _this$shaderModuleSer.fs,
        uniforms = _this$shaderModuleSer.uniforms;
      var _this$rendererService = this.rendererService.getViewportSize(),
        width = _this$rendererService.width,
        height = _this$rendererService.height;
      return {
        vs: vs,
        fs: fs,
        uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {
          u_ViewportSize: [width, height]
        })
      };
    }
  }, {
    key: "convertOptionsToUniforms",
    value: function convertOptionsToUniforms(options) {
      var uniforms = {};
      if (!isNil(options.bloomRadius)) {
        uniforms.u_radius = options.bloomRadius;
      }
      if (!isNil(options.bloomIntensity)) {
        uniforms.u_intensity = options.bloomIntensity;
      }
      if (!isNil(options.bloomBaseRadio)) {
        uniforms.u_baseRadio = options.bloomBaseRadio;
      }
      return uniforms;
    }
  }]);
  return BloomPass;
}(BasePostProcessingPass)) || _class);
export { BloomPass as default };