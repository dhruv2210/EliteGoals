import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { injectable } from 'inversify';
import 'reflect-metadata';
/* babel-plugin-inline-import '../../../../shaders/post-processing/hexagonalpixelate.glsl' */
var hexagonalPixelate = "varying vec2 v_UV;\n\nuniform sampler2D u_Texture;\nuniform vec2 u_ViewportSize: [1.0, 1.0];\nuniform vec2 u_Center : [0.5, 0.5];\nuniform float u_Scale : 10;\n\n// https://github.com/evanw/glfx.js/blob/master/src/filters/fun/hexagonalpixelate.js\nvec4 hexagonalPixelate_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec2 tex = (texCoord * texSize - u_Center * texSize) / u_Scale;\n  tex.y /= 0.866025404;\n  tex.x -= tex.y * 0.5;\n  vec2 a;\n  if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) {\n    a = vec2(floor(tex.x), floor(tex.y));\n  }\n  else a = vec2(ceil(tex.x), ceil(tex.y));\n  vec2 b = vec2(ceil(tex.x), floor(tex.y));\n  vec2 c = vec2(floor(tex.x), ceil(tex.y));\n  vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);\n  vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);\n  vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);\n  vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);\n  float alen = length(TEX - A);\n  float blen = length(TEX - B);\n  float clen = length(TEX - C);\n  vec2 choice;\n  if (alen < blen) {\n    if (alen < clen) choice = a;\n    else choice = c;\n  } else {\n    if (blen < clen) choice = b;\n    else choice = c;\n  }\n  choice.x += choice.y * 0.5;\n  choice.y *= 0.866025404;\n  choice *= u_Scale / texSize;\n  return texture2D(texture, choice + u_Center);\n}\n\nvoid main() {\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\n  gl_FragColor = hexagonalPixelate_sampleColor(u_Texture, u_ViewportSize, v_UV);\n}";
/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */
var quad = "attribute vec2 a_Position;\n\nvarying vec2 v_UV;\n\nvoid main() {\n  v_UV = 0.5 * (a_Position + 1.0);\n  gl_Position = vec4(a_Position, 0., 1.);\n}";
import BasePostProcessingPass from "../BasePostProcessingPass";
var HexagonalPixelatePass = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_BasePostProcessingPa) {
  _inherits(HexagonalPixelatePass, _BasePostProcessingPa);
  var _super = _createSuper(HexagonalPixelatePass);
  function HexagonalPixelatePass() {
    _classCallCheck(this, HexagonalPixelatePass);
    return _super.apply(this, arguments);
  }
  _createClass(HexagonalPixelatePass, [{
    key: "setupShaders",
    value: function setupShaders() {
      this.shaderModuleService.registerModule('hexagonalpixelate-pass', {
        vs: quad,
        fs: hexagonalPixelate
      });
      var _this$shaderModuleSer = this.shaderModuleService.getModule('hexagonalpixelate-pass'),
        vs = _this$shaderModuleSer.vs,
        fs = _this$shaderModuleSer.fs,
        uniforms = _this$shaderModuleSer.uniforms;
      var _this$rendererService = this.rendererService.getViewportSize(),
        width = _this$rendererService.width,
        height = _this$rendererService.height;
      return {
        vs: vs,
        fs: fs,
        uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {
          u_ViewportSize: [width, height]
        })
      };
    }
  }]);
  return HexagonalPixelatePass;
}(BasePostProcessingPass)) || _class);
export { HexagonalPixelatePass as default };