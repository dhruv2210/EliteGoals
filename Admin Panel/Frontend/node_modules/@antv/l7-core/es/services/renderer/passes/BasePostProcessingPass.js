import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _initializerDefineProperty from "@babel/runtime/helpers/esm/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/esm/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/esm/initializerWarningHelper";
var _dec, _dec2, _class, _class2, _descriptor;
import { inject, injectable } from 'inversify';
import { camelCase, isNil, upperFirst } from 'lodash';
import 'reflect-metadata';
import { gl } from "../gl";
/* babel-plugin-inline-import '../../../shaders/post-processing/quad.glsl' */
var quad = "attribute vec2 a_Position;\n\nvarying vec2 v_UV;\n\nvoid main() {\n  v_UV = 0.5 * (a_Position + 1.0);\n  gl_Position = vec4(a_Position, 0., 1.);\n}";
import { TYPES } from "../../../types";
import { PassType } from "../IMultiPassRenderer";
/**
 * 后处理 Pass 基类，通过 PostProcessor 驱动。
 *
 * 约定使用 u_Texture 传递渲染纹理。
 */
var BasePostProcessingPass = (_dec = injectable(), _dec2 = inject(TYPES.IShaderModuleService), _dec(_class = (_class2 = /*#__PURE__*/function () {
  function BasePostProcessingPass() {
    _classCallCheck(this, BasePostProcessingPass);
    _initializerDefineProperty(this, "shaderModuleService", _descriptor, this);
    _defineProperty(this, "rendererService", void 0);
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "quad", quad);
    _defineProperty(this, "enabled", true);
    _defineProperty(this, "renderToScreen", false);
    _defineProperty(this, "model", void 0);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "optionsToUpdate", {});
  }
  _createClass(BasePostProcessingPass, [{
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "setName",
    value: function setName(name) {
      this.name = name;
    }
  }, {
    key: "getType",
    value: function getType() {
      return PassType.PostProcessing;
    }
  }, {
    key: "init",
    value: function init(layer, config) {
      this.config = config;
      this.rendererService = layer.getContainer().get(TYPES.IRendererService);
      this.shaderModuleService = layer.getContainer().get(TYPES.IShaderModuleService);
      var _this$rendererService = this.rendererService,
        createAttribute = _this$rendererService.createAttribute,
        createBuffer = _this$rendererService.createBuffer,
        createModel = _this$rendererService.createModel;
      var _this$setupShaders = this.setupShaders(),
        vs = _this$setupShaders.vs,
        fs = _this$setupShaders.fs,
        uniforms = _this$setupShaders.uniforms;
      this.model = createModel({
        vs: vs,
        fs: fs,
        attributes: {
          // 使用一个全屏三角形，相比 Quad 顶点数目更少
          a_Position: createAttribute({
            buffer: createBuffer({
              data: [-4, -4, 4, -4, 0, 4],
              type: gl.FLOAT
            }),
            size: 2
          })
        },
        // @ts-ignore
        uniforms: _objectSpread(_objectSpread({
          // @ts-ignore
          u_Texture: null
        }, uniforms), this.config && this.convertOptionsToUniforms(this.config)),
        depth: {
          enable: false
        },
        count: 3,
        blend: {
          // copy pass 需要混合
          enable: this.getName() === 'copy'
        }
      });
    }
  }, {
    key: "render",
    value: function render(layer, tex) {
      var _this = this;
      var postProcessor = layer.multiPassRenderer.getPostProcessor();
      var _this$rendererService2 = this.rendererService,
        useFramebuffer = _this$rendererService2.useFramebuffer,
        getViewportSize = _this$rendererService2.getViewportSize,
        clear = _this$rendererService2.clear;
      var _getViewportSize = getViewportSize(),
        width = _getViewportSize.width,
        height = _getViewportSize.height;
      useFramebuffer(this.renderToScreen ? null : postProcessor.getWriteFBO(), function () {
        clear({
          framebuffer: postProcessor.getWriteFBO(),
          color: [0, 0, 0, 0],
          depth: 1,
          stencil: 0
        });
        var uniformOptions = _objectSpread({
          u_BloomFinal: 0.0,
          u_Texture: postProcessor.getReadFBO(),
          // u_Texture: tex ? tex : postProcessor.getReadFBO(),
          u_ViewportSize: [width, height]
        }, _this.convertOptionsToUniforms(_this.optionsToUpdate));
        if (tex) {
          uniformOptions.u_BloomFinal = 1.0;
          uniformOptions.u_Texture2 = tex;
        }
        _this.model.draw({
          uniforms: uniformOptions
        });
      });
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "setEnabled",
    value: function setEnabled(enabled) {
      this.enabled = enabled;
    }
  }, {
    key: "setRenderToScreen",
    value: function setRenderToScreen(renderToScreen) {
      this.renderToScreen = renderToScreen;
    }
  }, {
    key: "updateOptions",
    value: function updateOptions(config) {
      this.optionsToUpdate = _objectSpread(_objectSpread({}, this.optionsToUpdate), config);
    }
  }, {
    key: "setupShaders",
    value: function setupShaders() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "convertOptionsToUniforms",
    value: function convertOptionsToUniforms(options) {
      var uniforms = {};
      Object.keys(options).forEach(function (optionName) {
        // @ts-ignore
        if (!isNil(options[optionName])) {
          uniforms["u_".concat(upperFirst(camelCase(optionName)))] =
          // @ts-ignore
          options[optionName];
        }
      });
      return uniforms;
    }
  }]);
  return BasePostProcessingPass;
}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "shaderModuleService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { BasePostProcessingPass as default };