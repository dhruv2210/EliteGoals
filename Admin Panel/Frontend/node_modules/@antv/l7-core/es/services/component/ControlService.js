import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
var _dec, _class;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { DOM } from '@antv/l7-utils';
import { injectable } from 'inversify';
import 'reflect-metadata';
import { TYPES } from "../../types";
import { PositionType } from "./IControlService";
var ControlDirectionConfig = {
  topleft: 'column',
  topright: 'column',
  bottomright: 'column',
  bottomleft: 'column',
  leftcenter: 'column',
  rightcenter: 'column',
  topcenter: 'row',
  bottomcenter: 'row',
  lefttop: 'row',
  righttop: 'row',
  leftbottom: 'row',
  rightbottom: 'row'
};
var ControlService = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {
  function ControlService() {
    _classCallCheck(this, ControlService);
    _defineProperty(this, "container", void 0);
    _defineProperty(this, "controlCorners", void 0);
    _defineProperty(this, "controlContainer", void 0);
    _defineProperty(this, "scene", void 0);
    _defineProperty(this, "mapsService", void 0);
    _defineProperty(this, "controls", []);
    _defineProperty(this, "unAddControls", []);
  }
  _createClass(ControlService, [{
    key: "init",
    value: function init(cfg, sceneContainer) {
      this.container = cfg.container;
      this.scene = sceneContainer;
      this.mapsService = sceneContainer.get(TYPES.IMapService);
      this.initControlPos();
    }
  }, {
    key: "addControl",
    value: function addControl(ctr, sceneContainer) {
      var mapsService = sceneContainer.get(TYPES.IMapService);
      if (mapsService.map) {
        ctr.addTo(this.scene); // scene对象
        this.controls.push(ctr);
      } else {
        this.unAddControls.push(ctr);
      }
    }
  }, {
    key: "getControlByName",
    value: function getControlByName(name) {
      return this.controls.find(function (ctr) {
        return ctr.controlOption.name === name;
      });
    }
  }, {
    key: "removeControl",
    value: function removeControl(ctr) {
      var index = this.controls.indexOf(ctr);
      if (index > -1) {
        this.controls.splice(index, 1);
      }
      ctr.remove();
      return this;
    }
  }, {
    key: "addControls",
    value: function addControls() {
      var _this = this;
      this.unAddControls.forEach(function (ctr) {
        ctr.addTo(_this.scene); // scene对象
        _this.controls.push(ctr);
      });
      this.unAddControls = [];
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator = _createForOfIteratorHelper(this.controls),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var ctr = _step.value;
          ctr.remove();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.controls = [];
      this.clearControlPos();
    }
  }, {
    key: "initControlPos",
    value: function initControlPos() {
      var corners = this.controlCorners = {};
      var l = 'l7-';
      var container = this.controlContainer = DOM.create('div', l + 'control-container', this.container);
      function createCorner() {
        var vSideList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var className = vSideList.map(function (item) {
          return l + item;
        }).join(' ');
        corners[vSideList.filter(function (item) {
          return !['row', 'column'].includes(item);
        }).join('')] = DOM.create('div', className, container);
      }
      function getCornerClassList(positionName) {
        var positionList = positionName.replace(/^(top|bottom|left|right|center)/, '$1-').split('-');
        return [].concat(_toConsumableArray(positionList), [ControlDirectionConfig[positionName]]);
      }
      Object.values(PositionType).forEach(function (position) {
        createCorner(getCornerClassList(position));
      });
    }
  }, {
    key: "clearControlPos",
    value: function clearControlPos() {
      for (var i in this.controlCorners) {
        if (this.controlCorners[i]) {
          DOM.remove(this.controlCorners[i]);
        }
      }
      if (this.controlContainer) {
        DOM.remove(this.controlContainer);
      }
    }
  }]);
  return ControlService;
}()) || _class);
export { ControlService as default };