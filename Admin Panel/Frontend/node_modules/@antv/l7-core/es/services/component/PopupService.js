import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
var _dec, _class;
import { injectable } from 'inversify';
import 'reflect-metadata';
import { TYPES } from "../../types";
var PopupService = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {
  function PopupService() {
    _classCallCheck(this, PopupService);
    _defineProperty(this, "scene", void 0);
    _defineProperty(this, "mapsService", void 0);
    _defineProperty(this, "popups", []);
    _defineProperty(this, "unAddPopups", []);
  }
  _createClass(PopupService, [{
    key: "isMarkerReady",
    get: function get() {
      return this.mapsService.map && this.mapsService.getMarkerContainer();
    }
  }, {
    key: "removePopup",
    value: function removePopup(popup) {
      if (popup !== null && popup !== void 0 && popup.isOpen()) {
        popup.remove();
      }
      var targetIndex = this.popups.indexOf(popup);
      if (targetIndex > -1) {
        this.popups.splice(targetIndex, 1);
      }
      var targetUnAddIndex = this.unAddPopups.indexOf(popup);
      if (targetUnAddIndex > -1) {
        this.unAddPopups.splice(targetUnAddIndex, 1);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.popups.forEach(function (popup) {
        return popup.remove();
      });
    }
  }, {
    key: "addPopup",
    value: function addPopup(popup) {
      var _this = this;
      if (popup && popup.getOptions().autoClose) {
        [].concat(_toConsumableArray(this.popups), _toConsumableArray(this.unAddPopups)).forEach(function (otherPopup) {
          if (otherPopup.getOptions().autoClose) {
            _this.removePopup(otherPopup);
          }
        });
      }
      if (this.isMarkerReady) {
        popup.addTo(this.scene);
        this.popups.push(popup);
      } else {
        this.unAddPopups.push(popup);
      }
      popup.on('close', function () {
        _this.removePopup(popup);
      });
    }
  }, {
    key: "initPopup",
    value: function initPopup() {
      var _this2 = this;
      if (this.unAddPopups.length) {
        this.unAddPopups.forEach(function (popup) {
          _this2.addPopup(popup);
          _this2.unAddPopups = [];
        });
      }
    }
  }, {
    key: "init",
    value: function init(scene) {
      this.scene = scene;
      this.mapsService = scene.get(TYPES.IMapService);
    }
  }]);
  return PopupService;
}()) || _class);
export { PopupService as default };