import _typeof from "@babel/runtime/helpers/esm/typeof";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { guid } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
import { injectable } from 'inversify';
var DebugService = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_EventEmitter) {
  _inherits(DebugService, _EventEmitter);
  var _super = _createSuper(DebugService);
  function DebugService() {
    var _this;
    _classCallCheck(this, DebugService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "renderMap", new Map());
    _defineProperty(_assertThisInitialized(_this), "enable", false);
    _defineProperty(_assertThisInitialized(_this), "renderEnable", false);
    _defineProperty(_assertThisInitialized(_this), "cacheLogs", {});
    return _this;
  }
  _createClass(DebugService, [{
    key: "setEnable",
    value: function setEnable(flag) {
      this.enable = !!flag;
    }
  }, {
    key: "log",
    value: function log(key, values) {
      var _this2 = this;
      if (!this.enable) {
        return;
      }
      var keys = key.split('.'); // [12, init, layerInitStart]
      var parent = null;
      keys.forEach(function (k, i) {
        if (parent !== null) {
          if (!parent[k]) {
            parent[k] = {};
          }
          if (i !== keys.length - 1) {
            parent = parent[k];
          }
        } else {
          if (!_this2.cacheLogs[k]) {
            _this2.cacheLogs[k] = {};
          }
          if (i !== keys.length - 1) {
            parent = _this2.cacheLogs[k];
          }
        }
        if (i === keys.length - 1) {
          parent[k] = _objectSpread(_objectSpread({
            time: Date.now()
          }, parent[k]), values);
        }
      });
    }
  }, {
    key: "getLog",
    value: function getLog(key) {
      var _this3 = this;
      switch (_typeof(key)) {
        case 'string':
          return this.cacheLogs[key];
        case 'object':
          return key.map(function (k) {
            return _this3.cacheLogs[k];
          }).filter(function (o) {
            return o !== undefined;
          });
        case 'undefined':
          return this.cacheLogs;
      }
    }

    /**
     * 删除日志
     * @param key
     */
  }, {
    key: "removeLog",
    value: function removeLog(key) {
      delete this.cacheLogs[key];
    }
  }, {
    key: "generateRenderUid",
    value: function generateRenderUid() {
      if (this.renderEnable) {
        return guid();
      } else {
        return '';
      }
    }
  }, {
    key: "renderDebug",
    value: function renderDebug(enable) {
      this.renderEnable = enable;
    }
  }, {
    key: "renderStart",
    value: function renderStart(id) {
      if (!this.renderEnable || !this.enable) {
        return;
      }
      var cacheRenderInfo = this.renderMap.get(id) || {};
      this.renderMap.set(id, _objectSpread(_objectSpread({}, cacheRenderInfo), {}, {
        renderUid: id,
        renderStart: Date.now()
      }));
    }
  }, {
    key: "renderEnd",
    value: function renderEnd(id) {
      if (!this.renderEnable || !this.enable) {
        return;
      }
      var cacheRenderInfo = this.renderMap.get(id);
      if (cacheRenderInfo) {
        var renderStart = cacheRenderInfo.renderStart;
        var renderEnd = Date.now();
        this.emit('renderEnd', _objectSpread(_objectSpread({}, cacheRenderInfo), {}, {
          renderEnd: renderEnd,
          renderDuration: renderEnd - renderStart
        }));
        this.renderMap.delete(id);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.cacheLogs = null;
      this.renderMap.clear();
    }
  }]);
  return DebugService;
}(EventEmitter)) || _class);
export { DebugService as default };