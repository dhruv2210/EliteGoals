import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _initializerDefineProperty from "@babel/runtime/helpers/esm/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/esm/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/esm/initializerWarningHelper";
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-ignore
import { AsyncSeriesHook } from '@antv/async-hook';
import { $window, DOM } from '@antv/l7-utils';
import elementResizeEvent, { unbind } from 'element-resize-event';
import { EventEmitter } from 'eventemitter3';
import { inject, injectable } from 'inversify';
import 'reflect-metadata';
import { TYPES } from "../../types";
import { createRendererContainer } from "../../utils/dom";
import { InteractionEvent } from "../interaction/IInteractionService";
/**
 * will emit `loaded` `resize` `destroy` event panstart panmove panend
 */
var Scene = (_dec = injectable(), _dec2 = inject(TYPES.SceneID), _dec3 = inject(TYPES.IIconService), _dec4 = inject(TYPES.IFontService), _dec5 = inject(TYPES.IControlService), _dec6 = inject(TYPES.IGlobalConfigService), _dec7 = inject(TYPES.IMapService), _dec8 = inject(TYPES.ICoordinateSystemService), _dec9 = inject(TYPES.IRendererService), _dec10 = inject(TYPES.ILayerService), _dec11 = inject(TYPES.IDebugService), _dec12 = inject(TYPES.ICameraService), _dec13 = inject(TYPES.IInteractionService), _dec14 = inject(TYPES.IPickingService), _dec15 = inject(TYPES.IShaderModuleService), _dec16 = inject(TYPES.IMarkerService), _dec17 = inject(TYPES.IPopupService), _dec(_class = (_class2 = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Scene, _EventEmitter);
  var _super = _createSuper(Scene);
  /**
   * 使用各种 Service
   */

  /**
   * 是否首次渲染
   */

  // TODO: 改成状态机

  /**
   * canvas 容器
   */

  function Scene() {
    var _this;
    _classCallCheck(this, Scene);
    _this = _super.call(this);
    // @see https://github.com/webpack/tapable#usage
    _defineProperty(_assertThisInitialized(_this), "destroyed", false);
    _defineProperty(_assertThisInitialized(_this), "loaded", false);
    _initializerDefineProperty(_assertThisInitialized(_this), "id", _descriptor, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "iconService", _descriptor2, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "fontService", _descriptor3, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "controlService", _descriptor4, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "configService", _descriptor5, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "map", _descriptor6, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "coordinateSystemService", _descriptor7, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "rendererService", _descriptor8, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "layerService", _descriptor9, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "debugService", _descriptor10, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "cameraService", _descriptor11, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "interactionService", _descriptor12, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "pickingService", _descriptor13, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "shaderModuleService", _descriptor14, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "markerService", _descriptor15, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "popupService", _descriptor16, _assertThisInitialized(_this));
    _defineProperty(_assertThisInitialized(_this), "inited", false);
    _defineProperty(_assertThisInitialized(_this), "initPromise", void 0);
    _defineProperty(_assertThisInitialized(_this), "rendering", false);
    _defineProperty(_assertThisInitialized(_this), "$container", void 0);
    _defineProperty(_assertThisInitialized(_this), "canvas", void 0);
    _defineProperty(_assertThisInitialized(_this), "markerContainer", void 0);
    _defineProperty(_assertThisInitialized(_this), "hooks", void 0);
    _defineProperty(_assertThisInitialized(_this), "handleWindowResized", function () {
      _this.emit('resize');
      // @ts-check
      if (_this.$container) {
        _this.initContainer();
        DOM.triggerResize();
        _this.coordinateSystemService.needRefresh = true;

        //  repaint layers
        _this.render();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleMapCameraChanged", function (viewport) {
      _this.cameraService.update(viewport);
      _this.render();
    });
    _this.hooks = {
      /**
       * 初始化异步任务，可并行：
       * 1. initMap：初始化地图底图、相机
       * 2. initRenderer：初始化渲染引擎
       * 3. initWorker：初始化 Worker
       */
      init: new AsyncSeriesHook()
    };
    return _this;
  }
  _createClass(Scene, [{
    key: "init",
    value: function init(sceneConfig) {
      var _this2 = this;
      // 设置场景配置项
      this.configService.setSceneConfig(this.id, sceneConfig);
      // 初始化 ShaderModule
      this.shaderModuleService.registerBuiltinModules();

      // 初始化资源管理 图片
      this.iconService.init();
      this.iconService.on('imageUpdate', function () {
        return _this2.render();
      });
      // 字体资源
      this.fontService.init();
      /**
       * 初始化底图
       */
      this.hooks.init.tapPromise('initMap', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this2.debugService.log('map.mapInitStart', {
                type: _this2.map.version
              });
              // 等待首次相机同步
              _context.next = 3;
              return new Promise(function (resolve) {
                _this2.map.onCameraChanged(function (viewport) {
                  _this2.cameraService.init();
                  _this2.cameraService.update(viewport);
                  resolve();
                });
                _this2.map.init();
              });
            case 3:
              // 重新绑定非首次相机更新事件
              _this2.map.onCameraChanged(_this2.handleMapCameraChanged);
              _this2.map.addMarkerContainer();
              // 初始化未加载的marker;
              _this2.markerService.addMarkers();
              _this2.markerService.addMarkerLayers();
              _this2.popupService.initPopup();
              // 地图初始化之后 才能初始化 container 上的交互
              _this2.interactionService.init();
              _this2.interactionService.on(InteractionEvent.Drag, _this2.addSceneEvent.bind(_this2));
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));

      /**
       * 初始化渲染引擎
       */
      this.hooks.init.tapPromise('initRenderer', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var renderContainer, _$window$matchMedia;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              renderContainer = _this2.map.getOverlayContainer();
              if (renderContainer) {
                _this2.$container = renderContainer;
              } else {
                _this2.$container = createRendererContainer(_this2.configService.getSceneConfig(_this2.id).id || '');
              }

              // 创建底图之上的 container
              if (!_this2.$container) {
                _context2.next = 13;
                break;
              }
              _this2.canvas = DOM.create('canvas', '', _this2.$container);
              _this2.setCanvas();
              _context2.next = 7;
              return _this2.rendererService.init(
              // @ts-ignore
              _this2.canvas, _this2.configService.getSceneConfig(_this2.id), sceneConfig.gl);
            case 7:
              _this2.registerContextLost();
              _this2.initContainer();
              elementResizeEvent(_this2.$container, _this2.handleWindowResized);
              if ($window.matchMedia) {
                (_$window$matchMedia = $window.matchMedia('screen and (-webkit-min-device-pixel-ratio: 1.5)')) === null || _$window$matchMedia === void 0 ? void 0 : _$window$matchMedia.addListener(_this2.handleWindowResized);
              }
              _context2.next = 14;
              break;
            case 13:
              console.error('容器 id 不存在');
            case 14:
              _this2.pickingService.init(_this2.id);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      })));
      this.render();
    }
  }, {
    key: "registerContextLost",
    value: function registerContextLost() {
      var _this3 = this;
      var canvas = this.rendererService.getCanvas();
      if (canvas) {
        canvas.addEventListener('webglcontextlost', function () {
          return _this3.emit('webglcontextlost');
        });
      }
    }

    /**
     * 小程序环境下初始化 Scene
     * @param sceneConfig
     */
  }, {
    key: "initMiniScene",
    value: function initMiniScene(sceneConfig) {
      var _this4 = this;
      // 设置场景配置项
      this.configService.setSceneConfig(this.id, sceneConfig);

      // 初始化 ShaderModule
      this.shaderModuleService.registerBuiltinModules();

      // 初始化资源管理 图片
      this.iconService.init();
      this.iconService.on('imageUpdate', function () {
        return _this4.render();
      });
      // 字体资源
      this.fontService.init();

      /**
       * 初始化底图
       */
      this.hooks.init.tapPromise('initMap', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return new Promise(function (resolve) {
                _this4.map.onCameraChanged(function (viewport) {
                  _this4.cameraService.init();
                  _this4.cameraService.update(viewport);
                  if (_this4.map.version !== 'GAODE2.x') {
                    // not amap2
                    resolve();
                  }
                });
                // @ts-ignore
                _this4.map.initMiniMap();
              });
            case 2:
              // 重新绑定非首次相机更新事件
              _this4.map.onCameraChanged(_this4.handleMapCameraChanged);

              // 地图初始化之后 才能初始化 container 上的交互
              _this4.interactionService.init();
              _this4.interactionService.on(InteractionEvent.Drag, _this4.addSceneEvent.bind(_this4));
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      })));

      /**
       * 初始化渲染引擎
       */
      this.hooks.init.tapPromise('initRenderer', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var $container;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              // 创建底图之上的 container
              $container = sceneConfig.canvas; // 添加marker container;
              _this4.$container = $container ? $container : null;
              if (!_this4.$container) {
                _context4.next = 7;
                break;
              }
              _context4.next = 5;
              return _this4.rendererService.init(
              // @ts-ignore
              sceneConfig.canvas, _this4.configService.getSceneConfig(_this4.id), undefined);
            case 5:
              _context4.next = 8;
              break;
            case 7:
              console.error('容器 id 不存在');
            case 8:
              _this4.pickingService.init(_this4.id);
            case 9:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      })));
      // TODO：init worker, fontAtlas...

      // 执行异步并行初始化任务
      // @ts-ignore
      this.initPromise = this.hooks.init.promise();
      this.render();
    }
  }, {
    key: "addLayer",
    value: function addLayer(layer) {
      this.layerService.sceneService = this;
      this.layerService.add(layer);
    }
  }, {
    key: "addMask",
    value: function addMask(mask) {
      this.layerService.sceneService = this;
      this.layerService.addMask(mask);
    }
  }, {
    key: "render",
    value: function () {
      var _render = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.rendering || this.destroyed)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              this.rendering = true;
              // 首次初始化，或者地图的容器被强制销毁的需要重新初始化
              if (this.inited) {
                _context5.next = 16;
                break;
              }
              _context5.next = 6;
              return this.hooks.init.promise();
            case 6:
              // 初始化地图和渲染
              if (this.destroyed) {
                this.destroy();
              }
              // FIXME: 初始化 marker 容器，可以放到 map 初始化方法中？
              _context5.next = 9;
              return this.layerService.initLayers();
            case 9:
              this.layerService.renderLayers();
              this.controlService.addControls();
              this.loaded = true;
              this.emit('loaded');
              this.inited = true;
              _context5.next = 20;
              break;
            case 16:
              _context5.next = 18;
              return this.layerService.initLayers();
            case 18:
              _context5.next = 20;
              return this.layerService.renderLayers();
            case 20:
              // 组件需要等待layer 初始化完成之后添加
              this.rendering = false;
            case 21:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function render() {
        return _render.apply(this, arguments);
      }
      return render;
    }()
    /**
     * 用户自定义添加第三方字体 （用户使用 layer/point/text/iconfont 的前提需要加载第三方字体文件）
     * @param fontFamily
     * @param fontPath
     */
  }, {
    key: "addFontFace",
    value: function addFontFace(fontFamily, fontPath) {
      this.fontService.addFontFace(fontFamily, fontPath);
    }
  }, {
    key: "getSceneContainer",
    value: function getSceneContainer() {
      return this.$container;
    }
  }, {
    key: "exportPng",
    value: function () {
      var _exportPng = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(type) {
        var _this$$container;
        var renderCanvas, layersPng;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              renderCanvas = (_this$$container = this.$container) === null || _this$$container === void 0 ? void 0 : _this$$container.getElementsByTagName('canvas')[0];
              _context6.next = 3;
              return this.render();
            case 3:
              layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
              return _context6.abrupt("return", layersPng);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function exportPng(_x) {
        return _exportPng.apply(this, arguments);
      }
      return exportPng;
    }()
  }, {
    key: "getSceneConfig",
    value: function getSceneConfig() {
      return this.configService.getSceneConfig(this.id);
    }

    // get point size info
  }, {
    key: "getPointSizeRange",
    value: function getPointSizeRange() {
      return this.rendererService.getPointSizeRange();
    }
  }, {
    key: "addMarkerContainer",
    value: function addMarkerContainer() {
      // @ts-ignore
      var mapContainer = this.$container.parentElement;
      if (mapContainer !== null) {
        this.markerContainer = DOM.create('div', 'l7-marker-container', mapContainer);
      }
    }
  }, {
    key: "getMarkerContainer",
    value: function getMarkerContainer() {
      return this.markerContainer;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this5 = this,
        _this$$container2,
        _this$$container2$par;
      if (!this.inited) {
        this.destroyed = true;
        return;
      }
      unbind(this.$container, this.handleWindowResized);
      if ($window.matchMedia) {
        var _$window$matchMedia2;
        (_$window$matchMedia2 = $window.matchMedia('screen and (min-resolution: 2dppx)')) === null || _$window$matchMedia2 === void 0 ? void 0 : _$window$matchMedia2.removeListener(this.handleWindowResized);
      }
      this.pickingService.destroy();
      this.layerService.destroy();

      // this.rendererService.destroy();

      this.interactionService.destroy();
      this.controlService.destroy();
      this.markerService.destroy();
      this.fontService.destroy();
      this.iconService.destroy();
      this.removeAllListeners();
      this.inited = false;
      this.map.destroy();
      setTimeout(function () {
        var _this5$$container;
        (_this5$$container = _this5.$container) === null || _this5$$container === void 0 ? void 0 : _this5$$container.removeChild(_this5.canvas);
        // this.canvas = null 清除对 webgl 实例的引用
        // @ts-ignore
        _this5.canvas = null;
        // Tip: 把这一部分销毁放到写下一个事件循环中执行，兼容 L7React 中 scene 和 layer 同时销毁的情况
        _this5.rendererService.destroy();
      });
      // 销毁 container 容器
      (_this$$container2 = this.$container) === null || _this$$container2 === void 0 ? void 0 : (_this$$container2$par = _this$$container2.parentNode) === null || _this$$container2$par === void 0 ? void 0 : _this$$container2$par.removeChild(this.$container);
      this.emit('destroy');
    }
  }, {
    key: "initContainer",
    value: function initContainer() {
      var _this$$container3, _this$$container4;
      var pixelRatio = DOM.DPR;
      var w = ((_this$$container3 = this.$container) === null || _this$$container3 === void 0 ? void 0 : _this$$container3.clientWidth) || 400;
      var h = ((_this$$container4 = this.$container) === null || _this$$container4 === void 0 ? void 0 : _this$$container4.clientHeight) || 300;
      var canvas = this.canvas;
      if (canvas) {
        canvas.width = w * pixelRatio;
        canvas.height = h * pixelRatio;
        // canvas.style.width = `${w}px`;
        // canvas.style.height = `${h}px`;
      }

      this.rendererService.viewport({
        x: 0,
        y: 0,
        width: pixelRatio * w,
        height: pixelRatio * h
      });
    }
  }, {
    key: "setCanvas",
    value: function setCanvas() {
      var _this$$container5, _this$$container6;
      var pixelRatio = DOM.DPR;
      var w = ((_this$$container5 = this.$container) === null || _this$$container5 === void 0 ? void 0 : _this$$container5.clientWidth) || 400;
      var h = ((_this$$container6 = this.$container) === null || _this$$container6 === void 0 ? void 0 : _this$$container6.clientHeight) || 300;
      var canvas = this.canvas;
      canvas.width = w * pixelRatio;
      canvas.height = h * pixelRatio;
      // canvas.style.width = `${w}px`;
      // canvas.style.height = `${h}px`;
      canvas.style.width = '100%';
      canvas.style.height = '100%';
    }
  }, {
    key: "addSceneEvent",
    value: function addSceneEvent(target) {
      this.emit(target.type, target);
    }
  }]);
  return Scene;
}(EventEmitter), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fontService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "controlService", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "configService", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "map", [_dec7], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "coordinateSystemService", [_dec8], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "rendererService", [_dec9], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "layerService", [_dec10], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "debugService", [_dec11], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "cameraService", [_dec12], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "interactionService", [_dec13], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "pickingService", [_dec14], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "shaderModuleService", [_dec15], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "markerService", [_dec16], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "popupService", [_dec17], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { Scene as default };