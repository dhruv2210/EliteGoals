import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _initializerDefineProperty from "@babel/runtime/helpers/esm/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/esm/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/esm/initializerWarningHelper";
var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { $window, rgb2arr } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
import { inject, injectable } from 'inversify';
import { throttle } from 'lodash';
import 'reflect-metadata';
import { TYPES } from "../../types";
import Clock from "../../utils/clock";
import { MaskOperation, StencilType } from "./ILayerService";
var LayerService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec3 = inject(TYPES.IMapService), _dec4 = inject(TYPES.IDebugService), _dec(_class = (_class2 = /*#__PURE__*/function (_ref) {
  _inherits(LayerService, _ref);
  var _super = _createSuper(LayerService);
  function LayerService() {
    var _this;
    _classCallCheck(this, LayerService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "pickedLayerId", -1);
    _defineProperty(_assertThisInitialized(_this), "clock", new Clock());
    _defineProperty(_assertThisInitialized(_this), "alreadyInRendering", false);
    _defineProperty(_assertThisInitialized(_this), "layers", []);
    _defineProperty(_assertThisInitialized(_this), "layerList", []);
    _defineProperty(_assertThisInitialized(_this), "layerRenderID", void 0);
    _defineProperty(_assertThisInitialized(_this), "sceneInited", false);
    _defineProperty(_assertThisInitialized(_this), "animateInstanceCount", 0);
    _defineProperty(_assertThisInitialized(_this), "shaderPicking", true);
    _defineProperty(_assertThisInitialized(_this), "enableRender", true);
    _initializerDefineProperty(_assertThisInitialized(_this), "renderService", _descriptor, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "mapService", _descriptor2, _assertThisInitialized(_this));
    _initializerDefineProperty(_assertThisInitialized(_this), "debugService", _descriptor3, _assertThisInitialized(_this));
    _defineProperty(_assertThisInitialized(_this), "reRender", throttle(function () {
      _this.renderLayers();
    }, 32));
    _defineProperty(_assertThisInitialized(_this), "throttleRenderLayers", throttle(function () {
      _this.renderLayers();
    }, 16));
    return _this;
  }
  _createClass(LayerService, [{
    key: "needPick",
    value: function needPick(type) {
      return this.layerList.some(function (layer) {
        return layer.needPick(type);
      });
    }
  }, {
    key: "add",
    value: function add(layer) {
      var _this2 = this;
      this.layers.push(layer);
      if (this.sceneInited) {
        layer.init().then(function () {
          _this2.renderLayers();
        });
      }
    }
  }, {
    key: "addMask",
    value: function addMask(mask) {
      var _this3 = this;
      if (this.sceneInited) {
        mask.init().then(function () {
          _this3.renderLayers();
        });
      }
    }
  }, {
    key: "initLayers",
    value: function () {
      var _initLayers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this4 = this;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.sceneInited = true;
              this.layers.forEach( /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(layer) {
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        if (layer.startInit) {
                          _context.next = 4;
                          break;
                        }
                        _context.next = 3;
                        return layer.init();
                      case 3:
                        _this4.updateLayerRenderList();
                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                }));
                return function (_x) {
                  return _ref2.apply(this, arguments);
                };
              }());
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function initLayers() {
        return _initLayers.apply(this, arguments);
      }
      return initLayers;
    }()
  }, {
    key: "getSceneInited",
    value: function getSceneInited() {
      return this.sceneInited;
    }
  }, {
    key: "getRenderList",
    value: function getRenderList() {
      return this.layerList;
    }
  }, {
    key: "getLayers",
    value: function getLayers() {
      return this.layers;
    }
  }, {
    key: "getLayer",
    value: function getLayer(id) {
      return this.layers.find(function (layer) {
        return layer.id === id;
      });
    }
  }, {
    key: "getLayerByName",
    value: function getLayerByName(name) {
      return this.layers.find(function (layer) {
        return layer.name === name;
      });
    }
  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(layer, parentLayer) {
        var layerIndex, _layerIndex;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              // Tip: layer.layerChildren 当 layer 存在子图层的情况
              if (parentLayer) {
                layerIndex = parentLayer.layerChildren.indexOf(layer);
                if (layerIndex > -1) {
                  parentLayer.layerChildren.splice(layerIndex, 1);
                }
              } else {
                _layerIndex = this.layers.indexOf(layer);
                if (_layerIndex > -1) {
                  this.layers.splice(_layerIndex, 1);
                }
              }
              layer.destroy();
              this.reRender();
              this.emit('layerChange', this.layers);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function remove(_x2, _x3) {
        return _remove.apply(this, arguments);
      }
      return remove;
    }()
  }, {
    key: "removeAllLayers",
    value: function () {
      var _removeAllLayers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              this.destroy();
              this.reRender();
            case 2:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function removeAllLayers() {
        return _removeAllLayers.apply(this, arguments);
      }
      return removeAllLayers;
    }()
  }, {
    key: "setEnableRender",
    value: function setEnableRender(flag) {
      this.enableRender = flag;
    }
  }, {
    key: "renderLayers",
    value: function () {
      var _renderLayers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var renderUid, _iterator, _step, layer, _layer$getLayerConfig, enableMask;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.alreadyInRendering || !this.enableRender)) {
                _context5.next = 2;
                break;
              }
              return _context5.abrupt("return");
            case 2:
              this.updateLayerRenderList();
              renderUid = this.debugService.generateRenderUid();
              this.debugService.renderStart(renderUid);
              this.alreadyInRendering = true;
              this.clear();
              _iterator = _createForOfIteratorHelper(this.layerList);
              _context5.prev = 8;
              _iterator.s();
            case 10:
              if ((_step = _iterator.n()).done) {
                _context5.next = 23;
                break;
              }
              layer = _step.value;
              _layer$getLayerConfig = layer.getLayerConfig(), enableMask = _layer$getLayerConfig.enableMask;
              if (layer.masks.filter(function (m) {
                return m.inited;
              }).length > 0 && enableMask) {
                // 清除上一次的模版缓存
                this.renderMask(layer.masks);
              }
              if (!layer.getLayerConfig().enableMultiPassRenderer) {
                _context5.next = 19;
                break;
              }
              _context5.next = 17;
              return layer.renderMultiPass();
            case 17:
              _context5.next = 21;
              break;
            case 19:
              _context5.next = 21;
              return layer.render();
            case 21:
              _context5.next = 10;
              break;
            case 23:
              _context5.next = 28;
              break;
            case 25:
              _context5.prev = 25;
              _context5.t0 = _context5["catch"](8);
              _iterator.e(_context5.t0);
            case 28:
              _context5.prev = 28;
              _iterator.f();
              return _context5.finish(28);
            case 31:
              this.debugService.renderEnd(renderUid);
              this.alreadyInRendering = false;
            case 33:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this, [[8, 25, 28, 31]]);
      }));
      function renderLayers() {
        return _renderLayers.apply(this, arguments);
      }
      return renderLayers;
    }()
  }, {
    key: "renderMask",
    value: function renderMask(masks) {
      var maskIndex = 0;
      this.renderService.clear({
        stencil: 0,
        depth: 1,
        framebuffer: null
      });
      var stencilType = masks.length > 1 ? StencilType.MULTIPLE : StencilType.SINGLE;
      var _iterator2 = _createForOfIteratorHelper(masks),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var layer = _step2.value;
          // 清除上一次的模版缓存
          layer.render({
            isStencil: true,
            stencilType: stencilType,
            stencilIndex: maskIndex++
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "beforeRenderData",
    value: function () {
      var _beforeRenderData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(layer) {
        var flag;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return layer.hooks.beforeRenderData.promise();
            case 2:
              flag = _context6.sent;
              if (flag) {
                this.renderLayers();
              }
            case 4:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function beforeRenderData(_x4) {
        return _beforeRenderData.apply(this, arguments);
      }
      return beforeRenderData;
    }()
  }, {
    key: "renderTileLayerMask",
    value: function renderTileLayerMask(layer) {
      var maskindex = 0;
      var _layer$getLayerConfig2 = layer.getLayerConfig(),
        _layer$getLayerConfig3 = _layer$getLayerConfig2.enableMask,
        enableMask = _layer$getLayerConfig3 === void 0 ? true : _layer$getLayerConfig3;
      var maskCount = layer.tileMask ? 1 : 0;
      var masklayers = layer.masks.filter(function (m) {
        return m.inited;
      });
      maskCount = maskCount + (enableMask ? masklayers.length : 1);
      var stencilType = maskCount > 1 ? StencilType.MULTIPLE : StencilType.SINGLE;
      //  兼容MaskLayer MaskLayer的掩膜不能clear
      if (layer.tileMask || masklayers.length && enableMask) {
        this.renderService.clear({
          stencil: 0,
          depth: 1,
          framebuffer: null
        });
      }
      if (masklayers.length && enableMask) {
        var _iterator3 = _createForOfIteratorHelper(masklayers),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var mask = _step3.value;
            mask.render({
              isStencil: true,
              stencilType: stencilType,
              stencilIndex: maskindex++
            });
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      // // 瓦片裁剪
      if (layer.tileMask) {
        // TODO 示例瓦片掩膜多层支持
        layer.tileMask.render({
          isStencil: true,
          stencilType: stencilType,
          stencilIndex: maskindex++,
          stencilOperation: MaskOperation.OR
        });
      }
    }
    // 瓦片图层渲染
  }, {
    key: "renderTileLayer",
    value: function () {
      var _renderTileLayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(layer) {
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              this.renderTileLayerMask(layer);
              if (!layer.getLayerConfig().enableMultiPassRenderer) {
                _context7.next = 6;
                break;
              }
              _context7.next = 4;
              return layer.renderMultiPass();
            case 4:
              _context7.next = 8;
              break;
            case 6:
              _context7.next = 8;
              return layer.render();
            case 8:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function renderTileLayer(_x5) {
        return _renderTileLayer.apply(this, arguments);
      }
      return renderTileLayer;
    }()
  }, {
    key: "updateLayerRenderList",
    value: function updateLayerRenderList() {
      var _this5 = this;
      // Tip: 每次更新都是从 layers 重新构建
      this.layerList = [];
      this.layers.filter(function (layer) {
        return layer.inited;
      }).filter(function (layer) {
        return layer.isVisible();
      }).sort(function (pre, next) {
        // 根据 zIndex 对渲染顺序进行排序
        return pre.zIndex - next.zIndex;
      }).forEach(function (layer) {
        _this5.layerList.push(layer);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        layer.destroy();
      });
      this.layers = [];
      this.layerList = [];
      this.emit('layerChange', this.layers);
    }
  }, {
    key: "startAnimate",
    value: function startAnimate() {
      if (this.animateInstanceCount++ === 0) {
        this.clock.start();
        this.runRender();
      }
    }
  }, {
    key: "stopAnimate",
    value: function stopAnimate() {
      if (--this.animateInstanceCount === 0) {
        this.stopRender();
        this.clock.stop();
      }
    }
  }, {
    key: "getOESTextureFloat",
    value: function getOESTextureFloat() {
      return this.renderService.extensionObject.OES_texture_float;
    }

    // 控制着色器颜色拾取计算
  }, {
    key: "enableShaderPick",
    value: function enableShaderPick() {
      this.shaderPicking = true;
    }
  }, {
    key: "disableShaderPick",
    value: function disableShaderPick() {
      this.shaderPicking = false;
    }
  }, {
    key: "getShaderPickStat",
    value: function getShaderPickStat() {
      return this.shaderPicking;
    }
  }, {
    key: "clear",
    value: function clear() {
      var color = rgb2arr(this.mapService.bgColor);
      this.renderService.clear({
        color: color,
        depth: 1,
        stencil: 0,
        framebuffer: null
      });
    }
  }, {
    key: "runRender",
    value: function runRender() {
      this.renderLayers();
      this.layerRenderID = $window.requestAnimationFrame(this.runRender.bind(this));
    }
  }, {
    key: "stopRender",
    value: function stopRender() {
      $window.cancelAnimationFrame(this.layerRenderID);
    }
  }]);
  return LayerService;
}(EventEmitter), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "renderService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "debugService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { LayerService as default };