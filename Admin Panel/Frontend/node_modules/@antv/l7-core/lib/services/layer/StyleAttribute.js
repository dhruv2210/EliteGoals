"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _lodash = require("lodash");
var StyleAttribute = /*#__PURE__*/function () {
  function StyleAttribute(options) {
    var _this = this;
    (0, _classCallCheck2.default)(this, StyleAttribute);
    (0, _defineProperty2.default)(this, "name", void 0);
    (0, _defineProperty2.default)(this, "type", void 0);
    (0, _defineProperty2.default)(this, "scale", void 0);
    (0, _defineProperty2.default)(this, "descriptor", void 0);
    (0, _defineProperty2.default)(this, "featureBufferLayout", []);
    (0, _defineProperty2.default)(this, "needRescale", false);
    (0, _defineProperty2.default)(this, "needRemapping", false);
    (0, _defineProperty2.default)(this, "needRegenerateVertices", false);
    (0, _defineProperty2.default)(this, "featureRange", {
      startIndex: 0,
      endIndex: Infinity
    });
    (0, _defineProperty2.default)(this, "vertexAttribute", void 0);
    (0, _defineProperty2.default)(this, "defaultCallback", function (params) {
      // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量
      if (params.length === 0) {
        var _this$scale;
        return ((_this$scale = _this.scale) === null || _this$scale === void 0 ? void 0 : _this$scale.defaultValues) || [];
      }
      return params.map(function (param, idx) {
        var _this$scale2;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        var scaleFunc = (_this$scale2 = _this.scale) === null || _this$scale2 === void 0 ? void 0 : _this$scale2.scalers[idx].func;
        // @ts-ignore // TODO 支持双变量映射
        var value = scaleFunc(param);
        return value;
      });
    });
    this.setProps(options);
  }
  (0, _createClass2.default)(StyleAttribute, [{
    key: "setProps",
    value: function setProps(options) {
      Object.assign(this, options);
    }
  }, {
    key: "mapping",
    value: function mapping(params) {
      var _this$scale3;
      /**
       * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值
       */
      if ((_this$scale3 = this.scale) !== null && _this$scale3 !== void 0 && _this$scale3.callback) {
        var _this$scale4;
        // 使用用户返回的值处理
        var ret = (_this$scale4 = this.scale) === null || _this$scale4 === void 0 ? void 0 : _this$scale4.callback.apply(_this$scale4, (0, _toConsumableArray2.default)(params));
        if (!(0, _lodash.isNil)(ret)) {
          return [ret];
        }
      }

      // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理
      return this.defaultCallback(params);
    }
  }, {
    key: "resetDescriptor",
    value: function resetDescriptor() {
      if (this.descriptor) {
        this.descriptor.buffer.data = [];
      }
    }
  }]);
  return StyleAttribute;
}();
exports.default = StyleAttribute;