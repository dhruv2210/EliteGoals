"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _glMatrix = require("gl-matrix");
var _inversify = require("inversify");
require("reflect-metadata");
var _dec, _class;
var CameraService = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function () {
  function CameraService() {
    (0, _classCallCheck2.default)(this, CameraService);
    (0, _defineProperty2.default)(this, "viewport", void 0);
    (0, _defineProperty2.default)(this, "overridedViewProjectionMatrix", void 0);
    (0, _defineProperty2.default)(this, "jitteredViewProjectionMatrix", void 0);
    (0, _defineProperty2.default)(this, "jitteredProjectionMatrix", void 0);
    (0, _defineProperty2.default)(this, "viewMatrixInverse", void 0);
    (0, _defineProperty2.default)(this, "cameraPosition", void 0);
  }
  (0, _createClass2.default)(CameraService, [{
    key: "init",
    value: function init() {
      //
    }

    /**
     * 同步根据相机参数创建的视口
     */
  }, {
    key: "update",
    value: function update(viewport) {
      this.viewport = viewport;

      // 计算逆矩阵
      // this.viewMatrixInverse = (mat4.invert(
      //   mat4.create(), (this.getViewMatrix() as unknown) as mat4,
      // ) as unknown) as number[];

      this.viewMatrixInverse = _glMatrix.mat4.create();
      _glMatrix.mat4.invert(this.viewMatrixInverse, viewport.getViewMatrix());
      this.cameraPosition = [this.viewMatrixInverse[12], this.viewMatrixInverse[13], this.viewMatrixInverse[14]];
    }
  }, {
    key: "getProjectionMatrix",
    value: function getProjectionMatrix() {
      // 优先返回抖动后的 ProjectionMatrix
      return this.jitteredProjectionMatrix || this.viewport.getProjectionMatrix();
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix() {
      return this.viewport.getModelMatrix();
    }
  }, {
    key: "getViewMatrix",
    value: function getViewMatrix() {
      return this.viewport.getViewMatrix();
    }
  }, {
    key: "getViewMatrixUncentered",
    value: function getViewMatrixUncentered() {
      return this.viewport.getViewMatrixUncentered();
    }
  }, {
    key: "getViewProjectionMatrixUncentered",
    value: function getViewProjectionMatrixUncentered() {
      return this.viewport.getViewProjectionMatrixUncentered();
    }
  }, {
    key: "getViewProjectionMatrix",
    value: function getViewProjectionMatrix() {
      return this.overridedViewProjectionMatrix || this.jitteredViewProjectionMatrix || this.viewport.getViewProjectionMatrix();
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.viewport.getZoom();
    }
  }, {
    key: "getZoomScale",
    value: function getZoomScale() {
      return this.viewport.getZoomScale();
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      var _this$viewport$getCen = this.viewport.getCenter(),
        _this$viewport$getCen2 = (0, _slicedToArray2.default)(_this$viewport$getCen, 2),
        lng = _this$viewport$getCen2[0],
        lat = _this$viewport$getCen2[1];
      return [lng, lat];
    }
  }, {
    key: "getFocalDistance",
    value: function getFocalDistance() {
      return this.viewport.getFocalDistance();
    }
  }, {
    key: "getCameraPosition",
    value: function getCameraPosition() {
      return this.cameraPosition;
    }
  }, {
    key: "projectFlat",
    value: function projectFlat(lngLat, scale) {
      return this.viewport.projectFlat(lngLat, scale);
    }

    /**
     * 支持外部计算 VP 矩阵的场景，例如：在偏移坐标系场景中，需要重新计算 VP 矩阵
     */
  }, {
    key: "setViewProjectionMatrix",
    value: function setViewProjectionMatrix(viewProjectionMatrix) {
      this.overridedViewProjectionMatrix = viewProjectionMatrix;
    }
  }, {
    key: "jitterProjectionMatrix",
    value: function jitterProjectionMatrix(x, y) {
      var translation = _glMatrix.mat4.fromTranslation(_glMatrix.mat4.create(), [x, y, 0]);
      this.jitteredProjectionMatrix = _glMatrix.mat4.multiply(_glMatrix.mat4.create(), translation, this.viewport.getProjectionMatrix());
      this.jitteredViewProjectionMatrix = _glMatrix.mat4.multiply(_glMatrix.mat4.create(), this.jitteredProjectionMatrix, this.viewport.getViewMatrix());
    }
  }, {
    key: "clearJitterProjectionMatrix",
    value: function clearJitterProjectionMatrix() {
      this.jitteredProjectionMatrix = undefined;
      this.jitteredViewProjectionMatrix = undefined;
    }
  }]);
  return CameraService;
}()) || _class);
exports.default = CameraService;