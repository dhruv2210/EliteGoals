"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _eventemitter = require("eventemitter3");
var _inversify = require("inversify");
require("reflect-metadata");
var _font_util = require("../../utils/font_util");
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var BUFFER = 3;
var MAX_CANVAS_WIDTH = 1024;
var imageSize = 64;
var IconService = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2.default)(IconService, _EventEmitter);
  var _super = _createSuper(IconService);
  function IconService() {
    var _this;
    (0, _classCallCheck2.default)(this, IconService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "canvasHeight", 128);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "texture", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "canvas", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "iconData", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "iconMap", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "ctx", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "loadingImageCount", 0);
    return _this;
  }
  (0, _createClass2.default)(IconService, [{
    key: "isLoading",
    value: function isLoading() {
      return this.loadingImageCount === 0;
    }
  }, {
    key: "init",
    value: function init() {
      this.iconData = [];
      this.iconMap = {};
      this.canvas = _l7Utils.$window.document.createElement('canvas');
      this.canvas.width = 128;
      this.canvas.height = 128;
      this.ctx = this.canvas.getContext('2d');
    }
  }, {
    key: "addImage",
    value: function () {
      var _addImage = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(id, image) {
        var imagedata, iconImage;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              imagedata = new Image();
              this.loadingImageCount++;
              if (this.hasImage(id)) {
                console.warn('Image Id already exists');
              } else {
                this.iconData.push({
                  id: id,
                  size: imageSize
                });
              }
              this.updateIconMap(); // 先存储 ID，
              _context.next = 6;
              return this.loadImage(image);
            case 6:
              imagedata = _context.sent;
              iconImage = this.iconData.find(function (icon) {
                return icon.id === id;
              });
              if (iconImage) {
                iconImage.image = imagedata;
                iconImage.width = imagedata.width;
                iconImage.height = imagedata.height;
              }
              this.update();
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function addImage(_x, _x2) {
        return _addImage.apply(this, arguments);
      }
      return addImage;
    }()
    /**
     * 适配小程序
     * @param id
     * @param image
     * @param sceneService
     */
  }, {
    key: "addImageMini",
    value: function addImageMini(id, image, sceneService) {
      var _this2 = this;
      var canvas = sceneService.getSceneConfig().canvas;
      // @ts-ignore
      var imagedata = canvas.createImage();
      this.loadingImageCount++;
      if (this.hasImage(id)) {
        throw new Error('Image Id already exists');
      }
      this.iconData.push({
        id: id,
        size: imageSize
      });
      this.updateIconMap();
      this.loadImageMini(image, canvas).then(function (img) {
        imagedata = img;
        var iconImage = _this2.iconData.find(function (icon) {
          return icon.id === id;
        });
        if (iconImage) {
          iconImage.image = imagedata;
          iconImage.width = imagedata.width;
          iconImage.height = imagedata.height;
        }
        _this2.update();
      });
    }
  }, {
    key: "getTexture",
    value: function getTexture() {
      return this.texture;
    }
  }, {
    key: "getIconMap",
    value: function getIconMap() {
      return this.iconMap;
    }
  }, {
    key: "getCanvas",
    value: function getCanvas() {
      return this.canvas;
    }
  }, {
    key: "hasImage",
    value: function hasImage(id) {
      return this.iconMap.hasOwnProperty(id);
    }
  }, {
    key: "removeImage",
    value: function removeImage(id) {
      if (this.hasImage(id)) {
        this.iconData = this.iconData.filter(function (icon) {
          return icon.id !== id;
        });
        delete this.iconMap[id];
        this.update();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      // 在销毁的时候清除所有注册的监听
      this.removeAllListeners('imageUpdate');
      this.iconData = [];
      this.iconMap = {};
    }
  }, {
    key: "loadImage",
    value: function loadImage(url) {
      return new Promise(function (resolve, reject) {
        if (url instanceof HTMLImageElement) {
          resolve(url);
          return;
        }
        var image = new Image();
        image.crossOrigin = 'anonymous';
        image.onload = function () {
          resolve(image);
        };
        image.onerror = function () {
          reject(new Error('Could not load image at ' + url));
        };
        image.src = url instanceof File ? URL.createObjectURL(url) : url;
      });
    }
  }, {
    key: "update",
    value: function update() {
      this.updateIconMap();
      this.updateIconAtlas();
      this.loadingImageCount--;
      if (this.loadingImageCount === 0) {
        this.emit('imageUpdate');
      }
    }

    /**
     * 将新增的 icon 图像存储到画布上（正方形）
     */
  }, {
    key: "updateIconAtlas",
    value: function updateIconAtlas() {
      var _this3 = this;
      this.canvas.width = MAX_CANVAS_WIDTH;
      this.canvas.height = this.canvasHeight;
      Object.keys(this.iconMap).forEach(function (item) {
        var _this3$iconMap$item = _this3.iconMap[item],
          x = _this3$iconMap$item.x,
          y = _this3$iconMap$item.y,
          image = _this3$iconMap$item.image,
          _this3$iconMap$item$w = _this3$iconMap$item.width,
          width = _this3$iconMap$item$w === void 0 ? 64 : _this3$iconMap$item$w,
          _this3$iconMap$item$h = _this3$iconMap$item.height,
          height = _this3$iconMap$item$h === void 0 ? 64 : _this3$iconMap$item$h;
        var max = Math.max(width, height);
        var ratio = max / imageSize;
        var drawHeight = height / ratio;
        var drawWidth = width / ratio;
        if (image) {
          _this3.ctx.drawImage(image, x + (imageSize - drawWidth) / 2, y + (imageSize - drawHeight) / 2, drawWidth, drawHeight);
        }
      });
    }

    /**
     * 计算 icon 在画布上的排布（是否需要换行）
     */
  }, {
    key: "updateIconMap",
    value: function updateIconMap() {
      var _buildIconMaping = (0, _font_util.buildIconMaping)(this.iconData, BUFFER, MAX_CANVAS_WIDTH),
        mapping = _buildIconMaping.mapping,
        canvasHeight = _buildIconMaping.canvasHeight;
      this.iconMap = mapping;
      this.canvasHeight = canvasHeight;
    }

    /**
     * 适配小程序
     * @param url
     * @returns
     */
  }, {
    key: "loadImageMini",
    value: function loadImageMini(url, canvas) {
      return new Promise(function (resolve, reject) {
        // @ts-ignore
        var image = canvas.createImage();
        image.crossOrigin = 'anonymous';
        image.onload = function () {
          resolve(image);
        };
        image.onerror = function () {
          reject(new Error('Could not load image at ' + url));
        };
        image.src = url;
      });
    }
  }]);
  return IconService;
}(_eventemitter.EventEmitter)) || _class);
exports.default = IconService;