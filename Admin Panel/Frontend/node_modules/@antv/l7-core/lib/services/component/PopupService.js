"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _inversify = require("inversify");
require("reflect-metadata");
var _types = require("../../types");
var _dec, _class;
var PopupService = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function () {
  function PopupService() {
    (0, _classCallCheck2.default)(this, PopupService);
    (0, _defineProperty2.default)(this, "scene", void 0);
    (0, _defineProperty2.default)(this, "mapsService", void 0);
    (0, _defineProperty2.default)(this, "popups", []);
    (0, _defineProperty2.default)(this, "unAddPopups", []);
  }
  (0, _createClass2.default)(PopupService, [{
    key: "isMarkerReady",
    get: function get() {
      return this.mapsService.map && this.mapsService.getMarkerContainer();
    }
  }, {
    key: "removePopup",
    value: function removePopup(popup) {
      if (popup !== null && popup !== void 0 && popup.isOpen()) {
        popup.remove();
      }
      var targetIndex = this.popups.indexOf(popup);
      if (targetIndex > -1) {
        this.popups.splice(targetIndex, 1);
      }
      var targetUnAddIndex = this.unAddPopups.indexOf(popup);
      if (targetUnAddIndex > -1) {
        this.unAddPopups.splice(targetUnAddIndex, 1);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.popups.forEach(function (popup) {
        return popup.remove();
      });
    }
  }, {
    key: "addPopup",
    value: function addPopup(popup) {
      var _this = this;
      if (popup && popup.getOptions().autoClose) {
        [].concat((0, _toConsumableArray2.default)(this.popups), (0, _toConsumableArray2.default)(this.unAddPopups)).forEach(function (otherPopup) {
          if (otherPopup.getOptions().autoClose) {
            _this.removePopup(otherPopup);
          }
        });
      }
      if (this.isMarkerReady) {
        popup.addTo(this.scene);
        this.popups.push(popup);
      } else {
        this.unAddPopups.push(popup);
      }
      popup.on('close', function () {
        _this.removePopup(popup);
      });
    }
  }, {
    key: "initPopup",
    value: function initPopup() {
      var _this2 = this;
      if (this.unAddPopups.length) {
        this.unAddPopups.forEach(function (popup) {
          _this2.addPopup(popup);
          _this2.unAddPopups = [];
        });
      }
    }
  }, {
    key: "init",
    value: function init(scene) {
      this.scene = scene;
      this.mapsService = scene.get(_types.TYPES.IMapService);
    }
  }]);
  return PopupService;
}()) || _class);
exports.default = PopupService;