"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _inversify = require("inversify");
require("reflect-metadata");
var _IInteractionService = require("../../interaction/IInteractionService");
var _gl = require("../gl");
var _IMultiPassRenderer = require("../IMultiPassRenderer");
var _BaseNormalPass2 = _interopRequireDefault(require("./BaseNormalPass"));
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * color-based PixelPickingPass
 * @see https://github.com/antvis/L7/blob/next/dev-docs/PixelPickingEngine.md
 */
var PixelPickingPass = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function (_BaseNormalPass) {
  (0, _inherits2.default)(PixelPickingPass, _BaseNormalPass);
  var _super = _createSuper(PixelPickingPass);
  function PixelPickingPass() {
    var _this;
    (0, _classCallCheck2.default)(this, PixelPickingPass);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pickingFBO", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "layer", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "width", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "height", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "alreadyInRendering", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pickFromPickingFBO", function (_ref) {
      var x = _ref.x,
        y = _ref.y,
        lngLat = _ref.lngLat,
        type = _ref.type;
      if (!_this.layer.isVisible() || !_this.layer.needPick(type)) {
        return;
      }
      var _this$rendererService = _this.rendererService,
        getViewportSize = _this$rendererService.getViewportSize,
        readPixels = _this$rendererService.readPixels,
        useFramebuffer = _this$rendererService.useFramebuffer;
      var _getViewportSize = getViewportSize(),
        width = _getViewportSize.width,
        height = _getViewportSize.height;
      var _this$layer$getLayerC = _this.layer.getLayerConfig(),
        enableHighlight = _this$layer$getLayerC.enableHighlight,
        enableSelect = _this$layer$getLayerC.enableSelect;
      var xInDevicePixel = x * _l7Utils.DOM.DPR;
      var yInDevicePixel = y * _l7Utils.DOM.DPR;
      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {
        return;
      }
      var pickedColors;
      useFramebuffer(_this.pickingFBO, function () {
        var _pickedColors;
        // avoid realloc
        pickedColors = readPixels({
          x: Math.round(xInDevicePixel),
          // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴
          y: Math.round(height - (y + 1) * _l7Utils.DOM.DPR),
          width: 1,
          height: 1,
          data: new Uint8Array(1 * 1 * 4),
          framebuffer: _this.pickingFBO
        });
        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {
          var pickedFeatureIdx = (0, _l7Utils.decodePickingColor)(pickedColors);
          var rawFeature = _this.layer.getSource().getFeatureById(pickedFeatureIdx);
          var target = {
            x: x,
            y: y,
            type: type,
            lngLat: lngLat,
            featureId: pickedFeatureIdx,
            feature: rawFeature
          };
          if (!rawFeature) {
            // this.logger.error(
            //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',
            // );
          } else {
            // trigger onHover/Click callback on layer
            _this.layer.setCurrentPickId(pickedFeatureIdx);
            _this.triggerHoverOnLayer(target);
          }
        } else {
          var _target = {
            x: x,
            y: y,
            lngLat: lngLat,
            type: _this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',
            featureId: null,
            feature: null
          };
          _this.triggerHoverOnLayer((0, _objectSpread2.default)((0, _objectSpread2.default)({}, _target), {}, {
            type: 'unpick'
          }));
          _this.triggerHoverOnLayer(_target);
          _this.layer.setCurrentPickId(null);
        }
        if (enableHighlight) {
          _this.highlightPickedFeature(pickedColors);
        }
        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {
          _this.selectFeature(pickedColors);
        }
      });
    });
    return _this;
  }
  (0, _createClass2.default)(PixelPickingPass, [{
    key: "getType",
    value: function getType() {
      return _IMultiPassRenderer.PassType.Normal;
    }
  }, {
    key: "getName",
    value: function getName() {
      return 'pixelPicking';
    }
  }, {
    key: "init",
    value: function init(layer, config) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(PixelPickingPass.prototype), "init", this).call(this, layer, config);
      this.layer = layer;
      var _this$rendererService2 = this.rendererService,
        createTexture2D = _this$rendererService2.createTexture2D,
        createFramebuffer = _this$rendererService2.createFramebuffer,
        getViewportSize = _this$rendererService2.getViewportSize;
      var _getViewportSize2 = getViewportSize(),
        width = _getViewportSize2.width,
        height = _getViewportSize2.height;
      // 创建 picking framebuffer，后续实时 resize
      this.pickingFBO = createFramebuffer({
        color: createTexture2D({
          width: width,
          height: height,
          wrapS: _gl.gl.CLAMP_TO_EDGE,
          wrapT: _gl.gl.CLAMP_TO_EDGE
        })
      });

      // 监听 hover 事件
      this.interactionService.on(_IInteractionService.InteractionEvent.Hover, this.pickFromPickingFBO);
      this.interactionService.on(_IInteractionService.InteractionEvent.Select, this.selectFeatureHandle.bind(this));
      this.interactionService.on(_IInteractionService.InteractionEvent.Active, this.highlightFeatureHandle.bind(this));
    }
  }, {
    key: "render",
    value: function render(layer) {
      var _this2 = this;
      if (this.alreadyInRendering) {
        return;
      }
      var _this$rendererService3 = this.rendererService,
        getViewportSize = _this$rendererService3.getViewportSize,
        useFramebuffer = _this$rendererService3.useFramebuffer,
        clear = _this$rendererService3.clear;
      var _getViewportSize3 = getViewportSize(),
        width = _getViewportSize3.width,
        height = _getViewportSize3.height;

      // throttled
      this.alreadyInRendering = true;

      // resize first, fbo can't be resized in use
      if (this.width !== width || this.height !== height) {
        this.pickingFBO.resize({
          width: width,
          height: height
        });
        this.width = width;
        this.height = height;
      }
      useFramebuffer(this.pickingFBO, function () {
        clear({
          framebuffer: _this2.pickingFBO,
          color: [0, 0, 0, 0],
          stencil: 0,
          depth: 1
        });

        /**
         * picking pass 不需要 multipass，原因如下：
         * 1. 已经 clear，无需 ClearPass
         * 2. 只需要 RenderPass
         * 3. 后处理 pass 需要跳过
         */
        var originRenderFlag = _this2.layer.multiPassRenderer.getRenderFlag();
        _this2.layer.multiPassRenderer.setRenderFlag(false);
        // trigger hooks
        layer.hooks.beforePickingEncode.call();
        layer.render();
        layer.hooks.afterPickingEncode.call();
        _this2.layer.multiPassRenderer.setRenderFlag(originRenderFlag);
        _this2.alreadyInRendering = false;
      });
    }

    /**
     * 拾取视口指定坐标属于的要素
     * TODO：支持区域拾取
     */
  }, {
    key: "triggerHoverOnLayer",
    value: function triggerHoverOnLayer(target) {
      this.layer.emit(target.type, target);
    }

    /**
     * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：
     * 1. 鼠标移走时无法恢复
     * 2. 无法实现高亮颜色与原始原色的 alpha 混合
     * 因此高亮还是放在 shader 中做比较好
     * @example
     * this.layer.color('name', ['#000000'], {
     *  featureRange: {
     *    startIndex: pickedFeatureIdx,
     *    endIndex: pickedFeatureIdx + 1,
     *  },
     * });
     */
  }, {
    key: "highlightPickedFeature",
    value: function highlightPickedFeature(pickedColors) {
      // @ts-ignore
      var _pickedColors2 = (0, _slicedToArray2.default)(pickedColors, 3),
        r = _pickedColors2[0],
        g = _pickedColors2[1],
        b = _pickedColors2[2];
      this.layer.hooks.beforeHighlight.call([r, g, b]);
      this.layerService.renderLayers();
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(pickedColors) {
      // @ts-ignore
      var _pickedColors3 = (0, _slicedToArray2.default)(pickedColors, 3),
        r = _pickedColors3[0],
        g = _pickedColors3[1],
        b = _pickedColors3[2];
      this.layer.hooks.beforeSelect.call([r, g, b]);
      this.layerService.renderLayers();
    }
  }, {
    key: "selectFeatureHandle",
    value: function selectFeatureHandle(_ref2) {
      var featureId = _ref2.featureId;
      var pickedColors = (0, _l7Utils.encodePickingColor)(featureId);
      this.selectFeature(new Uint8Array(pickedColors));
    }
  }, {
    key: "highlightFeatureHandle",
    value: function highlightFeatureHandle(_ref3) {
      var featureId = _ref3.featureId;
      var pickedColors = (0, _l7Utils.encodePickingColor)(featureId);
      this.highlightPickedFeature(new Uint8Array(pickedColors));
    }
  }]);
  return PixelPickingPass;
}(_BaseNormalPass2.default)) || _class);
exports.default = PixelPickingPass;