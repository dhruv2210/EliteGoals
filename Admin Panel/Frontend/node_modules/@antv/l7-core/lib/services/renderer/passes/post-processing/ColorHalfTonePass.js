"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inversify = require("inversify");
require("reflect-metadata");
var _BasePostProcessingPass = _interopRequireDefault(require("../BasePostProcessingPass"));
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* babel-plugin-inline-import '../../../../shaders/post-processing/colorhalftone.glsl' */
var colorHalftone = "varying vec2 v_UV;\n\nuniform sampler2D u_Texture;\nuniform vec2 u_ViewportSize: [1.0, 1.0];\nuniform vec2 u_Center : [0.5, 0.5];\nuniform float u_Angle : 0;\nuniform float u_Size : 8;\n\n#pragma include \"common\"\n\nfloat scale = PI / u_Size;\n\nfloat pattern(float u_Angle, vec2 texSize, vec2 texCoord) {\n  float s = sin(u_Angle), c = cos(u_Angle);\n  vec2 tex = texCoord * texSize - u_Center * texSize;\n  vec2 point = vec2(\n    c * tex.x - s * tex.y,\n    s * tex.x + c * tex.y\n  ) * scale;\n  return (sin(point.x) * sin(point.y)) * 4.0;\n}\n\n// https://github.com/evanw/glfx.js/blob/master/src/filters/fun/colorhalftone.js\nvec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  vec3 cmy = 1.0 - color.rgb;\n  float k = min(cmy.x, min(cmy.y, cmy.z));\n  cmy = (cmy - k) / (1.0 - k);\n  cmy = clamp(\n    cmy * 10.0 - 3.0 + vec3(\n      pattern(u_Angle + 0.26179, texSize, texCoord),\n      pattern(u_Angle + 1.30899, texSize, texCoord),\n      pattern(u_Angle, texSize, texCoord)\n    ),\n    0.0,\n    1.0\n  );\n  k = clamp(k * 10.0 - 5.0 + pattern(u_Angle + 0.78539, texSize, texCoord), 0.0, 1.0);\n  return vec4(1.0 - cmy - k, color.a);\n}\n\nvoid main() {\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\n  gl_FragColor = colorHalftone_filterColor(gl_FragColor, u_ViewportSize, v_UV);\n}";
/* babel-plugin-inline-import '../../../../shaders/post-processing/quad.glsl' */
var quad = "attribute vec2 a_Position;\n\nvarying vec2 v_UV;\n\nvoid main() {\n  v_UV = 0.5 * (a_Position + 1.0);\n  gl_Position = vec4(a_Position, 0., 1.);\n}";
var ColorHalftonePass = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function (_BasePostProcessingPa) {
  (0, _inherits2.default)(ColorHalftonePass, _BasePostProcessingPa);
  var _super = _createSuper(ColorHalftonePass);
  function ColorHalftonePass() {
    (0, _classCallCheck2.default)(this, ColorHalftonePass);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(ColorHalftonePass, [{
    key: "setupShaders",
    value: function setupShaders() {
      this.shaderModuleService.registerModule('colorhalftone-pass', {
        vs: quad,
        fs: colorHalftone
      });
      var _this$shaderModuleSer = this.shaderModuleService.getModule('colorhalftone-pass'),
        vs = _this$shaderModuleSer.vs,
        fs = _this$shaderModuleSer.fs,
        uniforms = _this$shaderModuleSer.uniforms;
      var _this$rendererService = this.rendererService.getViewportSize(),
        width = _this$rendererService.width,
        height = _this$rendererService.height;
      return {
        vs: vs,
        fs: fs,
        uniforms: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, uniforms), {}, {
          u_ViewportSize: [width, height]
        })
      };
    }
  }]);
  return ColorHalftonePass;
}(_BasePostProcessingPass.default)) || _class);
exports.default = ColorHalftonePass;