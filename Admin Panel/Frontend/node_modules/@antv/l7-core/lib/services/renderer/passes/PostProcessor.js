"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _inversify = require("inversify");
require("reflect-metadata");
var _types = require("../../../types");
var _gl = require("../gl");
var _dec, _dec2, _dec3, _class, _class2, _descriptor;
/**
 * ported from Three.js EffectComposer
 * 后处理负责 pingpong read/write framebuffer，最后一个 pass 默认输出到屏幕
 */
var PostProcessor = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_types.TYPES.IRendererService), _dec3 = (0, _inversify.postConstruct)(), _dec(_class = (_class2 = /*#__PURE__*/function () {
  function PostProcessor() {
    (0, _classCallCheck2.default)(this, PostProcessor);
    (0, _initializerDefineProperty2.default)(this, "rendererService", _descriptor, this);
    (0, _defineProperty2.default)(this, "passes", []);
    (0, _defineProperty2.default)(this, "readFBO", void 0);
    (0, _defineProperty2.default)(this, "writeFBO", void 0);
  }
  (0, _createClass2.default)(PostProcessor, [{
    key: "getReadFBO",
    value: function getReadFBO() {
      return this.readFBO;
    }
  }, {
    key: "getWriteFBO",
    value: function getWriteFBO() {
      return this.writeFBO;
    }

    /**
     * 从当前的 framebuffer 中获取贴图
     * @returns
     */
  }, {
    key: "getCurrentFBOTex",
    value: function getCurrentFBOTex() {
      var _this$rendererService = this.rendererService,
        getViewportSize = _this$rendererService.getViewportSize,
        createTexture2D = _this$rendererService.createTexture2D;
      var _getViewportSize = getViewportSize(),
        width = _getViewportSize.width,
        height = _getViewportSize.height;
      return createTexture2D({
        x: 0,
        y: 0,
        width: width,
        height: height,
        copy: true
      });
    }

    /**
     * 从 readFBO 中获取贴图
     * @returns
     */
  }, {
    key: "getReadFBOTex",
    value: function getReadFBOTex() {
      var _this = this;
      var useFramebuffer = this.rendererService.useFramebuffer;
      return new Promise(function (resolve) {
        useFramebuffer(_this.readFBO, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                resolve(_this.getCurrentFBOTex());
              case 1:
              case "end":
                return _context.stop();
            }
          }, _callee);
        })));
      });
    }
  }, {
    key: "renderBloomPass",
    value: function () {
      var _renderBloomPass = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(layer, pass) {
        var tex, count;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.getReadFBOTex();
            case 2:
              tex = _context2.sent;
              // count 定义 bloom 交替绘制的次数
              count = 0;
            case 4:
              if (!(count < 4)) {
                _context2.next = 11;
                break;
              }
              _context2.next = 7;
              return pass.render(layer, tex);
            case 7:
              this.swap();
              count++;
              _context2.next = 4;
              break;
            case 11:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function renderBloomPass(_x, _x2) {
        return _renderBloomPass.apply(this, arguments);
      }
      return renderBloomPass;
    }()
  }, {
    key: "render",
    value: function () {
      var _render = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(layer) {
        var i, pass;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              i = 0;
            case 1:
              if (!(i < this.passes.length)) {
                _context3.next = 15;
                break;
              }
              pass = this.passes[i]; // last pass should render to screen
              pass.setRenderToScreen(this.isLastEnabledPass(i));

              // await pass.render(layer);
              // // pingpong
              // if (i !== this.passes.length - 1) {
              //   this.swap();
              // }
              if (!(pass.getName() === 'bloom')) {
                _context3.next = 9;
                break;
              }
              _context3.next = 7;
              return this.renderBloomPass(layer, pass);
            case 7:
              _context3.next = 12;
              break;
            case 9:
              _context3.next = 11;
              return pass.render(layer);
            case 11:
              // pingpong
              if (i !== this.passes.length - 1) {
                this.swap();
              }
            case 12:
              i++;
              _context3.next = 1;
              break;
            case 15:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function render(_x3) {
        return _render.apply(this, arguments);
      }
      return render;
    }()
  }, {
    key: "resize",
    value: function resize(width, height) {
      this.readFBO.resize({
        width: width,
        height: height
      });
      this.writeFBO.resize({
        width: width,
        height: height
      });
    }
  }, {
    key: "add",
    value: function add(pass, layer, config) {
      pass.init(layer, config);
      this.passes.push(pass);
    }
  }, {
    key: "insert",
    value: function insert(pass, index, layer, config) {
      pass.init(layer, config);
      this.passes.splice(index, 0, pass);
    }
  }, {
    key: "getPostProcessingPassByName",
    value: function getPostProcessingPassByName(name) {
      return this.passes.find(function (p) {
        return p.getName() === name;
      });
    }
  }, {
    key: "init",
    value: function init() {
      var _this$rendererService2 = this.rendererService,
        createFramebuffer = _this$rendererService2.createFramebuffer,
        createTexture2D = _this$rendererService2.createTexture2D;
      this.readFBO = createFramebuffer({
        color: createTexture2D({
          width: 1,
          height: 1,
          wrapS: _gl.gl.CLAMP_TO_EDGE,
          wrapT: _gl.gl.CLAMP_TO_EDGE
        })
      });
      this.writeFBO = createFramebuffer({
        color: createTexture2D({
          width: 1,
          height: 1,
          wrapS: _gl.gl.CLAMP_TO_EDGE,
          wrapT: _gl.gl.CLAMP_TO_EDGE
        })
      });
    }
  }, {
    key: "isLastEnabledPass",
    value: function isLastEnabledPass(index) {
      for (var i = index + 1; i < this.passes.length; i++) {
        if (this.passes[i].isEnabled()) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: "swap",
    value: function swap() {
      var tmp = this.readFBO;
      this.readFBO = this.writeFBO;
      this.writeFBO = tmp;
    }
  }]);
  return PostProcessor;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "rendererService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "init", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "init"), _class2.prototype)), _class2)) || _class);
exports.default = PostProcessor;