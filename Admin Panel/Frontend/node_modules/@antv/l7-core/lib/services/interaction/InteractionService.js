"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _l7Utils = require("@antv/l7-utils");
var _eventemitter = _interopRequireDefault(require("eventemitter3"));
var _inversify = require("inversify");
var _l7hammerjs = _interopRequireDefault(require("l7hammerjs"));
require("reflect-metadata");
var _types = require("../../types");
var _IInteractionService = require("./IInteractionService");
var _dec, _dec2, _class, _class2, _descriptor;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DragEventMap = {
  panstart: 'dragstart',
  panmove: 'dragging',
  panend: 'dragend',
  pancancel: 'dragcancel'
};
/**
 * 由于目前 L7 与地图结合的方案为双 canvas 而非共享 WebGL Context，事件监听注册在地图底图上。
 * 除此之外，后续如果支持非地图场景，事件监听就需要注册在 L7 canvas 上。
 */
var InteractionService = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_types.TYPES.IMapService), _dec(_class = (_class2 = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2.default)(InteractionService, _EventEmitter);
  var _super = _createSuper(InteractionService);
  function InteractionService() {
    var _this;
    (0, _classCallCheck2.default)(this, InteractionService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "indragging", false);
    (0, _initializerDefineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mapService", _descriptor, (0, _assertThisInitialized2.default)(_this));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hammertime", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastClickTime", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "lastClickXY", [-1, -1]);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clickTimer", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "$containter", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDrag", function (target) {
      var interactionTarget = _this.interactionEvent(target);
      interactionTarget.type = DragEventMap[interactionTarget.type];
      interactionTarget.type === 'dragging' ? _this.indragging = true : _this.indragging = false;
      _this.emit(_IInteractionService.InteractionEvent.Drag, interactionTarget);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onHammer", function (target) {
      target.srcEvent.stopPropagation();
      var interactionTarget = _this.interactionEvent(target);
      _this.emit(_IInteractionService.InteractionEvent.Hover, interactionTarget);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onTouch", function (target) {
      var touch = target.touches[0];
      // @ts-ignore
      _this.onHover({
        x: touch.pageX,
        y: touch.pageY,
        type: 'touch'
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onHover", function (event) {
      var clientX = event.clientX,
        clientY = event.clientY;
      var x = clientX;
      var y = clientY;
      var type = event.type;
      var $containter = _this.mapService.getMapContainer();
      if ($containter) {
        if (_l7Utils.isMini) {
          // l7 - mini
          // @ts-ignore
          x = x - $containter.left - 0;
          // @ts-ignore
          y = y - $containter.top - 0;
        } else {
          var _$containter$getBound = $containter.getBoundingClientRect(),
            top = _$containter$getBound.top,
            left = _$containter$getBound.left;
          x = x - left - $containter.clientLeft;
          y = y - top - $containter.clientTop;
        }
      }
      var lngLat = _this.mapService.containerToLngLat([x, y]);
      if (type === 'click') {
        if (!_l7Utils.isMini) {
          // l7 - mini
          if ('ontouchstart' in document.documentElement === true) {
            return;
          }
        }
        _this.isDoubleTap(x, y, lngLat);
        return;
      }
      if (type === 'touch') {
        _this.isDoubleTap(x, y, lngLat);
        return;
      }
      if (type !== 'click' && type !== 'dblclick') {
        _this.emit(_IInteractionService.InteractionEvent.Hover, {
          x: x,
          y: y,
          lngLat: lngLat,
          type: type,
          target: event
        });
      }
    });
    return _this;
  }
  (0, _createClass2.default)(InteractionService, [{
    key: "init",
    value: function init() {
      // 注册事件在地图底图上
      this.addEventListenerOnMap();
      this.$containter = this.mapService.getMapContainer();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.hammertime) {
        this.hammertime.destroy();
      }
      this.removeEventListenerOnMap();
      this.off(_IInteractionService.InteractionEvent.Hover);
    }
  }, {
    key: "triggerHover",
    value: function triggerHover(_ref) {
      var x = _ref.x,
        y = _ref.y;
      this.emit(_IInteractionService.InteractionEvent.Hover, {
        x: x,
        y: y
      });
    }
  }, {
    key: "triggerSelect",
    value: function triggerSelect(id) {
      this.emit(_IInteractionService.InteractionEvent.Select, {
        featureId: id
      });
    }
  }, {
    key: "triggerActive",
    value: function triggerActive(id) {
      this.emit(_IInteractionService.InteractionEvent.Active, {
        featureId: id
      });
    }
  }, {
    key: "handleMiniEvent",
    value: function handleMiniEvent(e) {
      // @ts-ignore
      this.onHover({
        clientX: e.touches[0].pageX,
        clientY: e.touches[0].pageY,
        type: 'touch'
      });
    }
  }, {
    key: "addEventListenerOnMap",
    value: function addEventListenerOnMap() {
      var $containter = this.mapService.getMapContainer();
      if ($containter) {
        if (_l7Utils.isMini) {
          _l7Utils.$window.document.addEventListener('touchstart', this.handleMiniEvent.bind(this));
        } else {
          var hammertime = new _l7hammerjs.default.Manager($containter);
          // $containter.addEventListener('mousemove', this.onHover);
          // $containter.addEventListener('click', this.onHover);
          hammertime.add(new _l7hammerjs.default.Tap({
            event: 'dblclick',
            taps: 2
          }));
          hammertime.add(new _l7hammerjs.default.Tap({
            event: 'click'
          }));
          hammertime.add(new _l7hammerjs.default.Pan({
            threshold: 0,
            pointers: 0
          }));
          hammertime.add(new _l7hammerjs.default.Press({}));
          // hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });
          // hammertime.get('pinch').set({ enable: true });
          hammertime.on('dblclick click', this.onHammer);
          hammertime.on('panstart panmove panend pancancel', this.onDrag);
          // $containter.addEventListener('touchstart', this.onTouch);
          $containter.addEventListener('mousemove', this.onHover);
          // $containter.addEventListener('click', this.onHover);
          $containter.addEventListener('mousedown', this.onHover, true);
          $containter.addEventListener('mouseup', this.onHover);
          $containter.addEventListener('contextmenu', this.onHover);
          this.hammertime = hammertime;
        }

        // Tip: 根据场景注册事件到 L7 canvas 上
      }
    }
  }, {
    key: "removeEventListenerOnMap",
    value: function removeEventListenerOnMap() {
      if (_l7Utils.isMini) {
        _l7Utils.$window.document.removeEventListener('touchstart', this.handleMiniEvent.bind(this));
      } else {
        var $containter = this.mapService.getMapContainer();
        if ($containter) {
          $containter.removeEventListener('mousemove', this.onHover);
          this.hammertime.off('dblclick click', this.onHammer);
          this.hammertime.off('panstart panmove panend pancancel', this.onDrag);
          // $containter.removeEventListener('touchstart', this.onTouch);
          // $containter.removeEventListener('click', this.onHover);
          $containter.removeEventListener('mousedown', this.onHover);
          $containter.removeEventListener('mouseup', this.onHover);
          // $containter.removeEventListener('dblclick', this.onHover);
          $containter.removeEventListener('contextmenu', this.onHover);
        }
      }
    }
  }, {
    key: "interactionEvent",
    value: function interactionEvent(target) {
      var type = target.type,
        pointerType = target.pointerType;
      var clientX;
      var clientY;
      if (pointerType === 'touch') {
        clientY = Math.floor(target.pointers[0].clientY);
        clientX = Math.floor(target.pointers[0].clientX);
      } else {
        clientY = Math.floor(target.srcEvent.y);
        clientX = Math.floor(target.srcEvent.x);
      }
      var $containter = this.mapService.getMapContainer();
      if ($containter) {
        var _$containter$getBound2 = $containter.getBoundingClientRect(),
          top = _$containter$getBound2.top,
          left = _$containter$getBound2.left;
        clientX -= left;
        clientY -= top;
      }
      var lngLat = this.mapService.containerToLngLat([clientX, clientY]);
      return {
        x: clientX,
        y: clientY,
        lngLat: lngLat,
        type: type,
        target: target.srcEvent
      };
    }
  }, {
    key: "isDoubleTap",
    value: function isDoubleTap(x, y, lngLat) {
      var _this2 = this;
      var nowTime = new Date().getTime();
      var type = 'click';
      if (nowTime - this.lastClickTime < 400 && Math.abs(this.lastClickXY[0] - x) < 10 && Math.abs(this.lastClickXY[1] - y) < 10) {
        this.lastClickTime = 0;
        this.lastClickXY = [-1, -1];
        if (this.clickTimer) {
          clearTimeout(this.clickTimer);
        }
        type = 'dblclick';
        this.emit(_IInteractionService.InteractionEvent.Hover, {
          x: x,
          y: y,
          lngLat: lngLat,
          type: type
        });
      } else {
        this.lastClickTime = nowTime;
        this.lastClickXY = [x, y];
        // @ts-ignore
        this.clickTimer = setTimeout(function () {
          type = 'click';
          _this2.emit(_IInteractionService.InteractionEvent.Hover, {
            x: x,
            y: y,
            lngLat: lngLat,
            type: type
          });
        }, 400);
      }
    }
  }]);
  return InteractionService;
}(_eventemitter.default), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "mapService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = InteractionService;