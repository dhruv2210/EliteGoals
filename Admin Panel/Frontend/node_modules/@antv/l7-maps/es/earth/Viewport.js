import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { mat4, vec3 } from 'gl-matrix';
var Viewport = /*#__PURE__*/function () {
  function Viewport() {
    _classCallCheck(this, Viewport);
    _defineProperty(this, "xzReg", -Math.PI * 0.6);
    _defineProperty(this, "yReg", Math.PI * 0.2);
    _defineProperty(this, "earthCameraRadius", 200);
    _defineProperty(this, "earthCameraZoom", 1);
    _defineProperty(this, "cameraPosition", vec3.create());
    _defineProperty(this, "projectionMatrix", mat4.create());
    _defineProperty(this, "modelMatrix", mat4.create());
    _defineProperty(this, "viewMatrix", mat4.create());
    _defineProperty(this, "viewProjectionMatrix", mat4.create());
    _defineProperty(this, "ViewProjectionMatrixUncentered", mat4.create());
    _defineProperty(this, "viewUncenteredMatrix", mat4.create());
  }
  _createClass(Viewport, [{
    key: "syncWithMapCamera",
    value: function syncWithMapCamera(mapCamera) {
      var _mapCamera$viewportHe = mapCamera.viewportHeight,
        viewportHeight = _mapCamera$viewportHe === void 0 ? 1 : _mapCamera$viewportHe,
        _mapCamera$viewportWi = mapCamera.viewportWidth,
        viewportWidth = _mapCamera$viewportWi === void 0 ? 1 : _mapCamera$viewportWi;
      var aspect = viewportWidth / viewportHeight;
      var near = 0.1;
      var far = 10000;
      var fov = 20;

      // 计算透视投影矩阵 projectionMatrix
      mat4.perspective(this.projectionMatrix, fov, aspect, near, far);
      // 计算相机矩阵 viewMatrix
      var x = this.earthCameraRadius * Math.cos(this.xzReg);
      var z = this.earthCameraRadius * Math.sin(this.xzReg);
      var y = this.earthCameraRadius * Math.sin(this.yReg);
      this.cameraPosition = vec3.fromValues(x, y, z);
      vec3.normalize(this.cameraPosition, this.cameraPosition);
      vec3.multiply(this.cameraPosition, this.cameraPosition, vec3.fromValues(this.earthCameraRadius, this.earthCameraRadius, this.earthCameraRadius));
      vec3.scale(this.cameraPosition, this.cameraPosition, this.earthCameraZoom);
      var crossY = vec3.create();
      vec3.cross(crossY, this.cameraPosition, vec3.fromValues(0, 1, 0));
      var up = vec3.fromValues(0, 1, 0);
      vec3.cross(up, crossY, this.cameraPosition);
      var target = vec3.fromValues(0, 0, 0);
      mat4.lookAt(this.viewMatrix, this.cameraPosition, target, up);
      this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);
      mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);
      mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);
    }

    /**
     * 旋转方法 Y 轴
     * @param r
     */
  }, {
    key: "rotateY",
    value: function rotateY(r) {
      this.xzReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);
    }

    /**
     * 旋转方法 X 轴
     * @param r
     */
  }, {
    key: "rotateX",
    value: function rotateX(r) {
      this.yReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);
    }

    /**
     * 缩放方法
     * @param z
     */
  }, {
    key: "scaleZoom",
    value: function scaleZoom(z) {
      this.earthCameraZoom += z;
      this.earthCameraZoom = Math.max(this.earthCameraZoom, 0.6);
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return 4;
    }
  }, {
    key: "getZoomScale",
    value: function getZoomScale() {
      return Math.pow(2, this.getZoom());
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return [0, 0];
    }
  }, {
    key: "getProjectionMatrix",
    value: function getProjectionMatrix() {
      return this.projectionMatrix;
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix() {
      return this.modelMatrix;
    }
  }, {
    key: "getViewMatrix",
    value: function getViewMatrix() {
      return this.viewMatrix;
    }
  }, {
    key: "getViewMatrixUncentered",
    value: function getViewMatrixUncentered() {
      return this.viewMatrix;
    }
  }, {
    key: "getViewProjectionMatrix",
    value: function getViewProjectionMatrix() {
      return this.viewProjectionMatrix;
    }
  }, {
    key: "getViewProjectionMatrixUncentered",
    value: function getViewProjectionMatrixUncentered() {
      return this.viewProjectionMatrix;
    }
  }, {
    key: "getFocalDistance",
    value: function getFocalDistance() {
      return 1;
    }
  }, {
    key: "projectFlat",
    value: function projectFlat(lngLat, scale) {
      return this.viewport.projectFlat(lngLat, scale);
    }
  }]);
  return Viewport;
}();
export { Viewport as default };