import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
if (!window) {
  throw Error('AMap JSAPI can only be used in Browser.');
}
var LoadStatus = /*#__PURE__*/function (LoadStatus) {
  LoadStatus["notload"] = "notload";
  LoadStatus["loading"] = "loading";
  LoadStatus["loaded"] = "loaded";
  LoadStatus["failed"] = "failed";
  return LoadStatus;
}(LoadStatus || {});
var config = {
  key: '',
  AMap: {
    version: '2.0',
    plugins: []
  }
};
var Status = {
  AMap: LoadStatus.notload
};
var Callback = {
  AMap: []
};
var onloadCBKs = [];
// @ts-ignore
var onload = function onload(callback) {
  if (typeof callback === 'function') {
    if (Status.AMap === LoadStatus.loaded) {
      callback(window.AMap);
      return;
    }
    onloadCBKs.push(callback);
  }
};
var load = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            if (Status.AMap === LoadStatus.failed) {
              reject('');
            } else if (Status.AMap === LoadStatus.notload) {
              // 初次加载
              var key = options.key,
                version = options.version,
                plugins = options.plugins;
              if (!key) {
                reject('请填写key');
                return;
              }
              if (window.AMap && location.host !== 'lbs.amap.com') {
                reject('禁止多种API加载方式混用');
              }
              config.key = key;
              config.AMap.version = version || config.AMap.version;
              config.AMap.plugins = plugins || config.AMap.plugins;
              Status.AMap = LoadStatus.loading;
              var parentNode = document.body || document.head;
              // @ts-ignore
              window._onAPILoaded = function (err) {
                // @ts-ignore
                if (err) {
                  Status.AMap = LoadStatus.failed;
                  reject(err);
                } else {
                  Status.AMap = LoadStatus.loaded;
                  resolve(null);
                }
              };
              var script = document.createElement('script');
              script.type = 'text/javascript';
              script.async = false;
              script.src = 'https://webapi.amap.com/maps?callback=_onAPILoaded&v=' + config.AMap.version + '&key=' + key + '&plugin=' + config.AMap.plugins.join(',');
              script.onerror = function (e) {
                Status.AMap = LoadStatus.failed;
                reject(e);
              };
              parentNode.appendChild(script);
            } else if (Status.AMap === LoadStatus.loaded) {
              // deal multi load
              if (options.key && options.key !== config.key) {
                reject('多个不一致的 key');
                return;
              }
              if (options.version && options.version !== config.AMap.version) {
                reject('不允许多个版本 JSAPI 混用');
                return;
              }
              var newPlugins = [];
              if (options.plugins) {
                // @ts-ignore
                options.plugins.forEach(function (p) {
                  if (config.AMap.plugins.indexOf(p) === -1) {
                    newPlugins.push(p);
                  }
                });
              }
              if (newPlugins.length) {
                window.AMap.plugin(newPlugins, function () {
                  resolve(window.AMap);
                });
              }
            } else {
              // loading
              if (options.key && options.key !== config.key) {
                reject('多个不一致的 key');
                return;
              }
              if (options.version && options.version !== config.AMap.version) {
                reject('不允许多个版本 JSAPI 混用');
                return;
              }
              var _newPlugins = [];
              if (options.plugins) {
                // @ts-ignore
                options.plugins.forEach(function (p) {
                  if (config.AMap.plugins.indexOf(p) === -1) {
                    _newPlugins.push(p);
                  }
                });
              }
              onload(function () {
                if (_newPlugins.length) {
                  window.AMap.plugin(_newPlugins, function () {
                    resolve(window.AMap);
                  });
                }
              });
            }
          }));
        case 1:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function load(_x) {
    return _ref.apply(this, arguments);
  };
}();
function reset() {
  // @ts-ignore
  delete window.AMap;
  config = {
    key: '',
    AMap: {
      version: '1.4.15',
      plugins: []
    }
  };
  Status = {
    AMap: LoadStatus.notload
  };
  Callback = {
    AMap: []
  };
}
export default {
  load: load,
  reset: reset
};