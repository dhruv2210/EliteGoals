export type IPadding = number | [number, number, number, number] | {
    top?: number;
    bottom?: number;
    right?: number;
    left?: number;
};
export declare function toPaddingOptions(padding?: IPadding): {
    top: number;
    right: number;
    bottom: number;
    left: number;
} | {
    0: number;
    1: number;
    2: number;
    3: number;
    length: 4;
    toString(): string;
    toLocaleString(): string;
    pop(): number | undefined;
    push(...items: number[]): number;
    concat(...items: ConcatArray<number>[]): number[];
    concat(...items: (number | ConcatArray<number>)[]): number[];
    join(separator?: string | undefined): string;
    reverse(): number[];
    shift(): number | undefined;
    slice(start?: number | undefined, end?: number | undefined): number[];
    sort(compareFn?: ((a: number, b: number) => number) | undefined): [number, number, number, number];
    splice(start: number, deleteCount?: number | undefined): number[];
    splice(start: number, deleteCount: number, ...items: number[]): number[];
    unshift(...items: number[]): number;
    indexOf(searchElement: number, fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;
    every<S extends number>(predicate: (value: number, index: number, array: number[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any): U[];
    filter<S_1 extends number>(predicate: (value: number, index: number, array: number[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number[];
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number;
    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number;
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: number, currentIndex: number, array: number[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number;
    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number;
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: number, currentIndex: number, array: number[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends number>(predicate: (this: void, value: number, index: number, obj: number[]) => value is S_2, thisArg?: any): S_2 | undefined;
    find(predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any): number | undefined;
    findIndex(predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any): number;
    fill(value: number, start?: number | undefined, end?: number | undefined): [number, number, number, number];
    copyWithin(target: number, start: number, end?: number | undefined): [number, number, number, number];
    entries(): IterableIterator<[number, number]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<number>;
    includes(searchElement: number, fromIndex?: number | undefined): boolean;
    [Symbol.iterator](): IterableIterator<number>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    top: number;
    right: number;
    bottom: number;
    left: number;
};
