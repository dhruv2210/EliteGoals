/// <reference types="amap-js-api" />
import { Bounds, ICameraOptions, ICoordinateSystemService, IGlobalConfigService, ILngLat, IMapCamera, IMapConfig, IMapService, IMercator, IPoint, IStatusOptions, IViewport, MapStyleConfig, MapStyleName } from '@antv/l7-core';
import 'reflect-metadata';
import { IAMapEvent, IAMapInstance } from '../../../typings/index';
import { ISimpleMapCoord } from '../simpleMapCoord';
import './logo.css';
/**
 * AMapService
 */
export default abstract class AMapBaseService implements IMapService<AMap.Map & IAMapInstance> {
    version: string;
    simpleMapCoord: ISimpleMapCoord;
    /**
     * 原始地图实例
     */
    map: AMap.Map & IAMapInstance;
    bgColor: string;
    protected readonly configService: IGlobalConfigService;
    protected readonly config: Partial<IMapConfig>;
    protected readonly coordinateSystemService: ICoordinateSystemService;
    protected eventEmitter: any;
    protected markerContainer: HTMLElement;
    protected $mapContainer: HTMLElement | null;
    protected viewport: IViewport;
    protected cameraChangedCallback: (viewport: IViewport) => void;
    setBgColor(color: string): void;
    addMarkerContainer(): void;
    getMarkerContainer(): HTMLElement;
    on(type: string, handler: (...args: any[]) => void): void;
    off(type: string, handler: (...args: any[]) => void): void;
    getContainer(): HTMLElement | null;
    getMapCanvasContainer(): HTMLElement;
    getSize(): [number, number];
    getType(): string;
    getZoom(): number;
    setZoom(zoom: number): void;
    getCenter(options?: ICameraOptions): ILngLat;
    setCenter(lnglat: [number, number], options?: ICameraOptions): void;
    getPitch(): number;
    getRotation(): number;
    getBounds(): Bounds;
    getMinZoom(): number;
    getMaxZoom(): number;
    setRotation(rotation: number): void;
    setPitch(pitch: number): void;
    zoomIn(): void;
    zoomOut(): void;
    panTo(p: [number, number]): void;
    panBy(x?: number, y?: number): void;
    fitBounds(extent: Bounds): void;
    setZoomAndCenter(zoom: number, center: [number, number]): void;
    setMapStyle(style: MapStyleName): void;
    setMapStatus(option: Partial<IStatusOptions>): void;
    getMapStyleConfig(): MapStyleConfig;
    getMapStyleValue(name: MapStyleName): any;
    getMapStyle(): string;
    pixelToLngLat(pixel: [number, number]): ILngLat;
    lngLatToPixel(lnglat: [number, number]): IPoint;
    containerToLngLat(pixel: [number, number]): ILngLat;
    lngLatToContainer(lnglat: [number, number]): IPoint;
    lngLatToCoord(lnglat: [number, number]): any;
    lngLatToMercator(lnglat: [number, number], altitude: number): IMercator;
    getModelMatrix(lnglat: [number, number], altitude: number, rotate: [number, number, number], scale?: [number, number, number]): number[];
    init(): Promise<void>;
    meterToCoord(center: [number, number], outer: [number, number]): number;
    updateView(viewOption: Partial<IMapCamera>): void;
    getOverlayContainer(): HTMLElement | undefined;
    exportMap(type: 'jpg' | 'png'): string;
    emit(name: string, ...args: any[]): void;
    once(name: string, ...args: any[]): void;
    destroy(): void;
    getMapContainer(): HTMLElement | null;
    onCameraChanged(callback: (viewport: IViewport) => void): void;
    protected handleAfterMapChange(): void;
    protected handleCameraChanged: (e: IAMapEvent) => void;
    protected creatMapContainer(id: string | HTMLDivElement): HTMLDivElement;
}
