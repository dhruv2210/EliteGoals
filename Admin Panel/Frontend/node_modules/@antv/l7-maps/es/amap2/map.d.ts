import { Bounds, IMapCamera, IPoint, IViewport } from '@antv/l7-core';
import 'reflect-metadata';
import AMapBaseService from '../utils/amap/AMapBaseService';
import './logo.css';
import Viewport from './Viewport';
/**
 * AMapService
 */
export default class AMapService extends AMapBaseService {
    version: string;
    /**
     * 用于 customCooords 数据的计算
     */
    sceneCenter: [number, number];
    sceneCenterMKT: [number, number];
    protected viewport: Viewport;
    /**
     *   设置数据的绘制中心 高德2.0
     */
    setCustomCoordCenter(center: [number, number]): void;
    getCustomCoordCenter(): [number, number];
    lngLatToCoordByLayer(lnglat: number[], layerCenter: [number, number]): [number, number];
    lngLatToCoordsByLayer(lnglatArray: number[][][] | number[][], layerCenter: [number, number]): number[][][] | number[][];
    setCoordCenter(center: [number, number]): void;
    /**
     * 根据数据的绘制中心转换经纬度数据 高德2.0
     */
    lngLatToCoord(lnglat: [number, number]): [number, number];
    /**
     * 转化线、面类型的点位数据
     */
    lngLatToCoords(lnglatArray: number[][][] | number[][]): number[][][] | number[][];
    addMarkerContainer(): void;
    updateView(_viewOption: Partial<IMapCamera>): void;
    getOverlayContainer(): HTMLElement | undefined;
    getType(): string;
    getBounds(): Bounds;
    getMinZoom(): number;
    getMaxZoom(): number;
    lngLatToContainer(lnglat: [number, number]): IPoint;
    lngLatToPixel(lnglat: [number, number]): IPoint;
    getModelMatrix(lnglat: [number, number], altitude: number, rotate: [number, number, number], scale?: [number, number, number]): number[];
    init(): Promise<void>;
    getMapContainer(): HTMLElement | null;
    onCameraChanged(callback: (viewport: IViewport) => void): void;
    private initViewPort;
    private _sub;
    /**
     *
     * @param e
     */
    private handleViewChanged;
}
