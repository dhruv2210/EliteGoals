import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _construct from "@babel/runtime/helpers/esm/construct";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
var _excluded = ["id", "style", "minZoom", "maxZoom", "token", "mapInstance", "plugin"];
var _dec, _class;
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * AMapService
 */
import { CoordinateSystem } from '@antv/l7-core';
import { mat4, vec3 } from 'gl-matrix';
import { injectable } from 'inversify';
import 'reflect-metadata';
import AMapBaseService from "../utils/amap/AMapBaseService";
import AMapLoader from "../utils/amaploader";
import { Version } from "../version";
import Viewport from "./Viewport";
// @ts-ignore
window.forceWebGL = true;
var AMAP_API_KEY = '15cd8a57710d40c9b7c0e3cc120f1200';
var AMAP_VERSION = '1.4.15';

/**
 * 高德地图脚本是否加载完毕
 */
var amapLoaded = false;
/**
 * 高德地图脚本加载成功等待队列，成功之后依次触发
 */
var pendingResolveQueue = [];
var LNGLAT_OFFSET_ZOOM_THRESHOLD = 12; // 暂时关闭 fix 统一不同坐标系，不同底图的高度位置

/**
 * AMapService
 */
var AMapService = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_AMapBaseService) {
  _inherits(AMapService, _AMapBaseService);
  var _super = _createSuper(AMapService);
  function AMapService() {
    var _this;
    _classCallCheck(this, AMapService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "version", Version['GAODE1.x']);
    _defineProperty(_assertThisInitialized(_this), "handleCameraChanged", function (e) {
      var _e$camera = e.camera,
        fov = _e$camera.fov,
        near = _e$camera.near,
        far = _e$camera.far,
        height = _e$camera.height,
        pitch = _e$camera.pitch,
        rotation = _e$camera.rotation,
        aspect = _e$camera.aspect,
        position = _e$camera.position;
      var _this$getCenter = _this.getCenter(),
        lng = _this$getCenter.lng,
        lat = _this$getCenter.lat;
      // Tip: 触发地图变化事件
      _this.emit('mapchange');
      if (_this.cameraChangedCallback) {
        _this.viewport.syncWithMapCamera({
          aspect: aspect,
          // AMap 定义 rotation 为顺时针方向，而 Mapbox 为逆时针
          // @see https://docs.mapbox.com/mapbox-gl-js/api/#map#getbearing
          bearing: 360 - rotation,
          far: far,
          fov: fov,
          cameraHeight: height,
          near: near,
          pitch: pitch,
          // AMap 定义的缩放等级 与 Mapbox 相差 1
          zoom: _this.map.getZoom() - 1,
          center: [lng, lat],
          offsetOrigin: [position.x, position.y]
        });
        var _this$config$offsetZo = _this.config.offsetZoom,
          offsetZoom = _this$config$offsetZo === void 0 ? LNGLAT_OFFSET_ZOOM_THRESHOLD : _this$config$offsetZo;
        // console.log('this.viewport', this.viewport)
        // set coordinate system
        if (_this.viewport.getZoom() > offsetZoom) {
          _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.P20_OFFSET);
        } else {
          _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.P20);
        }
        _this.cameraChangedCallback(_this.viewport);
      }
    });
    return _this;
  }
  _createClass(AMapService, [{
    key: "getModelMatrix",
    value: function getModelMatrix(lnglat, altitude, rotate) {
      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];
      var flat = this.viewport.projectFlat(lnglat);
      // @ts-ignore
      var modelMatrix = mat4.create();
      mat4.translate(modelMatrix, modelMatrix, vec3.fromValues(flat[0], flat[1], altitude));
      mat4.scale(modelMatrix, modelMatrix, vec3.fromValues(scale[0], scale[1], scale[2]));
      mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
      mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
      mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
      return modelMatrix;
    }
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this2 = this;
        var _this$config, id, _this$config$style, style, _this$config$minZoom, minZoom, _this$config$maxZoom, maxZoom, _this$config$token, token, mapInstance, _this$config$plugin, plugin, rest;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this$config = this.config, id = _this$config.id, _this$config$style = _this$config.style, style = _this$config$style === void 0 ? 'light' : _this$config$style, _this$config$minZoom = _this$config.minZoom, minZoom = _this$config$minZoom === void 0 ? 0 : _this$config$minZoom, _this$config$maxZoom = _this$config.maxZoom, maxZoom = _this$config$maxZoom === void 0 ? 18 : _this$config$maxZoom, _this$config$token = _this$config.token, token = _this$config$token === void 0 ? AMAP_API_KEY : _this$config$token, mapInstance = _this$config.mapInstance, _this$config$plugin = _this$config.plugin, plugin = _this$config$plugin === void 0 ? [] : _this$config$plugin, rest = _objectWithoutProperties(_this$config, _excluded); // 高德地图创建独立的container；
              // tslint:disable-next-line:typedef
              _context.next = 3;
              return new Promise(function (resolve) {
                var resolveMap = function resolveMap() {
                  if (mapInstance) {
                    _this2.map = mapInstance;
                    _this2.$mapContainer = _this2.map.getContainer();
                    setTimeout(function () {
                      _this2.map.on('camerachange', _this2.handleCameraChanged);
                      resolve();
                    }, 30);
                  } else {
                    _this2.$mapContainer = _this2.creatMapContainer(id);
                    var mapConstructorOptions = _objectSpread({
                      mapStyle: _this2.getMapStyleValue(style),
                      zooms: [minZoom, maxZoom],
                      viewMode: '3D'
                    }, rest);
                    if (mapConstructorOptions.zoom) {
                      // 高德地图在相同大小下需要比 MapBox 多一个 zoom 层级
                      mapConstructorOptions.zoom += 1;
                    }
                    // @ts-ignore
                    var map = new AMap.Map(_this2.$mapContainer, mapConstructorOptions);
                    // 监听地图相机事件
                    map.on('camerachange', _this2.handleCameraChanged);
                    // Tip: 为了兼容开启 MultiPassRender 的情况
                    // 修复 MultiPassRender 在高德地图 1.x 的情况下，缩放地图改变 zoom 时存在可视化层和底图不同步的现象
                    map.on('camerachange', function () {
                      setTimeout(function () {
                        return _this2.handleAfterMapChange();
                      });
                    });

                    // @ts-ignore
                    _this2.map = map;
                    setTimeout(function () {
                      resolve();
                    }, 10);
                  }
                };
                if (!amapLoaded && !mapInstance) {
                  if (token === AMAP_API_KEY) {
                    console.warn(_this2.configService.getSceneWarninfo('MapToken'));
                  }
                  amapLoaded = true;
                  plugin.push('Map3D');
                  AMapLoader.load({
                    key: token,
                    // 申请好的Web端开发者Key，首次调用 load 时必填
                    version: AMAP_VERSION,
                    // 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15
                    plugins: plugin // 需要使用的的插件列表，如比例尺'AMap.Scale'等
                  }).then(function (AMap) {
                    resolveMap();
                    if (pendingResolveQueue.length) {
                      pendingResolveQueue.forEach(function (r) {
                        return r();
                      });
                      pendingResolveQueue = [];
                    }
                  }).catch(function (e) {
                    throw new Error(e);
                  });
                } else {
                  if (amapLoaded && window.AMap || mapInstance) {
                    resolveMap();
                  } else {
                    pendingResolveQueue.push(resolveMap);
                  }
                }
              });
            case 3:
              this.viewport = new Viewport();
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "meterToCoord",
    value: function meterToCoord(center, outer) {
      // 统一根据经纬度来转化
      // Tip: 实际米距离 unit meter
      var meterDis = AMap.GeometryUtil.distance(_construct(AMap.LngLat, _toConsumableArray(center)), _construct(AMap.LngLat, _toConsumableArray(outer)));

      // Tip: 三维世界坐标距离
      var _this$lngLatToCoord = this.lngLatToCoord(center),
        _this$lngLatToCoord2 = _slicedToArray(_this$lngLatToCoord, 2),
        x1 = _this$lngLatToCoord2[0],
        y1 = _this$lngLatToCoord2[1];
      var _this$lngLatToCoord3 = this.lngLatToCoord(outer),
        _this$lngLatToCoord4 = _slicedToArray(_this$lngLatToCoord3, 2),
        x2 = _this$lngLatToCoord4[0],
        y2 = _this$lngLatToCoord4[1];
      var coordDis = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
      return coordDis / meterDis;
    }

    // tslint:disable-next-line:no-empty
  }, {
    key: "updateView",
    value: function updateView(viewOption) {}
  }, {
    key: "getOverlayContainer",
    value: function getOverlayContainer() {
      return undefined;
    }
  }, {
    key: "exportMap",
    value: function exportMap(type) {
      var _this$getContainer;
      var renderCanvas = (_this$getContainer = this.getContainer()) === null || _this$getContainer === void 0 ? void 0 : _this$getContainer.getElementsByClassName('amap-layer')[0];
      var layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
      return layersPng;
    }
  }, {
    key: "onCameraChanged",
    value: function onCameraChanged(callback) {
      this.cameraChangedCallback = callback;
    }
  }]);
  return AMapService;
}(AMapBaseService)) || _class);
export { AMapService as default };