"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _glMatrix = require("gl-matrix");
var Viewport = /*#__PURE__*/function () {
  function Viewport() {
    (0, _classCallCheck2.default)(this, Viewport);
    (0, _defineProperty2.default)(this, "xzReg", -Math.PI * 0.6);
    (0, _defineProperty2.default)(this, "yReg", Math.PI * 0.2);
    (0, _defineProperty2.default)(this, "earthCameraRadius", 200);
    (0, _defineProperty2.default)(this, "earthCameraZoom", 1);
    (0, _defineProperty2.default)(this, "cameraPosition", _glMatrix.vec3.create());
    (0, _defineProperty2.default)(this, "projectionMatrix", _glMatrix.mat4.create());
    (0, _defineProperty2.default)(this, "modelMatrix", _glMatrix.mat4.create());
    (0, _defineProperty2.default)(this, "viewMatrix", _glMatrix.mat4.create());
    (0, _defineProperty2.default)(this, "viewProjectionMatrix", _glMatrix.mat4.create());
    (0, _defineProperty2.default)(this, "ViewProjectionMatrixUncentered", _glMatrix.mat4.create());
    (0, _defineProperty2.default)(this, "viewUncenteredMatrix", _glMatrix.mat4.create());
  }
  (0, _createClass2.default)(Viewport, [{
    key: "syncWithMapCamera",
    value: function syncWithMapCamera(mapCamera) {
      var _mapCamera$viewportHe = mapCamera.viewportHeight,
        viewportHeight = _mapCamera$viewportHe === void 0 ? 1 : _mapCamera$viewportHe,
        _mapCamera$viewportWi = mapCamera.viewportWidth,
        viewportWidth = _mapCamera$viewportWi === void 0 ? 1 : _mapCamera$viewportWi;
      var aspect = viewportWidth / viewportHeight;
      var near = 0.1;
      var far = 10000;
      var fov = 20;

      // 计算透视投影矩阵 projectionMatrix
      _glMatrix.mat4.perspective(this.projectionMatrix, fov, aspect, near, far);
      // 计算相机矩阵 viewMatrix
      var x = this.earthCameraRadius * Math.cos(this.xzReg);
      var z = this.earthCameraRadius * Math.sin(this.xzReg);
      var y = this.earthCameraRadius * Math.sin(this.yReg);
      this.cameraPosition = _glMatrix.vec3.fromValues(x, y, z);
      _glMatrix.vec3.normalize(this.cameraPosition, this.cameraPosition);
      _glMatrix.vec3.multiply(this.cameraPosition, this.cameraPosition, _glMatrix.vec3.fromValues(this.earthCameraRadius, this.earthCameraRadius, this.earthCameraRadius));
      _glMatrix.vec3.scale(this.cameraPosition, this.cameraPosition, this.earthCameraZoom);
      var crossY = _glMatrix.vec3.create();
      _glMatrix.vec3.cross(crossY, this.cameraPosition, _glMatrix.vec3.fromValues(0, 1, 0));
      var up = _glMatrix.vec3.fromValues(0, 1, 0);
      _glMatrix.vec3.cross(up, crossY, this.cameraPosition);
      var target = _glMatrix.vec3.fromValues(0, 0, 0);
      _glMatrix.mat4.lookAt(this.viewMatrix, this.cameraPosition, target, up);
      this.viewUncenteredMatrix = _glMatrix.mat4.clone(this.viewMatrix);
      _glMatrix.mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);
      _glMatrix.mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);
    }

    /**
     * 旋转方法 Y 轴
     * @param r
     */
  }, {
    key: "rotateY",
    value: function rotateY(r) {
      this.xzReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);
    }

    /**
     * 旋转方法 X 轴
     * @param r
     */
  }, {
    key: "rotateX",
    value: function rotateX(r) {
      this.yReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);
    }

    /**
     * 缩放方法
     * @param z
     */
  }, {
    key: "scaleZoom",
    value: function scaleZoom(z) {
      this.earthCameraZoom += z;
      this.earthCameraZoom = Math.max(this.earthCameraZoom, 0.6);
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return 4;
    }
  }, {
    key: "getZoomScale",
    value: function getZoomScale() {
      return Math.pow(2, this.getZoom());
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return [0, 0];
    }
  }, {
    key: "getProjectionMatrix",
    value: function getProjectionMatrix() {
      return this.projectionMatrix;
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix() {
      return this.modelMatrix;
    }
  }, {
    key: "getViewMatrix",
    value: function getViewMatrix() {
      return this.viewMatrix;
    }
  }, {
    key: "getViewMatrixUncentered",
    value: function getViewMatrixUncentered() {
      return this.viewMatrix;
    }
  }, {
    key: "getViewProjectionMatrix",
    value: function getViewProjectionMatrix() {
      return this.viewProjectionMatrix;
    }
  }, {
    key: "getViewProjectionMatrixUncentered",
    value: function getViewProjectionMatrixUncentered() {
      return this.viewProjectionMatrix;
    }
  }, {
    key: "getFocalDistance",
    value: function getFocalDistance() {
      return 1;
    }
  }, {
    key: "projectFlat",
    value: function projectFlat(lngLat, scale) {
      return this.viewport.projectFlat(lngLat, scale);
    }
  }]);
  return Viewport;
}();
exports.default = Viewport;