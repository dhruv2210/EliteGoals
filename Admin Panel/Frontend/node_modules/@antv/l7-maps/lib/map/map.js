"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Map = require("@antv/l7-map");
var _l7Utils = require("@antv/l7-utils");
var _glMatrix = require("gl-matrix");
var _inversify = require("inversify");
require("reflect-metadata");
var _BaseMapService2 = _interopRequireDefault(require("../utils/BaseMapService"));
var _Viewport = _interopRequireDefault(require("../utils/Viewport"));
var _version = require("../version");
var _excluded = ["id", "style", "rotation", "mapInstance", "version", "mapSize", "interactive"],
  _excluded2 = ["id", "style", "rotation", "mapInstance", "canvas", "hasBaseMap"];
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;
/**
 * AMapService
 */
var DefaultMapService = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function (_BaseMapService) {
  (0, _inherits2.default)(DefaultMapService, _BaseMapService);
  var _super = _createSuper(DefaultMapService);
  function DefaultMapService() {
    var _this;
    (0, _classCallCheck2.default)(this, DefaultMapService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "version", _version.Version.DEFUALT);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMiniCameraChanged", function (lng, lat, zoom, bearing, pitch) {
      var _this$config$offsetCo = _this.config.offsetCoordinate,
        offsetCoordinate = _this$config$offsetCo === void 0 ? true : _this$config$offsetCo;

      // resync
      _this.viewport.syncWithMapCamera({
        // bearing: this.map.getBearing(),
        bearing: bearing,
        center: [lng, lat],
        viewportHeight: _this.map.transform.height,
        // pitch: this.map.getPitch(),
        pitch: pitch,
        viewportWidth: _this.map.transform.width,
        zoom: zoom,
        // mapbox 中固定相机高度为 viewport 高度的 1.5 倍
        cameraHeight: 0
      });
      // set coordinate system
      if (_this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {
        _this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT_OFFSET);
      } else {
        _this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT);
      }
      _this.cameraChangedCallback(_this.viewport);
    });
    return _this;
  }
  (0, _createClass2.default)(DefaultMapService, [{
    key: "lngLatToCoord",
    value:
    /**
     * 将经纬度转成墨卡托坐标
     * @param lnglat
     * @returns
     */
    function lngLatToCoord(lnglat) {
      var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        x: 0,
        y: 0,
        z: 0
      };
      // @ts-ignore
      var _this$lngLatToMercato = this.lngLatToMercator(lnglat, 0),
        x = _this$lngLatToMercato.x,
        y = _this$lngLatToMercato.y;
      return [x - origin.x, y - origin.y];
    }
  }, {
    key: "lngLatToMercator",
    value: function lngLatToMercator(lnglat, altitude) {
      var _MercatorCoordinate$f = _l7Map.MercatorCoordinate.fromLngLat(lnglat, altitude),
        _MercatorCoordinate$f2 = _MercatorCoordinate$f.x,
        x = _MercatorCoordinate$f2 === void 0 ? 0 : _MercatorCoordinate$f2,
        _MercatorCoordinate$f3 = _MercatorCoordinate$f.y,
        y = _MercatorCoordinate$f3 === void 0 ? 0 : _MercatorCoordinate$f3,
        _MercatorCoordinate$f4 = _MercatorCoordinate$f.z,
        z = _MercatorCoordinate$f4 === void 0 ? 0 : _MercatorCoordinate$f4;
      return {
        x: x,
        y: y,
        z: z
      };
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix(lnglat, altitude, rotate) {
      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];
      var origin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        x: 0,
        y: 0,
        z: 0
      };
      var modelAsMercatorCoordinate = _l7Map.MercatorCoordinate.fromLngLat(lnglat, altitude);
      // @ts-ignore
      var meters = modelAsMercatorCoordinate.meterInMercatorCoordinateUnits();
      var modelMatrix = _glMatrix.mat4.create();
      _glMatrix.mat4.translate(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(modelAsMercatorCoordinate.x - origin.x, modelAsMercatorCoordinate.y - origin.y, modelAsMercatorCoordinate.z || 0 - origin.z));
      _glMatrix.mat4.scale(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(meters * scale[0], -meters * scale[1], meters * scale[2]));
      _glMatrix.mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
      _glMatrix.mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
      _glMatrix.mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
      return modelMatrix;
    }
  }, {
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _this2 = this;
        var _this$config, _this$config$id, id, _this$config$style, style, _this$config$rotation, rotation, mapInstance, _this$config$version, version, _this$config$mapSize, mapSize, _this$config$interact, interactive, rest;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this$config = this.config, _this$config$id = _this$config.id, id = _this$config$id === void 0 ? 'map' : _this$config$id, _this$config$style = _this$config.style, style = _this$config$style === void 0 ? 'light' : _this$config$style, _this$config$rotation = _this$config.rotation, rotation = _this$config$rotation === void 0 ? 0 : _this$config$rotation, mapInstance = _this$config.mapInstance, _this$config$version = _this$config.version, version = _this$config$version === void 0 ? 'DEFAULTMAP' : _this$config$version, _this$config$mapSize = _this$config.mapSize, mapSize = _this$config$mapSize === void 0 ? 10000 : _this$config$mapSize, _this$config$interact = _this$config.interactive, interactive = _this$config$interact === void 0 ? true : _this$config$interact, rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded);
              this.viewport = new _Viewport.default();
              this.version = version;
              this.simpleMapCoord.setSize(mapSize);
              if (version === _version.Version.SIMPLE && rest.center) {
                rest.center = this.simpleMapCoord.unproject(rest.center);
              }
              if (mapInstance) {
                // @ts-ignore
                this.map = mapInstance;
                this.$mapContainer = this.map.getContainer();
              } else {
                this.$mapContainer = this.creatMapContainer(id);
                // @ts-ignore
                this.map = new _l7Map.Map((0, _objectSpread2.default)({
                  container: this.$mapContainer,
                  style: this.getMapStyleValue(style),
                  bearing: rotation
                }, rest));
              }
              this.map.on('load', function () {
                _this2.handleCameraChanged();
              });
              if (interactive) {
                // L7 作为第三方地图插件时关闭重绘
                this.map.on('move', this.handleCameraChanged);
              }

              // 不同于高德地图，需要手动触发首次渲染
              setTimeout(function () {
                _this2.handleCameraChanged();
              }, 100);
              this.handleCameraChanged();
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }() // 初始化小程序地图
  }, {
    key: "initMiniMap",
    value: function () {
      var _initMiniMap = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _this3 = this;
        var _this$config2, _this$config2$id, id, _this$config2$style, style, _this$config2$rotatio, rotation, mapInstance, _this$config2$canvas, canvas, _this$config2$hasBase, hasBaseMap, rest, center;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _this$config2 = this.config, _this$config2$id = _this$config2.id, id = _this$config2$id === void 0 ? 'map' : _this$config2$id, _this$config2$style = _this$config2.style, style = _this$config2$style === void 0 ? 'light' : _this$config2$style, _this$config2$rotatio = _this$config2.rotation, rotation = _this$config2$rotatio === void 0 ? 0 : _this$config2$rotatio, mapInstance = _this$config2.mapInstance, _this$config2$canvas = _this$config2.canvas, canvas = _this$config2$canvas === void 0 ? null : _this$config2$canvas, _this$config2$hasBase = _this$config2.hasBaseMap, hasBaseMap = _this$config2$hasBase === void 0 ? false : _this$config2$hasBase, rest = (0, _objectWithoutProperties2.default)(_this$config2, _excluded2);
              this.viewport = new _Viewport.default();
              this.$mapContainer = canvas;
              this.map = new _l7Map.Map((0, _objectSpread2.default)({
                container: this.$mapContainer,
                style: this.getMapStyleValue(style),
                bearing: rotation,
                // @ts-ignore
                canvas: canvas
              }, rest));
              if (!hasBaseMap) {
                // 没有地图底图的模式
                this.map.on('load', this.handleCameraChanged);
                this.map.on('move', this.handleCameraChanged);

                // 不同于高德地图，需要手动触发首次渲染
                this.handleCameraChanged();
              } else {
                // 存在地图底图的模式（ L7Mini ）
                center = this.map.getCenter(); // 不同于高德地图，需要手动触发首次渲染
                this.handleMiniCameraChanged(center.lng, center.lat, this.map.getZoom(), this.map.getBearing(), this.map.getPitch());
                _l7Utils.$window.document.addEventListener('mapCameaParams', function (event) {
                  var _event$e = event.e,
                    longitude = _event$e.longitude,
                    latitude = _event$e.latitude,
                    scale = _event$e.scale,
                    bearing = _event$e.bearing,
                    pitch = _event$e.pitch;
                  _this3.handleMiniCameraChanged(longitude, latitude, scale - 1.25, bearing, pitch);
                });
              }
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function initMiniMap() {
        return _initMiniMap.apply(this, arguments);
      }
      return initMiniMap;
    }()
  }, {
    key: "exportMap",
    value: function exportMap(type) {
      var renderCanvas = this.map.getCanvas();
      var layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
      return layersPng;
    }

    // 处理小程序中有底图模式下的相机跟新
  }]);
  return DefaultMapService;
}(_BaseMapService2.default)) || _class);
exports.default = DefaultMapService;