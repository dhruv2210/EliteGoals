"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _amapJsapiLoader = _interopRequireDefault(require("@amap/amap-jsapi-loader"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _glMatrix = require("gl-matrix");
var _inversify = require("inversify");
require("reflect-metadata");
var _AMapBaseService2 = _interopRequireDefault(require("../utils/amap/AMapBaseService"));
var _version = require("../version");
var _Viewport = _interopRequireDefault(require("./Viewport"));
var _excluded = ["id", "style", "minZoom", "maxZoom", "token", "mapInstance", "plugin", "version"];
var _dec, _class;
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function loadStyles(css, doc) {
  var isMiniAli = typeof my !== 'undefined' && !!my && typeof my.showToast === 'function' && my.isFRM !== true;
  var isWeChatMiniProgram = typeof wx !== 'undefined' && wx !== null && (typeof wx.request !== 'undefined' || typeof wx.miniProgram !== 'undefined');
  if (isMiniAli || isWeChatMiniProgram) {
    return;
  }
  if (!doc) doc = document;
  if (!doc) {
    return;
  }
  var head = doc.head || doc.getElementsByTagName('head')[0];
  if (!head) {
    head = doc.createElement('head');
    var body = doc.body || doc.getElementsByTagName('body')[0];
    if (body) {
      body.parentNode.insertBefore(head, body);
    } else {
      doc.documentElement.appendChild(head);
    }
  }
  var style = doc.createElement('style');
  style.type = 'text/css';
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(doc.createTextNode(css));
  }
  head.appendChild(style);
  return style;
}
loadStyles(".amap-logo{\n display: none !important;\n}\n");
var DEFAULTMAPCENTER = [108.92361, 34.54083];

// @ts-ignore
window.forceWebGL = true;
var AMAP_API_KEY = 'ff533602d57df6f8ab3b0fea226ae52f';
var AMAP_VERSION = '2.0';

/**
 * 高德地图脚本是否加载完毕
 */
var amapLoaded = false;
/**
 * 高德地图脚本加载成功等待队列，成功之后依次触发
 */
var pendingResolveQueue = [];

/**
 * AMapService
 */
var AMapService = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function (_AMapBaseService) {
  (0, _inherits2.default)(AMapService, _AMapBaseService);
  var _super = _createSuper(AMapService);
  function AMapService() {
    var _this;
    (0, _classCallCheck2.default)(this, AMapService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "version", _version.Version['GAODE2.x']);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleViewChanged", function (e) {
      var _this$map$customCoord = _this.map.customCoords.getCameraParams(),
        fov = _this$map$customCoord.fov,
        near = _this$map$customCoord.near,
        far = _this$map$customCoord.far,
        aspect = _this$map$customCoord.aspect,
        position = _this$map$customCoord.position,
        lookAt = _this$map$customCoord.lookAt,
        up = _this$map$customCoord.up;
      // Tip: 统一触发地图变化事件
      _this.emit('mapchange');
      // @ts-ignore
      var center = _this.map.customCoords.getCenter();
      if (_this.cameraChangedCallback) {
        // resync viewport
        _this.viewport.syncWithMapCamera({
          aspect: aspect,
          far: far,
          fov: fov,
          cameraPosition: position,
          lookAt: lookAt,
          up: up,
          near: near,
          // AMap 定义的缩放等级 与 Mapbox 相差 1
          zoom: _this.map.getZoom() - 1,
          // 与amap1.x对比相差一个级别
          center: center,
          offsetOrigin: [position[0], position[1]]

          // @ts-ignore
          // left, right, bottom, top
        });
        // set coordinate system
        _this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20_2);
        _this.cameraChangedCallback(_this.viewport);
      }
    });
    return _this;
  }
  (0, _createClass2.default)(AMapService, [{
    key: "setCustomCoordCenter",
    value:
    /**
     *   设置数据的绘制中心 高德2.0
     */
    function setCustomCoordCenter(center) {
      this.sceneCenter = center;
      this.sceneCenterMKT = _l7Utils.amap2Project.apply(void 0, (0, _toConsumableArray2.default)(center));
    }
  }, {
    key: "getCustomCoordCenter",
    value: function getCustomCoordCenter() {
      return this.sceneCenterMKT;
    }
  }, {
    key: "lngLatToCoordByLayer",
    value: function lngLatToCoordByLayer(lnglat, layerCenter) {
      var center = layerCenter || this.sceneCenter;
      var layerCenterFlat = _l7Utils.amap2Project.apply(void 0, (0, _toConsumableArray2.default)(center));
      var coord = this._sub((0, _l7Utils.amap2Project)(lnglat[0], lnglat[1]), layerCenterFlat);
      // Z 参数
      if (lnglat[2]) {
        coord.push(lnglat[2]);
      }
      return coord;
    }
  }, {
    key: "lngLatToCoordsByLayer",
    value: function lngLatToCoordsByLayer(lnglatArray, layerCenter) {
      var _this2 = this;
      // @ts-ignore
      return lnglatArray.map(function (lnglats) {
        if (typeof lnglats[0] === 'number') {
          return _this2.lngLatToCoordByLayer(lnglats, layerCenter);
        } else {
          // @ts-ignore
          return lnglats.map(function (lnglat) {
            return _this2.lngLatToCoordByLayer(lnglat, layerCenter);
          });
        }
      });
    }
  }, {
    key: "setCoordCenter",
    value: function setCoordCenter(center) {
      // @ts-ignore
      this.map.customCoords.setCenter(center || DEFAULTMAPCENTER);
      this.setCustomCoordCenter(center || DEFAULTMAPCENTER);
    }

    /**
     * 根据数据的绘制中心转换经纬度数据 高德2.0
     */
  }, {
    key: "lngLatToCoord",
    value: function lngLatToCoord(lnglat) {
      // 单点
      if (!this.sceneCenter) {
        // @ts-ignore
        this.map.customCoords.setCenter(lnglat);
        this.setCustomCoordCenter(lnglat);
      }
      return this._sub((0, _l7Utils.amap2Project)(lnglat[0], lnglat[1]), this.sceneCenterMKT);
    }

    /**
     * 转化线、面类型的点位数据
     */
  }, {
    key: "lngLatToCoords",
    value: function lngLatToCoords(lnglatArray) {
      var _this3 = this;
      // @ts-ignore
      return lnglatArray.map(function (lnglats) {
        if (typeof lnglats[0] === 'number') {
          return _this3.lngLatToCoord(lnglats);
        } else {
          // @ts-ignore
          return lnglats.map(function (lnglat) {
            return _this3.lngLatToCoord(lnglat);
          });
        }
      });
    }
  }, {
    key: "addMarkerContainer",
    value: function addMarkerContainer() {
      if (!this.map) {
        return;
      }
      var mapContainer = this.map.getContainer();
      if (mapContainer !== null) {
        var amap = mapContainer.getElementsByClassName('amap-maps')[0];
        // amap2 的 amap-maps 新增 z-index=0; 样式，让 marker 中 zIndex 失效
        amap.style.zIndex = 'auto';
        this.markerContainer = _l7Utils.DOM.create('div', 'l7-marker-container2', amap);
      }
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    // tslint:disable-next-line:variable-name no-empty
  }, {
    key: "updateView",
    value: function updateView(_viewOption) {}
  }, {
    key: "getOverlayContainer",
    value: function getOverlayContainer() {
      return undefined;
    }
  }, {
    key: "getType",
    value: function getType() {
      return 'amap2';
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      var bounds = this.map.getBounds();

      // @ts-ignore
      var NE = bounds.getNorthEast();
      // @ts-ignore
      var SW = bounds.getSouthWest();
      var center = this.getCenter();
      var maxlng = center.lng > NE.getLng() || center.lng < SW.getLng() ? 180 - NE.getLng() : NE.getLng();
      var minlng = center.lng < SW.getLng() ? SW.getLng() - 180 : SW.getLng();
      // 兼容 Mapbox，统一返回西南、东北
      return [[minlng, SW.getLat()], [maxlng, NE.getLat()]];
    }
  }, {
    key: "getMinZoom",
    value: function getMinZoom() {
      // const zooms = this.map.get('zooms') as [number, number];
      // @ts-ignore
      var zooms = this.map.getZooms();
      return zooms[0] - 1;
    }
  }, {
    key: "getMaxZoom",
    value: function getMaxZoom() {
      // const zooms = this.map.get('zooms') as [number, number];
      // @ts-ignore
      var zooms = this.map.getZooms();
      return zooms[1] - 1;
    }
  }, {
    key: "lngLatToContainer",
    value: function lngLatToContainer(lnglat) {
      var pixel = this.map.lngLatToContainer(lnglat);
      return {
        x: pixel.getX(),
        y: pixel.getY()
      };
    }
  }, {
    key: "lngLatToPixel",
    value: function lngLatToPixel(lnglat) {
      // @ts-ignore
      var p = this.map.lngLatToPixel(new AMap.LngLat(lnglat[0], lnglat[1]));
      // lngLatToPixel
      return {
        x: p.getX(),
        y: p.getY()
      };
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix(lnglat, altitude, rotate) {
      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];
      // const flat = this.viewport.projectFlat(lnglat);
      // @ts-ignore
      var flat = this.map.customCoords.lngLatToCoord(lnglat);
      // @ts-ignore
      var modelMatrix = _glMatrix.mat4.create();
      _glMatrix.mat4.translate(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(flat[0], flat[1], altitude));
      _glMatrix.mat4.scale(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(scale[0], scale[1], scale[2]));
      _glMatrix.mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
      _glMatrix.mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
      _glMatrix.mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
      return modelMatrix;
    }
  }, {
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _this$config, id, _this$config$style, style, _this$config$minZoom, minZoom, _this$config$maxZoom, maxZoom, _this$config$token, token, mapInstance, _this$config$plugin, plugin, _this$config$version, version, rest, _this$map$customCoord2, mapInitCenter, _this$map$customCoord3, mapConstructorOptions, map, _mapInitCenter;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this$config = this.config, id = _this$config.id, _this$config$style = _this$config.style, style = _this$config$style === void 0 ? 'light' : _this$config$style, _this$config$minZoom = _this$config.minZoom, minZoom = _this$config$minZoom === void 0 ? 0 : _this$config$minZoom, _this$config$maxZoom = _this$config.maxZoom, maxZoom = _this$config$maxZoom === void 0 ? 18 : _this$config$maxZoom, _this$config$token = _this$config.token, token = _this$config$token === void 0 ? AMAP_API_KEY : _this$config$token, mapInstance = _this$config.mapInstance, _this$config$plugin = _this$config.plugin, plugin = _this$config$plugin === void 0 ? [] : _this$config$plugin, _this$config$version = _this$config.version, version = _this$config$version === void 0 ? AMAP_VERSION : _this$config$version, rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded);
              this.viewport = new _Viewport.default();
              if (window.AMap || mapInstance) {
                _context.next = 6;
                break;
              }
              plugin.push('Map3D');
              // if (AMapLoader.status.AMap === 'notload') {
              _context.next = 6;
              return _amapJsapiLoader.default.load({
                key: token,
                // 申请好的Web端开发者Key，首次调用 load 时必填
                version: AMAP_VERSION,
                // 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15
                plugins: plugin // 需要使用的的插件列表，如比例尺'AMap.Scale'等
              });
            case 6:
              if (mapInstance) {
                this.map = mapInstance;
                this.$mapContainer = this.map.getContainer();

                // 在使用 map.customCoords 的时候必须使用
                mapInitCenter = this.map.getCenter(); // @ts-ignore
                (_this$map$customCoord2 = this.map.customCoords) === null || _this$map$customCoord2 === void 0 ? void 0 : _this$map$customCoord2.setCenter([
                // @ts-ignore
                mapInitCenter.lng,
                // @ts-ignore
                mapInitCenter.lat]);
                // @ts-ignore
                this.setCustomCoordCenter([mapInitCenter.lng, mapInitCenter.lat]);
                this.map.on('viewchange', this.handleViewChanged);
              } else {
                this.$mapContainer = this.creatMapContainer(id);
                mapConstructorOptions = (0, _objectSpread2.default)({
                  mapStyle: this.getMapStyleValue(style),
                  zooms: [minZoom, maxZoom],
                  viewMode: '3D'
                }, rest);
                if (mapConstructorOptions.zoom) {
                  // 高德地图在相同大小下需要比 MapBox 多一个 zoom 层级
                  mapConstructorOptions.zoom += 1;
                }
                if (token === AMAP_API_KEY) {
                  console.warn("%c".concat(this.configService.getSceneWarninfo('MapToken'), "!"), 'color: #873bf4;font-weigh:900;font-size: 16px;');
                }
                // @ts-ignore
                map = new AMap.Map(this.$mapContainer, mapConstructorOptions); // @ts-ignore
                this.map = map;
                // 在使用 map.customCoords 的时候必须使用
                _mapInitCenter = map.getCenter(); // @ts-ignore
                // @ts-ignore
                (_this$map$customCoord3 = this.map.customCoords) === null || _this$map$customCoord3 === void 0 ? void 0 : _this$map$customCoord3.setCenter([_mapInitCenter.lng, _mapInitCenter.lat]);

                // @ts-ignore
                this.setCustomCoordCenter([_mapInitCenter.lng, _mapInitCenter.lat]);
                // 监听地图相机事件
                map.on('viewchange', this.handleViewChanged);
              }
              this.initViewPort();
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "getMapContainer",
    value: function getMapContainer() {
      return this.$mapContainer;
    }
  }, {
    key: "onCameraChanged",
    value: function onCameraChanged(callback) {
      this.cameraChangedCallback = callback;
    }
  }, {
    key: "initViewPort",
    value: function initViewPort() {
      var _this$map$customCoord5;
      // @ts-ignore
      var _this$map$customCoord4 = (_this$map$customCoord5 = this.map.customCoords) === null || _this$map$customCoord5 === void 0 ? void 0 : _this$map$customCoord5.getCameraParams(),
        fov = _this$map$customCoord4.fov,
        near = _this$map$customCoord4.near,
        far = _this$map$customCoord4.far,
        aspect = _this$map$customCoord4.aspect,
        position = _this$map$customCoord4.position,
        lookAt = _this$map$customCoord4.lookAt,
        up = _this$map$customCoord4.up;
      // Tip: 统一触发地图变化事件
      this.emit('mapchange');
      // // @ts-ignore
      // console.log('this.map.customCoords.getCameraParams()', this.map.customCoords.getCameraParams())
      // const { left, right, bottom, top, near, far, position } = this.map.customCoords.getCameraParams();

      // @ts-ignore
      var center = this.map.customCoords.getCenter();
      var zoom = this.map.getZoom();
      // @ts-ignore
      if (this.cameraChangedCallback) {
        this.viewport.syncWithMapCamera({
          aspect: aspect,
          far: far,
          fov: fov,
          cameraPosition: position,
          lookAt: lookAt,
          near: near,
          up: up,
          // AMap 定义的缩放等级 与 Mapbox 相差 1
          zoom: zoom - 1,
          // 与amap1.x对比相差一个级别
          center: center,
          offsetOrigin: [position[0], position[1]]

          // @ts-ignore
          // left, right, bottom, top
        });
        // set coordinate system
        this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20_2);
        this.cameraChangedCallback(this.viewport);
      }
    }
  }, {
    key: "_sub",
    value: function _sub(a, b) {
      var r = [0, 0];
      r[0] = a[0] - b[0];
      r[1] = a[1] - b[1];
      return r;
    }

    /**
     *
     * @param e
     */
  }]);
  return AMapService;
}(_AMapBaseService2.default)) || _class);
exports.default = AMapService;