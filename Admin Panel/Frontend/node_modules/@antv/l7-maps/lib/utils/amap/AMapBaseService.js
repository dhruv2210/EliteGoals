"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _amapJsapiLoader = _interopRequireDefault(require("@amap/amap-jsapi-loader"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _glMatrix = require("gl-matrix");
var _inversify = require("inversify");
require("reflect-metadata");
var _version = require("../../version");
var _simpleMapCoord = require("../simpleMapCoord");
var _utils = require("../utils");
var _Viewport = _interopRequireDefault(require("../Viewport"));
var _theme = require("./theme");
var _excluded = ["id", "style", "minZoom", "maxZoom", "token", "mapInstance", "plugin"];
var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
function loadStyles(css, doc) {
  var isMiniAli = typeof my !== 'undefined' && !!my && typeof my.showToast === 'function' && my.isFRM !== true;
  var isWeChatMiniProgram = typeof wx !== 'undefined' && wx !== null && (typeof wx.request !== 'undefined' || typeof wx.miniProgram !== 'undefined');
  if (isMiniAli || isWeChatMiniProgram) {
    return;
  }
  if (!doc) doc = document;
  if (!doc) {
    return;
  }
  var head = doc.head || doc.getElementsByTagName('head')[0];
  if (!head) {
    head = doc.createElement('head');
    var body = doc.body || doc.getElementsByTagName('body')[0];
    if (body) {
      body.parentNode.insertBefore(head, body);
    } else {
      doc.documentElement.appendChild(head);
    }
  }
  var style = doc.createElement('style');
  style.type = 'text/css';
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(doc.createTextNode(css));
  }
  head.appendChild(style);
  return style;
}
loadStyles(".amap-logo{\n display: none !important;\n}\n");
var AMapEventMapV1 = {
  contextmenu: 'rightclick'
};
var AMapEventMapV2 = {
  contextmenu: 'rightclick',
  camerachange: 'viewchange'
};
var MapEventProxyMap = {
  'GAODE1.x': AMapEventMapV1,
  'GAODE2.x': AMapEventMapV2
};
var mapdivCount = 0;
// @ts-ignore
window.forceWebGL = true;
var AMAP_API_KEY = '15cd8a57710d40c9b7c0e3cc120f1200';
var AMAP_VERSION = '1.4.15';
/**
 * 确保多个场景只引入一个高德地图脚本
 */
var AMAP_SCRIPT_ID = 'amap-script';
/**
 * 高德地图脚本是否加载完毕
 */
var amapLoaded = false;
/**
 * 高德地图脚本加载成功等待队列，成功之后依次触发
 */
var pendingResolveQueue = [];
var LNGLAT_OFFSET_ZOOM_THRESHOLD = 12; // 暂时关闭 fix 统一不同坐标系，不同底图的高度位置

/**
 * AMapService
 */
var AMapBaseService = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.IGlobalConfigService), _dec3 = (0, _inversify.inject)(_l7Core.TYPES.MapConfig), _dec4 = (0, _inversify.inject)(_l7Core.TYPES.ICoordinateSystemService), _dec5 = (0, _inversify.inject)(_l7Core.TYPES.IEventEmitter), _dec(_class = (_class2 = /*#__PURE__*/function () {
  function AMapBaseService() {
    var _this = this;
    (0, _classCallCheck2.default)(this, AMapBaseService);
    (0, _defineProperty2.default)(this, "version", _version.Version['GAODE1.x']);
    (0, _defineProperty2.default)(this, "simpleMapCoord", new _simpleMapCoord.SimpleMapCoord());
    (0, _defineProperty2.default)(this, "bgColor", 'rgba(0, 0, 0, 0)');
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "config", _descriptor2, this);
    (0, _initializerDefineProperty2.default)(this, "coordinateSystemService", _descriptor3, this);
    (0, _initializerDefineProperty2.default)(this, "eventEmitter", _descriptor4, this);
    (0, _defineProperty2.default)(this, "handleCameraChanged", function (e) {
      var _e$camera = e.camera,
        fov = _e$camera.fov,
        near = _e$camera.near,
        far = _e$camera.far,
        height = _e$camera.height,
        pitch = _e$camera.pitch,
        rotation = _e$camera.rotation,
        aspect = _e$camera.aspect,
        position = _e$camera.position;
      var _this$getCenter = _this.getCenter(),
        lng = _this$getCenter.lng,
        lat = _this$getCenter.lat;
      // Tip: 触发地图变化事件
      _this.emit('mapchange');
      if (_this.cameraChangedCallback) {
        // resync viewport
        _this.viewport.syncWithMapCamera({
          aspect: aspect,
          // AMap 定义 rotation 为顺时针方向，而 Mapbox 为逆时针
          // @see https://docs.mapbox.com/mapbox-gl-js/api/#map#getbearing
          bearing: 360 - rotation,
          far: far,
          fov: fov,
          cameraHeight: height,
          near: near,
          pitch: pitch,
          // AMap 定义的缩放等级 与 Mapbox 相差 1
          zoom: _this.map.getZoom() - 1,
          center: [lng, lat],
          offsetOrigin: [position.x, position.y]
        });
        var _this$config$offsetZo = _this.config.offsetZoom,
          offsetZoom = _this$config$offsetZo === void 0 ? LNGLAT_OFFSET_ZOOM_THRESHOLD : _this$config$offsetZo;
        // console.log('this.viewport', this.viewport)
        // set coordinate system
        if (_this.viewport.getZoom() > offsetZoom) {
          _this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20_OFFSET);
        } else {
          _this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.P20);
        }
        _this.cameraChangedCallback(_this.viewport);
      }
    });
  }
  (0, _createClass2.default)(AMapBaseService, [{
    key: "setBgColor",
    value: function setBgColor(color) {
      this.bgColor = color;
    }
  }, {
    key: "addMarkerContainer",
    value: function addMarkerContainer() {
      var mapContainer = this.map.getContainer();
      if (mapContainer !== null) {
        var amap = mapContainer.getElementsByClassName('amap-maps')[0];
        this.markerContainer = _l7Utils.DOM.create('div', 'l7-marker-container', amap);
      }
    }
  }, {
    key: "getMarkerContainer",
    value: function getMarkerContainer() {
      return this.markerContainer;
    }

    //  map event
  }, {
    key: "on",
    value: function on(type, handler) {
      if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
        this.eventEmitter.on(type, handler);
      } else {
        this.map.on(MapEventProxyMap[this.version][type] || type, handler);
      }
    }
  }, {
    key: "off",
    value: function off(type, handler) {
      if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
        this.eventEmitter.off(type, handler);
      } else {
        this.map.off(MapEventProxyMap[this.version][type] || type, handler);
      }
    }
  }, {
    key: "getContainer",
    value: function getContainer() {
      return this.map.getContainer();
    }
  }, {
    key: "getMapCanvasContainer",
    value: function getMapCanvasContainer() {
      var _this$map$getContaine;
      return (_this$map$getContaine = this.map.getContainer()) === null || _this$map$getContaine === void 0 ? void 0 : _this$map$getContaine.getElementsByClassName('amap-maps')[0];
    }
  }, {
    key: "getSize",
    value: function getSize() {
      var size = this.map.getSize();
      return [size.getWidth(), size.getHeight()];
    }
  }, {
    key: "getType",
    value: function getType() {
      return 'amap';
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      // 统一返回 Mapbox 缩放等级
      return this.map.getZoom() - 1;
    }
  }, {
    key: "setZoom",
    value: function setZoom(zoom) {
      // 统一设置 Mapbox 缩放等级
      return this.map.setZoom(zoom + 1);
    }
  }, {
    key: "getCenter",
    value: function getCenter(options) {
      if (options !== null && options !== void 0 && options.padding) {
        var originCenter = this.getCenter();
        var padding = (0, _utils.toPaddingOptions)(options.padding);
        var px = this.lngLatToPixel([originCenter.lng, originCenter.lat]);
        var offsetPx = [(padding.right - padding.left) / 2, (padding.bottom - padding.top) / 2];
        var newCenter = this.pixelToLngLat([px.x - offsetPx[0], px.y - offsetPx[1]]);
        return newCenter;
      }
      var center = this.map.getCenter();
      return {
        lng: center.getLng(),
        lat: center.getLat()
      };
    }
  }, {
    key: "setCenter",
    value: function setCenter(lnglat, options) {
      if (options !== null && options !== void 0 && options.padding) {
        var padding = (0, _utils.toPaddingOptions)(options.padding);
        var px = this.lngLatToPixel(lnglat);
        var offsetPx = [(padding.right - padding.left) / 2, (padding.bottom - padding.top) / 2];
        var newCenter = this.pixelToLngLat([px.x + offsetPx[0], px.y + offsetPx[1]]);
        this.map.setCenter([newCenter.lng, newCenter.lat]);
      } else {
        this.map.setCenter(lnglat);
      }
    }
  }, {
    key: "getPitch",
    value: function getPitch() {
      return this.map.getPitch();
    }
  }, {
    key: "getRotation",
    value: function getRotation() {
      // 统一返回逆时针旋转角度
      return 360 - this.map.getRotation();
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      // @ts-ignore
      var amapBound = this.map.getBounds().toBounds();
      var NE = amapBound.getNorthEast();
      var SW = amapBound.getSouthWest();
      var center = this.getCenter();
      var maxlng = center.lng > NE.getLng() || center.lng < SW.getLng() ? 180 - NE.getLng() : NE.getLng();
      var minlng = center.lng < SW.getLng() ? SW.getLng() - 180 : SW.getLng();
      // 兼容 Mapbox，统一返回西南、东北
      return [[minlng, SW.getLat()], [maxlng, NE.getLat()]];
    }
  }, {
    key: "getMinZoom",
    value: function getMinZoom() {
      var zooms = this.map.get('zooms');
      return zooms[0] - 1;
    }
  }, {
    key: "getMaxZoom",
    value: function getMaxZoom() {
      var zooms = this.map.get('zooms');
      return zooms[1] - 1;
    }
  }, {
    key: "setRotation",
    value: function setRotation(rotation) {
      return this.map.setRotation(rotation);
    }
  }, {
    key: "setPitch",
    value: function setPitch(pitch) {
      return this.map.setPitch(pitch);
    }
  }, {
    key: "zoomIn",
    value: function zoomIn() {
      this.map.zoomIn();
    }
  }, {
    key: "zoomOut",
    value: function zoomOut() {
      this.map.zoomOut();
    }
  }, {
    key: "panTo",
    value: function panTo(p) {
      this.map.panTo(p);
    }
  }, {
    key: "panBy",
    value: function panBy() {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.map.panBy(x, y);
    }
  }, {
    key: "fitBounds",
    value: function fitBounds(extent) {
      this.map.setBounds(new AMap.Bounds([extent[0][0], extent[0][1], extent[1][0], extent[1][1]]));
    }
  }, {
    key: "setZoomAndCenter",
    value: function setZoomAndCenter(zoom, center) {
      this.map.setZoomAndCenter(zoom + 1, center);
    }
  }, {
    key: "setMapStyle",
    value: function setMapStyle(style) {
      this.map.setMapStyle(this.getMapStyleValue(style));
    }
  }, {
    key: "setMapStatus",
    value: function setMapStatus(option) {
      this.map.setStatus(option);
    }
  }, {
    key: "getMapStyleConfig",
    value: function getMapStyleConfig() {
      return _theme.MapTheme;
    }
  }, {
    key: "getMapStyleValue",
    value: function getMapStyleValue(name) {
      return this.getMapStyleConfig()[name] || name;
    }
  }, {
    key: "getMapStyle",
    value: function getMapStyle() {
      return this.map.getMapStyle();
    }
  }, {
    key: "pixelToLngLat",
    value: function pixelToLngLat(pixel) {
      var lngLat = this.map.pixelToLngLat(new AMap.Pixel(pixel[0], pixel[1]));
      return {
        lng: lngLat.getLng(),
        lat: lngLat.getLat()
      };
    }
  }, {
    key: "lngLatToPixel",
    value: function lngLatToPixel(lnglat) {
      var p = this.map.lnglatToPixel(new AMap.LngLat(lnglat[0], lnglat[1]));
      // lngLatToPixel
      return {
        x: p.getX(),
        y: p.getY()
      };
    }
  }, {
    key: "containerToLngLat",
    value: function containerToLngLat(pixel) {
      var ll = new AMap.Pixel(pixel[0], pixel[1]);
      var lngLat = this.map.containerToLngLat(ll);
      return {
        lng: lngLat === null || lngLat === void 0 ? void 0 : lngLat.getLng(),
        lat: lngLat === null || lngLat === void 0 ? void 0 : lngLat.getLat()
      };
    }
  }, {
    key: "lngLatToContainer",
    value: function lngLatToContainer(lnglat) {
      var ll = new AMap.LngLat(lnglat[0], lnglat[1]);
      var pixel = this.map.lngLatToContainer(ll);
      return {
        x: pixel.getX(),
        y: pixel.getY()
      };
    }
  }, {
    key: "lngLatToCoord",
    value: function lngLatToCoord(lnglat) {
      // @ts-ignore
      var _this$map$lngLatToGeo = this.map.lngLatToGeodeticCoord(lnglat),
        x = _this$map$lngLatToGeo.x,
        y = _this$map$lngLatToGeo.y;
      return [x, -y];
    }
  }, {
    key: "lngLatToMercator",
    value: function lngLatToMercator(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    lnglat,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    altitude) {
      return {
        x: 0,
        y: 0,
        z: 0
      };
    }
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix(lnglat, altitude, rotate) {
      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];
      var flat = this.viewport.projectFlat(lnglat);
      // @ts-ignore
      var modelMatrix = _glMatrix.mat4.create();
      _glMatrix.mat4.translate(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(flat[0], flat[1], altitude));
      _glMatrix.mat4.scale(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(scale[0], scale[1], scale[2]));
      _glMatrix.mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
      _glMatrix.mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
      _glMatrix.mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
      return modelMatrix;
    }
  }, {
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _this2 = this;
        var _this$config, id, _this$config$style, style, _this$config$minZoom, minZoom, _this$config$maxZoom, maxZoom, _this$config$token, token, mapInstance, _this$config$plugin, plugin, rest;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _this$config = this.config, id = _this$config.id, _this$config$style = _this$config.style, style = _this$config$style === void 0 ? 'light' : _this$config$style, _this$config$minZoom = _this$config.minZoom, minZoom = _this$config$minZoom === void 0 ? 0 : _this$config$minZoom, _this$config$maxZoom = _this$config.maxZoom, maxZoom = _this$config$maxZoom === void 0 ? 18 : _this$config$maxZoom, _this$config$token = _this$config.token, token = _this$config$token === void 0 ? AMAP_API_KEY : _this$config$token, mapInstance = _this$config.mapInstance, _this$config$plugin = _this$config.plugin, plugin = _this$config$plugin === void 0 ? [] : _this$config$plugin, rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded); // 高德地图创建独立的container；
              // tslint:disable-next-line:typedef
              _context.next = 3;
              return new Promise(function (resolve) {
                var resolveMap = function resolveMap() {
                  if (mapInstance) {
                    _this2.map = mapInstance;
                    _this2.$mapContainer = _this2.map.getContainer();
                    setTimeout(function () {
                      _this2.map.on('camerachange', _this2.handleCameraChanged);
                      resolve();
                    }, 30);
                  } else {
                    _this2.$mapContainer = _this2.creatMapContainer(id);
                    var mapConstructorOptions = (0, _objectSpread2.default)({
                      mapStyle: _this2.getMapStyleValue(style),
                      zooms: [minZoom, maxZoom],
                      viewMode: '3D'
                    }, rest);
                    if (mapConstructorOptions.zoom) {
                      // TODO: 高德地图在相同大小下需要比 MapBox 多一个 zoom 层级
                      mapConstructorOptions.zoom += 1;
                    }
                    // @ts-ignore
                    var map = new AMap.Map(_this2.$mapContainer, mapConstructorOptions);
                    // 监听地图相机事件
                    map.on('camerachange', _this2.handleCameraChanged);
                    // Tip: 为了兼容开启 MultiPassRender 的情况
                    // 修复 MultiPassRender 在高德地图 1.x 的情况下，缩放地图改变 zoom 时存在可视化层和底图不同步的现象
                    map.on('camerachange', function () {
                      setTimeout(function () {
                        return _this2.handleAfterMapChange();
                      });
                    });

                    // @ts-ignore
                    _this2.map = map;
                    setTimeout(function () {
                      resolve();
                    }, 10);
                  }
                };
                if (!amapLoaded && !mapInstance) {
                  if (token === AMAP_API_KEY) {
                    console.warn("%c".concat(_this2.configService.getSceneWarninfo('MapToken'), "!"), 'color: #873bf4;font-weigh:900;font-size: 16px;');
                  }
                  amapLoaded = true;
                  plugin.push('Map3D');
                  _amapJsapiLoader.default.load({
                    key: token,
                    // 申请好的Web端开发者Key，首次调用 load 时必填
                    version: AMAP_VERSION,
                    // 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15
                    plugins: plugin // 需要使用的的插件列表，如比例尺'AMap.Scale'等
                  }).then(function () {
                    resolveMap();
                    if (pendingResolveQueue.length) {
                      pendingResolveQueue.forEach(function (r) {
                        return r();
                      });
                      pendingResolveQueue = [];
                    }
                  }).catch(function (e) {
                    throw new Error(e);
                  });
                } else {
                  if (amapLoaded && window.AMap || mapInstance) {
                    resolveMap();
                  } else {
                    pendingResolveQueue.push(resolveMap);
                  }
                }
              });
            case 3:
              this.viewport = new _Viewport.default();
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "meterToCoord",
    value: function meterToCoord(center, outer) {
      // 统一根据经纬度来转化
      // Tip: 实际米距离 unit meter
      var meterDis = AMap.GeometryUtil.distance((0, _construct2.default)(AMap.LngLat, (0, _toConsumableArray2.default)(center)), (0, _construct2.default)(AMap.LngLat, (0, _toConsumableArray2.default)(outer)));

      // Tip: 三维世界坐标距离
      var _this$lngLatToCoord = this.lngLatToCoord(center),
        _this$lngLatToCoord2 = (0, _slicedToArray2.default)(_this$lngLatToCoord, 2),
        x1 = _this$lngLatToCoord2[0],
        y1 = _this$lngLatToCoord2[1];
      var _this$lngLatToCoord3 = this.lngLatToCoord(outer),
        _this$lngLatToCoord4 = (0, _slicedToArray2.default)(_this$lngLatToCoord3, 2),
        x2 = _this$lngLatToCoord4[0],
        y2 = _this$lngLatToCoord4[1];
      var coordDis = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
      return coordDis / meterDis;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "updateView",
    value: function updateView(viewOption) {
      return;
    }
  }, {
    key: "getOverlayContainer",
    value: function getOverlayContainer() {
      return undefined;
    }
  }, {
    key: "exportMap",
    value: function exportMap(type) {
      var _this$getContainer;
      var renderCanvas = (_this$getContainer = this.getContainer()) === null || _this$getContainer === void 0 ? void 0 : _this$getContainer.getElementsByClassName('amap-layer')[0];
      var layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
      return layersPng;
    }
  }, {
    key: "emit",
    value: function emit(name) {
      var _this$eventEmitter;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      (_this$eventEmitter = this.eventEmitter).emit.apply(_this$eventEmitter, [name].concat(args));
    }
  }, {
    key: "once",
    value: function once(name) {
      var _this$eventEmitter2;
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      (_this$eventEmitter2 = this.eventEmitter).once.apply(_this$eventEmitter2, [name].concat(args));
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$$mapContainer, _this$$mapContainer$p;
      // TODO: 销毁地图可视化层的容器
      (_this$$mapContainer = this.$mapContainer) === null || _this$$mapContainer === void 0 ? void 0 : (_this$$mapContainer$p = _this$$mapContainer.parentNode) === null || _this$$mapContainer$p === void 0 ? void 0 : _this$$mapContainer$p.removeChild(this.$mapContainer);

      // @ts-ignore
      delete window.initAMap;
      var $jsapi = document.getElementById(AMAP_SCRIPT_ID);
      if ($jsapi) {
        document.head.removeChild($jsapi);
      }
      this.map.destroy();
    }
  }, {
    key: "getMapContainer",
    value: function getMapContainer() {
      return this.$mapContainer;
    }
  }, {
    key: "onCameraChanged",
    value: function onCameraChanged(callback) {
      this.cameraChangedCallback = callback;
    }
  }, {
    key: "handleAfterMapChange",
    value: function handleAfterMapChange() {
      this.emit('mapAfterFrameChange');
    }
  }, {
    key: "creatMapContainer",
    value: function creatMapContainer(id) {
      var $wrapper = id;
      if (typeof id === 'string') {
        $wrapper = document.getElementById(id);
      }
      var $amapdiv = document.createElement('div');
      $amapdiv.style.cssText += "\n       position: absolute;\n       top: 0;\n       height: 100%;\n       width: 100%;\n     ";
      $amapdiv.id = 'l7_amap_div' + mapdivCount++;
      $wrapper.appendChild($amapdiv);
      return $amapdiv;
    }
  }]);
  return AMapBaseService;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "configService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "config", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "coordinateSystemService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "eventEmitter", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = AMapBaseService;