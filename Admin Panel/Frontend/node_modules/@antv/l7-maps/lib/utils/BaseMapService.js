"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _inversify = require("inversify");
require("reflect-metadata");
var _version = require("../version");
var _simpleMapCoord = require("./simpleMapCoord");
var _theme = require("./theme");
var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
var EventMap = {
  mapmove: 'move',
  camerachange: 'move',
  zoomchange: 'zoom',
  dragging: 'drag'
};
var LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;
/**
 * AMapService
 */
var BaseMapService = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.MapConfig), _dec3 = (0, _inversify.inject)(_l7Core.TYPES.IGlobalConfigService), _dec4 = (0, _inversify.inject)(_l7Core.TYPES.ICoordinateSystemService), _dec5 = (0, _inversify.inject)(_l7Core.TYPES.IEventEmitter), _dec(_class = (_class2 = /*#__PURE__*/function () {
  function BaseMapService() {
    var _this = this;
    (0, _classCallCheck2.default)(this, BaseMapService);
    (0, _defineProperty2.default)(this, "version", _version.Version.DEFUALT);
    (0, _defineProperty2.default)(this, "simpleMapCoord", new _simpleMapCoord.SimpleMapCoord());
    (0, _defineProperty2.default)(this, "bgColor", 'rgba(0.0, 0.0, 0.0, 0.0)');
    (0, _initializerDefineProperty2.default)(this, "config", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "configService", _descriptor2, this);
    (0, _initializerDefineProperty2.default)(this, "coordinateSystemService", _descriptor3, this);
    (0, _initializerDefineProperty2.default)(this, "eventEmitter", _descriptor4, this);
    (0, _defineProperty2.default)(this, "handleCameraChanged", function (e) {
      var _this$map$getCenter = _this.map.getCenter(),
        lat = _this$map$getCenter.lat,
        lng = _this$map$getCenter.lng;
      // Tip: 统一触发地图变化事件
      _this.emit('mapchange');
      // resync
      _this.viewport.syncWithMapCamera({
        bearing: _this.map.getBearing(),
        center: [lng, lat],
        viewportHeight: _this.map.transform.height,
        pitch: _this.map.getPitch(),
        viewportWidth: _this.map.transform.width,
        zoom: _this.map.getZoom(),
        // mapbox 中固定相机高度为 viewport 高度的 1.5 倍
        cameraHeight: 0
      });
      _this.updateCoordinateSystemService();
      _this.cameraChangedCallback(_this.viewport);
    });
  }
  (0, _createClass2.default)(BaseMapService, [{
    key: "setBgColor",
    value: function setBgColor(color) {
      this.bgColor = color;
    }

    // init
  }, {
    key: "addMarkerContainer",
    value: function addMarkerContainer() {
      var container = this.map.getCanvasContainer();
      this.markerContainer = _l7Utils.DOM.create('div', 'l7-marker-container', container);
      this.markerContainer.setAttribute('tabindex', '-1');
    }
  }, {
    key: "getMarkerContainer",
    value: function getMarkerContainer() {
      return this.markerContainer;
    }
  }, {
    key: "getOverlayContainer",
    value: function getOverlayContainer() {
      return undefined;
    }

    //  map event
  }, {
    key: "on",
    value: function on(type, handle) {
      if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
        this.eventEmitter.on(type, handle);
      } else {
        // 统一事件名称
        this.map.on(EventMap[type] || type, handle);
      }
    }
  }, {
    key: "off",
    value: function off(type, handle) {
      this.map.off(EventMap[type] || type, handle);
      this.eventEmitter.off(type, handle);
    }
  }, {
    key: "getContainer",
    value: function getContainer() {
      return this.map.getContainer();
    }
  }, {
    key: "getMapCanvasContainer",
    value: function getMapCanvasContainer() {
      return this.map.getCanvasContainer();
    }
  }, {
    key: "getSize",
    value: function getSize() {
      if (this.version === _version.Version.SIMPLE) {
        return this.simpleMapCoord.getSize();
      }
      var size = this.map.transform;
      return [size.width, size.height];
    }
    // get mapStatus method
  }, {
    key: "getType",
    value: function getType() {
      return 'default';
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.map.getZoom();
    }
  }, {
    key: "setZoom",
    value: function setZoom(zoom) {
      return this.map.setZoom(zoom);
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return this.map.getCenter();
    }
  }, {
    key: "setCenter",
    value: function setCenter(lnglat) {
      this.map.setCenter(lnglat);
    }
  }, {
    key: "getPitch",
    value: function getPitch() {
      return this.map.getPitch();
    }
  }, {
    key: "getRotation",
    value: function getRotation() {
      return this.map.getBearing();
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      return this.map.getBounds().toArray();
    }
  }, {
    key: "getMinZoom",
    value: function getMinZoom() {
      return this.map.getMinZoom();
    }
  }, {
    key: "getMaxZoom",
    value: function getMaxZoom() {
      return this.map.getMaxZoom();
    }
  }, {
    key: "setRotation",
    value: function setRotation(rotation) {
      this.map.setBearing(rotation);
    }
  }, {
    key: "zoomIn",
    value: function zoomIn(option, eventData) {
      this.map.zoomIn(option, eventData);
    }
  }, {
    key: "zoomOut",
    value: function zoomOut(option, eventData) {
      this.map.zoomOut(option, eventData);
    }
  }, {
    key: "setPitch",
    value: function setPitch(pitch) {
      return this.map.setPitch(pitch);
    }
  }, {
    key: "panTo",
    value: function panTo(p) {
      this.map.panTo(p);
    }
  }, {
    key: "panBy",
    value: function panBy() {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.panTo([x, y]);
    }
  }, {
    key: "fitBounds",
    value: function fitBounds(bound, fitBoundsOptions) {
      this.map.fitBounds(bound, fitBoundsOptions);
    }
  }, {
    key: "setMaxZoom",
    value: function setMaxZoom(max) {
      this.map.setMaxZoom(max);
    }
  }, {
    key: "setMinZoom",
    value: function setMinZoom(min) {
      this.map.setMinZoom(min);
    }
  }, {
    key: "setMapStatus",
    value: function setMapStatus(option) {
      if (option.doubleClickZoom === true) {
        this.map.doubleClickZoom.enable();
      }
      if (option.doubleClickZoom === false) {
        this.map.doubleClickZoom.disable();
      }
      if (option.dragEnable === false) {
        this.map.dragPan.disable();
      }
      if (option.dragEnable === true) {
        this.map.dragPan.enable();
      }
      if (option.rotateEnable === false) {
        this.map.dragRotate.disable();
      }
      if (option.dragEnable === true) {
        this.map.dragRotate.enable();
      }
      if (option.keyboardEnable === false) {
        this.map.keyboard.disable();
      }
      if (option.keyboardEnable === true) {
        this.map.keyboard.enable();
      }
      if (option.zoomEnable === false) {
        this.map.scrollZoom.disable();
      }
      if (option.zoomEnable === true) {
        this.map.scrollZoom.enable();
      }
    }
  }, {
    key: "setZoomAndCenter",
    value: function setZoomAndCenter(zoom, center) {
      this.map.flyTo({
        zoom: zoom,
        center: center
      });
    }
  }, {
    key: "setMapStyle",
    value: function setMapStyle(style) {
      this.map.setStyle(this.getMapStyleValue(style));
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "meterToCoord",
    value: function meterToCoord(center, outer) {
      return 1.0;
    }

    // TODO: 计算像素坐标
  }, {
    key: "pixelToLngLat",
    value: function pixelToLngLat(pixel) {
      return this.map.unproject(pixel);
    }
  }, {
    key: "lngLatToPixel",
    value: function lngLatToPixel(lnglat) {
      return this.map.project(lnglat);
    }
  }, {
    key: "containerToLngLat",
    value: function containerToLngLat(pixel) {
      return this.map.unproject(pixel);
    }
  }, {
    key: "lngLatToContainer",
    value: function lngLatToContainer(lnglat) {
      return this.map.project(lnglat);
    }
  }, {
    key: "getMapStyle",
    value: function getMapStyle() {
      try {
        var _this$map$getStyle$sp;
        // @ts-ignore
        var styleUrl = (_this$map$getStyle$sp = this.map.getStyle().sprite) !== null && _this$map$getStyle$sp !== void 0 ? _this$map$getStyle$sp : '';
        // 将 Mapbox 返回的样式字符串转成传入 style 保持一致
        if (/^mapbox:\/\/sprites\/zcxduo\/\w+\/\w+$/.test(styleUrl)) {
          return styleUrl === null || styleUrl === void 0 ? void 0 : styleUrl.replace(/\/\w+$/, '').replace(/sprites/, 'styles');
        }
        return styleUrl;
      } catch (e) {
        return '';
      }
    }
  }, {
    key: "getMapStyleConfig",
    value: function getMapStyleConfig() {
      return _theme.MapTheme;
    }
  }, {
    key: "getMapStyleValue",
    value: function getMapStyleValue(name) {
      var _this$getMapStyleConf;
      return (_this$getMapStyleConf = this.getMapStyleConfig()[name]) !== null && _this$getMapStyleConf !== void 0 ? _this$getMapStyleConf : name;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.eventEmitter.removeAllListeners();
      if (this.map) {
        this.map.remove();
        this.$mapContainer = null;
      }
    }
  }, {
    key: "emit",
    value: function emit(name) {
      var _this$eventEmitter;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      (_this$eventEmitter = this.eventEmitter).emit.apply(_this$eventEmitter, [name].concat(args));
    }
  }, {
    key: "once",
    value: function once(name) {
      var _this$eventEmitter2;
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      (_this$eventEmitter2 = this.eventEmitter).once.apply(_this$eventEmitter2, [name].concat(args));
    }
  }, {
    key: "getMapContainer",
    value: function getMapContainer() {
      return this.$mapContainer;
    }
  }, {
    key: "exportMap",
    value: function exportMap(type) {
      var renderCanvas = this.map.getCanvas();
      var layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
      return layersPng;
    }
  }, {
    key: "onCameraChanged",
    value: function onCameraChanged(callback) {
      this.cameraChangedCallback = callback;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "creatMapContainer",
    value: function creatMapContainer(id) {
      var $wrapper = id;
      if (typeof id === 'string') {
        $wrapper = document.getElementById(id);
      }
      return $wrapper;
    }
  }, {
    key: "updateView",
    value: function updateView(viewOption) {
      // Tip: 统一触发地图变化事件
      this.emit('mapchange');
      // resync
      this.viewport.syncWithMapCamera({
        bearing: viewOption.bearing,
        center: viewOption.center,
        viewportHeight: viewOption.viewportHeight,
        pitch: viewOption.pitch,
        viewportWidth: viewOption.viewportWidth,
        zoom: viewOption.zoom,
        // mapbox 中固定相机高度为 viewport 高度的 1.5 倍
        cameraHeight: 0
      });
      this.updateCoordinateSystemService();
      this.cameraChangedCallback(this.viewport);
    }
  }, {
    key: "updateCoordinateSystemService",
    value: function updateCoordinateSystemService() {
      var _this$config$offsetCo = this.config.offsetCoordinate,
        offsetCoordinate = _this$config$offsetCo === void 0 ? true : _this$config$offsetCo;
      // set coordinate system
      if (this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {
        this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT_OFFSET);
      } else {
        this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT);
      }
    }
  }]);
  return BaseMapService;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "config", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "configService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "coordinateSystemService", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "eventEmitter", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = BaseMapService;