"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlotLayer = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var l7_source_1 = tslib_1.__importDefault(require("@antv/l7-source"));
var event_emitter_1 = tslib_1.__importDefault(require("@antv/event-emitter"));
var layer_1 = require("../../types/layer");
var source_1 = require("../../adaptor/source");
var constants_1 = require("../map/constants");
var utils_1 = require("../../utils");
var LayerConfigkeys = ['name', 'zIndex', 'visible', 'minZoom', 'maxZoom', 'pickingBuffer', 'autoFit', 'blend'];
var PlotLayer = /** @class */ (function (_super) {
    tslib_1.__extends(PlotLayer, _super);
    function PlotLayer(options) {
        var _this = _super.call(this) || this;
        _this.options = (0, utils_1.deepAssign)({}, _this.getDefaultOptions(), options);
        _this.lastOptions = _this.options;
        return _this;
    }
    /**
     * 获取默认配置
     */
    PlotLayer.prototype.getDefaultOptions = function () {
        return {};
    };
    PlotLayer.prototype.pickLayerConfig = function (params) {
        var config = (0, util_1.pick)(params, LayerConfigkeys);
        return config;
    };
    PlotLayer.prototype.addTo = function (scene) {
        scene.addLayer(this.layer);
    };
    PlotLayer.prototype.remove = function (scene) {
        scene.removeLayer(this.layer);
    };
    /**
     * 更新
     */
    PlotLayer.prototype.update = function (options) {
        this.updateOption(options);
        this.updateConfig(options);
    };
    /**
     * 更新: 更新配置
     */
    PlotLayer.prototype.updateOption = function (options) {
        this.lastOptions = this.options;
        this.options = (0, utils_1.deepAssign)({}, this.options, options);
    };
    // 更新: 更新图层属性配置
    PlotLayer.prototype.updateConfig = function (options) {
        if (!(0, util_1.isUndefined)(options.zIndex) && !(0, util_1.isEqual)(this.lastOptions.zIndex, this.options.zIndex)) {
            this.setIndex(options.zIndex);
        }
        if (!(0, util_1.isUndefined)(options.blend) && !(0, util_1.isEqual)(this.lastOptions.blend, this.options.blend)) {
            this.setBlend(options.blend);
        }
        if (!(0, util_1.isUndefined)(options.minZoom) && !(0, util_1.isEqual)(this.lastOptions.minZoom, this.options.minZoom)) {
            this.setMinZoom(options.minZoom);
        }
        if (!(0, util_1.isUndefined)(options.maxZoom) && !(0, util_1.isEqual)(this.lastOptions.maxZoom, this.options.maxZoom)) {
            this.setMinZoom(options.maxZoom);
        }
        if (!(0, util_1.isUndefined)(options.visible) && !(0, util_1.isEqual)(this.lastOptions.visible, this.options.visible)) {
            options.visible ? this.show() : this.hide();
        }
    };
    PlotLayer.prototype.render = function () {
        this.layer.renderLayers();
    };
    PlotLayer.prototype.setSource = function (source) {
        if (source instanceof l7_source_1.default) {
            this.layer.setSource(source);
        }
        else {
            var data = source.data, aggregation = source.aggregation, option = tslib_1.__rest(source, ["data", "aggregation"]);
            aggregation && source_1.MappingSource.aggregation(option, aggregation);
            var layerSource = this.layer.getSource();
            if (layerSource) {
                this.layer.setData(data, option);
            }
            else {
                this.layer.source(data, option);
            }
        }
    };
    PlotLayer.prototype.changeData = function (source) {
        this.setSource(source);
    };
    PlotLayer.prototype.setIndex = function (zIndex) {
        this.layer.setIndex(zIndex);
    };
    PlotLayer.prototype.setBlend = function (blend) {
        this.layer.setBlend(blend);
    };
    PlotLayer.prototype.setMinZoom = function (minZoom) {
        this.layer.setMinZoom(minZoom);
    };
    PlotLayer.prototype.setMaxZoom = function (maxZoom) {
        this.layer.setMaxZoom(maxZoom);
    };
    PlotLayer.prototype.show = function () {
        this.layer.inited && this.layer.show();
    };
    PlotLayer.prototype.hide = function () {
        this.layer.inited && this.layer.hide();
    };
    PlotLayer.prototype.toggleVisible = function () {
        this.isVisible() ? this.hide() : this.show();
    };
    PlotLayer.prototype.isVisible = function () {
        return this.layer.inited ? this.layer.isVisible() : this.options.visible;
    };
    PlotLayer.prototype.fitBounds = function (fitBoundsOptions) {
        this.layer.fitBounds(fitBoundsOptions);
    };
    /**
     * 事件代理: 绑定事件
     */
    PlotLayer.prototype.on = function (name, callback) {
        if (constants_1.LayerEventList.indexOf(name) !== -1) {
            this.layer.on(name, callback);
        }
        else {
            _super.prototype.on.call(this, name, callback);
        }
        return this;
    };
    /**
     * 事件代理: 绑定一次事件
     */
    PlotLayer.prototype.once = function (name, callback) {
        if (constants_1.LayerEventList.indexOf(name) !== -1) {
            this.layer.once(name, callback);
        }
        else {
            _super.prototype.once.call(this, name, callback);
        }
        return this;
    };
    /**
     * 事件代理: 解绑事件
     */
    PlotLayer.prototype.off = function (name, callback) {
        if (constants_1.LayerEventList.indexOf(name) !== -1) {
            this.layer.off(name, callback);
        }
        else {
            _super.prototype.off.call(this, name, callback);
        }
        return this;
    };
    /**
     * 地图图表类型
     */
    PlotLayer.LayerType = layer_1.LayerType;
    /**
     * 图层属性配置项 Keys
     */
    PlotLayer.LayerConfigkeys = LayerConfigkeys;
    return PlotLayer;
}(event_emitter_1.default));
exports.PlotLayer = PlotLayer;
//# sourceMappingURL=plot-layer.js.map