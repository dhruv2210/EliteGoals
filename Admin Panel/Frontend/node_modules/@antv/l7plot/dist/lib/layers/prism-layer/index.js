"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrismLayer = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var l7_layers_1 = require("@antv/l7-layers");
var plot_layer_1 = require("../../core/layer/plot-layer");
var adaptor_1 = require("./adaptor");
var helper_1 = require("../dot-layer/helper");
var DEFAULT_OPTIONS = {};
var LAYER_OPTIONS_KEYS = ['color', 'size', 'style', 'state'];
var PrismLayer = /** @class */ (function (_super) {
    tslib_1.__extends(PrismLayer, _super);
    function PrismLayer(options) {
        var _this = _super.call(this, options) || this;
        /**
         * 图层类型
         */
        _this.type = plot_layer_1.PlotLayer.LayerType.PrismLayer;
        /**
         * 图层是否具有交互属性
         */
        _this.interaction = true;
        var _a = _this.options, name = _a.name, source = _a.source;
        var config = _this.pickLayerConfig(_this.options);
        _this.name = name ? name : (0, util_1.uniqueId)(_this.type);
        _this.layer = new l7_layers_1.PolygonLayer(tslib_1.__assign(tslib_1.__assign({}, config), { name: _this.name }));
        _this.mappingLayer(_this.layer, _this.options);
        _this.setSource(source);
        return _this;
    }
    /**
     * 获取默认配置
     */
    PrismLayer.prototype.getDefaultOptions = function () {
        return DEFAULT_OPTIONS;
    };
    PrismLayer.prototype.mappingLayer = function (layer, options) {
        (0, adaptor_1.mappingLayer)(layer, options);
    };
    PrismLayer.prototype.update = function (options) {
        _super.prototype.update.call(this, options);
        this.mappingLayer(this.layer, this.options);
    };
    PrismLayer.prototype.getColorLegendItems = function () {
        var colorLegendItems = this.layer.getLegendItems('color');
        if (Array.isArray(colorLegendItems) && colorLegendItems.length !== 0) {
            var items = (0, helper_1.getColorLegendItems)(colorLegendItems);
            return items;
        }
        return [];
    };
    /**
     * 默认配置项
     */
    PrismLayer.DefaultOptions = DEFAULT_OPTIONS;
    /**
     * 图层配置项 Keys
     */
    PrismLayer.LayerOptionsKeys = plot_layer_1.PlotLayer.LayerConfigkeys.concat(LAYER_OPTIONS_KEYS);
    return PrismLayer;
}(plot_layer_1.PlotLayer));
exports.PrismLayer = PrismLayer;
//# sourceMappingURL=index.js.map