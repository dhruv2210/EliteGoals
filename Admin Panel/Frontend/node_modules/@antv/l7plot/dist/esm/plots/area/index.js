import { __assign, __extends } from "tslib";
import { pick } from '@antv/util';
import { Plot } from '../../core/plot';
import { DEFAULT_OPTIONS } from './constants';
import { AreaLayer } from '../../layers/area-layer';
import { LayerGroup } from '../../core/layer/layer-group';
var Area = /** @class */ (function (_super) {
    __extends(Area, _super);
    function Area() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * 图表类型
         */
        _this.type = Plot.PlotType.Area;
        return _this;
    }
    /**
     * 获取默认配置
     */
    Area.prototype.getDefaultOptions = function () {
        return Area.DefaultOptions;
    };
    /**
     * 创建图层
     */
    Area.prototype.createLayers = function (source) {
        this.areaLayer = new AreaLayer(__assign({ source: source }, pick(this.options, AreaLayer.LayerOptionsKeys)));
        var layerGroup = new LayerGroup([this.areaLayer]);
        if (this.options.label) {
            this.labelLayer = this.createLabelLayer(source, this.options.label, this.options);
            layerGroup.addLayer(this.labelLayer);
        }
        return layerGroup;
    };
    /**
     * 更新图层
     */
    Area.prototype.updateLayers = function (options) {
        var polygonLayerConfig = pick(options, AreaLayer.LayerOptionsKeys);
        this.areaLayer.update(polygonLayerConfig);
        this.updateLabelLayer(this.source, options.label, this.options, this.labelLayer);
    };
    /**
     * 初始化图层事件
     */
    Area.prototype.initLayersEvent = function () {
        //
    };
    /**
     * 实现 legend 配置项
     */
    Area.prototype.getLegendOptions = function () {
        var colorLegendItems = this.areaLayer.getColorLegendItems();
        if (colorLegendItems.length !== 0) {
            return { type: 'category', items: colorLegendItems };
        }
        return {};
    };
    /**
     * 默认配置项
     */
    Area.DefaultOptions = DEFAULT_OPTIONS;
    return Area;
}(Plot));
export { Area };
//# sourceMappingURL=index.js.map