import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { DOM, getBBoxFromPoints } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
export var BoxSelectEventList = ['selectstart', 'selecting', 'selectend'];
// TODO: 将 BoxSelect 模块放在哪里比较合适
var BoxSelect = /*#__PURE__*/function (_EventEmitter) {
  _inherits(BoxSelect, _EventEmitter);
  var _super = _createSuper(BoxSelect);
  function BoxSelect(scene) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, BoxSelect);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "isEnable", false);
    _defineProperty(_assertThisInitialized(_this), "onDragStart", function (e) {
      _this.box.style.display = 'block';
      _this.startEvent = _this.endEvent = e;
      _this.syncBoxBound();
      _this.emit('selectstart', _this.getLngLatBox(), _this.startEvent, _this.endEvent);
    });
    _defineProperty(_assertThisInitialized(_this), "onDragging", function (e) {
      _this.endEvent = e;
      _this.syncBoxBound();
      _this.emit('selecting', _this.getLngLatBox(), _this.startEvent, _this.endEvent);
    });
    _defineProperty(_assertThisInitialized(_this), "onDragEnd", function (e) {
      _this.endEvent = e;
      _this.box.style.display = 'none';
      _this.emit('selectend', _this.getLngLatBox(), _this.startEvent, _this.endEvent);
    });
    _this.scene = scene;
    _this.options = options;
    return _this;
  }
  _createClass(BoxSelect, [{
    key: "container",
    get: function get() {
      return this.scene.getMapService().getMarkerContainer();
    }
  }, {
    key: "enable",
    value: function enable() {
      if (this.isEnable) {
        return;
      }
      var className = this.options.className;
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.container.style.cursor = 'crosshair';
      if (!this.box) {
        var box = DOM.create('div', undefined, this.container);
        box.classList.add('l7-select-box');
        if (className) {
          box.classList.add(className);
        }
        box.style.display = 'none';
        this.box = box;
      }
      this.scene.on('dragstart', this.onDragStart);
      this.scene.on('dragging', this.onDragging);
      this.scene.on('dragend', this.onDragEnd);
      this.isEnable = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      if (!this.isEnable) {
        return;
      }
      this.scene.setMapStatus({
        dragEnable: true
      });
      this.container.style.cursor = 'auto';
      this.scene.off('dragstart', this.onDragStart);
      this.scene.off('dragging', this.onDragging);
      this.scene.off('dragend', this.onDragEnd);
      this.isEnable = false;
    }
  }, {
    key: "syncBoxBound",
    value: function syncBoxBound() {
      var _this$startEvent = this.startEvent,
        x1 = _this$startEvent.x,
        y1 = _this$startEvent.y;
      var _this$endEvent = this.endEvent,
        x2 = _this$endEvent.x,
        y2 = _this$endEvent.y;
      var left = Math.min(x1, x2);
      var top = Math.min(y1, y2);
      var width = Math.abs(x1 - x2);
      var height = Math.abs(y1 - y2);
      this.box.style.top = "".concat(top, "px");
      this.box.style.left = "".concat(left, "px");
      this.box.style.width = "".concat(width, "px");
      this.box.style.height = "".concat(height, "px");
    }
  }, {
    key: "getLngLatBox",
    value: function getLngLatBox() {
      var _this$startEvent$lngL = this.startEvent.lngLat,
        lng1 = _this$startEvent$lngL.lng,
        lat1 = _this$startEvent$lngL.lat;
      var _this$endEvent$lngLat = this.endEvent.lngLat,
        lng2 = _this$endEvent$lngLat.lng,
        lat2 = _this$endEvent$lngLat.lat;
      return getBBoxFromPoints([[lng1, lat1], [lng2, lat2]]);
    }
  }]);
  return BoxSelect;
}(EventEmitter);
export { BoxSelect as default };