var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Scene: () => Scene
});
module.exports = __toCommonJS(src_exports);
var import_l7_component = require("@antv/l7-component");
var import_l7_core = require("@antv/l7-core");
var import_l7_layers = require("@antv/l7-layers");
var import_l7_renderer = require("@antv/l7-renderer");
var import_l7_utils = require("@antv/l7-utils");
var import_boxSelect = __toESM(require("./boxSelect"));
var Scene = class {
  constructor(config) {
    const { id, map, canvas, hasBaseMap } = config;
    const sceneContainer = (0, import_l7_core.createSceneContainer)();
    this.container = sceneContainer;
    map.setContainer(sceneContainer, id, canvas, hasBaseMap);
    sceneContainer.bind(import_l7_core.TYPES.IRendererService).to(import_l7_renderer.ReglRendererService).inSingletonScope();
    this.sceneService = sceneContainer.get(import_l7_core.TYPES.ISceneService);
    this.mapService = sceneContainer.get(
      import_l7_core.TYPES.IMapService
    );
    this.iconService = sceneContainer.get(import_l7_core.TYPES.IIconService);
    this.fontService = sceneContainer.get(import_l7_core.TYPES.IFontService);
    this.controlService = sceneContainer.get(
      import_l7_core.TYPES.IControlService
    );
    this.layerService = sceneContainer.get(import_l7_core.TYPES.ILayerService);
    this.debugService = sceneContainer.get(import_l7_core.TYPES.IDebugService);
    this.debugService.setEnable(config.debug);
    this.markerService = sceneContainer.get(
      import_l7_core.TYPES.IMarkerService
    );
    this.interactionService = sceneContainer.get(
      import_l7_core.TYPES.IInteractionService
    );
    this.popupService = sceneContainer.get(import_l7_core.TYPES.IPopupService);
    this.boxSelect = new import_boxSelect.default(this, {});
    (0, import_l7_utils.setMiniScene)((config == null ? void 0 : config.isMini) || false);
    if (import_l7_utils.isMini) {
      this.sceneService.initMiniScene(config);
    } else {
      this.initComponent(id);
      this.sceneService.init(config);
      this.initControl();
    }
  }
  get map() {
    return this.mapService.map;
  }
  get loaded() {
    return this.sceneService.loaded;
  }
  getServiceContainer() {
    return this.container;
  }
  getSize() {
    return this.mapService.getSize();
  }
  getMinZoom() {
    return this.mapService.getMinZoom();
  }
  getMaxZoom() {
    return this.mapService.getMaxZoom();
  }
  getType() {
    return this.mapService.getType();
  }
  getMapContainer() {
    return this.mapService.getMapContainer();
  }
  getMapCanvasContainer() {
    return this.mapService.getMapCanvasContainer();
  }
  getMapService() {
    return this.mapService;
  }
  /**
   * 对外暴露 debugService
   * @returns
   */
  getDebugService() {
    return this.debugService;
  }
  async exportPng(type) {
    return this.sceneService.exportPng(type);
  }
  async exportMap(type) {
    return this.sceneService.exportPng(type);
  }
  registerRenderService(render) {
    if (this.sceneService.loaded) {
      const renderSerivce = new render(this);
      renderSerivce.init();
    } else {
      this.on("loaded", () => {
        const renderSerivce = new render(this);
        renderSerivce.init();
      });
    }
  }
  setBgColor(color) {
    this.mapService.setBgColor(color);
  }
  // layer 管理
  addLayer(layer) {
    const layerContainer = (0, import_l7_core.createLayerContainer)(this.container);
    layer.setContainer(layerContainer, this.container);
    this.sceneService.addLayer(layer);
    if (layer.inited) {
      const maskInstance = this.initMask(layer);
      this.addMask(maskInstance, layer.id);
    } else {
      layer.on("inited", () => {
        const maskInstance = this.initMask(layer);
        this.addMask(maskInstance, layer.id);
      });
    }
  }
  initMask(layer) {
    const {
      mask,
      maskfence,
      maskColor = "#000",
      maskOpacity = 0
    } = layer.getLayerConfig();
    if (!mask || !maskfence) {
      return void 0;
    }
    const maskInstance = new import_l7_layers.MaskLayer().source(maskfence).shape("fill").style({
      color: maskColor,
      opacity: maskOpacity
    });
    return maskInstance;
  }
  addMask(mask, layerId) {
    if (!mask) {
      return;
    }
    const parent = this.getLayer(layerId);
    if (parent) {
      const layerContainer = (0, import_l7_core.createLayerContainer)(this.container);
      mask.setContainer(layerContainer, this.container);
      parent.addMaskLayer(mask);
      this.sceneService.addMask(mask);
    } else {
      console.warn("parent layer not find!");
    }
  }
  getPickedLayer() {
    return this.layerService.pickedLayerId;
  }
  getLayers() {
    return this.layerService.getLayers();
  }
  getLayer(id) {
    return this.layerService.getLayer(id);
  }
  getLayerByName(name) {
    return this.layerService.getLayerByName(name);
  }
  async removeLayer(layer, parentLayer) {
    await this.layerService.remove(layer, parentLayer);
  }
  async removeAllLayer() {
    await this.layerService.removeAllLayers();
  }
  render() {
    this.sceneService.render();
  }
  setEnableRender(flag) {
    this.layerService.setEnableRender(flag);
  }
  // asset method
  /**
   * 为 layer/point/text 支持 iconfont 模式支持
   * @param fontUnicode
   * @param name
   */
  addIconFont(name, fontUnicode) {
    this.fontService.addIconFont(name, fontUnicode);
  }
  addIconFonts(options) {
    options.forEach(([name, fontUnicode]) => {
      this.fontService.addIconFont(name, fontUnicode);
    });
  }
  /**
   * 用户自定义添加第三方字体
   * @param fontFamily
   * @param fontPath
   */
  addFontFace(fontFamily, fontPath) {
    this.fontService.once("fontloaded", (e) => {
      this.emit("fontloaded", e);
    });
    this.fontService.addFontFace(fontFamily, fontPath);
  }
  async addImage(id, img) {
    if (!import_l7_utils.isMini) {
      await this.iconService.addImage(id, img);
    } else {
      this.iconService.addImageMini(id, img, this.sceneService);
    }
  }
  hasImage(id) {
    return this.iconService.hasImage(id);
  }
  removeImage(id) {
    this.iconService.removeImage(id);
  }
  addIconFontGlyphs(fontFamily, glyphs) {
    this.fontService.addIconGlyphs(glyphs);
  }
  // map control method
  addControl(ctr) {
    this.controlService.addControl(ctr, this.container);
  }
  removeControl(ctr) {
    this.controlService.removeControl(ctr);
  }
  getControlByName(name) {
    return this.controlService.getControlByName(name);
  }
  // marker
  addMarker(marker) {
    this.markerService.addMarker(marker);
  }
  addMarkerLayer(layer) {
    this.markerService.addMarkerLayer(layer);
  }
  removeMarkerLayer(layer) {
    this.markerService.removeMarkerLayer(layer);
  }
  removeAllMakers() {
    this.markerService.removeAllMarkers();
  }
  addPopup(popup) {
    this.popupService.addPopup(popup);
  }
  removePopup(popup) {
    this.popupService.removePopup(popup);
  }
  on(type, handle) {
    var _a;
    if (import_boxSelect.BoxSelectEventList.includes(type)) {
      (_a = this.boxSelect) == null ? void 0 : _a.on(type, handle);
    } else if (import_l7_core.SceneEventList.includes(type)) {
      this.sceneService.on(type, handle);
    } else {
      this.mapService.on(type, handle);
    }
  }
  once(type, handle) {
    var _a;
    if (import_boxSelect.BoxSelectEventList.includes(type)) {
      (_a = this.boxSelect) == null ? void 0 : _a.once(type, handle);
    } else if (import_l7_core.SceneEventList.includes(type)) {
      this.sceneService.once(type, handle);
    } else {
      this.mapService.once(type, handle);
    }
  }
  emit(type, handle) {
    import_l7_core.SceneEventList.indexOf(type) === -1 ? this.mapService.on(type, handle) : this.sceneService.emit(type, handle);
  }
  off(type, handle) {
    var _a;
    if (import_boxSelect.BoxSelectEventList.includes(type)) {
      (_a = this.boxSelect) == null ? void 0 : _a.off(type, handle);
    } else if (import_l7_core.SceneEventList.includes(type)) {
      this.sceneService.off(type, handle);
    } else {
      this.mapService.off(type, handle);
    }
  }
  // implements IMapController
  getZoom() {
    return this.mapService.getZoom();
  }
  getCenter(options) {
    return this.mapService.getCenter(options);
  }
  setCenter(center, options) {
    return this.mapService.setCenter(center, options);
  }
  getPitch() {
    return this.mapService.getPitch();
  }
  setPitch(pitch) {
    return this.mapService.setPitch(pitch);
  }
  getRotation() {
    return this.mapService.getRotation();
  }
  getBounds() {
    return this.mapService.getBounds();
  }
  setRotation(rotation) {
    this.mapService.setRotation(rotation);
  }
  zoomIn() {
    this.mapService.zoomIn();
  }
  zoomOut() {
    this.mapService.zoomOut();
  }
  panTo(p) {
    this.mapService.panTo(p);
  }
  panBy(x, y) {
    this.mapService.panBy(x, y);
  }
  getContainer() {
    return this.mapService.getContainer();
  }
  setZoom(zoom) {
    this.mapService.setZoom(zoom);
  }
  fitBounds(bound, options) {
    const { fitBoundsOptions, animate } = this.sceneService.getSceneConfig();
    this.mapService.fitBounds(
      bound,
      // 选项优先级：用户传入，覆盖animate直接配置，覆盖Scene配置项传入
      options || {
        ...fitBoundsOptions,
        animate
      }
    );
  }
  setZoomAndCenter(zoom, center) {
    this.mapService.setZoomAndCenter(zoom, center);
  }
  setMapStyle(style) {
    this.mapService.setMapStyle(style);
  }
  setMapStatus(options) {
    this.mapService.setMapStatus(options);
  }
  // conversion Method
  pixelToLngLat(pixel) {
    return this.mapService.pixelToLngLat(pixel);
  }
  lngLatToPixel(lnglat) {
    return this.mapService.lngLatToPixel(lnglat);
  }
  containerToLngLat(pixel) {
    return this.mapService.containerToLngLat(pixel);
  }
  lngLatToContainer(lnglat) {
    return this.mapService.lngLatToContainer(lnglat);
  }
  destroy() {
    this.sceneService.destroy();
  }
  registerPostProcessingPass(constructor, name) {
    this.container.bind(import_l7_core.TYPES.IPostProcessingPass).to(constructor).whenTargetNamed(name);
  }
  // 控制 shader pick 计算
  enableShaderPick() {
    this.layerService.enableShaderPick();
  }
  diasbleShaderPick() {
    this.layerService.disableShaderPick();
  }
  enableBoxSelect(once = true) {
    this.boxSelect.enable();
    if (once) {
      this.boxSelect.once("selectend", () => {
        this.disableBoxSelect();
      });
    }
  }
  disableBoxSelect() {
    this.boxSelect.disable();
  }
  // get current point size info
  getPointSizeRange() {
    return this.sceneService.getPointSizeRange();
  }
  initComponent(id) {
    this.controlService.init(
      {
        container: import_l7_utils.DOM.getContainer(id)
      },
      this.container
    );
    this.markerService.init(this.container);
    this.popupService.init(this.container);
  }
  initControl() {
    const { logoVisible, logoPosition } = this.sceneService.getSceneConfig();
    if (logoVisible) {
      this.addControl(new import_l7_component.Logo({ position: logoPosition }));
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Scene
});
