"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _l7Utils = require("@antv/l7-utils");
var _point = _interopRequireDefault(require("../geo/point"));
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var DOM = {};
var _default = DOM;
exports.default = _default;
DOM.create = function (tagName, className, container) {
  var el = _l7Utils.$window.document.createElement(tagName);
  if (className !== undefined) {
    el.className = className;
  }
  if (container) {
    container.appendChild(el);
  }
  return el;
};
DOM.createNS = function (namespaceURI, tagName) {
  var el = _l7Utils.$window.document.createElementNS(namespaceURI, tagName);
  return el;
};
var docStyle = _l7Utils.$window.document && _l7Utils.$window.document.documentElement.style;
function testProp(props) {
  if (!docStyle) {
    return props[0];
  }
  var _iterator = _createForOfIteratorHelper(props),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var i = _step.value;
      if (i in docStyle) {
        return i;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return props[0];
}
var selectProp = testProp(['userSelect', 'MozUserSelect', 'WebkitUserSelect', 'msUserSelect']);
var userSelect;
DOM.disableDrag = function () {
  if (docStyle && selectProp) {
    userSelect = docStyle[selectProp];
    docStyle[selectProp] = 'none';
  }
};
DOM.enableDrag = function () {
  if (docStyle && selectProp) {
    docStyle[selectProp] = userSelect;
  }
};
var transformProp = testProp(['transform', 'WebkitTransform']);
DOM.setTransform = function (el, value) {
  // https://github.com/facebook/flow/issues/7754
  // $FlowFixMe
  el.style[transformProp] = value;
};

// Feature detection for {passive: false} support in add/removeEventListener.
var passiveSupported = false;
try {
  // https://github.com/facebook/flow/issues/285
  // $FlowFixMe
  var options = Object.defineProperty({}, 'passive', {
    get: function get() {
      // eslint-disable-line
      passiveSupported = true;
    }
  });
  // @ts-ignore
  _l7Utils.$window.addEventListener('test', options, options);
  // @ts-ignore
  _l7Utils.$window.removeEventListener('test', options, options);
} catch (err) {
  passiveSupported = false;
}
DOM.addEventListener = function (target, type, callback) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  if ('passive' in options && passiveSupported) {
    target.addEventListener(type, callback, options);
  } else {
    target.addEventListener(type, callback, options.capture);
  }
};
DOM.removeEventListener = function (target, type, callback) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  if ('passive' in options && passiveSupported) {
    target.removeEventListener(type, callback, options);
  } else {
    target.removeEventListener(type, callback, options.capture);
  }
};

// Suppress the next click, but only if it's immediate.
var suppressClick = function suppressClick(e) {
  e.preventDefault();
  e.stopPropagation();
  _l7Utils.$window.removeEventListener('click', suppressClick, true);
};
DOM.suppressClick = function () {
  if (_l7Utils.isMini) {
    return;
  }
  _l7Utils.$window.addEventListener('click', suppressClick, true);
  setTimeout(function () {
    _l7Utils.$window.removeEventListener('click', suppressClick, true);
  }, 0);
};
DOM.mousePos = function (el, e) {
  // 暂时从 el 上获取 top/left， 后面需要动态获取
  if (!_l7Utils.isMini) {
    var rect = el.getBoundingClientRect();
    return new _point.default(e.clientX - rect.left - el.clientLeft, e.clientY - rect.top - el.clientTop);
  } else {
    return new _point.default(
    // @ts-ignore
    e.clientX - el.left - 0,
    // @ts-ignore
    e.clientY - el.top - 0);
  }
};
DOM.touchPos = function (el, touches) {
  // 暂时从 el 上获取 top/left， 后面需要动态获取
  if (!_l7Utils.isMini) {
    var rect = el.getBoundingClientRect();
    var points = [];
    var _iterator2 = _createForOfIteratorHelper(touches),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var touche = _step2.value;
        points.push(new _point.default(touche.clientX - rect.left - el.clientLeft, touche.clientY - rect.top - el.clientTop));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return points;
  } else {
    var _points = [];
    var _iterator3 = _createForOfIteratorHelper(touches),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _touche = _step3.value;
        _points.push(new _point.default(
        // @ts-ignore
        _touche.clientX - el.left,
        // @ts-ignore
        _touche.clientY - el.top));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return _points;
  }
};
DOM.mouseButton = function (e) {
  if (!_l7Utils.isMini) {
    return e.button;
  }
  if (
  // @ts-ignore
  typeof _l7Utils.$window.InstallTrigger !== 'undefined' && e.button === 2 && e.ctrlKey && _l7Utils.$window.navigator.platform.toUpperCase().indexOf('MAC') >= 0) {
    // Fix for https://github.com/mapbox/mapbox-gl-js/issues/3131:
    // Firefox (detected by InstallTrigger) on Mac determines e.button = 2 when
    // using Control + left click
    return 0;
  }
  return e.button;
};
DOM.remove = function (node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
};