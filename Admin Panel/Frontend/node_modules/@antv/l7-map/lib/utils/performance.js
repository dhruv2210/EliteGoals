"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PerformanceUtils = exports.PerformanceMarkers = void 0;
var _l7Utils = require("@antv/l7-utils");
var lastFrameTime = null;
var frameTimes = [];
var minFramerateTarget = 30;
var frameTimeTarget = 1000 / minFramerateTarget;
var performance = _l7Utils.$window.performance;
var PerformanceMarkers = {
  create: 'create',
  load: 'load',
  fullLoad: 'fullLoad'
};
exports.PerformanceMarkers = PerformanceMarkers;
var PerformanceUtils = {
  mark: function mark(marker) {
    performance.mark(marker);
  },
  frame: function frame(timestamp) {
    var currTimestamp = timestamp;
    if (lastFrameTime != null) {
      var frameTime = currTimestamp - lastFrameTime;
      frameTimes.push(frameTime);
    }
    lastFrameTime = currTimestamp;
  },
  clearMetrics: function clearMetrics() {
    lastFrameTime = null;
    frameTimes = [];
    performance.clearMeasures('loadTime');
    performance.clearMeasures('fullLoadTime');
    // @ts-ignore
    // tslint:disable-next-line:forin
    for (var marker in PerformanceMarkers) {
      // @ts-ignore
      performance.clearMarks(PerformanceMarkers[marker]);
    }
  },
  getPerformanceMetrics: function getPerformanceMetrics() {
    var loadTime = performance.measure('loadTime', PerformanceMarkers.create, PerformanceMarkers.load
    // @ts-ignore
    ).duration;
    var fullLoadTime = performance.measure('fullLoadTime', PerformanceMarkers.create, PerformanceMarkers.fullLoad
    // @ts-ignore
    ).duration;
    var totalFrames = frameTimes.length;
    var avgFrameTime = frameTimes.reduce(function (prev, curr) {
      return prev + curr;
    }, 0) / totalFrames / 1000;
    var fps = 1 / avgFrameTime;

    // count frames that missed our framerate target
    var droppedFrames = frameTimes.filter(function (frameTime) {
      return frameTime > frameTimeTarget;
    }).reduce(function (acc, curr) {
      return acc + (curr - frameTimeTarget) / frameTimeTarget;
    }, 0);
    var percentDroppedFrames = droppedFrames / (totalFrames + droppedFrames) * 100;
    return {
      loadTime: loadTime,
      fullLoadTime: fullLoadTime,
      fps: fps,
      percentDroppedFrames: percentDroppedFrames
    };
  }
};
exports.PerformanceUtils = PerformanceUtils;