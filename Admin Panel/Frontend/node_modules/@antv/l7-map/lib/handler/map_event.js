"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _events = require("./events");
// @ts-ignore
var MapEventHandler = /*#__PURE__*/function () {
  function MapEventHandler(map, options) {
    (0, _classCallCheck2.default)(this, MapEventHandler);
    this.map = map;
    this.clickTolerance = options.clickTolerance;
  }
  (0, _createClass2.default)(MapEventHandler, [{
    key: "reset",
    value: function reset() {
      // @ts-ignore
      delete this.mousedownPos;
    }
  }, {
    key: "wheel",
    value: function wheel(e) {
      // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
      // - ScrollZoom
      return this.firePreventable(new _events.MapWheelEvent(e.type, this.map, e));
    }
  }, {
    key: "mousedown",
    value: function mousedown(e, point) {
      this.mousedownPos = point;
      // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
      // - MousePan
      // - MouseRotate
      // - MousePitch
      // - DblclickHandler
      return this.firePreventable(new _events.MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mouseup",
    value: function mouseup(e) {
      this.map.emit(e.type, new _events.MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "click",
    value: function click(e, point) {
      if (this.mousedownPos && this.mousedownPos.dist(point) >= this.clickTolerance) {
        return;
      }
      this.map.emit(e.type, new _events.MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "dblclick",
    value: function dblclick(e) {
      // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
      // - DblClickZoom
      return this.firePreventable(new _events.MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mouseover",
    value: function mouseover(e) {
      this.map.emit(e.type, new _events.MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mouseout",
    value: function mouseout(e) {
      this.map.emit(e.type, new _events.MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "touchstart",
    value: function touchstart(e) {
      // If mapEvent.preventDefault() is called by the user, prevent handlers such as:
      // - TouchPan
      // - TouchZoom
      // - TouchRotate
      // - TouchPitch
      // - TapZoom
      // - SwipeZoom
      return this.firePreventable(new _events.MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "touchmove",
    value: function touchmove(e) {
      this.map.emit(e.type, new _events.MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "touchend",
    value: function touchend(e) {
      this.map.emit(e.type, new _events.MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "touchcancel",
    value: function touchcancel(e) {
      this.map.emit(e.type, new _events.MapTouchEvent(e.type, this.map, e));
    }
  }, {
    key: "firePreventable",
    value: function firePreventable(mapEvent) {
      this.map.emit(mapEvent.type, mapEvent);
      if (mapEvent.defaultPrevented) {
        // returning an object marks the handler as active and resets other handlers
        return {};
      }
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return true;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return false;
    }
  }, {
    key: "enable",
    value: function enable() {
      return false;
    }
  }, {
    key: "disable",
    value: function disable() {
      return false;
    }
  }]);
  return MapEventHandler;
}();
exports.default = MapEventHandler;