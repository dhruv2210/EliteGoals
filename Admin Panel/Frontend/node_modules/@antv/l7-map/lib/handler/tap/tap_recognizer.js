"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _single_tap_recognizer = _interopRequireWildcard(require("./single_tap_recognizer"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// @ts-ignore
var TapRecognizer = /*#__PURE__*/function () {
  function TapRecognizer(options) {
    (0, _classCallCheck2.default)(this, TapRecognizer);
    this.singleTap = new _single_tap_recognizer.default(options);
    this.numTaps = options.numTaps;
    this.reset();
  }
  (0, _createClass2.default)(TapRecognizer, [{
    key: "reset",
    value: function reset() {
      this.lastTime = Infinity;
      // @ts-ignore
      delete this.lastTap;
      this.count = 0;
      this.singleTap.reset();
    }
  }, {
    key: "touchstart",
    value: function touchstart(e, points, mapTouches) {
      this.singleTap.touchstart(e, points, mapTouches);
    }
  }, {
    key: "touchmove",
    value: function touchmove(e, points, mapTouches) {
      this.singleTap.touchmove(e, points, mapTouches);
    }
  }, {
    key: "touchend",
    value: function touchend(e, points, mapTouches) {
      var tap = this.singleTap.touchend(e, points, mapTouches);
      if (tap) {
        var soonEnough = e.timeStamp - this.lastTime < _single_tap_recognizer.MAX_TAP_INTERVAL;
        var closeEnough = !this.lastTap || this.lastTap.dist(tap) < _single_tap_recognizer.MAX_DIST;
        if (!soonEnough || !closeEnough) {
          this.reset();
        }
        this.count++;
        this.lastTime = e.timeStamp;
        this.lastTap = tap;
        if (this.count === this.numTaps) {
          this.reset();
          return tap;
        }
      }
    }
  }]);
  return TapRecognizer;
}();
exports.default = TapRecognizer;