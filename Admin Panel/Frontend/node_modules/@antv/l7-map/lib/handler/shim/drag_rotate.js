"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
/**
 * The `DragRotateHandler` allows the user to rotate the map by clicking and
 * dragging the cursor while holding the right mouse button or `ctrl` key.
 */
var DragRotateHandler = /*#__PURE__*/function () {
  /**
   * @param {Object} [options]
   * @param {number} [options.bearingSnap] The threshold, measured in degrees, that determines when the map's
   *   bearing will snap to north.
   * @param {bool} [options.pitchWithRotate=true] Control the map pitch in addition to the bearing
   * @private
   */
  function DragRotateHandler(options, mouseRotate, mousePitch) {
    (0, _classCallCheck2.default)(this, DragRotateHandler);
    this.pitchWithRotate = options.pitchWithRotate;
    this.mouseRotate = mouseRotate;
    this.mousePitch = mousePitch;
  }

  /**
   * Enables the "drag to rotate" interaction.
   *
   * @example
   * map.dragRotate.enable();
   */
  (0, _createClass2.default)(DragRotateHandler, [{
    key: "enable",
    value: function enable() {
      this.mouseRotate.enable();
      if (this.pitchWithRotate) {
        this.mousePitch.enable();
      }
    }

    /**
     * Disables the "drag to rotate" interaction.
     *
     * @example
     * map.dragRotate.disable();
     */
  }, {
    key: "disable",
    value: function disable() {
      this.mouseRotate.disable();
      this.mousePitch.disable();
    }

    /**
     * Returns a Boolean indicating whether the "drag to rotate" interaction is enabled.
     *
     * @returns {boolean} `true` if the "drag to rotate" interaction is enabled.
     */
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.mouseRotate.isEnabled() && (!this.pitchWithRotate || this.mousePitch.isEnabled());
    }

    /**
     * Returns a Boolean indicating whether the "drag to rotate" interaction is active, i.e. currently being used.
     *
     * @returns {boolean} `true` if the "drag to rotate" interaction is active.
     */
  }, {
    key: "isActive",
    value: function isActive() {
      return this.mouseRotate.isActive() || this.mousePitch.isActive();
    }
  }]);
  return DragRotateHandler;
}();
exports.default = DragRotateHandler;