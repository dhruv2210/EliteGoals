"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
/**
 * The `DoubleClickZoomHandler` allows the user to zoom the map at a point by
 * double clicking or double tapping.
 */
var DoubleClickZoomHandler = /*#__PURE__*/function () {
  /**
   * @private
   */
  function DoubleClickZoomHandler(clickZoom, TapZoom) {
    (0, _classCallCheck2.default)(this, DoubleClickZoomHandler);
    this.clickZoom = clickZoom;
    this.tapZoom = TapZoom;
  }

  /**
   * Enables the "double click to zoom" interaction.
   *
   * @example
   * map.doubleClickZoom.enable();
   */
  (0, _createClass2.default)(DoubleClickZoomHandler, [{
    key: "enable",
    value: function enable() {
      this.clickZoom.enable();
      this.tapZoom.enable();
    }

    /**
     * Disables the "double click to zoom" interaction.
     *
     * @example
     * map.doubleClickZoom.disable();
     */
  }, {
    key: "disable",
    value: function disable() {
      this.clickZoom.disable();
      this.tapZoom.disable();
    }

    /**
     * Returns a Boolean indicating whether the "double click to zoom" interaction is enabled.
     *
     * @returns {boolean} `true` if the "double click to zoom" interaction is enabled.
     */
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.clickZoom.isEnabled() && this.tapZoom.isEnabled();
    }

    /**
     * Returns a Boolean indicating whether the "double click to zoom" interaction is active, i.e. currently being used.
     *
     * @returns {boolean} `true` if the "double click to zoom" interaction is active.
     */
  }, {
    key: "isActive",
    value: function isActive() {
      return this.clickZoom.isActive() || this.tapZoom.isActive();
    }
  }]);
  return DoubleClickZoomHandler;
}();
exports.default = DoubleClickZoomHandler;