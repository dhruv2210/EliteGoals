"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _l7Utils = require("@antv/l7-utils");
/**
 * The `DragPanHandler` allows the user to pan the map by clicking and dragging
 * the cursor.
 */
var DragPanHandler = /*#__PURE__*/function () {
  /**
   * @private
   */
  function DragPanHandler(el, mousePan, touchPan) {
    (0, _classCallCheck2.default)(this, DragPanHandler);
    this.el = el;
    this.mousePan = mousePan;
    this.touchPan = touchPan;
  }

  /**
   * Enables the "drag to pan" interaction.
   *
   * @param {Object} [options] Options object
   * @param {number} [options.linearity=0] factor used to scale the drag velocity
   * @param {Function} [options.easing=bezier(0, 0, 0.3, 1)] easing function applled to `map.panTo` when applying the drag.
   * @param {number} [options.maxSpeed=1400] the maximum value of the drag velocity.
   * @param {number} [options.deceleration=2500] the rate at which the speed reduces after the pan ends.
   *
   * @example
   *   map.dragPan.enable();
   * @example
   *   map.dragPan.enable({
   *      linearity: 0.3,
   *      easing: bezier(0, 0, 0.3, 1),
   *      maxSpeed: 1400,
   *      deceleration: 2500,
   *   });
   */
  (0, _createClass2.default)(DragPanHandler, [{
    key: "enable",
    value: function enable(options) {
      this.inertiaOptions = options || {};
      this.mousePan.enable();
      this.touchPan.enable();
      if (!_l7Utils.isMini) {
        this.el.classList.add('l7-touch-drag-pan');
      }
    }

    /**
     * Disables the "drag to pan" interaction.
     *
     * @example
     * map.dragPan.disable();
     */
  }, {
    key: "disable",
    value: function disable() {
      this.mousePan.disable();
      this.touchPan.disable();
      if (!_l7Utils.isMini) {
        this.el.classList.remove('l7-touch-drag-pan');
      }
    }

    /**
     * Returns a Boolean indicating whether the "drag to pan" interaction is enabled.
     *
     * @returns {boolean} `true` if the "drag to pan" interaction is enabled.
     */
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.mousePan.isEnabled() && this.touchPan.isEnabled();
    }

    /**
     * Returns a Boolean indicating whether the "drag to pan" interaction is active, i.e. currently being used.
     *
     * @returns {boolean} `true` if the "drag to pan" interaction is active.
     */
  }, {
    key: "isActive",
    value: function isActive() {
      return this.mousePan.isActive() || this.touchPan.isActive();
    }
  }]);
  return DragPanHandler;
}();
exports.default = DragPanHandler;