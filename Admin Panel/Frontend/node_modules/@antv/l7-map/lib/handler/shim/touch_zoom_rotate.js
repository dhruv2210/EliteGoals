"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _l7Utils = require("@antv/l7-utils");
/**
 * The `TouchZoomRotateHandler` allows the user to zoom and rotate the map by
 * pinching on a touchscreen.
 *
 * They can zoom with one finger by double tapping and dragging. On the second tap,
 * hold the finger down and drag up or down to zoom in or out.
 */
var TouchZoomRotateHandler = /*#__PURE__*/function () {
  /**
   * @private
   */
  function TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom) {
    (0, _classCallCheck2.default)(this, TouchZoomRotateHandler);
    this.el = el;
    this.touchZoom = touchZoom;
    this.touchRotate = touchRotate;
    this.tapDragZoom = tapDragZoom;
    this.rotationDisabled = false;
    this.enabled = true;
  }

  /**
   * Enables the "pinch to rotate and zoom" interaction.
   *
   * @param {Object} [options] Options object.
   * @param {string} [options.around] If "center" is passed, map will zoom around the center
   *
   * @example
   *   map.touchZoomRotate.enable();
   * @example
   *   map.touchZoomRotate.enable({ around: 'center' });
   */
  (0, _createClass2.default)(TouchZoomRotateHandler, [{
    key: "enable",
    value: function enable(options) {
      this.touchZoom.enable(options);
      if (!this.rotationDisabled) {
        this.touchRotate.enable(options);
      }
      this.tapDragZoom.enable();
      if (!_l7Utils.isMini) {
        this.el.classList.add('l7-touch-zoom-rotate');
      }
    }

    /**
     * Disables the "pinch to rotate and zoom" interaction.
     *
     * @example
     *   map.touchZoomRotate.disable();
     */
  }, {
    key: "disable",
    value: function disable() {
      this.touchZoom.disable();
      this.touchRotate.disable();
      this.tapDragZoom.disable();
      if (!_l7Utils.isMini) {
        this.el.classList.remove('l7-touch-zoom-rotate');
      }
    }

    /**
     * Returns a Boolean indicating whether the "pinch to rotate and zoom" interaction is enabled.
     *
     * @returns {boolean} `true` if the "pinch to rotate and zoom" interaction is enabled.
     */
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.touchZoom.isEnabled() && (this.rotationDisabled || this.touchRotate.isEnabled()) && this.tapDragZoom.isEnabled();
    }

    /**
     * Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.
     *
     * @returns {boolean} //eslint-disable-line
     */
  }, {
    key: "isActive",
    value: function isActive() {
      return this.touchZoom.isActive() || this.touchRotate.isActive() || this.tapDragZoom.isActive();
    }

    /**
     * Disables the "pinch to rotate" interaction, leaving the "pinch to zoom"
     * interaction enabled.
     *
     * @example
     *   map.touchZoomRotate.disableRotation();
     */
  }, {
    key: "disableRotation",
    value: function disableRotation() {
      this.rotationDisabled = true;
      this.touchRotate.disable();
    }

    /**
     * Enables the "pinch to rotate" interaction.
     *
     * @example
     *   map.touchZoomRotate.enable();
     *   map.touchZoomRotate.enableRotation();
     */
  }, {
    key: "enableRotation",
    value: function enableRotation() {
      this.rotationDisabled = false;
      if (this.touchZoom.isEnabled()) {
        this.touchRotate.enable();
      }
    }
  }]);
  return TouchZoomRotateHandler;
}();
exports.default = TouchZoomRotateHandler;