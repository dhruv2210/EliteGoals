"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.altitudeFromMercatorZ = altitudeFromMercatorZ;
exports.circumferenceAtLatitude = circumferenceAtLatitude;
exports.default = void 0;
exports.latFromMercatorY = latFromMercatorY;
exports.lngFromMercatorX = lngFromMercatorX;
exports.mercatorScale = mercatorScale;
exports.mercatorXfromLng = mercatorXfromLng;
exports.mercatorYfromLat = mercatorYfromLat;
exports.mercatorZfromAltitude = mercatorZfromAltitude;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _lng_lat = _interopRequireWildcard(require("../geo/lng_lat"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * The average circumference of the world in meters.
 */
var earthCircumfrence = 2 * Math.PI * _lng_lat.earthRadius; // meters

/*
 * The circumference at a line of latitude in meters.
 */
function circumferenceAtLatitude(latitude) {
  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);
}
function mercatorXfromLng(lng) {
  return lng;
}
function mercatorYfromLat(lat) {
  return lat;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function mercatorZfromAltitude(altitude, lat) {
  return altitude;
}
function lngFromMercatorX(x) {
  return x;
}
function latFromMercatorY(y) {
  return y;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function altitudeFromMercatorZ(z, y) {
  return z;
}

/**
 * Determine the Mercator scale factor for a given latitude, see
 * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor
 *
 * At the equator the scale factor will be 1, which increases at higher latitudes.
 *
 * @param {number} lat Latitude
 * @returns {number} scale factor
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function mercatorScale(lat) {
  return 1;
}
var SimpleCoordinate = /*#__PURE__*/function () {
  function SimpleCoordinate(x, y) {
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    (0, _classCallCheck2.default)(this, SimpleCoordinate);
    this.x = +x;
    this.y = +y;
    this.z = +z;
  }
  (0, _createClass2.default)(SimpleCoordinate, [{
    key: "toLngLat",
    value: function toLngLat() {
      return new _lng_lat.default(this.x, this.y);
    }
  }, {
    key: "toAltitude",
    value: function toAltitude() {
      return this.z;
    }
  }, {
    key: "meterInMercatorCoordinateUnits",
    value: function meterInMercatorCoordinateUnits() {
      // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude
      return 1;
    }
  }], [{
    key: "fromLngLat",
    value: function fromLngLat(lngLatLike) {
      var altitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var lngLat = _lng_lat.default.convert(lngLatLike);
      return new SimpleCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));
    }
  }]);
  return SimpleCoordinate;
}();
exports.default = SimpleCoordinate;