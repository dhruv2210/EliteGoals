import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// @ts-ignore
// tslint:disable-next-line:no-submodule-imports
import { $window } from '@antv/l7-utils';
import { throttle } from 'lodash';
/*
 * Adds the map's position to its page's location hash.
 * Passed as an option to the map object.
 *
 * @returns {Hash} `this`
 */
var Hash = /*#__PURE__*/function () {
  function Hash(hashName) {
    var _this = this;
    _classCallCheck(this, Hash);
    _defineProperty(this, "onHashChange", function () {
      var loc = _this.getCurrentHash();
      if (loc.length >= 3 && !loc.some(function (v) {
        return isNaN(+v);
      })) {
        var bearing = _this.map.dragRotate.isEnabled() && _this.map.touchZoomRotate.isEnabled() ? +(loc[3] || 0) : _this.map.getBearing();
        _this.map.jumpTo({
          center: [+loc[2], +loc[1]],
          zoom: +loc[0],
          bearing: bearing,
          pitch: +(loc[4] || 0)
        });
        return true;
      }
      return false;
    });
    _defineProperty(this, "getCurrentHash", function () {
      // Get the current hash from location, stripped from its number sign
      var hash = window.location.hash.replace('#', '');
      if (_this.hashName) {
        // Split the parameter-styled hash into parts and find the value we need
        var keyval;
        hash.split('&').map(function (part) {
          return part.split('=');
        }).forEach(function (part) {
          if (part[0] === _this.hashName) {
            keyval = part;
          }
        });
        return (keyval ? keyval[1] || '' : '').split('/');
      }
      return hash.split('/');
    });
    _defineProperty(this, "updateHashUnthrottled", function () {
      var hash = _this.getHashString();
      try {
        window.history.replaceState(window.history.state, '', hash);
      } catch (SecurityError) {
        // IE11 does not allow this if the page is within an iframe created
        // with iframe.contentWindow.document.write(...).
        // https://github.com/mapbox/mapbox-gl-js/issues/7410
      }
    });
    this.hashName = hashName && encodeURIComponent(hashName);

    // Mobile Safari doesn't allow updating the hash more than 100 times per 30 seconds.
    this.updateHash = throttle(this.updateHashUnthrottled, 30 * 1000 / 100);
  }
  _createClass(Hash, [{
    key: "addTo",
    value: function addTo(map) {
      this.map = map;
      $window.addEventListener('hashchange', this.onHashChange, false);
      this.map.on('moveend', this.updateHash);
      return this;
    }
  }, {
    key: "remove",
    value: function remove() {
      $window.removeEventListener('hashchange', this.onHashChange, false);
      this.map.off('moveend', this.updateHash);
      // clearTimeout(this.updateHash());

      // @ts-ignore
      delete this.map;
      return this;
    }
  }, {
    key: "getHashString",
    value: function getHashString(mapFeedback) {
      var center = this.map.getCenter();
      var zoom = Math.round(this.map.getZoom() * 100) / 100;
      // derived from equation: 512px * 2^z / 360 / 10^d < 0.5px
      var precision = Math.ceil((zoom * Math.LN2 + Math.log(512 / 360 / 0.5)) / Math.LN10);
      var m = Math.pow(10, precision);
      var lng = Math.round(center.lng * m) / m;
      var lat = Math.round(center.lat * m) / m;
      var bearing = this.map.getBearing();
      var pitch = this.map.getPitch();
      var hash = '';
      if (mapFeedback) {
        // new map feedback site has some constraints that don't allow
        // us to use the same hash format as we do for the Map hash option.
        hash += "/".concat(lng, "/").concat(lat, "/").concat(zoom);
      } else {
        hash += "".concat(zoom, "/").concat(lat, "/").concat(lng);
      }
      if (bearing || pitch) {
        hash += "/".concat(Math.round(bearing * 10) / 10);
      }
      if (pitch) {
        hash += "/".concat(Math.round(pitch));
      }
      if (this.hashName) {
        var hashName = this.hashName;
        var found = false;
        var parts = window.location.hash.slice(1).split('&').map(function (part) {
          var key = part.split('=')[0];
          if (key === hashName) {
            found = true;
            return "".concat(key, "=").concat(hash);
          }
          return part;
        }).filter(function (a) {
          return a;
        });
        if (!found) {
          parts.push("".concat(hashName, "=").concat(hash));
        }
        return "#".concat(parts.join('&'));
      }
      return "#".concat(hash);
    }
  }]);
  return Hash;
}();
export default Hash;