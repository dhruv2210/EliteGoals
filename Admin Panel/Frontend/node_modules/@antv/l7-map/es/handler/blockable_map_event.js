import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
// @ts-ignore

import { MapMouseEvent } from "./events";
var BlockableMapEventHandler = /*#__PURE__*/function () {
  function BlockableMapEventHandler(map) {
    _classCallCheck(this, BlockableMapEventHandler);
    this.map = map;
  }
  _createClass(BlockableMapEventHandler, [{
    key: "reset",
    value: function reset() {
      this.delayContextMenu = false;
      // @ts-ignore
      delete this.contextMenuEvent;
    }
  }, {
    key: "mousemove",
    value: function mousemove(e) {
      // mousemove map events should not be fired when interaction handlers (pan, rotate, etc) are active
      this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
    }
  }, {
    key: "mousedown",
    value: function mousedown() {
      this.delayContextMenu = true;
    }
  }, {
    key: "mouseup",
    value: function mouseup() {
      this.delayContextMenu = false;
      if (this.contextMenuEvent) {
        this.map.emit('contextmenu', new MapMouseEvent('contextmenu', this.map, this.contextMenuEvent));
        // @ts-ignore
        delete this.contextMenuEvent;
      }
    }
  }, {
    key: "contextmenu",
    value: function contextmenu(e) {
      if (this.delayContextMenu) {
        // Mac: contextmenu fired on mousedown; we save it until mouseup for consistency's sake
        this.contextMenuEvent = e;
      } else {
        // Windows: contextmenu fired on mouseup, so fire event now
        this.map.emit(e.type, new MapMouseEvent(e.type, this.map, e));
      }

      // prevent browser context menu when necessary
      if (this.map.listeners('contextmenu')) {
        e.preventDefault();
      }
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return true;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return false;
    }
  }, {
    key: "enable",
    value: function enable() {
      return true;
    }
  }, {
    key: "disable",
    value: function disable() {
      return false;
    }
  }]);
  return BlockableMapEventHandler;
}();
export { BlockableMapEventHandler as default };