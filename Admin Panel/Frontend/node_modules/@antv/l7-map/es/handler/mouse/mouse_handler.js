import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
// @ts-ignore

import DOM from "../../utils/dom";
import { buttonStillPressed } from "./util";
var MouseHandler = /*#__PURE__*/function () {
  function MouseHandler(options) {
    _classCallCheck(this, MouseHandler);
    this.reset();
    this.clickTolerance = options.clickTolerance || 1;
  }
  _createClass(MouseHandler, [{
    key: "reset",
    value: function reset() {
      this.active = false;
      this.moved = false;
      // @ts-ignore
      delete this.lastPoint;
      // @ts-ignore
      delete this.eventButton;
    }
  }, {
    key: "mousedown",
    value: function mousedown(e, point) {
      if (this.lastPoint) {
        return;
      }
      var eventButton = DOM.mouseButton(e);
      if (!this.correctButton(e, eventButton)) {
        return;
      }
      this.lastPoint = point;
      this.eventButton = eventButton;
    }
  }, {
    key: "mousemoveWindow",
    value: function mousemoveWindow(e, point) {
      var lastPoint = this.lastPoint;
      if (!lastPoint) {
        return;
      }
      e.preventDefault();
      if (buttonStillPressed(e, this.eventButton)) {
        // Some browsers don't fire a `mouseup` when the mouseup occurs outside
        // the window or iframe:
        // https://github.com/mapbox/mapbox-gl-js/issues/4622
        //
        // If the button is no longer pressed during this `mousemove` it may have
        // been released outside of the window or iframe.
        this.reset();
        return;
      }
      if (!this.moved && point.dist(lastPoint) < this.clickTolerance) {
        return;
      }
      this.moved = true;
      this.lastPoint = point;

      // implemented by child class
      return this.move(lastPoint, point);
    }
  }, {
    key: "mouseupWindow",
    value: function mouseupWindow(e) {
      if (!this.lastPoint) {
        return;
      }
      var eventButton = DOM.mouseButton(e);
      if (eventButton !== this.eventButton) {
        return;
      }
      if (this.moved) {
        DOM.suppressClick();
      }
      this.reset();
    }
  }, {
    key: "enable",
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.reset();
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "correctButton",
    value: function correctButton(e, button) {
      // eslint-disable-line
      return false; // implemented by child
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "move",
    value: function move(lastPoint, point) {
      // eslint-disable-line
      return; // implemented by child
    }
  }]);
  return MouseHandler;
}();
export { MouseHandler as default };