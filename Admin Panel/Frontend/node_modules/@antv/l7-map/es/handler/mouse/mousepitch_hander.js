import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-ignore

import MouseHandler from "./mouse_handler";
import { LEFT_BUTTON, RIGHT_BUTTON } from "./util";
var MousePitchHandler = /*#__PURE__*/function (_MouseHandler) {
  _inherits(MousePitchHandler, _MouseHandler);
  var _super = _createSuper(MousePitchHandler);
  function MousePitchHandler() {
    _classCallCheck(this, MousePitchHandler);
    return _super.apply(this, arguments);
  }
  _createClass(MousePitchHandler, [{
    key: "correctButton",
    value: function correctButton(e, button) {
      return button === LEFT_BUTTON && e.ctrlKey || button === RIGHT_BUTTON;
    }
  }, {
    key: "move",
    value: function move(lastPoint, point) {
      var degreesPerPixelMoved = -0.5;
      var pitchDelta = (point.y - lastPoint.y) * degreesPerPixelMoved;
      if (pitchDelta) {
        this.active = true;
        return {
          pitchDelta: pitchDelta
        };
      }
    }
  }, {
    key: "contextmenu",
    value: function contextmenu(e) {
      // prevent browser context menu when necessary; we don't allow it with rotation
      // because we can't discern rotation gesture start from contextmenu on Mac
      e.preventDefault();
    }
  }]);
  return MousePitchHandler;
}(MouseHandler);
export { MousePitchHandler as default };