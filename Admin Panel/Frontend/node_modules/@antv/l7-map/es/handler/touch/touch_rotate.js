import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-ignore

import TwoTouchHandler from "./two_touch";
var ROTATION_THRESHOLD = 25; // pixels along circumference of touch circle

function getBearingDelta(a, b) {
  return a.angleWith(b) * 180 / Math.PI;
}
var TouchRotateHandler = /*#__PURE__*/function (_TwoTouchHandler) {
  _inherits(TouchRotateHandler, _TwoTouchHandler);
  var _super = _createSuper(TouchRotateHandler);
  function TouchRotateHandler() {
    _classCallCheck(this, TouchRotateHandler);
    return _super.apply(this, arguments);
  }
  _createClass(TouchRotateHandler, [{
    key: "reset",
    value: function reset() {
      _get(_getPrototypeOf(TouchRotateHandler.prototype), "reset", this).call(this);
      // @ts-ignore
      delete this.minDiameter;
      // @ts-ignore
      delete this.startVector;
      // @ts-ignore
      delete this.vector;
    }
  }, {
    key: "start",
    value: function start(points) {
      this.startVector = this.vector = points[0].sub(points[1]);
      this.minDiameter = points[0].dist(points[1]);
    }
  }, {
    key: "move",
    value: function move(points, pinchAround) {
      var lastVector = this.vector;
      this.vector = points[0].sub(points[1]);
      if (!this.active && this.isBelowThreshold(this.vector)) {
        return;
      }
      this.active = true;
      return {
        bearingDelta: getBearingDelta(this.vector, lastVector),
        pinchAround: pinchAround
      };
    }
  }, {
    key: "isBelowThreshold",
    value: function isBelowThreshold(vector) {
      /*
       * The threshold before a rotation actually happens is configured in
       * pixels alongth circumference of the circle formed by the two fingers.
       * This makes the threshold in degrees larger when the fingers are close
       * together and smaller when the fingers are far apart.
       *
       * Use the smallest diameter from the whole gesture to reduce sensitivity
       * when pinching in and out.
       */

      this.minDiameter = Math.min(this.minDiameter, vector.mag());
      var circumference = Math.PI * this.minDiameter;
      var threshold = ROTATION_THRESHOLD / circumference * 360;
      var bearingDeltaSinceStart = getBearingDelta(vector, this.startVector);
      return Math.abs(bearingDeltaSinceStart) < threshold;
    }
  }]);
  return TouchRotateHandler;
}(TwoTouchHandler);
export { TouchRotateHandler as default };