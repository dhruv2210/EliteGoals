import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
// @ts-ignore

import TwoTouchHandler from "./two_touch";
function isVertical(vector) {
  return Math.abs(vector.y) > Math.abs(vector.x);
}
var ALLOWED_SINGLE_TOUCH_TIME = 100;
var TouchPitchHandler = /*#__PURE__*/function (_TwoTouchHandler) {
  _inherits(TouchPitchHandler, _TwoTouchHandler);
  var _super = _createSuper(TouchPitchHandler);
  function TouchPitchHandler() {
    _classCallCheck(this, TouchPitchHandler);
    return _super.apply(this, arguments);
  }
  _createClass(TouchPitchHandler, [{
    key: "reset",
    value: function reset() {
      _get(_getPrototypeOf(TouchPitchHandler.prototype), "reset", this).call(this);
      this.valid = undefined;
      // @ts-ignore
      delete this.firstMove;
      // @ts-ignore
      delete this.lastPoints;
    }
  }, {
    key: "start",
    value: function start(points) {
      this.lastPoints = points;
      if (isVertical(points[0].sub(points[1]))) {
        // fingers are more horizontal than vertical
        this.valid = false;
      }
    }
  }, {
    key: "move",
    value: function move(points, center, e) {
      var vectorA = points[0].sub(this.lastPoints[0]);
      var vectorB = points[1].sub(this.lastPoints[1]);
      this.valid = this.gestureBeginsVertically(vectorA, vectorB, e.timeStamp);
      if (!this.valid) {
        return;
      }
      this.lastPoints = points;
      this.active = true;
      var yDeltaAverage = (vectorA.y + vectorB.y) / 2;
      var degreesPerPixelMoved = -0.5;
      return {
        pitchDelta: yDeltaAverage * degreesPerPixelMoved
      };
    }
  }, {
    key: "gestureBeginsVertically",
    value: function gestureBeginsVertically(vectorA, vectorB, timeStamp) {
      if (this.valid !== undefined) {
        return this.valid;
      }
      var threshold = 2;
      var movedA = vectorA.mag() >= threshold;
      var movedB = vectorB.mag() >= threshold;

      // neither finger has moved a meaningful amount, wait
      if (!movedA && !movedB) {
        return;
      }

      // One finger has moved and the other has not.
      // If enough time has passed, decide it is not a pitch.
      if (!movedA || !movedB) {
        if (this.firstMove === undefined) {
          this.firstMove = timeStamp;
        }
        if (timeStamp - this.firstMove < ALLOWED_SINGLE_TOUCH_TIME) {
          // still waiting for a movement from the second finger
          return undefined;
        } else {
          return false;
        }
      }
      var isSameDirection = vectorA.y > 0 === vectorB.y > 0;
      return isVertical(vectorA) && isVertical(vectorB) && isSameDirection;
    }
  }]);
  return TouchPitchHandler;
}(TwoTouchHandler);
export { TouchPitchHandler as default };