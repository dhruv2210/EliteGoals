import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { Event } from "./event";
var MapWheelEvent = /*#__PURE__*/function (_Event) {
  _inherits(MapWheelEvent, _Event);
  var _super = _createSuper(MapWheelEvent);
  /**
   * The event type.
   */

  /**
   * The DOM event which caused the map event.
   */

  /**
   * The `Map` object that fired the event.
   */

  /**
   * @private
   */
  function MapWheelEvent(type, map, originalEvent) {
    var _this;
    _classCallCheck(this, MapWheelEvent);
    _this = _super.call(this, type, {
      originalEvent: originalEvent
    });
    _this.defaultPrevented = false;
    return _this;
  }

  /**
   * Prevents subsequent default processing of the event by the map.
   *
   * Calling this method will prevent the the behavior of {@link ScrollZoomHandler}.
   */
  _createClass(MapWheelEvent, [{
    key: "preventDefault",
    value: function preventDefault() {
      this.defaultPrevented = true;
    }
  }]);
  return MapWheelEvent;
}(Event);
export { MapWheelEvent as default };