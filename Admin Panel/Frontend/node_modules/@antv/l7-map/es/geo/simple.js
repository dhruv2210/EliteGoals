import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import LngLat, { earthRadius } from "../geo/lng_lat";

/*
 * The average circumference of the world in meters.
 */
var earthCircumfrence = 2 * Math.PI * earthRadius; // meters

/*
 * The circumference at a line of latitude in meters.
 */
export function circumferenceAtLatitude(latitude) {
  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);
}
export function mercatorXfromLng(lng) {
  return lng;
}
export function mercatorYfromLat(lat) {
  return lat;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function mercatorZfromAltitude(altitude, lat) {
  return altitude;
}
export function lngFromMercatorX(x) {
  return x;
}
export function latFromMercatorY(y) {
  return y;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function altitudeFromMercatorZ(z, y) {
  return z;
}

/**
 * Determine the Mercator scale factor for a given latitude, see
 * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor
 *
 * At the equator the scale factor will be 1, which increases at higher latitudes.
 *
 * @param {number} lat Latitude
 * @returns {number} scale factor
 * @private
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export function mercatorScale(lat) {
  return 1;
}
var SimpleCoordinate = /*#__PURE__*/function () {
  function SimpleCoordinate(x, y) {
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    _classCallCheck(this, SimpleCoordinate);
    this.x = +x;
    this.y = +y;
    this.z = +z;
  }
  _createClass(SimpleCoordinate, [{
    key: "toLngLat",
    value: function toLngLat() {
      return new LngLat(this.x, this.y);
    }
  }, {
    key: "toAltitude",
    value: function toAltitude() {
      return this.z;
    }
  }, {
    key: "meterInMercatorCoordinateUnits",
    value: function meterInMercatorCoordinateUnits() {
      // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude
      return 1;
    }
  }], [{
    key: "fromLngLat",
    value: function fromLngLat(lngLatLike) {
      var altitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var lngLat = LngLat.convert(lngLatLike);
      return new SimpleCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));
    }
  }]);
  return SimpleCoordinate;
}();
export { SimpleCoordinate as default };