import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import BaseLayer from "../core/BaseLayer";
import PointModels from "./models/index";
var PointLayer = /*#__PURE__*/function (_BaseLayer) {
  _inherits(PointLayer, _BaseLayer);
  var _super = _createSuper(PointLayer);
  function PointLayer() {
    var _this;
    _classCallCheck(this, PointLayer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "type", 'PointLayer');
    _defineProperty(_assertThisInitialized(_this), "defaultSourceConfig", {
      data: [],
      options: {
        parser: {
          type: 'json',
          x: 'lng',
          y: 'lat'
        }
      }
    });
    return _this;
  }
  _createClass(PointLayer, [{
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var modelType;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              modelType = this.getModelType();
              if (this.layerModel) {
                this.layerModel.clearModels();
              }
              this.layerModel = new PointModels[modelType](this);
              _context.next = 5;
              return this.initLayerModels();
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "rebuildModels",
    value: function () {
      var _rebuildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.buildModels();
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function rebuildModels() {
        return _rebuildModels.apply(this, arguments);
      }
      return rebuildModels;
    }()
    /**
     * 在未传入数据的时候判断点图层的 shape 类型
     * @returns
     */
  }, {
    key: "getModelTypeWillEmptyData",
    value: function getModelTypeWillEmptyData() {
      if (this.shapeOption) {
        var _this$shapeOption = this.shapeOption,
          field = _this$shapeOption.field,
          values = _this$shapeOption.values;
        var _this$getLayerConfig = this.getLayerConfig(),
          shape2d = _this$getLayerConfig.shape2d;
        var iconMap = this.iconService.getIconMap();
        if (field && (shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(field)) !== -1) {
          return 'fill';
        }
        if (values === 'text') {
          return 'text';
        }
        if (values && values instanceof Array) {
          var _iterator = _createForOfIteratorHelper(values),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var v = _step.value;
              if (typeof v === 'string' && iconMap.hasOwnProperty(v)) {
                return 'image';
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
      return 'normal';
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      var type = this.getModelType();
      var defaultConfig = {
        fillImage: {},
        normal: {
          blend: 'additive'
        },
        radar: {},
        simplePoint: {},
        fill: {
          blend: 'normal'
        },
        extrude: {},
        image: {},
        text: {
          blend: 'normal'
        },
        tile: {},
        tileText: {},
        earthFill: {},
        earthExtrude: {}
      };
      return defaultConfig[type];
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      //  2D、 3d、 shape、image、text、normal、
      var layerData = this.getEncodedData();
      var _this$getLayerConfig2 = this.getLayerConfig(),
        shape2d = _this$getLayerConfig2.shape2d,
        shape3d = _this$getLayerConfig2.shape3d;
      var iconMap = this.iconService.getIconMap();
      var item = layerData.find(function (fe) {
        return fe.hasOwnProperty('shape');
      });
      if (!item) {
        return this.getModelTypeWillEmptyData();
      } else {
        var shape = item.shape;
        if (shape === 'dot') {
          return 'normal';
        }
        if (shape === 'simple') {
          return 'simplePoint';
        }
        if (shape === 'radar') {
          return 'radar';
        }
        if (this.layerType === 'fillImage') {
          return 'fillImage';
        }
        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
          if (this.mapService.version === 'GLOBEL') {
            return 'earthFill';
          } else {
            return 'fill';
          }
        }
        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {
          if (this.mapService.version === 'GLOBEL') {
            return 'earthExtrude';
          } else {
            return 'extrude';
          }
        }
        if (iconMap.hasOwnProperty(shape)) {
          return 'image';
        }
        return 'text';
      }
    }
  }]);
  return PointLayer;
}(BaseLayer);
export { PointLayer as default };