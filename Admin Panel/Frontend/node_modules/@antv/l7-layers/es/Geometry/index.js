import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import BaseLayer from "../core/BaseLayer";
import GeometryModels from "./models";
var GeometryLayer = /*#__PURE__*/function (_BaseLayer) {
  _inherits(GeometryLayer, _BaseLayer);
  var _super = _createSuper(GeometryLayer);
  function GeometryLayer() {
    var _this;
    _classCallCheck(this, GeometryLayer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "type", 'GeometryLayer');
    _defineProperty(_assertThisInitialized(_this), "defaultSourceConfig", {
      data: [{
        x: 0,
        y: 0
      }],
      options: {
        parser: {
          type: 'json',
          x: 'x',
          y: 'y'
        }
      }
    });
    return _this;
  }
  _createClass(GeometryLayer, [{
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var modelType;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              modelType = this.getModelType();
              this.layerModel = new GeometryModels[modelType](this);
              _context.next = 4;
              return this.initLayerModels();
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      var type = this.getModelType();
      var defaultConfig = {
        plane: {},
        sprite: {},
        billboard: {}
      };
      return defaultConfig[type];
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      var _shapeAttribute$scale;
      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');
      var shape = shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;
      if (shape === 'plane') {
        return 'plane';
      } else if (shape === 'sprite') {
        return 'sprite';
      } else if (shape === 'billboard') {
        return 'billboard';
      } else {
        return 'plane';
      }
    }
  }]);
  return GeometryLayer;
}(BaseLayer);
export { GeometryLayer as default };