import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import BaseLayer from "../core/BaseLayer";
import PolygonModels from "./models/";
var PolygonLayer = /*#__PURE__*/function (_BaseLayer) {
  _inherits(PolygonLayer, _BaseLayer);
  var _super = _createSuper(PolygonLayer);
  function PolygonLayer() {
    var _this;
    _classCallCheck(this, PolygonLayer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "type", 'PolygonLayer');
    return _this;
  }
  _createClass(PolygonLayer, [{
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var shape;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              shape = this.getModelType();
              this.layerModel = new PolygonModels[shape](this);
              _context.next = 4;
              return this.initLayerModels();
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "getModelType",
    value: function getModelType() {
      var _shapeAttribute$scale;
      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');
      var shape = shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;
      if (shape === 'fill' || !shape) {
        return 'fill';
      } else if (shape === 'extrude') {
        return 'extrude';
      } else if (shape === 'water') {
        return 'water';
      } else if (shape === 'ocean') {
        return 'ocean';
      } else if (shape === 'line') {
        return 'line';
      } else {
        return this.getPointModelType();
      }
    }
  }, {
    key: "getPointModelType",
    value: function getPointModelType() {
      // pointlayer
      //  2D、 3d、 shape、image、text、normal、
      var layerData = this.getEncodedData();
      var _this$getLayerConfig = this.getLayerConfig(),
        shape2d = _this$getLayerConfig.shape2d,
        shape3d = _this$getLayerConfig.shape3d;
      var iconMap = this.iconService.getIconMap();
      var item = layerData.find(function (fe) {
        return fe.hasOwnProperty('shape');
      });
      if (!item) {
        return 'fill';
      } else {
        var shape = item.shape;
        if (shape === 'dot') {
          return 'point_normal';
        }
        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
          return 'point_fill';
        }
        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {
          return 'point_extrude';
        }
        if (iconMap.hasOwnProperty(shape)) {
          return 'point_image';
        }
        return 'text';
      }
    }
  }]);
  return PolygonLayer;
}(BaseLayer);
export { PolygonLayer as default };