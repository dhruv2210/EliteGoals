import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import { Version } from '@antv/l7-maps';
import { rgb2arr } from '@antv/l7-utils';
import { isNumber } from 'lodash';
import BaseModel from "../../core/BaseModel";
import { polygonTriangulation } from "../../core/triangulation";
/* babel-plugin-inline-import '../shaders/water/polygon_ocean_frag.glsl' */
var ocean_frag = "\nuniform float u_time: 0.0;\nuniform float u_opacity: 1.0;\n\nvarying vec2 v_uv;\n\nfloat coast2water_fadedepth = 0.10;\nfloat large_waveheight      = .750; // change to adjust the \"heavy\" waves\nfloat large_wavesize        = 3.4;  // factor to adjust the large wave size\nfloat small_waveheight      = 0.6;  // change to adjust the small random waves\nfloat small_wavesize        = 0.5;   // factor to ajust the small wave size\nfloat water_softlight_fact  = 15.;  // range [1..200] (should be << smaller than glossy-fact)\nfloat water_glossylight_fact= 120.; // range [1..200]\nfloat particle_amount       = 70.;\n// vec3 watercolor             = vec3(0.43, 0.60, 0.66); // 'transparent' low-water color (RGB)\n// vec3 watercolor2            = vec3(0.06, 0.07, 0.11); // deep-water color (RGB, should be darker than the low-water color)\nuniform vec4 u_watercolor;\nuniform vec4 u_watercolor2;\nvec3 water_specularcolor    = vec3(1.3, 1.3, 0.9);    // specular Color (RGB) of the water-highlights\n#define light                 vec3(-0., sin(u_time*0.5)*.5 + .35, 2.8) // position of the sun\n\nuniform sampler2D u_texture1;\nuniform sampler2D u_texture2;\nuniform sampler2D u_texture3;\n\n  \n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453123);\n}\n\n// 2d noise function\nfloat noise1( in vec2 x ) {\n  vec2 p  = floor(x);\n  vec2 f  = smoothstep(0.0, 1.0, fract(x));\n  float n = p.x + p.y*57.0;\n  return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\n\nfloat noise(vec2 p) {\n    return texture2D(u_texture2,p*vec2(1./256.)).x;\n}\n\nvec4 highness(vec2 p) {\n    vec4 t = texture2D(u_texture1,fract(p));\n    float clipped = -2.0-smoothstep(3.,10.,t.a)*6.9-smoothstep(10.,100.,t.a)*89.9-smoothstep(0.,10000.,t.a)*10000.0;\n    return clamp(t, 0.0,3.0)+clamp(t/3.0-1.0, 0.0,1.0)+clamp(t/16.0-1.0, 0.0,1.0);\n}\n\nfloat height_map( vec2 p ) {\n    vec4 height=highness(p);\n    /*\n    height = -0.5+\n        0.5*smoothstep(-100.,0.,-height)+\n        2.75*smoothstep(0.,2.,height)+\n        1.75*smoothstep(2.,4.,height)+\n        2.75*smoothstep(4.,16.,height)+\n        1.5*smoothstep(16.,1000.,height);\n    */\n\n    mat2 m = mat2( 0.9563*1.4,  -0.2924*1.4,  0.2924*1.4,  0.9563*1.4 );\n    //p = p*6.;\n    float f = 0.6000*noise1( p ); p = m*p*1.1*6.;\n    f += 0.2500*noise( p ); p = m*p*1.32;\n    f += 0.1666*noise( p ); p = m*p*1.11;\n    f += 0.0834*noise( p ); p = m*p*1.12;\n    f += 0.0634*noise( p ); p = m*p*1.13;\n    f += 0.0444*noise( p ); p = m*p*1.14;\n    f += 0.0274*noise( p ); p = m*p*1.15;\n    f += 0.0134*noise( p ); p = m*p*1.16;\n    f += 0.0104*noise( p ); p = m*p*1.17;\n    f += 0.0084*noise( p );\n    f = .25*f+dot(height,vec4(-.03125,-.125,.25,.25))*.5;\n        const float FLAT_LEVEL = 0.92525;\n        //f = f*0.25+height*0.75;\n    if (f<FLAT_LEVEL)\n        f = f;\n    else\n        f = pow((f-FLAT_LEVEL)/(1.-FLAT_LEVEL), 2.)*(1.-FLAT_LEVEL)*2.0+FLAT_LEVEL; // makes a smooth coast-increase\n    return clamp(f, 0., 10.);\n}\n\nvec3 plasma_quintic( float x ) {\n    x = clamp( x, 0.0, 1.0);\n    vec4 x1 = vec4( 1.0, x, x * x, x * x * x ); // 1 x x2 x3\n    vec4 x2 = x1 * x1.w * x; // x4 x5 x6 x7\n    return vec3(\n        dot( x1.xyzw, vec4( +0.063861086, +1.992659096, -1.023901152, -0.490832805 ) ) + dot( x2.xy, vec2( +1.308442123, -0.914547012 ) ),\n        dot( x1.xyzw, vec4( +0.049718590, -0.791144343, +2.892305078, +0.811726816 ) ) + dot( x2.xy, vec2( -4.686502417, +2.717794514 ) ),\n        dot( x1.xyzw, vec4( +0.513275779, +1.580255060, -5.164414457, +4.559573646 ) ) + dot( x2.xy, vec2( -1.916810682, +0.570638854 ) ) );\n}\n\nvec4 color(vec2 p){\n    vec4 c1 = vec4(1.7,1.6,.9,1);\n    vec4 c2 = vec4(.2,.94,.1,1);\n    vec4 c3 = vec4(.3,.2,.0,1);\n    vec4 c4 = vec4(.99,.99,1.6,1);\n    vec4 v = highness(p);\n    float los = smoothstep(0.1,1.1,v.b);\n    float his = smoothstep(3.5,6.5,v.b);\n    float ces = smoothstep(1.,5.,v.a);\n    vec4 lo = mix(c1,c2,los);\n    vec4 hi = mix(c3,c4,his);\n    vec4 ce = mix(lo,hi,ces);\n\n    return vec4(plasma_quintic(ces),1).ragb;\n}\n\nvec3 terrain_map( vec2 p )\n{\n  return color(p).rgb*0.75+0.25*vec3(0.7, .55, .4)+texture2D(u_texture3, fract(p*5.)).rgb*.5; // test-terrain is simply 'sandstone'\n}\n\nconst mat2 m = mat2( 0.72, -1.60,  1.60,  0.72 );\n\nfloat water_map( vec2 p, float height ) {\n    vec2 p2 = p*large_wavesize;\n    vec2 shift1 = 0.001*vec2( u_time*160.0*2.0, u_time*120.0*2.0 );\n    vec2 shift2 = 0.001*vec2( u_time*190.0*2.0, -u_time*130.0*2.0 );\n\n    // coarse crossing 'ocean' waves...\n    float f = 0.6000*noise( p );\n    f += 0.2500*noise( p*m );\n    f += 0.1666*noise( p*m*m );\n    float wave = sin(p2.x*0.622+p2.y*0.622+shift2.x*4.269)*large_waveheight*f*height*height ;\n\n    p *= small_wavesize;\n    f = 0.;\n    float amp = 1.0, s = .5;\n    for (int i=0; i<9; i++)\n    { p = m*p*.947; f -= amp*abs(sin((noise( p+shift1*s )-.5)*2.)); amp = amp*.59; s*=-1.329; }\n    \n    return wave+f*small_waveheight;\n}\n\nfloat nautic(vec2 p) {\n    p *= 18.;\n    float f = 0.;\n    float amp = 1.0, s = .5;\n    for (int i=0; i<3; i++)\n    { p = m*p*1.2; f += amp*abs(smoothstep(0., 1., noise( p+u_time*s ))-.5); amp = amp*.5; s*=-1.227; }\n    return pow(1.-f, 5.);\n}\n\nfloat particles(vec2 p) {\n    p *= 200.;\n    float f = 0.;\n    float amp = 1.0, s = 1.5;\n    for (int i=0; i<3; i++)\n    { p = m*p*1.2; f += amp*noise( p+u_time*s ); amp = amp*.5; s*=-1.227; }\n    return pow(f*.35, 7.)*particle_amount;\n}\n\nfloat test_shadow( vec2 xy, float height) {\n    vec3 r0 = vec3(xy, height);\n    vec3 rd = normalize( light - r0 );\n    \n    float hit = 1.0;\n    float t   = 0.001;\n    for (int j=1; j<25; j++)\n    {\n        vec3 p = r0 + t*rd;\n        float h = height_map( p.xy );\n        float height_diff = p.z - h;\n        if (height_diff<0.0)\n        {\n            return 0.0;\n        }\n        t += 0.01+height_diff*.02;\n        hit = min(hit, 2.*height_diff/t); // soft shaddow   \n    }\n    return hit;\n}\n\nvec3 CalcTerrain(vec2 uv, float height) {\n    vec3 col = terrain_map( uv );\n    vec2 iResolution = vec2(512.);\n    float h1 = height_map(uv-vec2(0., 0.5)/ iResolution.xy);\n    float h2 = height_map(uv+vec2(0., 0.5)/ iResolution.xy);\n    float h3 = height_map(uv-vec2(0.5, 0.)/ iResolution.xy);\n    float h4 = height_map(uv+vec2(0.5, 0.)/ iResolution.xy);\n    vec3 norm = normalize(vec3(h3-h4, h1-h2, 1.));\n    vec3 r0 = vec3(uv, height);\n    vec3 rd = normalize( light - r0 );\n    float grad = dot(norm, rd);\n    col *= grad+pow(grad, 8.);\n    float terrainshade = test_shadow( uv, height );\n    col = mix(col*.25, col, terrainshade);\n    return col;\n}\n\n\nvoid main() {\n  vec3 watercolor = u_watercolor.rgb;\n  vec3 watercolor2 = u_watercolor2.rgb;\n  vec2 uv = v_uv;\n  float WATER_LEVEL = 0.84; // Water level (range: 0.0 - 2.0)\n  float deepwater_fadedepth   = 0.4 + coast2water_fadedepth;\n  float height = height_map( uv );\n  vec3 col;\n\n    float waveheight = clamp(WATER_LEVEL*3.-1.5, 0., 1.);\n    float level = WATER_LEVEL + .2*water_map(uv*15. + vec2(u_time*.1), waveheight);\n    if (height > level)\n    {\n        col = CalcTerrain(uv, height);\n    }\n    if (height <= level)\n    {\n        vec2 dif = vec2(.0, .01);\n        vec2 pos = uv*15. + vec2(u_time*.01);\n        float h1 = water_map(pos-dif,waveheight);\n        float h2 = water_map(pos+dif,waveheight);\n        float h3 = water_map(pos-dif.yx,waveheight);\n        float h4 = water_map(pos+dif.yx,waveheight);\n        vec3 normwater = normalize(vec3(h3-h4, h1-h2, .125)); // norm-vector of the 'bumpy' water-plane\n        uv += normwater.xy*.002*(level-height);\n        \n        col = CalcTerrain(uv, height);\n\n        float coastfade = clamp((level-height)/coast2water_fadedepth, 0., 1.);\n        float coastfade2= clamp((level-height)/deepwater_fadedepth, 0., 1.);\n        float intensity = col.r*.2126+col.g*.7152+col.b*.0722;\n        watercolor = mix(watercolor*intensity, watercolor2, smoothstep(0., 1., coastfade2));\n\n        vec3 r0 = vec3(uv, WATER_LEVEL);\n        vec3 rd = normalize( light - r0 ); // ray-direction to the light from water-position\n        float grad     = dot(normwater, rd); // dot-product of norm-vector and light-direction\n        float specular = pow(grad, water_softlight_fact);  // used for soft highlights                          \n        float specular2= pow(grad, water_glossylight_fact); // used for glossy highlights\n        float gradpos  = dot(vec3(0., 0., 1.), rd);\n        float specular1= smoothstep(0., 1., pow(gradpos, 5.));  // used for diffusity (some darker corona around light's specular reflections...)                          \n        float watershade  = test_shadow( uv, level );\n        watercolor *= 2.2+watershade;\n        watercolor += (.2+.8*watershade) * ((grad-1.0)*.5+specular) * .25;\n        watercolor /= (1.+specular1*1.25);\n        watercolor += watershade*specular2*water_specularcolor;\n        watercolor += watershade*coastfade*(1.-coastfade2)*(vec3(.5, .6, .7)*nautic(uv)+vec3(1., 1., 1.)*particles(uv));\n        \n        col = mix(col, watercolor, coastfade);\n    }\n    \n\n  float opacity = u_opacity;\n  gl_FragColor = vec4(col, opacity);  \n}\n";
/* babel-plugin-inline-import '../shaders/water/polygon_ocean_vert.glsl' */
var ocean_vert = "attribute vec2 a_uv;\nattribute vec3 a_Position;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\n\nvarying vec2 v_uv;\n\n#pragma include \"projection\"\n\nvoid main() {\n  v_uv = a_uv;\n\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n  }\n}\n\n";
var OceanModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(OceanModel, _BaseModel);
  var _super = _createSuper(OceanModel);
  function OceanModel() {
    _classCallCheck(this, OceanModel);
    return _super.apply(this, arguments);
  }
  _createClass(OceanModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
        _ref$opacity = _ref.opacity,
        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
        _ref$watercolor = _ref.watercolor,
        watercolor = _ref$watercolor === void 0 ? '#6D99A8' : _ref$watercolor,
        _ref$watercolor2 = _ref.watercolor2,
        watercolor2 = _ref$watercolor2 === void 0 ? '#0F121C' : _ref$watercolor2;
      return {
        u_texture1: this.texture1,
        u_texture2: this.texture2,
        u_texture3: this.texture3,
        u_watercolor: rgb2arr(watercolor),
        u_watercolor2: rgb2arr(watercolor2),
        u_opacity: isNumber(opacity) ? opacity : 1.0
      };
    }
  }, {
    key: "getAnimateUniforms",
    value: function getAnimateUniforms() {
      return {
        u_time: this.layer.getLayerAnimateTime()
      };
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.loadTexture();
              return _context.abrupt("return", this.buildModels());
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var model;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.layer.buildLayerModel({
                moduleName: 'polygonOcean',
                vertexShader: ocean_vert,
                fragmentShader: ocean_frag,
                triangulation: polygonTriangulation,
                primitive: gl.TRIANGLES,
                depth: {
                  enable: false
                }
              });
            case 2:
              model = _context2.sent;
              return _context2.abrupt("return", [model]);
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture, _this$texture2, _this$texture3;
      (_this$texture = this.texture1) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
      (_this$texture2 = this.texture2) === null || _this$texture2 === void 0 ? void 0 : _this$texture2.destroy();
      (_this$texture3 = this.texture3) === null || _this$texture3 === void 0 ? void 0 : _this$texture3.destroy();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var bbox = this.layer.getSource().extent;
      var _bbox = _slicedToArray(bbox, 4),
        minLng = _bbox[0],
        minLat = _bbox[1],
        maxLng = _bbox[2],
        maxLat = _bbox[3];
      var lngLen = maxLng - minLng;
      var latLen = maxLat - minLat;
      this.styleAttributeService.registerStyleAttribute({
        name: 'oceanUv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_uv',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex, attributeIdx) {
            var v = feature.version === Version['GAODE2.x'] ? feature.originCoordinates[0][attributeIdx] : vertex;
            var _v = _slicedToArray(v, 2),
              lng = _v[0],
              lat = _v[1];
            return [(lng - minLng) / lngLen, (lat - minLat) / latLen];
          }
        }
      });
    }
  }, {
    key: "loadTexture",
    value: function loadTexture() {
      var _this = this;
      var createTexture2D = this.rendererService.createTexture2D;
      var defaultTextureOptions = {
        height: 0,
        width: 0
      };
      // 默认索引为 undefined，所以单独赋值
      this.texture1 = createTexture2D(defaultTextureOptions);
      this.texture2 = createTexture2D(defaultTextureOptions);
      this.texture3 = createTexture2D(defaultTextureOptions);

      // 加载完 image 后单独给 texture f赋值
      initImage(function (images) {
        _this.texture1 = initTex(images[0]);
        _this.texture2 = initTex(images[1]);
        _this.texture3 = initTex(images[2]);
        _this.layerService.reRender();
      });
      function initImage(callback) {
        var loadedCount = 0;
        var loadedImages = [];
        var images = ['https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ', 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*MJ22QbpuCzIAAAAAAAAAAAAAARQnAQ', 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*-z2HSIVDsHIAAAAAAAAAAAAAARQnAQ'];
        images.map(function (imgSrc) {
          var image = new Image();
          image.crossOrigin = '';
          image.src = imgSrc;
          loadedImages.push(image);
          image.onload = function () {
            loadedCount++;
            if (loadedCount === 3) {
              callback(loadedImages);
            }
          };
        });
      }
      function initTex(image) {
        return createTexture2D({
          data: image,
          width: image.width,
          height: image.height,
          wrapS: gl.MIRRORED_REPEAT,
          wrapT: gl.MIRRORED_REPEAT,
          min: gl.LINEAR,
          mag: gl.LINEAR
        });
      }
    }
  }]);
  return OceanModel;
}(BaseModel);
export { OceanModel as default };