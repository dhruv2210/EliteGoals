import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import { isMini } from '@antv/l7-utils';
import BaseModel from "../../core/BaseModel";
import { RasterImageTriangulation } from "../../core/triangulation";
/* babel-plugin-inline-import '../shaders/image_frag.glsl' */
var ImageFrag = "precision mediump float;\nuniform float u_opacity: 1.0;\nuniform sampler2D u_texture;\nvarying vec2 v_texCoord;\nvoid main() {\n  vec4 color = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y));\n  gl_FragColor = color;\n  gl_FragColor.a *= u_opacity;\n  if(gl_FragColor.a < 0.01)\n    discard;\n}\n";
/* babel-plugin-inline-import '../shaders/image_vert.glsl' */
var ImageVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nattribute vec3 a_Position;\nattribute vec2 a_Uv;\nvarying vec2 v_texCoord;\n#pragma include \"projection\"\nvoid main() {\n   v_texCoord = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n   // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\n   } else {\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n   }\n}\n";
var ImageModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(ImageModel, _BaseModel);
  var _super = _createSuper(ImageModel);
  function ImageModel() {
    _classCallCheck(this, ImageModel);
    return _super.apply(this, arguments);
  }
  _createClass(ImageModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
        opacity = _ref.opacity;
      return {
        u_opacity: opacity || 1,
        u_texture: this.texture
      };
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this = this;
        var source, createTexture2D, canvas, img, imageData, model;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              source = this.layer.getSource();
              createTexture2D = this.rendererService.createTexture2D;
              this.texture = createTexture2D({
                height: 0,
                width: 0
              });
              if (!isMini) {
                _context.next = 11;
                break;
              }
              // @ts-ignore
              canvas = this.layerService.sceneService.getSceneConfig().canvas;
              img = canvas.createImage();
              img.crossOrigin = 'anonymous';
              img.src = source.data.originData;
              img.onload = function () {
                _this.texture = createTexture2D({
                  data: img,
                  width: img.width,
                  height: img.height
                });
                _this.layerService.reRender();
              };
              _context.next = 15;
              break;
            case 11:
              _context.next = 13;
              return source.data.images;
            case 13:
              imageData = _context.sent;
              this.texture = createTexture2D({
                data: imageData[0],
                width: imageData[0].width,
                height: imageData[0].height,
                mag: gl.LINEAR,
                min: gl.LINEAR
              });
            case 15:
              _context.next = 17;
              return this.layer.buildLayerModel({
                moduleName: 'rasterImage',
                vertexShader: ImageVert,
                fragmentShader: ImageFrag,
                triangulation: RasterImageTriangulation,
                primitive: gl.TRIANGLES,
                blend: {
                  // Tip: 优化显示效果
                  enable: true
                },
                depth: {
                  enable: false
                }
              });
            case 17:
              model = _context.sent;
              return _context.abrupt("return", [model]);
            case 19:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;
      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.initModels());
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return ImageModel;
}(BaseModel);
export { ImageModel as default };