import { IInteractionTarget, ILayer, ILayerService, IMapService, IPickingService, IRendererService } from '@antv/l7-core';
import { SourceTile, TilesetManager } from '@antv/l7-utils';
import { TileLayerService } from '../service/TileLayerService';
import { TilePickService } from '../service/TilePickService';
export default class BaseTileLayer {
    private parent;
    tileLayerService: TileLayerService;
    protected mapService: IMapService;
    protected layerService: ILayerService;
    protected rendererService: IRendererService;
    protected pickingService: IPickingService;
    protected tilePickService: TilePickService;
    tilesetManager: TilesetManager;
    initedTileset: boolean;
    protected lastViewStates: {
        zoom: number;
        latLonBounds: [number, number, number, number];
    };
    constructor(parent: ILayer);
    protected initTileSetManager(): void;
    protected mapchange: () => void;
    protected getCurrentView(): {
        latLonBounds: [number, number, number, number];
        zoom: number;
    };
    private bindTilesetEvent;
    render(): void;
    getLayers(): ILayer[];
    getTiles(): import("@antv/l7-core").ITile[];
    getTile(key: string): import("@antv/l7-core").ITile | undefined;
    viewchange: import("lodash").DebouncedFunc<() => void>;
    tileLoaded(tile: SourceTile): void;
    tileError(error: Error): void;
    destroy(): void;
    reload(): void;
    tileUnLoad(tile: SourceTile): void;
    tileUpdate(): Promise<void>;
    setPickState(layers: ILayer[]): void;
    pickRender(target: IInteractionTarget): void;
    selectFeature(pickedColors: Uint8Array | undefined): void;
    highlightPickedFeature(pickedColors: Uint8Array | undefined): void;
    /**
     * 实现 TileLayer 对子图层方法的代理
     * @param parent
     */
    private proxy;
}
