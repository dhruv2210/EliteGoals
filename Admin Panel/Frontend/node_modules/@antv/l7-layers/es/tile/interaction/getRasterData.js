import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { DOM } from '@antv/l7-utils';
export function readRasterValue(tile, mapService, x, y) {
  var _tile$bboxPolygon, _tile$data, _tile$data2, _tile$data3;
  var bbox = (tile === null || tile === void 0 ? void 0 : (_tile$bboxPolygon = tile.bboxPolygon) === null || _tile$bboxPolygon === void 0 ? void 0 : _tile$bboxPolygon.bbox) || [0, 0, 10, -10];
  var _bbox = _slicedToArray(bbox, 4),
    _bbox$ = _bbox[0],
    minLng = _bbox$ === void 0 ? 0 : _bbox$,
    _bbox$2 = _bbox[1],
    minLat = _bbox$2 === void 0 ? 0 : _bbox$2,
    _bbox$3 = _bbox[2],
    maxLng = _bbox$3 === void 0 ? 10 : _bbox$3,
    _bbox$4 = _bbox[3],
    maxLat = _bbox$4 === void 0 ? -10 : _bbox$4;
  var tileXY = mapService.lngLatToContainer([minLng, minLat]);
  var tileMaxXY = mapService.lngLatToContainer([maxLng, maxLat]);
  var tilePixelWidth = tileMaxXY.x - tileXY.x;
  var tilePixelHeight = tileXY.y - tileMaxXY.y;
  var pos = [(x - tileXY.x) / tilePixelWidth,
  // x
  (y - tileMaxXY.y) / tilePixelHeight // y
  ];

  var tileWidth = (tile === null || tile === void 0 ? void 0 : (_tile$data = tile.data) === null || _tile$data === void 0 ? void 0 : _tile$data.width) || 1;
  var tileHeight = (tile === null || tile === void 0 ? void 0 : (_tile$data2 = tile.data) === null || _tile$data2 === void 0 ? void 0 : _tile$data2.height) || 1;
  var indexX = Math.floor(pos[0] * tileWidth);
  var indexY = Math.floor(pos[1] * tileHeight);
  var index = Math.max(0, indexY - 1) * tileWidth + indexX;
  var data = tile === null || tile === void 0 ? void 0 : (_tile$data3 = tile.data) === null || _tile$data3 === void 0 ? void 0 : _tile$data3.data[index];
  return data;
}
export function readPixel(x, y, rendererService) {
  var readPixels = rendererService.readPixels,
    getContainer = rendererService.getContainer;
  var xInDevicePixel = x * DOM.DPR;
  var yInDevicePixel = y * DOM.DPR;
  var _getContainerSize = getContainerSize(getContainer()),
    width = _getContainerSize.width,
    height = _getContainerSize.height;
  width *= DOM.DPR;
  height *= DOM.DPR;
  if (xInDevicePixel > width - 1 * DOM.DPR || xInDevicePixel < 0 || yInDevicePixel > height - 1 * DOM.DPR || yInDevicePixel < 0) {
    return false;
  }
  var pickedColors = readPixels({
    x: Math.floor(xInDevicePixel),
    // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴
    y: Math.floor(height - (y + 1) * DOM.DPR),
    width: 1,
    height: 1,
    data: new Uint8Array(1 * 1 * 4)
  });
  return pickedColors;
}
function getContainerSize(container) {
  if (container.getContext) {
    return {
      width: container.width / DOM.DPR,
      height: container.height / DOM.DPR
    };
  } else {
    return container.getBoundingClientRect();
  }
}