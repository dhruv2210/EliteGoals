import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { decodePickingColor } from '@antv/l7-utils';
export function clearPickState(layers) {
  layers.filter(function (layer) {
    return layer.inited && layer.isVisible();
  }).filter(function (layer) {
    return layer.getCurrentSelectedId() !== null;
  }).map(function (layer) {
    selectFeature(layer, new Uint8Array([0, 0, 0, 0]));
    layer.setCurrentSelectedId(null);
  });
}
export function setSelect(layers, pickedColors, renderList) {
  var selectedId = decodePickingColor(pickedColors);
  var pickColor;
  layers.map(function (layer) {
    if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {
      selectFeature(layer, pickedColors);
      layer.setCurrentSelectedId(selectedId);
      pickColor = pickedColors;
    } else {
      selectFeature(layer, new Uint8Array([0, 0, 0, 0])); // toggle select
      layer.setCurrentSelectedId(null);
      pickColor = null;
    }
  });
  // unselect normal layer
  renderList.filter(function (layer) {
    return layer.inited && layer.isVisible() && layer.needPick('click');
  }).filter(function (layer) {
    return layer.getCurrentSelectedId() !== null;
  }).map(function (layer) {
    selectFeature(layer, new Uint8Array([0, 0, 0, 0]));
    layer.setCurrentSelectedId(null);
  });
  return pickColor;
}
export function setHighlight(layers, pickedColors) {
  var pickId = decodePickingColor(pickedColors);
  layers.filter(function (layer) {
    return layer.inited && layer.isVisible();
  })
  // @ts-ignore
  .filter(function (layer) {
    return layer.getPickID() !== pickId;
  }).map(function (layer) {
    // @ts-ignore
    layer.setPickID(pickId);
    layer.hooks.beforeHighlight.call(pickedColors);
  });
}
export function setPickState(layers, pickColors) {
  if (pickColors.select) {
    layers.map(function (layer) {
      selectFeature(layer, pickColors.select);
    });
  }
  if (pickColors.active) {
    layers.filter(function (layer) {
      return layer.inited && layer.isVisible();
    }).map(function (layer) {
      layer.hooks.beforeHighlight.call(pickColors.active);
    });
  }
}
export function selectFeature(layer, pickedColors) {
  // @ts-ignore
  var _pickedColors = _slicedToArray(pickedColors, 3),
    r = _pickedColors[0],
    g = _pickedColors[1],
    b = _pickedColors[2];
  layer.hooks.beforeSelect.call([r, g, b]);
}
export function setFeatureSelect(color, layers) {
  var id = decodePickingColor(color);
  layers.map(function (layer) {
    selectFeature(layer, color);
    layer.setCurrentSelectedId(id);
  });
}
export function setFeatureActive(color, layers) {
  var id = decodePickingColor(color);
  layers.map(function (layer) {
    layer.hooks.beforeHighlight.call(color);
    layer.setCurrentPickId(id);
  });
}