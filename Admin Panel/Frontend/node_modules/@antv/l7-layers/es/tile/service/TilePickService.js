import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { TYPES } from '@antv/l7-core';
import { decodePickingColor, encodePickingColor } from '@antv/l7-utils';
import { TileSourceService } from "./TileSourceService";
var SELECT = 'select';
var ACTIVE = 'active';
export var TilePickService = /*#__PURE__*/function () {
  function TilePickService(_ref) {
    var layerService = _ref.layerService,
      tileLayerService = _ref.tileLayerService,
      parent = _ref.parent;
    _classCallCheck(this, TilePickService);
    _defineProperty(this, "tilePickID", new Map());
    this.layerService = layerService;
    this.tileLayerService = tileLayerService;
    this.parent = parent;
    this.tileSourceService = new TileSourceService();
  }
  _createClass(TilePickService, [{
    key: "pickRender",
    value: function pickRender(target) {
      // 一个 TileLayer 有多个 Tile，但是会同时触发事件的只有一个 Tile
      var tile = this.tileLayerService.getVisibleTileBylngLat(target.lngLat);
      if (tile) {
        // TODO 多图层拾取
        var pickLayer = tile.getMainLayer();
        pickLayer === null || pickLayer === void 0 ? void 0 : pickLayer.layerPickService.pickRender(target);
      }
    }
  }, {
    key: "pick",
    value: function pick(layer, target) {
      var container = this.parent.getContainer();
      var pickingService = container.get(TYPES.IPickingService);
      if (layer.type === 'RasterLayer') {
        var tile = this.tileLayerService.getVisibleTileBylngLat(target.lngLat);
        if (tile && tile.getMainLayer() !== undefined) {
          var pickLayer = tile.getMainLayer();
          return pickLayer.layerPickService.pickRasterLayer(pickLayer, target, this.parent);
        }
        return false;
      }
      this.pickRender(target);
      return pickingService.pickFromPickingFBO(layer, target);
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(pickedColors) {
      // @ts-ignore
      var _pickedColors = _slicedToArray(pickedColors, 3),
        r = _pickedColors[0],
        g = _pickedColors[1],
        b = _pickedColors[2];
      var id = this.color2PickId(r, g, b);
      this.tilePickID.set(SELECT, id);
      this.updateHighLight(r, g, b, SELECT);
    }
  }, {
    key: "highlightPickedFeature",
    value: function highlightPickedFeature(pickedColors) {
      // @ts-ignore
      var _pickedColors2 = _slicedToArray(pickedColors, 3),
        r = _pickedColors2[0],
        g = _pickedColors2[1],
        b = _pickedColors2[2];
      var id = this.color2PickId(r, g, b);
      this.tilePickID.set(ACTIVE, id);
      this.updateHighLight(r, g, b, ACTIVE);
    }
  }, {
    key: "updateHighLight",
    value: function updateHighLight(r, g, b, type) {
      this.tileLayerService.tiles.map(function (tile) {
        var layer = tile.getMainLayer();
        switch (type) {
          case SELECT:
            layer === null || layer === void 0 ? void 0 : layer.hooks.beforeSelect.call([r, g, b]);
            break;
          case ACTIVE:
            layer === null || layer === void 0 ? void 0 : layer.hooks.beforeHighlight.call([r, g, b]);
            break;
        }
      });
    }
  }, {
    key: "setPickState",
    value: function setPickState() {
      var selectColor = this.tilePickID.get(SELECT);
      var activeColor = this.tilePickID.get(ACTIVE);
      if (selectColor) {
        var _this$pickId2Color = this.pickId2Color(selectColor),
          _this$pickId2Color2 = _slicedToArray(_this$pickId2Color, 3),
          r = _this$pickId2Color2[0],
          g = _this$pickId2Color2[1],
          b = _this$pickId2Color2[2];
        this.updateHighLight(r, g, b, SELECT);
        return;
      }
      if (activeColor) {
        var _this$pickId2Color3 = this.pickId2Color(activeColor),
          _this$pickId2Color4 = _slicedToArray(_this$pickId2Color3, 3),
          _r = _this$pickId2Color4[0],
          _g = _this$pickId2Color4[1],
          _b = _this$pickId2Color4[2];
        this.updateHighLight(_r, _g, _b, ACTIVE);
        return;
      }
    }
  }, {
    key: "color2PickId",
    value: function color2PickId(r, g, b) {
      return decodePickingColor(new Uint8Array([r, g, b]));
    }
  }, {
    key: "pickId2Color",
    value: function pickId2Color(str) {
      return encodePickingColor(str);
    }

    /** 从瓦片中根据数据 */
  }, {
    key: "getFeatureById",
    value: function getFeatureById(pickedFeatureIdx) {
      // 提取当前可见瓦片
      var tiles = this.tileLayerService.getTiles().filter(function (tile) {
        return tile.visible;
      });
      // 提取当前可见瓦片中匹配 ID 的 feature 列表
      var features = [];
      tiles.forEach(function (tile) {
        features.push.apply(features, _toConsumableArray(tile.getFeatureById(pickedFeatureIdx)));
      });

      // 将 feature 列表合并后返回
      // 统一返回成 polygon 的格式 点、线、面可以通用

      // const data = this.tileSourceService.getCombineFeature(features);

      return features;
    }

    // Tip: for interface define
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "pickRasterLayer",
    value: function pickRasterLayer(layer, target, parent) {
      return false;
    }
  }]);
  return TilePickService;
}();