import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import LineLayer from "../../line";
import PointLayer from "../../point";
import Tile from "./Tile";
var DebugTile = /*#__PURE__*/function (_Tile) {
  _inherits(DebugTile, _Tile);
  var _super = _createSuper(DebugTile);
  function DebugTile() {
    _classCallCheck(this, DebugTile);
    return _super.apply(this, arguments);
  }
  _createClass(DebugTile, [{
    key: "initTileLayer",
    value: function () {
      var _initTileLayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var sourceOptions, pointData, lineLayer, pointLayer;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              sourceOptions = this.getSourceOption();
              pointData = sourceOptions.data.features[0].properties;
              lineLayer = new LineLayer().source(sourceOptions.data, sourceOptions.options).size(1).shape('line').color('red');
              pointLayer = new PointLayer({
                minZoom: this.z - 1,
                maxZoom: this.z + 1
              }).source([pointData], {
                parser: {
                  type: 'json',
                  x: 'textLng',
                  y: 'textLat'
                }
              }).size(20).color('red').shape(this.key).style({
                stroke: '#fff',
                strokeWidth: 2
              });
              _context.next = 6;
              return this.addLayer(lineLayer);
            case 6:
              _context.next = 8;
              return this.addLayer(pointLayer);
            case 8:
              this.isLoaded = true;
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initTileLayer() {
        return _initTileLayer.apply(this, arguments);
      }
      return initTileLayer;
    }()
  }, {
    key: "getSourceOption",
    value: function getSourceOption() {
      var rawSource = this.parent.getSource();
      var features = this.sourceTile.data.layers.testTile.features;
      return {
        data: {
          type: 'FeatureCollection',
          features: features
        },
        options: {
          parser: {
            type: 'geojson'
          },
          transforms: rawSource.transforms
        }
      };
    }
  }]);
  return DebugTile;
}(Tile);
export { DebugTile as default };