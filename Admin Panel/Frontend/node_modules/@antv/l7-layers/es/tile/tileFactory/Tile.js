import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { createLayerContainer } from '@antv/l7-core';
import PolygonLayer from "../../polygon";
import { isNeedMask } from "./util";
var Tile = /*#__PURE__*/function () {
  function Tile(sourceTile, parent) {
    _classCallCheck(this, Tile);
    _defineProperty(this, "visible", true);
    _defineProperty(this, "layers", []);
    _defineProperty(this, "isLoaded", false);
    _defineProperty(this, "tileMaskLayers", []);
    this.parent = parent;
    this.sourceTile = sourceTile;
    this.x = sourceTile.x;
    this.y = sourceTile.y;
    this.z = sourceTile.z;
    this.key = "".concat(this.x, "_").concat(this.y, "_").concat(this.z);
  }
  _createClass(Tile, [{
    key: "getLayers",
    value: function getLayers() {
      return this.layers;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "styleUpdate",
    value: function styleUpdate() {
      return;
    }
  }, {
    key: "lnglatInBounds",
    value: function lnglatInBounds(lnglat) {
      var _this$sourceTile$boun = _slicedToArray(this.sourceTile.bounds, 4),
        minLng = _this$sourceTile$boun[0],
        minLat = _this$sourceTile$boun[1],
        maxLng = _this$sourceTile$boun[2],
        maxLat = _this$sourceTile$boun[3];
      var lng = lnglat.lng,
        lat = lnglat.lat;
      return lng >= minLng && lng <= maxLng && lat >= minLat && lat <= maxLat;
    }
  }, {
    key: "getLayerOptions",
    value: function getLayerOptions() {
      var _options$maskLayers;
      var options = this.parent.getLayerConfig();
      return _objectSpread(_objectSpread({}, options), {}, {
        autoFit: false,
        maskLayers: this.getMaskLayer(),
        tileMask: isNeedMask(this.parent.type),
        mask: options.mask || ((_options$maskLayers = options.maskLayers) === null || _options$maskLayers === void 0 ? void 0 : _options$maskLayers.length) !== 0 && options.enableMask
      });
    }
    // 获取Mask 图层
  }, {
    key: "getMaskLayer",
    value: function getMaskLayer() {
      var _this = this;
      var _this$parent$getLayer = this.parent.getLayerConfig(),
        maskLayers = _this$parent$getLayer.maskLayers;
      var layers = [];
      maskLayers === null || maskLayers === void 0 ? void 0 : maskLayers.forEach(function (layer) {
        if (!layer.tileLayer) {
          // 非瓦片图层返回图层本身，瓦片图层返回对应的行列号图层
          layers.push(layer);
          return layer;
        }
        var tileLayer = layer.tileLayer;
        var tile = tileLayer.getTile(_this.sourceTile.key);
        var l = tile === null || tile === void 0 ? void 0 : tile.getLayers()[0];
        if (l) {
          layers.push(l);
        }
      });
      return layers;
    }
  }, {
    key: "addTileMask",
    value: function () {
      var _addTileMask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var mask, container, mainLayer;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              mask = new PolygonLayer({
                visible: false,
                enablePicking: false
              }).source({
                type: 'FeatureCollection',
                features: [this.sourceTile.bboxPolygon]
              }, {
                parser: {
                  type: 'geojson',
                  featureId: 'id'
                }
              }).shape('fill');
              container = createLayerContainer(this.parent.sceneContainer);
              mask.setContainer(container, this.parent.sceneContainer);
              _context.next = 5;
              return mask.init();
            case 5:
              this.tileMask = mask;
              mainLayer = this.getMainLayer();
              if (mainLayer !== undefined) {
                mainLayer.tileMask = mask;
              }
              return _context.abrupt("return", mask);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function addTileMask() {
        return _addTileMask.apply(this, arguments);
      }
      return addTileMask;
    }()
  }, {
    key: "addMask",
    value: function () {
      var _addMask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(layer, mask) {
        var container;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              container = createLayerContainer(this.parent.sceneContainer);
              mask.setContainer(container, this.parent.sceneContainer);
              _context2.next = 4;
              return mask.init();
            case 4:
              layer.addMask(mask);
              this.tileMaskLayers.push(mask);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function addMask(_x, _x2) {
        return _addMask.apply(this, arguments);
      }
      return addMask;
    }()
  }, {
    key: "addLayer",
    value: function () {
      var _addLayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(layer) {
        var container;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              // set flag
              layer.isTileLayer = true;
              container = createLayerContainer(this.parent.sceneContainer);
              layer.setContainer(container, this.parent.sceneContainer);
              this.layers.push(layer);
              _context3.next = 6;
              return layer.init();
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function addLayer(_x3) {
        return _addLayer.apply(this, arguments);
      }
      return addLayer;
    }()
  }, {
    key: "updateVisible",
    value: function updateVisible(value) {
      this.visible = value;
      this.updateOptions('visible', value);
    }
  }, {
    key: "updateOptions",
    value: function updateOptions(key, value) {
      this.layers.forEach(function (l) {
        l.updateLayerConfig(_defineProperty({}, key, value));
      });
    }

    /**
     * 一个 Tile 可能有多个 layer，但是在发生拾取、点击事件的时候只有一个生效
     */
  }, {
    key: "getMainLayer",
    value: function getMainLayer() {
      return this.layers[0];
    }
  }, {
    key: "getFeatures",
    value: function getFeatures(sourceLayer) {
      return [];
    }

    /**
     * 在一个 Tile 中可能存在一个相同 ID 的 feature
     * @param id
     * @returns
     */
  }, {
    key: "getFeatureById",
    value: function getFeatureById(id) {
      return [];
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$tileMask;
      (_this$tileMask = this.tileMask) === null || _this$tileMask === void 0 ? void 0 : _this$tileMask.destroy();
      this.layers.forEach(function (layer) {
        return layer.destroy();
      });
    }
  }]);
  return Tile;
}();
export { Tile as default };