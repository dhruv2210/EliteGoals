import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import MaskLayer from "../../mask";
import Tile from "./Tile";
var MaskTile = /*#__PURE__*/function (_Tile) {
  _inherits(MaskTile, _Tile);
  var _super = _createSuper(MaskTile);
  function MaskTile() {
    _classCallCheck(this, MaskTile);
    return _super.apply(this, arguments);
  }
  _createClass(MaskTile, [{
    key: "initTileLayer",
    value: function () {
      var _initTileLayer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var attributes, layerOptions, sourceOptions, layer;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              attributes = this.parent.getLayerAttributeConfig();
              layerOptions = this.getLayerOptions();
              sourceOptions = this.getSourceOption();
              layer = new MaskLayer(_objectSpread({}, layerOptions)).source(sourceOptions.data, sourceOptions.options); // 初始化数据映射
              // tslint:disable-next-line: no-unused-expression
              attributes && Object.keys(attributes).forEach(function (type) {
                var _attributes$attr, _attributes$attr2;
                var attr = type;
                // @ts-ignore
                layer[attr]((_attributes$attr = attributes[attr]) === null || _attributes$attr === void 0 ? void 0 : _attributes$attr.field, (_attributes$attr2 = attributes[attr]) === null || _attributes$attr2 === void 0 ? void 0 : _attributes$attr2.values);
              });
              _context.next = 7;
              return this.addLayer(layer);
            case 7:
              this.isLoaded = true;
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initTileLayer() {
        return _initTileLayer.apply(this, arguments);
      }
      return initTileLayer;
    }()
  }, {
    key: "getFeatures",
    value: function getFeatures(sourceLayer) {
      if (!sourceLayer) {
        return [];
      }
      var source = this.sourceTile.data;
      return source.getTileData(sourceLayer);
    }
  }, {
    key: "getSourceOption",
    value: function getSourceOption() {
      var rawSource = this.parent.getSource();
      var _this$parent$getLayer = this.parent.getLayerConfig(),
        sourceLayer = _this$parent$getLayer.sourceLayer,
        featureId = _this$parent$getLayer.featureId;
      var features = this.getFeatures(sourceLayer);
      return {
        data: {
          type: 'FeatureCollection',
          features: features
        },
        options: {
          parser: {
            type: 'geojson',
            featureId: featureId
          },
          transforms: rawSource.transforms
        }
      };
    }
  }]);
  return MaskTile;
}(Tile);
export { MaskTile as default };