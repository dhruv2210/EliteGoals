import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import { rgb2arr } from '@antv/l7-utils';
import { isNumber } from 'lodash';
import BaseModel from "../../core/BaseModel";
import { LineTriangulation } from "../../core/triangulation";
/* babel-plugin-inline-import '../shaders/half/line_half_frag.glsl' */
var line_half_frag = "#define COORDINATE_SYSTEM_LNGLAT 1.0        // mapbox\n#define COORDINATE_SYSTEM_LNGLAT_OFFSET 2.0 // mapbox offset\n#define COORDINATE_SYSTEM_VECTOR_TILE 3.0\n#define COORDINATE_SYSTEM_IDENTITY 4.0\n#define COORDINATE_SYSTEM_P20 5.0           // amap\n#define COORDINATE_SYSTEM_P20_OFFSET 6.0    // amap offset\n#define COORDINATE_SYSTEM_METER_OFFSET 7.0\n\n#define COORDINATE_SYSTEM_P20_2 8.0         // amap2.0\nuniform float u_CoordinateSystem;\nvarying vec4 v_color;\nuniform float u_arrow: 0.0;\nuniform float u_linearColor: 0;\nuniform vec4 u_sourceColor;\nuniform vec4 u_targetColor;\n\n#pragma include \"picking\"\n\nvarying mat4 styleMappingMat;\nvoid main() {\n  float distanceAndIndex = styleMappingMat[0][3];\n  float miter = styleMappingMat[0][2];\n\n  float opacity = styleMappingMat[0][0];\n  float d_distance_ratio = styleMappingMat[3].r; // \u5F53\u524D\u70B9\u4F4D\u8DDD\u79BB\u5360\u7EBF\u603B\u957F\u7684\u6BD4\u4F8B\n\n\n  if(u_arrow > 0.0 && distanceAndIndex < 2.0) { // arrow\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20 || u_CoordinateSystem == COORDINATE_SYSTEM_P20_OFFSET) { \n      if(cross(vec3(styleMappingMat[1].rg, 0.0), vec3(styleMappingMat[1].ba, 0.0)).z < 0.0) { // amap\n        discard;\n      }\n    } else { // amap2 mapbox map\n      if(cross(vec3(styleMappingMat[1].rg, 0.0), vec3(styleMappingMat[1].ba, 0.0)).z > 0.0) { \n        discard;\n      }\n    }\n  } else { // line body\n    if(miter < 0.0) {\n      discard;\n    }\n  }\n\n\n  if(u_linearColor == 1.0) { // \u4F7F\u7528\u6E10\u53D8\u989C\u8272\n    gl_FragColor = mix(u_sourceColor, u_targetColor, d_distance_ratio);\n  } else { // \u4F7F\u7528 color \u65B9\u6CD5\u4F20\u5165\u7684\u989C\u8272\n    gl_FragColor = v_color;\n  }\n\n  gl_FragColor.a *= opacity; // \u5168\u5C40\u900F\u660E\u5EA6\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
/* babel-plugin-inline-import '../shaders/half/line_half_vert.glsl' */
var line_half_vert = "attribute float a_Miter;\nattribute vec4 a_Color;\nattribute vec2 a_Size;\nattribute vec3 a_Normal;\nattribute vec3 a_Position;\n\n// dash line\nattribute vec4 a_dirPoints;\nattribute vec3 a_DistanceAndIndex;\n\nuniform vec4 u_lineDir;\n\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvarying vec4 v_color;\n\nuniform float u_linearColor: 0;\nuniform float u_arrow: 0.0;\nuniform float u_arrowHeight: 3.0;\nuniform float u_arrowWidth: 2.0;\nuniform float u_tailWidth: 1.0;\n\nuniform float u_opacity: 1.0;\nvarying mat4 styleMappingMat; // \u7528\u4E8E\u5C06\u5728\u9876\u70B9\u7740\u8272\u5668\u4E2D\u8BA1\u7B97\u597D\u7684\u6837\u5F0F\u503C\u4F20\u9012\u7ED9\u7247\u5143\n\n#pragma include \"styleMapping\"\n#pragma include \"styleMappingCalOpacity\"\n\nvec2 calculateArrow(vec2 offset) {\n  /*\n  * \u5728\u652F\u6301\u7BAD\u5934\u7684\u65F6\u5019\uFF0C\u7B2C\u4E8C\u3001\u7B2C\u4E09\u7EC4\u9876\u70B9\u662F\u989D\u5916\u63D2\u5165\u7528\u4E8E\u6784\u5EFA\u9876\u70B9\u7684\n  */\n  float arrowFlag = -1.0;\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) {\n    // \u9AD8\u5FB7 2.0 \u7684\u65CB\u8F6C\u89D2\u5EA6\u4E0D\u540C\n    arrowFlag = 1.0;\n  }\n  float pi = arrowFlag * 3.1415926/2.;\n  if(a_Miter < 0.) {\n    // \u6839\u636E\u7EBF\u7684\u4E24\u4FA7\u504F\u79FB\u4E0D\u540C\u3001\u65CB\u8F6C\u7684\u65B9\u5411\u76F8\u53CD\n    pi = -pi;\n  }\n  highp float angle_sin = sin(pi);\n  highp float angle_cos = cos(pi);\n  // \u8BA1\u7B97\u5782\u76F4\u4E0E\u7EBF\u65B9\u5411\u7684\u65CB\u8F6C\u77E9\u9635\n  mat2 rotation_matrix = mat2(angle_cos, -1.0 * angle_sin, angle_sin, angle_cos);\n  float arrowWidth = u_arrowWidth;\n  float arrowHeight = u_arrowHeight;\n\n  vec2 arrowOffset = vec2(0.0);\n  /*\n  * a_DistanceAndIndex.y \u7528\u4E8E\u6807\u8BB0\u5F53\u524D\u9876\u70B9\u5C5E\u4E8E\u54EA\u4E00\u7EC4\uFF08\u4E24\u4E2A\u9876\u70B9\u4E00\u7EC4\uFF0C\u6784\u6210\u7EBF\u7684\u5176\u5B9E\u662F\u77E9\u5F62\uFF0C\u6700\u7B80\u9700\u8981\u56DB\u4E2A\u9876\u70B9\u3001\u4E24\u7EC4\u9876\u70B9\u6784\u6210\uFF09\n  */\n  if(a_DistanceAndIndex.y == 0.0) {\n    // \u7BAD\u5934\u5C16\u90E8\n    offset = vec2(0.0);\n  } else if(a_DistanceAndIndex.y == 1.0) {\n    // \u7BAD\u5934\u4E24\u4FA7\n    arrowOffset = rotation_matrix*(offset * arrowHeight);\n    offset += arrowOffset; // \u6CBF\u7EBF\u504F\u79FB\n    offset = offset * arrowWidth; // \u5782\u76F4\u7EBF\u5411\u5916\u504F\u79FB\uFF08\u662F\u6784\u5EFA\u7BAD\u5934\u4E24\u4FA7\u7684\u9876\u70B9\uFF09\n  } else if(a_DistanceAndIndex.y == 2.0 || a_DistanceAndIndex.y == 3.0 || a_DistanceAndIndex.y == 4.0) {\n    // \u504F\u79FB\u5176\u4F59\u7684\u70B9\u4F4D\uFF08\u5C06\u957F\u5EA6\u8BA9\u4F4D\u7ED9\u7BAD\u5934\uFF09\n    arrowOffset = rotation_matrix*(offset * arrowHeight) * arrowWidth;\n    offset += arrowOffset;// \u6CBF\u7EBF\u504F\u79FB\n  }\n\n  return offset;\n}\n\nvoid main() {\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\n  styleMappingMat = mat4(\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - a_Miter - a_DistanceAndIndex\n    0.0, 0.0, 0.0, 0.0, // originX - originY - vectorX - vectorY\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\n    0.0, 0.0, 0.0, 0.0  // distance_ratio/distance/pixelLen/texV\n  );\n  styleMappingMat[0][3] = a_DistanceAndIndex.y;\n  styleMappingMat[0][2] = a_Miter;\n\n  float rowCount = u_cellTypeLayout[0][0];    // \u5F53\u524D\u7684\u6570\u636E\u7EB9\u7406\u6709\u51E0\u884C\n  float columnCount = u_cellTypeLayout[0][1]; // \u5F53\u770B\u5230\u6570\u636E\u7EB9\u7406\u6709\u51E0\u5217\n  float columnWidth = 1.0/columnCount;  // \u5217\u5BBD\n  float rowHeight = 1.0/rowCount;       // \u884C\u9AD8\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\n  float id = a_vertexId; // \u7B2Cn\u4E2A\u9876\u70B9\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \u8D77\u59CB\u70B9\u5728\u7B2C\u51E0\u884C\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \u8D77\u59CB\u70B9\u5728\u7B2C\u51E0\u5217\n  \n  // cell \u56FA\u5B9A\u987A\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \n  // \u6309\u987A\u5E8F\u4ECE cell \u4E2D\u53D6\u503C\u3001\u82E5\u6CA1\u6709\u5219\u81EA\u52A8\u5F80\u4E0B\u53D6\u503C\n  float textureOffset = 0.0; // \u5728 cell \u4E2D\u53D6\u503C\u7684\u504F\u79FB\u91CF\n\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\n  styleMappingMat[0][0] = opacityAndOffset.r;\n  textureOffset = opacityAndOffset.g;\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\n\n\n  v_color = a_Color;\n\n  vec3 size = a_Miter * setPickingSize(a_Size.x) * reverse_offset_normal(a_Normal);\n  \n  vec2 offset = project_pixel(size.xy);\n\n  // styleMappingMat[1].rg = a_Position.xy + offset;\n\n  vec2 copyOffset = vec2(offset.x, offset.y);\n\n  float lineDistance = a_DistanceAndIndex.x;\n  float total_Distance = a_DistanceAndIndex.z;\n  float currentLinePointRatio = lineDistance / total_Distance;\n \n  if(u_arrow > 0.0) {\n      //  \u8BA1\u7B97\u7BAD\u5934\n    offset = calculateArrow(offset);\n\n    if(a_DistanceAndIndex.y > 4.0) {\n      offset *= mix(1.0, u_tailWidth, currentLinePointRatio);\n    }\n  }\n\n  float lineOffsetWidth = length(offset + offset * sign(a_Miter)); // \u7EBF\u6A2A\u5411\u504F\u79FB\u7684\u8DDD\u79BB\uFF08\u5411\u4E24\u4FA7\u504F\u79FB\u7684\u548C\uFF09\n  float linePixelSize = project_pixel(a_Size.x) * 2.0;  // \u5B9A\u70B9\u4F4D\u7F6E\u504F\u79FB\uFF0C\u6309\u5730\u56FE\u7B49\u7EA7\u7F29\u653E\u540E\u7684\u8DDD\u79BB \u5355\u4FA7 * 2\n\n  // \u8BBE\u7F6E\u6570\u636E\u96C6\u7684\u53C2\u6570\n  styleMappingMat[3][0] = currentLinePointRatio; // \u5F53\u524D\u70B9\u4F4D\u8DDD\u79BB\u5360\u7EBF\u603B\u957F\u7684\u6BD4\u4F8B\n  styleMappingMat[3][1] = lineDistance;       // \u5F53\u524D\u9876\u70B9\u7684\u8DDD\u79BB\n\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\n\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, a_Size.y, 1.0));\n\n  float h = float(a_Position.z); // \u7EBF\u9876\u70B9\u7684\u9AD8\u5EA6 - \u517C\u5BB9\u4E0D\u5B58\u5728\u7B2C\u4E09\u4E2A\u6570\u503C\u7684\u60C5\u51B5 vertex height\n  float lineHeight = a_Size.y; // size \u7B2C\u4E8C\u4E2A\u53C2\u6570\u4EE3\u8868\u7684\u9AD8\u5EA6 [linewidth, lineheight]\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    lineHeight *= 0.2; // \u4FDD\u6301\u548C amap/mapbox \u4E00\u81F4\u7684\u6548\u679C\n    gl_Position = u_Mvp * (vec4(project_pos.xy + offset, lineHeight, 1.0));\n  } else {\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, lineHeight, 1.0));\n  }\n  \n  if(u_arrow > 0.0 && a_DistanceAndIndex.y < 2.0) {\n    vec2 startPoint = a_dirPoints.rg;\n    vec2 endPoint = a_dirPoints.ba;\n    vec4 t1 = project_position(vec4(startPoint, 0, 1.0));\n    vec4 t2 = project_position(vec4(endPoint, 0, 1.0));\n    // TODO\uFF1A \u540E\u7EED\u4F18\u5316\u53EF\u4EE5\u628A\u4F4D\u7F6E\u8BA1\u7B97\u653E\u5728 cpu \u4E2D\u5B8C\u6210\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      vec2 p1 = (u_Mvp * vec4(t1.xy, 0.0, 1.0)).xy;\n      vec2 p2 = (u_Mvp * vec4(t2.xy, 0.0, 1.0)).xy;\n      styleMappingMat[1].rg = normalize(p1 - p2);\n      styleMappingMat[1].ba = normalize(gl_Position.xy - p2);\n    } else {\n      vec2 p1 = project_common_position_to_clipspace(vec4(t1.xy, 0.0, 1.0)).xy;\n      vec2 p2 = project_common_position_to_clipspace(vec4(t2.xy, 0.0, 1.0)).xy;\n      styleMappingMat[1].rg = normalize(p1 - p2);\n      styleMappingMat[1].ba = normalize(gl_Position.xy - p2);\n    }\n  }\n\n  setPickingColor(a_PickingColor);\n}\n";
var LineModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(LineModel, _BaseModel);
  var _super = _createSuper(LineModel);
  function LineModel() {
    _classCallCheck(this, LineModel);
    return _super.apply(this, arguments);
  }
  _createClass(LineModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
        _ref$opacity = _ref.opacity,
        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
        sourceColor = _ref.sourceColor,
        targetColor = _ref.targetColor,
        _ref$arrow = _ref.arrow,
        arrow = _ref$arrow === void 0 ? {
          enable: false,
          arrowWidth: 2,
          arrowHeight: 3,
          tailWidth: 1
        } : _ref$arrow;

      // 转化渐变色
      var useLinearColor = 0; // 默认不生效
      var sourceColorArr = [0, 0, 0, 0];
      var targetColorArr = [0, 0, 0, 0];
      if (sourceColor && targetColor) {
        sourceColorArr = rgb2arr(sourceColor);
        targetColorArr = rgb2arr(targetColor);
        useLinearColor = 1;
      }
      if (this.dataTextureTest && this.dataTextureNeedUpdate({
        opacity: opacity
      })) {
        this.judgeStyleAttributes({
          opacity: opacity
        });
        var encodeData = this.layer.getEncodedData();
        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),
          data = _this$calDataFrame.data,
          width = _this$calDataFrame.width,
          height = _this$calDataFrame.height;
        this.rowCount = height; // 当前数据纹理有多少行

        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({
          flipY: true,
          data: data,
          format: gl.LUMINANCE,
          type: gl.FLOAT,
          width: width,
          height: height
        }) : this.createTexture2D({
          flipY: true,
          data: [1],
          format: gl.LUMINANCE,
          type: gl.FLOAT,
          width: 1,
          height: 1
        });
      }
      return {
        u_dataTexture: this.dataTexture,
        // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]
        u_cellTypeLayout: this.getCellTypeLayout(),
        u_opacity: isNumber(opacity) ? opacity : 1.0,
        // 渐变色支持参数
        u_linearColor: useLinearColor,
        u_sourceColor: sourceColorArr,
        u_targetColor: targetColorArr,
        // arrow
        u_arrow: Number(arrow.enable),
        u_arrowHeight: arrow.arrowHeight || 3,
        u_arrowWidth: arrow.arrowWidth || 2,
        u_tailWidth: arrow.tailWidth === undefined ? 1 : arrow.tailWidth
      };
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.buildModels());
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$dataTexture;
      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _ref2, _ref2$depth, depth, _this$getShaders, frag, vert, model;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _ref2 = this.layer.getLayerConfig(), _ref2$depth = _ref2.depth, depth = _ref2$depth === void 0 ? false : _ref2$depth;
              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert;
              this.layer.triangulation = LineTriangulation;
              _context2.next = 5;
              return this.layer.buildLayerModel({
                moduleName: 'lineHalf',
                vertexShader: vert,
                fragmentShader: frag,
                triangulation: LineTriangulation,
                depth: {
                  enable: depth
                }
              });
            case 5:
              model = _context2.sent;
              return _context2.abrupt("return", [model]);
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
    /**
     * 根据参数获取不同的 shader 代码
     * @returns
     */
  }, {
    key: "getShaders",
    value: function getShaders() {
      return {
        frag: line_half_frag,
        vert: line_half_vert,
        type: 'normal'
      };
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'distanceAndIndex',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_DistanceAndIndex',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal, vertexIndex) {
            return vertexIndex === undefined ? [vertex[3], 10, vertex[5]] : [vertex[3], vertexIndex, vertex[5]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'dirPoints',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_dirPoints',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 4,
          update: function update(feature) {
            var startPoint = feature.coordinates[0] || [0, 0];
            var endPoint = feature.coordinates[3] || [0, 0];
            return [startPoint[0], startPoint[1], endPoint[0], endPoint[1]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature) {
            var _feature$size = feature.size,
              size = _feature$size === void 0 ? 1 : _feature$size;
            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];
          }
        }
      });

      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return normal;
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'miter',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Miter',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[4]];
          }
        }
      });
    }
  }]);
  return LineModel;
}(BaseModel);
export { LineModel as default };