import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
var _dec, _class;
import { injectable } from 'inversify';
import 'reflect-metadata';
import { createMultiPassRenderer } from "../utils/multiPassRender";

/**
 * 自定义渲染管线：
 * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass
 * 根据 Layer 配置的 passes 创建 PostProcessing
 * @example
 * new PolygonLayer({
 *   enableMultiPassRenderer: true,
 *   passes: [
 *     'blurH',
 *     ['blurV', { radius: 10 }],
 *   ],
 * })
 */
var MultiPassRendererPlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {
  function MultiPassRendererPlugin() {
    _classCallCheck(this, MultiPassRendererPlugin);
  }
  _createClass(MultiPassRendererPlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;
      var rendererService = _ref.rendererService,
        postProcessingPassFactory = _ref.postProcessingPassFactory,
        normalPassFactory = _ref.normalPassFactory;
      layer.hooks.init.tapPromise('MultiPassRendererPlugin', function () {
        var _layer$getLayerConfig = layer.getLayerConfig(),
          enableMultiPassRenderer = _layer$getLayerConfig.enableMultiPassRenderer,
          _layer$getLayerConfig2 = _layer$getLayerConfig.passes,
          passes = _layer$getLayerConfig2 === void 0 ? [] : _layer$getLayerConfig2;

        // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭
        _this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;

        // 根据 LayerConfig passes 配置项初始化
        if (_this.enabled) {
          layer.multiPassRenderer = createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);
          layer.multiPassRenderer.setRenderFlag(true);
        }
      });
      layer.hooks.beforeRender.tap('MultiPassRendererPlugin', function () {
        if (_this.enabled) {
          // 渲染前根据 viewport 调整 FBO size
          var _rendererService$getV = rendererService.getViewportSize(),
            width = _rendererService$getV.width,
            height = _rendererService$getV.height;
          layer.multiPassRenderer.resize(width, height);
        }
      });
    }
  }]);
  return MultiPassRendererPlugin;
}()) || _class);
export { MultiPassRendererPlugin as default };