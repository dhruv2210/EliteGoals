import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
var _dec, _class;
import { AttributeType, gl } from '@antv/l7-core';
import { injectable } from 'inversify';
import 'reflect-metadata';
import { isTileGroup } from "../tile/utils";

/**
 * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建
 */
var RegisterStyleAttributePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {
  function RegisterStyleAttributePlugin() {
    _classCallCheck(this, RegisterStyleAttributePlugin);
  }
  _createClass(RegisterStyleAttributePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;
      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tapPromise('RegisterStyleAttributePlugin', function () {
        // 过滤 tileGroup layer （瓦片图层不需要注册）
        if (isTileGroup(layer)) {
          return;
        }
        _this.registerBuiltinAttributes(styleAttributeService, layer);
      });
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes(styleAttributeService, layer) {
      // MaskLayer 只需要注册 a_Position
      if (layer.type === 'MaskLayer') {
        this.registerPositionAttribute(styleAttributeService);
        return;
      }
      // Tip: normal render layer
      this.registerPositionAttribute(styleAttributeService);
      // this.registerFilterAttribute(styleAttributeService);//数据层数据过滤
      this.registerColorAttribute(styleAttributeService);
      this.registerVertexIdAttribute(styleAttributeService);
    }
  }, {
    key: "registerPositionAttribute",
    value: function registerPositionAttribute(styleAttributeService) {
      styleAttributeService.registerStyleAttribute({
        name: 'position',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Position',
          buffer: {
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex) {
            return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];
          }
        }
      });
    }
  }, {
    key: "registerFilterAttribute",
    value: function registerFilterAttribute(styleAttributeService) {
      styleAttributeService.registerStyleAttribute({
        name: 'filter',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'filter',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature) {
            var filter = feature.filter;
            return filter ? [1] : [0];
          }
        }
      });
    }
  }, {
    key: "registerColorAttribute",
    value: function registerColorAttribute(styleAttributeService) {
      styleAttributeService.registerStyleAttribute({
        name: 'color',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Color',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 4,
          update: function update(feature) {
            var color = feature.color;
            return !color || !color.length ? [1, 1, 1, 1] : color;
          }
        }
      });
    }
  }, {
    key: "registerVertexIdAttribute",
    value: function registerVertexIdAttribute(styleAttributeService) {
      styleAttributeService.registerStyleAttribute({
        // 统一注册每个顶点的唯一编号（目前用于样式的数据映射计算使用）
        name: 'vertexId',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_vertexId',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 1,
          update: function update(feature, featureIdx) {
            return [featureIdx];
          }
        }
      });
    }
  }]);
  return RegisterStyleAttributePlugin;
}()) || _class);
export { RegisterStyleAttributePlugin as default };