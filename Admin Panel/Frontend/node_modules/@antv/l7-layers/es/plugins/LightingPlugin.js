import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
var _dec, _class;
var _excluded = ["type"];
import { injectable } from 'inversify';
import 'reflect-metadata';
var lightTypeUniformMap = {
  directional: {
    lights: 'u_DirectionalLights',
    num: 'u_NumOfDirectionalLights'
  },
  spot: {
    lights: 'u_SpotLights',
    num: 'u_NumOfSpotLights'
  }
};
var DEFAULT_LIGHT = {
  type: 'directional',
  direction: [1, 10.5, 12],
  ambient: [0.2, 0.2, 0.2],
  diffuse: [0.6, 0.6, 0.6],
  specular: [0.1, 0.1, 0.1]
};
var DEFAULT_DIRECTIONAL_LIGHT = {
  direction: [0, 0, 0],
  ambient: [0, 0, 0],
  diffuse: [0, 0, 0],
  specular: [0, 0, 0]
};
var DEFAULT_SPOT_LIGHT = {
  position: [0, 0, 0],
  direction: [0, 0, 0],
  ambient: [0, 0, 0],
  diffuse: [0, 0, 0],
  specular: [0, 0, 0],
  constant: 1,
  linear: 0,
  quadratic: 0,
  angle: 14,
  exponent: 40,
  blur: 5
};
export function generateLightingUniforms(lights) {
  var lightsMap = {
    u_DirectionalLights: new Array(3).fill(_objectSpread({}, DEFAULT_DIRECTIONAL_LIGHT)),
    u_NumOfDirectionalLights: 0,
    u_SpotLights: new Array(3).fill(_objectSpread({}, DEFAULT_SPOT_LIGHT)),
    u_NumOfSpotLights: 0
  };
  if (!lights || !lights.length) {
    lights = [DEFAULT_LIGHT];
  }
  lights.forEach(function (_ref) {
    var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'directional' : _ref$type,
      rest = _objectWithoutProperties(_ref, _excluded);
    var lightsUniformName = lightTypeUniformMap[type].lights;
    var lightsNumUniformName = lightTypeUniformMap[type].num;

    // @ts-ignore
    var num = lightsMap[lightsNumUniformName];
    // @ts-ignore
    lightsMap[lightsUniformName][num] = _objectSpread(_objectSpread({}, lightsMap[lightsUniformName][num]), rest);
    // @ts-ignore
    lightsMap[lightsNumUniformName]++;
  });
  return lightsMap;
}

/**
 * 光照 & Shadow
 */
var LightingPlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {
  function LightingPlugin() {
    _classCallCheck(this, LightingPlugin);
  }
  _createClass(LightingPlugin, [{
    key: "apply",
    value: function apply(layer) {
      layer.hooks.beforeRender.tap('LightingPlugin', function () {
        var _layer$getLayerConfig = layer.getLayerConfig(),
          enableLighting = _layer$getLayerConfig.enableLighting;
        if (enableLighting) {
          layer.models.forEach(function (model) {
            return (
              // @ts-ignore
              model.addUniforms(_objectSpread({}, generateLightingUniforms()))
            );
          });
        }
      });
    }
  }]);
  return LightingPlugin;
}()) || _class);
export { LightingPlugin as default };