import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
var _dec, _class;
import { injectable } from 'inversify';
import 'reflect-metadata';

/**
 * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建
 */
var UpdateStyleAttributePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {
  function UpdateStyleAttributePlugin() {
    _classCallCheck(this, UpdateStyleAttributePlugin);
  }
  _createClass(UpdateStyleAttributePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;
      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tapPromise('UpdateStyleAttributePlugin', function () {
        _this.initStyleAttribute(layer, {
          styleAttributeService: styleAttributeService
        });
      });
      layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', function () {
        if (layer.layerModelNeedUpdate) {
          return;
        }
        if (layer.inited) {
          _this.updateStyleAttribute(layer, {
            styleAttributeService: styleAttributeService
          });
        }
      });
    }
  }, {
    key: "updateStyleAttribute",
    value: function updateStyleAttribute(layer, _ref2) {
      var styleAttributeService = _ref2.styleAttributeService;
      var attributes = styleAttributeService.getLayerStyleAttributes() || [];
      var filter = styleAttributeService.getLayerStyleAttribute('filter');
      if (filter && filter.needRegenerateVertices) {
        layer.layerModelNeedUpdate = true;
        attributes.forEach(function (attr) {
          return attr.needRegenerateVertices = false;
        });
        return;
      }
      attributes.filter(function (attribute) {
        return attribute.needRegenerateVertices;
      }).forEach(function (attribute) {
        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d
        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),
        // 获取经过 mapping 最新的数据
        attribute.featureRange.startIndex, attribute.featureRange.endIndex, layer);
        attribute.needRegenerateVertices = false;
      });
    }
  }, {
    key: "initStyleAttribute",
    value: function initStyleAttribute(layer, _ref3) {
      var styleAttributeService = _ref3.styleAttributeService;
      var attributes = styleAttributeService.getLayerStyleAttributes() || [];
      attributes.filter(function (attribute) {
        return attribute.needRegenerateVertices;
      }).forEach(function (attribute) {
        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d
        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),
        // 获取经过 mapping 最新的数据
        attribute.featureRange.startIndex, attribute.featureRange.endIndex);
        attribute.needRegenerateVertices = false;
      });
    }
  }]);
  return UpdateStyleAttributePlugin;
}()) || _class);
export { UpdateStyleAttributePlugin as default };