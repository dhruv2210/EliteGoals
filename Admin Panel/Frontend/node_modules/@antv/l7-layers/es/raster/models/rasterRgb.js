import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
var _excluded = ["data"],
  _excluded2 = ["rasterData"];
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import BaseModel from "../../core/BaseModel";
import { RasterImageTriangulation } from "../../core/triangulation";
/* babel-plugin-inline-import '../shaders/raster_2d_vert.glsl' */
var rasterVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_Mvp;\nattribute vec3 a_Position;\nattribute vec2 a_Uv;\nvarying vec2 v_texCoord;\n#pragma include \"projection\"\nvoid main() {\n   v_texCoord = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\n   } else {\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n   }\n}\n";
/* babel-plugin-inline-import '../shaders/raster_rgb_frag.glsl' */
var rasterFrag = "precision mediump float;\nuniform vec2 u_rminmax: vec2(0,255); \nuniform vec2 u_gminmax: vec2(0,255);\nuniform vec2 u_bminmax: vec2(0,255);\nuniform float u_opacity: 1.0;\nuniform sampler2D u_texture;\nuniform float u_noDataValue : 0.0;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  vec3 rgb = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y)).rgb;\n  if(rgb == vec3(u_noDataValue)) {\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\n  } else {\n    gl_FragColor = vec4(rgb.r / (u_rminmax.y -u_rminmax.x), rgb.g /(u_gminmax.y -u_gminmax.x), rgb.b/ (u_bminmax.y - u_bminmax.x), u_opacity);\n  }\n  if(gl_FragColor.a < 0.01)\n    discard;\n \n}";
var RasterModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(RasterModel, _BaseModel);
  var _super = _createSuper(RasterModel);
  function RasterModel() {
    var _this;
    _classCallCheck(this, RasterModel);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "dataOption", {});
    return _this;
  }
  _createClass(RasterModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
        _ref$opacity = _ref.opacity,
        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
        _ref$noDataValue = _ref.noDataValue,
        noDataValue = _ref$noDataValue === void 0 ? 0 : _ref$noDataValue;
      var _this$dataOption = this.dataOption,
        rMinMax = _this$dataOption.rMinMax,
        gMinMax = _this$dataOption.gMinMax,
        bMinMax = _this$dataOption.bMinMax;
      return {
        u_opacity: opacity || 1,
        u_texture: this.texture,
        u_noDataValue: noDataValue,
        u_rminmax: rMinMax,
        u_gminmax: gMinMax,
        u_bminmax: bMinMax
      };
    }
  }, {
    key: "getRasterData",
    value: function () {
      var _getRasterData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(parserDataItem) {
        var data, rescfg, _yield$parserDataItem, rasterData, rest;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!Array.isArray(parserDataItem.data)) {
                _context.next = 4;
                break;
              }
              data = parserDataItem.data, rescfg = _objectWithoutProperties(parserDataItem, _excluded);
              this.dataOption = rescfg;
              return _context.abrupt("return", _objectSpread({
                data: data
              }, rescfg));
            case 4:
              _context.next = 6;
              return parserDataItem.data;
            case 6:
              _yield$parserDataItem = _context.sent;
              rasterData = _yield$parserDataItem.rasterData;
              rest = _objectWithoutProperties(_yield$parserDataItem, _excluded2);
              this.dataOption = rest;
              if (!Array.isArray(rasterData)) {
                _context.next = 14;
                break;
              }
              return _context.abrupt("return", _objectSpread({
                data: rasterData
              }, rest));
            case 14:
              return _context.abrupt("return", _objectSpread({
                data: Array.from(rasterData)
              }, rest));
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getRasterData(_x) {
        return _getRasterData.apply(this, arguments);
      }
      return getRasterData;
    }()
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var source, createTexture2D, parserDataItem, _yield$this$getRaster, data, width, height, model;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              source = this.layer.getSource();
              createTexture2D = this.rendererService.createTexture2D;
              parserDataItem = source.data.dataArray[0];
              _context2.next = 5;
              return this.getRasterData(parserDataItem);
            case 5:
              _yield$this$getRaster = _context2.sent;
              data = _yield$this$getRaster.data;
              width = _yield$this$getRaster.width;
              height = _yield$this$getRaster.height;
              this.texture = createTexture2D({
                // @ts-ignore
                data: data,
                width: width,
                height: height,
                format: gl.RGB,
                type: gl.FLOAT
              });
              _context2.next = 12;
              return this.layer.buildLayerModel({
                moduleName: 'rasterImageDataRGBA',
                vertexShader: rasterVert,
                fragmentShader: rasterFrag,
                triangulation: RasterImageTriangulation,
                primitive: gl.TRIANGLES,
                depth: {
                  enable: false
                }
              });
            case 12:
              model = _context2.sent;
              return _context2.abrupt("return", [model]);
            case 14:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.initModels());
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;
      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return RasterModel;
}(BaseModel);
export { RasterModel as default };