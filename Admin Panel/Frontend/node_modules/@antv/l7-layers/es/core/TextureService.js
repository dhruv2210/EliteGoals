import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { TYPES } from '@antv/l7-core';
import { generateCatRamp, generateColorRamp, generateCustomRamp, generateLinearRamp, generateQuantizeRamp } from '@antv/l7-utils';
var TextureService = /*#__PURE__*/function () {
  function TextureService(layer) {
    _classCallCheck(this, TextureService);
    this.layer = layer;
    var container = this.layer.getContainer();
    this.rendererService = container.get(TYPES.IRendererService);
  }
  _createClass(TextureService, [{
    key: "getColorTexture",
    value: function getColorTexture(colorRamp, domain) {
      // TODO 支持传入图片
      var currentkey = this.getTextureKey(colorRamp, domain);
      if (this.key === currentkey) {
        return this.colorTexture;
      } else {
        this.createColorTexture(colorRamp, domain);
      }
      this.key = currentkey;
      return this.colorTexture;
    }
  }, {
    key: "createColorTexture",
    value: function createColorTexture(colorRamp, domain) {
      var createTexture2D = this.rendererService.createTexture2D;
      var imageData = this.getColorRampBar(colorRamp, domain);
      var texture = createTexture2D({
        data: new Uint8Array(imageData.data),
        width: imageData.width,
        height: imageData.height,
        flipY: false
      });
      this.colorTexture = texture;
      return texture;
    }
  }, {
    key: "setColorTexture",
    value: function setColorTexture(texture, colorRamp, domain) {
      this.key = this.getTextureKey(colorRamp, domain);
      this.colorTexture = texture;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$colorTexture;
      (_this$colorTexture = this.colorTexture) === null || _this$colorTexture === void 0 ? void 0 : _this$colorTexture.destroy();
    }
  }, {
    key: "getColorRampBar",
    value: function getColorRampBar(colorRamp, domain) {
      switch (colorRamp.type) {
        case 'cat':
          return generateCatRamp(colorRamp);
        case 'quantize':
          return generateQuantizeRamp(colorRamp);
        case 'custom':
          return generateCustomRamp(colorRamp, domain);
        case 'linear':
          return generateLinearRamp(colorRamp, domain);
        default:
          return generateColorRamp(colorRamp);
      }
    }
  }, {
    key: "getTextureKey",
    value: function getTextureKey(colorRamp, domain) {
      var _colorRamp$positions;
      return "".concat(colorRamp.colors.join('_'), "_").concat(colorRamp === null || colorRamp === void 0 ? void 0 : (_colorRamp$positions = colorRamp.positions) === null || _colorRamp$positions === void 0 ? void 0 : _colorRamp$positions.join('_'), "_").concat(colorRamp.type, "_").concat(domain === null || domain === void 0 ? void 0 : domain.join('_'));
    }
  }]);
  return TextureService;
}();
export { TextureService as default };