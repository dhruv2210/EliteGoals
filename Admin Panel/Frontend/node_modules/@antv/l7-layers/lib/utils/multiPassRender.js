"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMultiPassRenderer = createMultiPassRenderer;
exports.normalizePasses = normalizePasses;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
/**
 * 'blurH' -> ['blurH', {}]
 */
function normalizePasses(passes) {
  return passes.map(function (pass) {
    if (typeof pass === 'string') {
      pass = [pass, {}];
    }
    return pass;
  });
}

/**
 * 默认添加 ClearPass、RenderPass
 * 以及 PostProcessing 中的最后一个 CopyPass
 */
function createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory) {
  var multiPassRenderer = layer.multiPassRenderer;
  var _layer$getLayerConfig = layer.getLayerConfig(),
    enableTAA = _layer$getLayerConfig.enableTAA;

  // picking pass if enabled
  // if (enablePicking) {
  //   multiPassRenderer.add(normalPassFactory('pixelPicking'));
  // }

  // use TAA pass if enabled instead of render pass
  if (enableTAA) {
    multiPassRenderer.add(normalPassFactory('taa'));
  } else {
    // render all layers in this pass
    multiPassRenderer.add(normalPassFactory('render'));
  }

  // post processing
  normalizePasses(passes).forEach(function (pass) {
    var _pass = (0, _slicedToArray2.default)(pass, 2),
      passName = _pass[0],
      initializationOptions = _pass[1];
    multiPassRenderer.add(postProcessingPassFactory(passName), initializationOptions);
  });

  // 末尾为固定的 CopyPass
  multiPassRenderer.add(postProcessingPassFactory('copy'));
  return multiPassRenderer;
}