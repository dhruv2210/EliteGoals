"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateData = calculateData;
var _l7Maps = require("@antv/l7-maps");
var _l7Source = _interopRequireDefault(require("@antv/l7-source"));
var _l7Utils = require("@antv/l7-utils");
var _lodash = require("lodash");
function getArrowPoints(p1, p2) {
  var dir = [p2[0] - p1[0], p2[1] - p1[1]];
  var normalizeDir = (0, _l7Utils.normalize)(dir);
  var arrowPoint = [p1[0] + normalizeDir[0] * 0.0001, p1[1] + normalizeDir[1] * 0.0001];
  return arrowPoint;
}
function adjustData2Amap2Coordinates(mappedData, mapService, layer) {
  // 根据地图的类型判断是否需要对点位数据进行处理, 若是高德2.0则需要对坐标进行相对偏移
  if (mappedData.length > 0 && mapService.version === _l7Maps.Version['GAODE2.x']) {
    var layerCenter = layer.coordCenter;
    if (typeof mappedData[0].coordinates[0] === 'number') {
      // 单个的点数据
      // @ts-ignore
      mappedData
      // 避免经纬度被重复计算导致坐标位置偏移
      .filter(function (d) {
        return !d.originCoordinates;
      }).map(function (d) {
        d.version = _l7Maps.Version['GAODE2.x'];
        // @ts-ignore
        d.originCoordinates = (0, _lodash.cloneDeep)(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）
        // @ts-ignore
        // d.coordinates = mapService.lngLatToCoord(d.coordinates);
        d.coordinates = mapService.lngLatToCoordByLayer(d.coordinates, layerCenter);
      });
    } else {
      // 连续的线、面数据
      // @ts-ignore
      mappedData
      // 避免经纬度被重复计算导致坐标位置偏移
      .filter(function (d) {
        return !d.originCoordinates;
      }).map(function (d) {
        d.version = _l7Maps.Version['GAODE2.x'];
        // @ts-ignore
        d.originCoordinates = (0, _lodash.cloneDeep)(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）
        // @ts-ignore
        // d.coordinates = mapService.lngLatToCoords(d.coordinates);
        d.coordinates = mapService.lngLatToCoordsByLayer(d.coordinates, layerCenter);
      });
    }
  }
}
function adjustData2SimpleCoordinates(mappedData, mapService) {
  if (mappedData.length > 0 && mapService.version === _l7Maps.Version.SIMPLE) {
    mappedData.map(function (d) {
      if (!d.simpleCoordinate) {
        d.coordinates = unProjectCoordinates(d.coordinates, mapService);
        d.simpleCoordinate = true;
      }
    });
  }
}
function unProjectCoordinates(coordinates, mapService) {
  if (typeof coordinates[0] === 'number') {
    return mapService.simpleMapCoord.unproject(coordinates);
  }
  if (coordinates[0] && coordinates[0][0] instanceof Array) {
    // @ts-ignore
    var coords = [];
    coordinates.map(function (coord) {
      // @ts-ignore
      var c1 = [];
      coord.map(function (co) {
        c1.push(mapService.simpleMapCoord.unproject(co));
      });
      // @ts-ignore
      coords.push(c1);
    });
    // @ts-ignore
    return coords;
  } else {
    // @ts-ignore
    var _coords = [];
    // @ts-ignore
    coordinates.map(function (coord) {
      _coords.push(mapService.simpleMapCoord.unproject(coord));
    });
    // @ts-ignore
    return _coords;
  }
}
function applyAttributeMapping(attribute, record) {
  var _attribute$scale;
  if (!attribute.scale) {
    return [];
  }
  var scalers = (attribute === null || attribute === void 0 ? void 0 : (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers) || [];
  var params = [];
  scalers.forEach(function (_ref) {
    var _attribute$scale2;
    var field = _ref.field;
    if (record.hasOwnProperty(field) || ((_attribute$scale2 = attribute.scale) === null || _attribute$scale2 === void 0 ? void 0 : _attribute$scale2.type) === 'variable') {
      // TODO:多字段，常量
      params.push(record[field]);
    }
  });
  var mappingResult = attribute.mapping ? attribute.mapping(params) : [];
  return mappingResult;
}
function mapping(attributes, data, fontService, mapService, layer) {
  var _ref2 = layer === null || layer === void 0 ? void 0 : layer.getLayerConfig(),
    _ref2$arrow = _ref2.arrow,
    arrow = _ref2$arrow === void 0 ? {
      enable: false
    } : _ref2$arrow;
  var mappedData = data.map(function (record) {
    var encodeRecord = {
      id: record._id,
      coordinates: record.coordinates
    };
    attributes.filter(function (attribute) {
      return attribute.scale !== undefined;
    }).forEach(function (attribute) {
      var values = applyAttributeMapping(attribute, record);
      attribute.needRemapping = false;

      // TODO: 支持每个属性配置 postprocess
      if (attribute.name === 'color') {
        values = values.map(function (c) {
          return (0, _l7Utils.rgb2arr)(c);
        });
      }
      // @ts-ignore
      encodeRecord[attribute.name] = Array.isArray(values) && values.length === 1 ? values[0] : values;

      // 增加对 layer/text/iconfont unicode 映射的解析
      if (attribute.name === 'shape') {
        encodeRecord.shape = fontService.getIconFontKey(encodeRecord[attribute.name]);
      }
    });
    if (encodeRecord.shape === 'line' && arrow.enable) {
      // 只有在线图层且支持配置箭头的时候进行插入顶点的处理
      var coords = encodeRecord.coordinates;
      var arrowPoint = getArrowPoints(coords[0], coords[1]);
      encodeRecord.coordinates.splice(1, 0, arrowPoint, arrowPoint);
    }
    return encodeRecord;
  });
  // 调整数据兼容 Amap2.0
  adjustData2Amap2Coordinates(mappedData, mapService, layer);

  // 调整数据兼容 SimpleCoordinates
  adjustData2SimpleCoordinates(mappedData, mapService);
  return mappedData;
}
function calculateData(layer, fontService, mapService, styleAttributeService, data, options) {
  var source = new _l7Source.default(data, options);
  var attributes = styleAttributeService.getLayerStyleAttributes() || [];
  var dataArray = source.data.dataArray;
  var filterData = dataArray;
  var mappedEncodeData = mapping(attributes, filterData, fontService, mapService, layer);
  source.destroy();
  return mappedEncodeData;
}