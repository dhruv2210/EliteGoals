"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Maps = require("@antv/l7-maps");
var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* babel-plugin-inline-import '../shaders/plane_frag.glsl' */
var planeFrag = "\nuniform sampler2D u_texture;\nuniform float u_mapFlag;\nuniform float u_opacity;\n\nvarying vec3 v_Color;\nvarying vec2 v_uv;\nvarying float v_clip;\n\n#pragma include \"picking\"\nvoid main() {\n  // gl_FragColor = vec4(v_Color, u_opacity);\n  if(u_mapFlag > 0.0) {\n    gl_FragColor = texture2D(u_texture, vec2(v_uv.x, 1.0 - v_uv.y));\n    gl_FragColor.a *= u_opacity;\n  } else {\n    // gl_FragColor = vec4(v_uv, 0.0, u_opacity);\n    gl_FragColor = vec4(v_Color, u_opacity);\n  }\n  gl_FragColor.a *= v_clip;\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";
/* babel-plugin-inline-import '../shaders/plane_vert.glsl' */
var planeVert = "precision highp float;\nuniform mat4 u_ModelMatrix;\n\nuniform mat4 u_Mvp;\nuniform float u_opacity;\nuniform float u_terrainClipHeight;\n\nattribute vec3 a_Position;\nattribute vec2 a_Uv;\nattribute vec3 a_Color;\n\nvarying vec3 v_Color;\nvarying vec2 v_uv;\nvarying float v_clip;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\nvoid main() {\n   v_Color = a_Color;\n   v_uv = a_Uv;\n  \n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n\n   v_clip = 1.0;\n   if(a_Position.z < u_terrainClipHeight) {\n      v_clip = 0.0;\n   }\n  \n   // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\n\n   // float x = 1.0;\n   // float y = 0.0;\n   // float z = 0.0;\n   // mat3 translateMatrix = mat3(\n   //    1.0, 0.0, 0.0 \n   //    0.0, 1.0, 0.0\n   //    -project_pos.x,    -project_pos.y,  1.0\n   // );\n   //  mat4 translateMatrix = mat4(\n   //    1.0, 0.0, 0.0, 0.0 ,\n   //    0.0, 1.0, 0.0, 0.0,\n   //    0.0, 0.0, 1.0, 0.0,\n   //    1.0, 0.0, 0.0, 1.0\n   // );\n\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n      gl_Position = u_Mvp * (vec4(project_pos.xy, a_Position.z, 1.0));\n   } else {\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy, a_Position.z, 1.0));\n   }\n\n   setPickingColor(a_PickingColor);\n}\n";
var PlaneModel = /*#__PURE__*/function (_BaseModel) {
  (0, _inherits2.default)(PlaneModel, _BaseModel);
  var _super = _createSuper(PlaneModel);
  function PlaneModel() {
    var _this;
    (0, _classCallCheck2.default)(this, PlaneModel);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "terrainImageLoaded", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "planeGeometryTriangulation", function () {
      var _this2;
      var _ref = _this.layer.getLayerConfig(),
        _ref$width = _ref.width,
        width = _ref$width === void 0 ? 1 : _ref$width,
        _ref$height = _ref.height,
        height = _ref$height === void 0 ? 1 : _ref$height,
        _ref$widthSegments = _ref.widthSegments,
        widthSegments = _ref$widthSegments === void 0 ? 1 : _ref$widthSegments,
        _ref$heightSegments = _ref.heightSegments,
        heightSegments = _ref$heightSegments === void 0 ? 1 : _ref$heightSegments,
        _ref$center = _ref.center,
        center = _ref$center === void 0 ? [120, 30] : _ref$center,
        terrainTexture = _ref.terrainTexture;
      var _this$initPlane = (_this2 = _this).initPlane.apply(_this2, [width, height, widthSegments, heightSegments].concat((0, _toConsumableArray2.default)(center))),
        indices = _this$initPlane.indices,
        positions = _this$initPlane.positions;
      if (terrainTexture) {
        // 存在地形贴图的时候会根据地形贴图对顶点进行偏移
        _this.loadTerrainTexture(positions, indices);
      }
      return {
        vertices: positions,
        indices: indices,
        size: 5
      };
    });
    return _this;
  }
  (0, _createClass2.default)(PlaneModel, [{
    key: "initPlane",
    value: function initPlane() {
      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var widthSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var heightSegments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var lng = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 120;
      var lat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 30;
      // https://github.com/mrdoob/three.js/blob/dev/src/geometries/PlaneGeometry.js
      var widthHalf = width / 2;
      var heightHalf = height / 2;
      var gridX = Math.floor(widthSegments);
      var gridY = Math.floor(heightSegments);
      var gridX1 = gridX + 1;
      var gridY1 = gridY + 1;
      var segmentWidth = width / gridX;
      var segmentHeight = height / gridY;
      var indices = [];
      var positions = [];
      for (var iy = 0; iy < gridY1; iy++) {
        var y = iy * segmentHeight - heightHalf;
        for (var ix = 0; ix < gridX1; ix++) {
          var x = ix * segmentWidth - widthHalf;
          if (this.mapService.version === _l7Maps.Version['GAODE2.x']) {
            // @ts-ignore
            var _ref2 = this.mapService.lngLatToCoord([x + lng, -y + lat]),
              _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
              a = _ref3[0],
              _b = _ref3[1];
            positions.push(a, _b, 0);
          } else {
            positions.push(x + lng, -y + lat, 0);
          }
          positions.push(ix / gridX);
          positions.push(1 - iy / gridY);
        }
      }
      for (var _iy = 0; _iy < gridY; _iy++) {
        for (var _ix = 0; _ix < gridX; _ix++) {
          var _a = _ix + gridX1 * _iy;
          var _b2 = _ix + gridX1 * (_iy + 1);
          var c = _ix + 1 + gridX1 * (_iy + 1);
          var d = _ix + 1 + gridX1 * _iy;
          indices.push(_a, _b2, d);
          indices.push(_b2, c, d);
        }
      }
      return {
        indices: indices,
        positions: positions
      };
    }
  }, {
    key: "getUninforms",
    value: function getUninforms() {
      var _ref4 = this.layer.getLayerConfig(),
        opacity = _ref4.opacity,
        mapTexture = _ref4.mapTexture,
        _ref4$terrainClipHeig = _ref4.terrainClipHeight,
        terrainClipHeight = _ref4$terrainClipHeig === void 0 ? 0 : _ref4$terrainClipHeig,
        terrainTexture = _ref4.terrainTexture;
      if (this.mapTexture !== mapTexture) {
        var _this$texture;
        this.mapTexture = mapTexture;
        (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();
        this.updateTexture(mapTexture);
      }
      return {
        u_opacity: opacity || 1,
        u_mapFlag: mapTexture ? 1 : 0,
        u_terrainClipHeight: terrainTexture ? terrainClipHeight : -1,
        u_texture: this.texture
      };
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture2;
      // @ts-ignore
      this.terrainImage = null;
      (_this$texture2 = this.texture) === null || _this$texture2 === void 0 ? void 0 : _this$texture2.destroy();
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _ref5, mapTexture, createTexture2D, model;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ref5 = this.layer.getLayerConfig(), mapTexture = _ref5.mapTexture;
              this.mapTexture = mapTexture;
              createTexture2D = this.rendererService.createTexture2D;
              this.texture = createTexture2D({
                height: 0,
                width: 0
              });
              this.updateTexture(mapTexture);
              _context.next = 7;
              return this.layer.buildLayerModel({
                moduleName: 'geometryPlane',
                vertexShader: planeVert,
                fragmentShader: planeFrag,
                triangulation: this.planeGeometryTriangulation,
                primitive: _l7Core.gl.TRIANGLES,
                depth: {
                  enable: true
                },
                cull: {
                  enable: true,
                  face: _l7Core.gl.BACK // gl.FRONT | gl.BACK;
                }
              });
            case 7:
              model = _context.sent;
              return _context.abrupt("return", [model]);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.initModels());
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "createModelData",
    value: function createModelData(options) {
      if (options) {
        var _ref6 = this.layer.getLayerConfig(),
          oldwidthSegments = _ref6.widthSegments,
          oldheightSegments = _ref6.heightSegments,
          oldwidth = _ref6.width,
          oldheight = _ref6.height;
        var _ref7 = options,
          widthSegments = _ref7.widthSegments,
          heightSegments = _ref7.heightSegments,
          width = _ref7.width,
          height = _ref7.height;
        this.layer.style({
          widthSegments: widthSegments !== undefined ? widthSegments : oldwidthSegments,
          heightSegments: heightSegments !== undefined ? heightSegments : oldheightSegments,
          width: width !== undefined ? width : oldwidth,
          height: height !== undefined ? height : oldheight
        });
      }
      var oldFeatures = this.layer.getEncodedData();
      var res = this.styleAttributeService.createAttributesAndIndices(oldFeatures, this.planeGeometryTriangulation);
      return res;
    }
  }, {
    key: "updateTexture",
    value: function updateTexture(mapTexture) {
      var _this3 = this;
      var createTexture2D = this.rendererService.createTexture2D;
      if (mapTexture) {
        var img = new Image();
        img.crossOrigin = 'anonymous';
        img.onload = function () {
          _this3.texture = createTexture2D({
            data: img,
            width: img.width,
            height: img.height,
            wrapS: _l7Core.gl.CLAMP_TO_EDGE,
            wrapT: _l7Core.gl.CLAMP_TO_EDGE
          });
          _this3.layerService.reRender();
        };
        img.src = mapTexture;
      } else {
        this.texture = createTexture2D({
          width: 0,
          height: 0
        });
      }
    }
  }, {
    key: "getImageData",
    value: function getImageData(img) {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      var width = img.width,
        height = img.height;
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, width, height);
      var imageData = ctx.getImageData(0, 0, width, height);
      return imageData;
    }
  }, {
    key: "translateVertex",
    value: function translateVertex(positions, indices, image, widthSegments, heightSegments, rgb2height) {
      var imgWidth = image.width;
      var imgHeight = image.height;
      var imageData = this.getImageData(image).data;
      var gridX = Math.floor(widthSegments);
      var gridY = Math.floor(heightSegments);
      var gridX1 = gridX + 1;
      var gridY1 = gridY + 1;
      var widthStep = imgWidth / gridX;
      var heightStep = imgHeight / gridY;
      for (var iy = 0; iy < gridY1; iy++) {
        var imgIndexY = Math.floor(iy * heightStep);
        var imgLen = imgIndexY * imgWidth;
        for (var ix = 0; ix < gridX1; ix++) {
          var imgIndexX = Math.floor(ix * widthStep);
          var imgDataIndex = (imgLen + imgIndexX) * 4;
          var _r = imageData[imgDataIndex];
          var _g = imageData[imgDataIndex + 1];
          var _b3 = imageData[imgDataIndex + 2];
          var z = (iy * gridX1 + ix) * 5 + 2;
          positions[z] = rgb2height(_r, _g, _b3);
        }
      }
      var oldFeatures = this.layer.getEncodedData();
      var modelData = this.styleAttributeService.createAttributesAndIndices(oldFeatures, function () {
        return {
          vertices: positions,
          indices: indices,
          size: 5
        };
      });
      this.layer.updateModelData(modelData);
      this.layerService.throttleRenderLayers();
    }

    /**
     * load terrain texture & offset attribute z
     */
  }, {
    key: "loadTerrainTexture",
    value: function loadTerrainTexture(positions, indices) {
      var _this4 = this;
      var _ref8 = this.layer.getLayerConfig(),
        _ref8$widthSegments = _ref8.widthSegments,
        widthSegments = _ref8$widthSegments === void 0 ? 1 : _ref8$widthSegments,
        _ref8$heightSegments = _ref8.heightSegments,
        heightSegments = _ref8$heightSegments === void 0 ? 1 : _ref8$heightSegments,
        terrainTexture = _ref8.terrainTexture,
        _ref8$rgb2height = _ref8.rgb2height,
        rgb2height = _ref8$rgb2height === void 0 ? function (r, g, b) {
          return r + g + b;
        } : _ref8$rgb2height;
      if (this.terrainImage) {
        // 若当前已经存在 image，直接进行偏移计算（LOD）
        if (this.terrainImageLoaded) {
          this.translateVertex(positions, indices, this.terrainImage, widthSegments, heightSegments, rgb2height);
        } else {
          this.terrainImage.onload = function () {
            _this4.translateVertex(positions, indices, _this4.terrainImage, widthSegments, heightSegments, rgb2height);
          };
        }
      } else {
        // 加载地形贴图、根据地形贴图对 planeGeometry 进行偏移
        var terrainImage = new Image();
        this.terrainImage = terrainImage;
        terrainImage.crossOrigin = 'anonymous';
        terrainImage.onload = function () {
          _this4.terrainImageLoaded = true;
          // 图片加载完，触发事件，可以进行地形图的顶点计算存储
          setTimeout(function () {
            return _this4.layer.emit('terrainImageLoaded', null);
          });
          _this4.translateVertex(positions, indices, terrainImage, widthSegments, heightSegments, rgb2height);
        };
        terrainImage.src = terrainTexture;
      }
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return PlaneModel;
}(_BaseModel2.default);
exports.default = PlaneModel;