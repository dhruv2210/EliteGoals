"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _inversify = require("inversify");
require("reflect-metadata");
var _dec, _class;
var PickingStage = {
  NONE: 0.0,
  ENCODE: 1.0,
  HIGHLIGHT: 2.0
};
var PixelPickingPlugin = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function () {
  function PixelPickingPlugin() {
    (0, _classCallCheck2.default)(this, PixelPickingPlugin);
  }
  (0, _createClass2.default)(PixelPickingPlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var styleAttributeService = _ref.styleAttributeService;
      // TODO: 由于 Shader 目前无法根据是否开启拾取进行内容修改，因此即使不开启也需要生成 a_PickingColor
      layer.hooks.init.tapPromise('PixelPickingPlugin', function () {
        var _layer$getLayerConfig = layer.getLayerConfig(),
          enablePicking = _layer$getLayerConfig.enablePicking;
        styleAttributeService.registerStyleAttribute({
          name: 'pickingColor',
          type: _l7Core.AttributeType.Attribute,
          descriptor: {
            name: 'a_PickingColor',
            buffer: {
              data: [],
              type: _l7Core.gl.FLOAT
            },
            size: 3,
            // TODO: 固定 feature range 范围内的 pickingColor 都是固定的，可以生成 cache
            update: function update(feature) {
              // 只有开启拾取才需要 encode
              var id = feature.id;
              return enablePicking ? (0, _l7Utils.encodePickingColor)(id) : [0, 0, 0];
            }
          }
        });
      });
      // 必须要与 PixelPickingPass 结合使用，因此必须开启 multiPassRenderer
      layer.hooks.beforePickingEncode.tap('PixelPickingPlugin', function () {
        var _layer$getLayerConfig2 = layer.getLayerConfig(),
          enablePicking = _layer$getLayerConfig2.enablePicking;
        if (enablePicking && layer.isVisible()) {
          layer.models.forEach(function (model) {
            return model.addUniforms({
              u_PickingStage: PickingStage.ENCODE
            });
          });
        }
      });
      layer.hooks.afterPickingEncode.tap('PixelPickingPlugin', function () {
        var _layer$getLayerConfig3 = layer.getLayerConfig(),
          enablePicking = _layer$getLayerConfig3.enablePicking;
        // 区分选中高亮 和滑过高亮
        if (enablePicking && layer.isVisible()) {
          layer.models.forEach(function (model) {
            return model.addUniforms({
              u_PickingStage: PickingStage.HIGHLIGHT
            });
          });
        }
      });
      layer.hooks.beforeHighlight.tap('PixelPickingPlugin', function (pickedColor) {
        var _layer$getLayerConfig4 = layer.getLayerConfig(),
          highlightColor = _layer$getLayerConfig4.highlightColor,
          _layer$getLayerConfig5 = _layer$getLayerConfig4.activeMix,
          activeMix = _layer$getLayerConfig5 === void 0 ? 0 : _layer$getLayerConfig5;
        var highlightColorInArray = typeof highlightColor === 'string' ? (0, _l7Utils.rgb2arr)(highlightColor) : highlightColor || [1, 0, 0, 1];
        layer.updateLayerConfig({
          pickedFeatureID: (0, _l7Utils.decodePickingColor)(new Uint8Array(pickedColor))
        });
        layer.models.forEach(function (model) {
          return model.addUniforms({
            u_PickingStage: PickingStage.HIGHLIGHT,
            u_PickingColor: pickedColor,
            u_HighlightColor: highlightColorInArray.map(function (c) {
              return c * 255;
            }),
            u_activeMix: activeMix
          });
        });
      });
      layer.hooks.beforeSelect.tap('PixelPickingPlugin', function (pickedColor) {
        var _layer$getLayerConfig6 = layer.getLayerConfig(),
          selectColor = _layer$getLayerConfig6.selectColor,
          _layer$getLayerConfig7 = _layer$getLayerConfig6.selectMix,
          selectMix = _layer$getLayerConfig7 === void 0 ? 0 : _layer$getLayerConfig7;
        var highlightColorInArray = typeof selectColor === 'string' ? (0, _l7Utils.rgb2arr)(selectColor) : selectColor || [1, 0, 0, 1];
        layer.updateLayerConfig({
          pickedFeatureID: (0, _l7Utils.decodePickingColor)(new Uint8Array(pickedColor))
        });
        layer.models.forEach(function (model) {
          return model.addUniforms({
            u_PickingStage: PickingStage.HIGHLIGHT,
            u_PickingColor: pickedColor,
            u_HighlightColor: highlightColorInArray.map(function (c) {
              return c * 255;
            }),
            u_activeMix: selectMix,
            u_CurrentSelectedId: pickedColor,
            u_SelectColor: highlightColorInArray.map(function (c) {
              return c * 255;
            }),
            u_EnableSelect: 1
          });
        });
      });
    }
  }]);
  return PixelPickingPlugin;
}()) || _class);
exports.default = PixelPickingPlugin;