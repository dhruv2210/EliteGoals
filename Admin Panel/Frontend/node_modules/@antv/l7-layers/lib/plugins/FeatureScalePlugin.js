"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _d3Array = require("d3-array");
var d3interpolate = _interopRequireWildcard(require("d3-interpolate"));
var d3 = _interopRequireWildcard(require("d3-scale"));
var _inversify = require("inversify");
var _lodash = require("lodash");
require("reflect-metadata");
var _identityScale = _interopRequireDefault(require("../utils/identityScale"));
var _scaleMap, _dec, _class;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
var scaleMap = (_scaleMap = {}, (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.LINEAR, d3.scaleLinear), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.POWER, d3.scalePow), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.LOG, d3.scaleLog), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.IDENTITY, _identityScale.default), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.SEQUENTIAL, d3.scaleSequential), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.TIME, d3.scaleTime), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.QUANTILE, d3.scaleQuantile), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.QUANTIZE, d3.scaleQuantize), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.THRESHOLD, d3.scaleThreshold), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.CAT, d3.scaleOrdinal), (0, _defineProperty2.default)(_scaleMap, _l7Core.ScaleTypes.DIVERGING, d3.scaleDiverging), _scaleMap);
/**
 * 根据 Source 原始数据为指定字段创建 Scale，保存在 StyleAttribute 上，供下游插件使用
 */
var FeatureScalePlugin = (_dec = (0, _inversify.injectable)(), _dec(_class = /*#__PURE__*/function () {
  function FeatureScalePlugin() {
    (0, _classCallCheck2.default)(this, FeatureScalePlugin);
    (0, _defineProperty2.default)(this, "scaleOptions", {});
  }
  (0, _createClass2.default)(FeatureScalePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;
      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tapPromise('FeatureScalePlugin', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _layer$getSource;
        var attributes, dataArray;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              layer.log(_l7Core.IDebugLog.ScaleInitStart, _l7Core.ILayerStage.INIT);
              _this.scaleOptions = layer.getScaleOptions();
              attributes = styleAttributeService.getLayerStyleAttributes();
              dataArray = (_layer$getSource = layer.getSource()) === null || _layer$getSource === void 0 ? void 0 : _layer$getSource.data.dataArray;
              if (!(Array.isArray(dataArray) && dataArray.length === 0)) {
                _context.next = 8;
                break;
              }
              return _context.abrupt("return");
            case 8:
              _this.caculateScalesForAttributes(attributes || [], dataArray);
            case 9:
              layer.log(_l7Core.IDebugLog.ScaleInitEnd, _l7Core.ILayerStage.INIT);
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));

      // 检测数据是否需要更新
      layer.hooks.beforeRenderData.tapPromise('FeatureScalePlugin', /*#__PURE__*/function () {
        var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(flag) {
          var attributes, dataArray;
          return _regenerator.default.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (flag) {
                  _context2.next = 2;
                  break;
                }
                return _context2.abrupt("return", flag);
              case 2:
                layer.log(_l7Core.IDebugLog.ScaleInitStart, _l7Core.ILayerStage.UPDATE);
                _this.scaleOptions = layer.getScaleOptions();
                attributes = styleAttributeService.getLayerStyleAttributes();
                dataArray = layer.getSource().data.dataArray;
                if (!(Array.isArray(dataArray) && dataArray.length === 0)) {
                  _context2.next = 8;
                  break;
                }
                return _context2.abrupt("return", true);
              case 8:
                _this.caculateScalesForAttributes(attributes || [], dataArray);
                layer.log(_l7Core.IDebugLog.ScaleInitEnd, _l7Core.ILayerStage.UPDATE);
                layer.layerModelNeedUpdate = true;
                return _context2.abrupt("return", true);
              case 12:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }());
      layer.hooks.beforeRender.tap('FeatureScalePlugin', function () {
        if (layer.layerModelNeedUpdate) {
          return;
        }
        _this.scaleOptions = layer.getScaleOptions();
        var attributes = styleAttributeService.getLayerStyleAttributes();
        var dataArray = layer.getSource().data.dataArray;
        if (Array.isArray(dataArray) && dataArray.length === 0) {
          return;
        }
        if (attributes) {
          var attributesToRescale = attributes.filter(function (attribute) {
            return attribute.needRescale;
          });
          if (attributesToRescale.length) {
            _this.caculateScalesForAttributes(attributesToRescale, dataArray);
          }
        }
      });
    }
  }, {
    key: "isNumber",
    value: function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
  }, {
    key: "caculateScalesForAttributes",
    value: function caculateScalesForAttributes(attributes, dataArray) {
      var _this2 = this;
      attributes.forEach(function (attribute) {
        if (attribute.scale) {
          // 创建Scale
          var attributeScale = attribute.scale;
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          attributeScale.names = _this2.parseFields(attribute.scale.field || []);
          var scales = [];
          // 为每个字段创建 Scale
          attributeScale.names.forEach(function (field) {
            var _attribute$scale;
            scales.push(_this2.createScale(field, attribute.name, (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.values, dataArray));
          });

          // 为scales 设置值区间 Range
          if (scales.some(function (scale) {
            return scale.type === _l7Core.StyleScaleType.VARIABLE;
          })) {
            attributeScale.type = _l7Core.StyleScaleType.VARIABLE;
            scales.forEach(function (scale) {
              // 如果设置了回调, 这不需要设置range
              if (!attributeScale.callback && attributeScale.values !== 'text') {
                var _scale$option;
                switch ((_scale$option = scale.option) === null || _scale$option === void 0 ? void 0 : _scale$option.type) {
                  case _l7Core.ScaleTypes.LOG:
                  case _l7Core.ScaleTypes.LINEAR:
                  case _l7Core.ScaleTypes.POWER:
                    if (attributeScale.values && attributeScale.values.length > 2) {
                      var tick = scale.scale.ticks(attributeScale.values.length);
                      scale.scale.domain(tick);
                    }
                    attributeScale.values ? scale.scale.range(attributeScale.values) : scale.scale.range(scale.option.domain);
                    break;
                  case _l7Core.ScaleTypes.QUANTILE:
                  case _l7Core.ScaleTypes.QUANTIZE:
                  case _l7Core.ScaleTypes.THRESHOLD:
                    scale.scale.range(attributeScale.values); //
                    break;
                  case _l7Core.ScaleTypes.IDENTITY:
                    // 不做处理xe
                    break;
                  case _l7Core.ScaleTypes.CAT:
                    attributeScale.values ? scale.scale.range(attributeScale.values) : scale.scale.range(scale.option.domain);
                    break;
                  case _l7Core.ScaleTypes.DIVERGING:
                  case _l7Core.ScaleTypes.SEQUENTIAL:
                    scale.scale.interpolator(
                    // @ts-ignore
                    d3interpolate.interpolateRgbBasis(attributeScale.values));
                    break;
                }
              }
              if (attributeScale.values === 'text') {
                var _scale$option2;
                scale.scale.range((_scale$option2 = scale.option) === null || _scale$option2 === void 0 ? void 0 : _scale$option2.domain);
              }
            });
          } else {
            // 设置attribute 常量值 常量直接在value取值
            attributeScale.type = _l7Core.StyleScaleType.CONSTANT;
            attributeScale.defaultValues = scales.map(function (scale, index) {
              return scale.scale(attributeScale.names[index]);
            });
          }
          attributeScale.scalers = scales.map(function (scale) {
            return {
              field: scale.field,
              func: scale.scale,
              option: scale.option
            };
          });
          attribute.needRescale = false;
        }
      });
    }

    /**
     * @example
     * 'w*h' => ['w', 'h']
     * 'w' => ['w']
     */
  }, {
    key: "parseFields",
    value: function parseFields(field) {
      if (Array.isArray(field)) {
        return field;
      }
      if ((0, _lodash.isString)(field)) {
        return field.split('*');
      }
      return [field];
    }
  }, {
    key: "createScale",
    value: function createScale(field, name, values, data) {
      var _this$scaleOptions$na, _find;
      // scale 支持根据视觉通道和字段
      var scaleOption = this.scaleOptions[name] && ((_this$scaleOptions$na = this.scaleOptions[name]) === null || _this$scaleOptions$na === void 0 ? void 0 : _this$scaleOptions$na.field) === field ? this.scaleOptions[name] // TODO  zi
      : this.scaleOptions[field];
      var styleScale = {
        field: field,
        scale: undefined,
        type: _l7Core.StyleScaleType.VARIABLE,
        option: scaleOption
      };
      if (!data || !data.length) {
        if (scaleOption && scaleOption.type) {
          styleScale.scale = this.createDefaultScale(scaleOption);
        } else {
          styleScale.scale = d3.scaleOrdinal([field]);
          styleScale.type = _l7Core.StyleScaleType.CONSTANT;
        }
        return styleScale;
      }
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      var firstValue = (_find = data.find(function (d) {
        return !(0, _lodash.isNil)(d[field]);
      })) === null || _find === void 0 ? void 0 : _find[field];
      // 常量 Scale
      if (this.isNumber(field) || (0, _lodash.isNil)(firstValue) && !scaleOption) {
        styleScale.scale = d3.scaleOrdinal([field]);
        styleScale.type = _l7Core.StyleScaleType.CONSTANT;
      } else {
        // 根据数据类型判断 默认等分位，时间，和枚举类型
        var type = scaleOption && scaleOption.type || this.getDefaultType(firstValue);
        if (values === 'text') {
          // text 为内置变 如果是文本则为cat
          type = _l7Core.ScaleTypes.CAT;
        }
        var cfg = this.createScaleConfig(type, field, scaleOption, data);
        styleScale.scale = this.createDefaultScale(cfg);
        styleScale.option = cfg;
      }
      return styleScale;
    }
  }, {
    key: "getDefaultType",
    value: function getDefaultType(firstValue) {
      var type = _l7Core.ScaleTypes.LINEAR;
      if (typeof firstValue === 'string') {
        type = dateRegex.test(firstValue) ? _l7Core.ScaleTypes.TIME : _l7Core.ScaleTypes.CAT;
      }
      return type;
    }
    // 生成Scale 默认配置
  }, {
    key: "createScaleConfig",
    value: function createScaleConfig(type, field, scaleOption, data) {
      var cfg = {
        type: type
      };
      var values = (data === null || data === void 0 ? void 0 : data.map(function (item) {
        return item[field];
      })) || [];
      if (scaleOption !== null && scaleOption !== void 0 && scaleOption.domain) {
        cfg.domain = scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.domain;
      } else if (type === _l7Core.ScaleTypes.CAT || type === _l7Core.ScaleTypes.IDENTITY) {
        cfg.domain = (0, _lodash.uniq)(values);
      } else if (type === _l7Core.ScaleTypes.QUANTILE) {
        cfg.domain = values;
      } else if (type === _l7Core.ScaleTypes.DIVERGING) {
        var minMax = (0, _d3Array.extent)(values);
        var neutral = (scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.neutral) !== undefined ? scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.neutral : (minMax[0] + minMax[1]) / 2;
        cfg.domain = [minMax[0], neutral, minMax[1]];
      } else {
        // linear/Power/log
        cfg.domain = (0, _d3Array.extent)(values);
      }
      return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cfg), scaleOption);
    }

    // 创建Scale 实例
  }, {
    key: "createDefaultScale",
    value: function createDefaultScale(_ref4) {
      var type = _ref4.type,
        domain = _ref4.domain,
        unknown = _ref4.unknown,
        clamp = _ref4.clamp,
        nice = _ref4.nice;
      // @ts-ignore
      var scale = scaleMap[type]();
      if (domain && scale.domain) {
        scale.domain(domain);
      }
      if (unknown) {
        scale.unknown(unknown);
      }
      if (clamp !== undefined && scale.clamp) {
        scale.clamp(clamp);
      }
      if (nice !== undefined && scale.nice) {
        scale.nice(nice);
      }
      // TODO 其他属性支持
      return scale;
    }
  }]);
  return FeatureScalePlugin;
}()) || _class);
exports.default = FeatureScalePlugin;