"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _l7Core = require("@antv/l7-core");
var _l7Maps = require("@antv/l7-maps");
var _l7Utils = require("@antv/l7-utils");
var _inversify = require("inversify");
var _lodash = require("lodash");
require("reflect-metadata");
var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
var DataMappingPlugin = (_dec = (0, _inversify.injectable)(), _dec2 = (0, _inversify.inject)(_l7Core.TYPES.IMapService), _dec3 = (0, _inversify.inject)(_l7Core.TYPES.IFontService), _dec(_class = (_class2 = /*#__PURE__*/function () {
  function DataMappingPlugin() {
    (0, _classCallCheck2.default)(this, DataMappingPlugin);
    (0, _initializerDefineProperty2.default)(this, "mapService", _descriptor, this);
    (0, _initializerDefineProperty2.default)(this, "fontService", _descriptor2, this);
  }
  (0, _createClass2.default)(DataMappingPlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;
      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tapPromise('DataMappingPlugin', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              layer.log(_l7Core.IDebugLog.MappingStart, _l7Core.ILayerStage.INIT);
              // 初始化重新生成 map
              _this.generateMaping(layer, {
                styleAttributeService: styleAttributeService
              });
              layer.log(_l7Core.IDebugLog.MappingEnd, _l7Core.ILayerStage.INIT);
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));
      layer.hooks.beforeRenderData.tapPromise('DataMappingPlugin', /*#__PURE__*/function () {
        var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(flag) {
          var mappingResult;
          return _regenerator.default.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                if (flag) {
                  _context2.next = 2;
                  break;
                }
                return _context2.abrupt("return", flag);
              case 2:
                layer.dataState.dataMappingNeedUpdate = false;
                layer.log(_l7Core.IDebugLog.MappingStart, _l7Core.ILayerStage.UPDATE);
                mappingResult = _this.generateMaping(layer, {
                  styleAttributeService: styleAttributeService
                });
                layer.log(_l7Core.IDebugLog.MappingEnd, _l7Core.ILayerStage.UPDATE);
                return _context2.abrupt("return", mappingResult);
              case 7:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }());

      // remapping before render
      layer.hooks.beforeRender.tap('DataMappingPlugin', function () {
        var source = layer.getSource();
        if (layer.layerModelNeedUpdate || !source || !source.inited) {
          return;
        }
        var attributes = styleAttributeService.getLayerStyleAttributes() || [];
        var filter = styleAttributeService.getLayerStyleAttribute('filter');
        var dataArray = source.data.dataArray;
        // TODO 数据为空的情况
        if (Array.isArray(dataArray) && dataArray.length === 0) {
          return;
        }
        var attributesToRemapping = attributes.filter(function (attribute) {
          return attribute.needRemapping;
        } // 如果filter变化
        );

        var filterData = dataArray;
        // 数据过滤完 再执行数据映射
        if (filter !== null && filter !== void 0 && filter.needRemapping && filter !== null && filter !== void 0 && filter.scale) {
          filterData = dataArray.filter(function (record) {
            return _this.applyAttributeMapping(filter, record)[0];
          });
        }
        if (attributesToRemapping.length) {
          // 过滤数据
          var encodeData = _this.mapping(layer, attributesToRemapping, filterData, layer.getEncodedData());
          layer.setEncodedData(encodeData);
        }

        // 处理文本更新，更新文字形状
        // layer.emit('remapping', null);
      });
    }
  }, {
    key: "generateMaping",
    value: function generateMaping(layer, _ref4) {
      var _this2 = this;
      var styleAttributeService = _ref4.styleAttributeService;
      var attributes = styleAttributeService.getLayerStyleAttributes() || [];
      var filter = styleAttributeService.getLayerStyleAttribute('filter');
      var dataArray = layer.getSource().data.dataArray;
      var filterData = dataArray;
      // 数据过滤完 再执行数据映射
      if (filter !== null && filter !== void 0 && filter.scale) {
        filterData = dataArray.filter(function (record) {
          return _this2.applyAttributeMapping(filter, record)[0];
        });
      }
      // Tip: layer 对数据做处理
      // 数据处理 在数据进行 mapping 生成 encodeData 之前对数据进行处理
      // 在各个 layer 中继承

      filterData = layer.processData(filterData);
      var encodeData = this.mapping(layer, attributes, filterData, undefined);
      layer.setEncodedData(encodeData);
      if (dataArray.length === 0 && layer.encodeDataLength === 0) {
        return false;
      }
      // 对外暴露事件
      layer.emit('dataUpdate', null);
      return true;
    }
  }, {
    key: "mapping",
    value: function mapping(layer, attributes, data, predata) {
      var _this3 = this;
      var _ref5 = layer.getLayerConfig(),
        _ref5$arrow = _ref5.arrow,
        arrow = _ref5$arrow === void 0 ? {
          enable: false
        } : _ref5$arrow;
      var usedAttributes = attributes.filter(function (attribute) {
        return attribute.scale !== undefined;
      }).filter(function (attribute) {
        return attribute.name !== 'filter';
      });
      var mappedData = data.map(function (record, i) {
        var preRecord = predata ? predata[i] : {};
        var encodeRecord = (0, _objectSpread2.default)({
          id: record._id,
          coordinates: record.coordinates
        }, preRecord);
        usedAttributes.forEach(function (attribute) {
          var values = _this3.applyAttributeMapping(attribute, record);
          // TODO: 支持每个属性配置 postprocess
          if (attribute.name === 'color') {
            values = values.map(function (c) {
              return (0, _l7Utils.rgb2arr)(c);
            });
          }
          // @ts-ignore
          encodeRecord[attribute.name] = Array.isArray(values) && values.length === 1 ? values[0] : values;

          // 增加对 layer/text/iconfont unicode 映射的解析
          if (attribute.name === 'shape') {
            encodeRecord.shape = _this3.fontService.getIconFontKey(encodeRecord[attribute.name]);
          }
        });
        if (arrow.enable && (encodeRecord.shape === 'line' || encodeRecord.shape === 'halfLine')) {
          // 只有在线图层且支持配置箭头的时候进行插入顶点的处理
          var coords = encodeRecord.coordinates;
          // @ts-ignore
          if (layer.arrowInsertCount < layer.encodeDataLength) {
            // Tip: arrowInsert 的判断用于确保每一条线数据 arrow 的属性点只会被植入一次
            var arrowPoint = _this3.getArrowPoints(coords[0], coords[1]);
            encodeRecord.coordinates.splice(1, 0, arrowPoint, arrowPoint);
            // @ts-ignore
            layer.arrowInsertCount++;
          }
        }
        return encodeRecord;
      });
      attributes.forEach(function (attribute) {
        attribute.needRemapping = false;
      });
      // 调整数据兼容 Amap2.0
      this.adjustData2Amap2Coordinates(mappedData, layer);

      // 调整数据兼容 SimpleCoordinates
      this.adjustData2SimpleCoordinates(mappedData);
      return mappedData;
    }
  }, {
    key: "adjustData2Amap2Coordinates",
    value: function adjustData2Amap2Coordinates(mappedData, layer) {
      var _this4 = this;
      // 根据地图的类型判断是否需要对点位数据进行处理, 若是高德2.0则需要对坐标进行相对偏移
      if (mappedData.length > 0 && this.mapService.version === _l7Maps.Version['GAODE2.x']) {
        var layerCenter = layer.coordCenter || layer.getSource().center;
        if (typeof mappedData[0].coordinates[0] === 'number') {
          // 单个的点数据
          // @ts-ignore
          mappedData
          // TODO: 避免经纬度被重复计算导致坐标位置偏移
          .filter(function (d) {
            return !d.originCoordinates;
          }).map(function (d) {
            d.version = _l7Maps.Version['GAODE2.x'];
            // @ts-ignore
            d.originCoordinates = (0, _lodash.cloneDeep)(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）
            // @ts-ignore
            // d.coordinates = this.mapService.lngLatToCoord(d.coordinates);
            d.coordinates = _this4.mapService.lngLatToCoordByLayer(d.coordinates, layerCenter);
          });
        } else {
          // 连续的线、面数据
          mappedData
          // TODO: 避免经纬度被重复计算导致坐标位置偏移
          .filter(function (d) {
            return !d.originCoordinates;
          }).map(function (d) {
            d.version = _l7Maps.Version['GAODE2.x'];
            // @ts-ignore
            d.originCoordinates = (0, _lodash.cloneDeep)(d.coordinates); // 为了兼容高德1.x 需要保存一份原始的经纬度坐标数据（许多上层逻辑依赖经纬度数据）
            // @ts-ignore
            // d.coordinates = this.mapService.lngLatToCoords(d.coordinates);
            d.coordinates = _this4.mapService.lngLatToCoordsByLayer(d.coordinates, layerCenter);
          });
        }
      }
    }
  }, {
    key: "adjustData2SimpleCoordinates",
    value: function adjustData2SimpleCoordinates(mappedData) {
      var _this5 = this;
      if (mappedData.length > 0 && this.mapService.version === _l7Maps.Version.SIMPLE) {
        mappedData.map(function (d) {
          if (!d.simpleCoordinate) {
            d.coordinates = _this5.unProjectCoordinates(d.coordinates);
            d.simpleCoordinate = true;
          }
        });
      }
    }
  }, {
    key: "unProjectCoordinates",
    value: function unProjectCoordinates(coordinates) {
      var _this6 = this;
      if (typeof coordinates[0] === 'number') {
        return this.mapService.simpleMapCoord.unproject(coordinates);
      }
      if (coordinates[0] && coordinates[0][0] instanceof Array) {
        // @ts-ignore
        var coords = [];
        coordinates.map(function (coord) {
          // @ts-ignore
          var c1 = [];
          coord.map(function (co) {
            c1.push(_this6.mapService.simpleMapCoord.unproject(co));
          });
          // @ts-ignore
          coords.push(c1);
        });
        // @ts-ignore
        return coords;
      } else {
        // @ts-ignore
        var _coords = [];
        // @ts-ignore
        coordinates.map(function (coord) {
          _coords.push(_this6.mapService.simpleMapCoord.unproject(coord));
        });
        // @ts-ignore
        return _coords;
      }
    }
  }, {
    key: "applyAttributeMapping",
    value: function applyAttributeMapping(attribute, record) {
      var _attribute$scale;
      if (!attribute.scale) {
        return [];
      }
      var scalers = (attribute === null || attribute === void 0 ? void 0 : (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers) || [];
      var params = [];
      scalers.forEach(function (_ref6) {
        var _attribute$scale2;
        var field = _ref6.field;
        if (record.hasOwnProperty(field) || ((_attribute$scale2 = attribute.scale) === null || _attribute$scale2 === void 0 ? void 0 : _attribute$scale2.type) === 'variable') {
          // TODO:多字段，常量
          params.push(record[field]);
        }
      });
      var mappingResult = attribute.mapping ? attribute.mapping(params) : [];
      return mappingResult;
      // return attribute.mapping ? attribute.mapping(params) : [];
    }
  }, {
    key: "getArrowPoints",
    value: function getArrowPoints(p1, p2) {
      var dir = [p2[0] - p1[0], p2[1] - p1[1]];
      var normalizeDir = (0, _l7Utils.normalize)(dir);
      var arrowPoint = [p1[0] + normalizeDir[0] * 0.0001, p1[1] + normalizeDir[1] * 0.0001];
      return arrowPoint;
    }
  }]);
  return DataMappingPlugin;
}(), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "mapService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "fontService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
exports.default = DataMappingPlugin;