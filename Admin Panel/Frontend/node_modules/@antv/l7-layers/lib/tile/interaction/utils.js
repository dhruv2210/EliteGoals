"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearPickState = clearPickState;
exports.selectFeature = selectFeature;
exports.setFeatureActive = setFeatureActive;
exports.setFeatureSelect = setFeatureSelect;
exports.setHighlight = setHighlight;
exports.setPickState = setPickState;
exports.setSelect = setSelect;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _l7Utils = require("@antv/l7-utils");
function clearPickState(layers) {
  layers.filter(function (layer) {
    return layer.inited && layer.isVisible();
  }).filter(function (layer) {
    return layer.getCurrentSelectedId() !== null;
  }).map(function (layer) {
    selectFeature(layer, new Uint8Array([0, 0, 0, 0]));
    layer.setCurrentSelectedId(null);
  });
}
function setSelect(layers, pickedColors, renderList) {
  var selectedId = (0, _l7Utils.decodePickingColor)(pickedColors);
  var pickColor;
  layers.map(function (layer) {
    if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {
      selectFeature(layer, pickedColors);
      layer.setCurrentSelectedId(selectedId);
      pickColor = pickedColors;
    } else {
      selectFeature(layer, new Uint8Array([0, 0, 0, 0])); // toggle select
      layer.setCurrentSelectedId(null);
      pickColor = null;
    }
  });
  // unselect normal layer
  renderList.filter(function (layer) {
    return layer.inited && layer.isVisible() && layer.needPick('click');
  }).filter(function (layer) {
    return layer.getCurrentSelectedId() !== null;
  }).map(function (layer) {
    selectFeature(layer, new Uint8Array([0, 0, 0, 0]));
    layer.setCurrentSelectedId(null);
  });
  return pickColor;
}
function setHighlight(layers, pickedColors) {
  var pickId = (0, _l7Utils.decodePickingColor)(pickedColors);
  layers.filter(function (layer) {
    return layer.inited && layer.isVisible();
  })
  // @ts-ignore
  .filter(function (layer) {
    return layer.getPickID() !== pickId;
  }).map(function (layer) {
    // @ts-ignore
    layer.setPickID(pickId);
    layer.hooks.beforeHighlight.call(pickedColors);
  });
}
function setPickState(layers, pickColors) {
  if (pickColors.select) {
    layers.map(function (layer) {
      selectFeature(layer, pickColors.select);
    });
  }
  if (pickColors.active) {
    layers.filter(function (layer) {
      return layer.inited && layer.isVisible();
    }).map(function (layer) {
      layer.hooks.beforeHighlight.call(pickColors.active);
    });
  }
}
function selectFeature(layer, pickedColors) {
  // @ts-ignore
  var _pickedColors = (0, _slicedToArray2.default)(pickedColors, 3),
    r = _pickedColors[0],
    g = _pickedColors[1],
    b = _pickedColors[2];
  layer.hooks.beforeSelect.call([r, g, b]);
}
function setFeatureSelect(color, layers) {
  var id = (0, _l7Utils.decodePickingColor)(color);
  layers.map(function (layer) {
    selectFeature(layer, color);
    layer.setCurrentSelectedId(id);
  });
}
function setFeatureActive(color, layers) {
  var id = (0, _l7Utils.decodePickingColor)(color);
  layers.map(function (layer) {
    layer.hooks.beforeHighlight.call(color);
    layer.setCurrentPickId(id);
  });
}