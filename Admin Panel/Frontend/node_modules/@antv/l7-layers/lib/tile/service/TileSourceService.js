"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileSourceService = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var turf = _interopRequireWildcard(require("@turf/helpers"));
var _union = _interopRequireDefault(require("@turf/union"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * 专门处理 Tile 数据相关
 */
var TileSourceService = /*#__PURE__*/function () {
  function TileSourceService() {
    (0, _classCallCheck2.default)(this, TileSourceService);
  }
  (0, _createClass2.default)(TileSourceService, [{
    key: "getCombineFeature",
    value: function getCombineFeature(features) {
      var p = null;
      var properties = features[0];
      features.map(function (feature) {
        var polygon = turf.polygon(feature.coordinates);
        // tslint:disable-next-line: prefer-conditional-expression
        if (p === null) {
          p = polygon;
        } else {
          p = (0, _union.default)(p, polygon);
        }
      });
      if (properties) {
        p.properties = (0, _objectSpread2.default)({}, properties);
      }
      return p;
    }
  }]);
  return TileSourceService;
}();
exports.TileSourceService = TileSourceService;