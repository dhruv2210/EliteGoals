"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _lodash = require("lodash");
var _TileLayerService = require("../service/TileLayerService");
var _TilePickService = require("../service/TilePickService");
var _constants = require("../style/constants");
var _tileFactory = require("../tileFactory");
var BaseTileLayer = /*#__PURE__*/function () {
  // 瓦片数据管理器

  function BaseTileLayer(parent) {
    var _this = this;
    (0, _classCallCheck2.default)(this, BaseTileLayer);
    (0, _defineProperty2.default)(this, "initedTileset", false);
    (0, _defineProperty2.default)(this, "mapchange", function () {
      var _this$tilesetManager;
      var _this$getCurrentView = _this.getCurrentView(),
        latLonBounds = _this$getCurrentView.latLonBounds,
        zoom = _this$getCurrentView.zoom;
      if (_this.mapService.version === 'GAODE1.x') {
        var _this$parent$getLayer = _this.parent.getLayerConfig(),
          visible = _this$parent$getLayer.visible;
        if (zoom < 2 && visible) {
          _this.parent.updateLayerConfig({
            visible: false
          });
          _this.layerService.reRender();
        } else if (zoom >= 2 && !visible) {
          _this.parent.updateLayerConfig({
            visible: true
          });
          _this.layerService.reRender();
        }
      }
      if (_this.lastViewStates && _this.lastViewStates.zoom === zoom && _this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {
        return;
      }
      _this.lastViewStates = {
        zoom: zoom,
        latLonBounds: latLonBounds
      };
      (_this$tilesetManager = _this.tilesetManager) === null || _this$tilesetManager === void 0 ? void 0 : _this$tilesetManager.throttleUpdate(zoom, latLonBounds);
    });
    (0, _defineProperty2.default)(this, "viewchange", (0, _lodash.debounce)(this.mapchange, 24));
    this.parent = parent;
    var container = this.parent.getContainer();
    this.rendererService = container.get(_l7Core.TYPES.IRendererService);
    this.layerService = container.get(_l7Core.TYPES.ILayerService);
    this.mapService = container.get(_l7Core.TYPES.IMapService);
    this.pickingService = container.get(_l7Core.TYPES.IPickingService);

    // 初始化瓦片管理服务
    this.tileLayerService = new _TileLayerService.TileLayerService({
      rendererService: this.rendererService,
      layerService: this.layerService,
      parent: parent
    });
    // 初始化拾取服务
    this.tilePickService = new _TilePickService.TilePickService({
      tileLayerService: this.tileLayerService,
      layerService: this.layerService,
      parent: parent
    });

    // 重置
    this.parent.setLayerPickService(this.tilePickService);
    this.proxy(parent);
    this.initTileSetManager();
  }
  (0, _createClass2.default)(BaseTileLayer, [{
    key: "initTileSetManager",
    value: function initTileSetManager() {
      var _this$tilesetManager2;
      var source = this.parent.getSource();
      this.tilesetManager = source.tileset;
      if (!this.initedTileset) {
        this.bindTilesetEvent();
        this.initedTileset = true;
      }
      var _this$getCurrentView2 = this.getCurrentView(),
        latLonBounds = _this$getCurrentView2.latLonBounds,
        zoom = _this$getCurrentView2.zoom;
      (_this$tilesetManager2 = this.tilesetManager) === null || _this$tilesetManager2 === void 0 ? void 0 : _this$tilesetManager2.update(zoom, latLonBounds);
    }
  }, {
    key: "getCurrentView",
    value: function getCurrentView() {
      var bounds = this.mapService.getBounds();
      var latLonBounds = [bounds[0][0], bounds[0][1], bounds[1][0], bounds[1][1]];
      var zoom = this.mapService.getZoom();
      return {
        latLonBounds: latLonBounds,
        zoom: zoom
      };
    }
  }, {
    key: "bindTilesetEvent",
    value: function bindTilesetEvent() {
      var _this2 = this;
      // 瓦片数据加载成功
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      this.tilesetManager.on('tile-loaded', function (tile) {
        // 将事件抛出，图层上可以监听使用
      });

      // 瓦片数据从缓存删除或被执行重新加载
      this.tilesetManager.on('tile-unload', function (tile) {
        // 将事件抛出，图层上可以监听使用
        _this2.tileUnLoad(tile);
      });

      // 瓦片数据加载失败
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      this.tilesetManager.on('tile-error', function (error, tile) {
        // 将事件抛出，图层上可以监听使用
        _this2.tileError(error);
      });

      // 瓦片显隐状态更新
      this.tilesetManager.on('tile-update', function () {
        _this2.tileUpdate();
      });

      // 地图视野发生改变
      this.mapService.on('zoomend', this.mapchange);
      this.mapService.on('moveend', this.viewchange);
    }
  }, {
    key: "render",
    value: function render() {
      this.tileLayerService.render();
    }
  }, {
    key: "getLayers",
    value: function getLayers() {
      return this.tileLayerService.getLayers();
    }
  }, {
    key: "getTiles",
    value: function getTiles() {
      return this.tileLayerService.getTiles();
    }
  }, {
    key: "getTile",
    value: function getTile(key) {
      return this.tileLayerService.getTile(key);
    }

    //  防抖操作
  }, {
    key: "tileLoaded",
    value:
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function tileLoaded(tile) {
      //
    }
  }, {
    key: "tileError",
    value: function tileError(error) {
      console.warn('error:', error);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$tilesetManager3;
      this.mapService.off('zoomend', this.mapchange);
      this.mapService.off('moveend', this.viewchange);
      (_this$tilesetManager3 = this.tilesetManager) === null || _this$tilesetManager3 === void 0 ? void 0 : _this$tilesetManager3.destroy();
      this.tileLayerService.destroy();
    }
    // 重新加载
  }, {
    key: "reload",
    value: function reload() {
      var _this$tilesetManager4;
      // 瓦片重新加载
      this.tilesetManager.clear();
      var _this$getCurrentView3 = this.getCurrentView(),
        latLonBounds = _this$getCurrentView3.latLonBounds,
        zoom = _this$getCurrentView3.zoom;
      (_this$tilesetManager4 = this.tilesetManager) === null || _this$tilesetManager4 === void 0 ? void 0 : _this$tilesetManager4.update(zoom, latLonBounds);
    }
  }, {
    key: "tileUnLoad",
    value: function tileUnLoad(tile) {
      this.tileLayerService.removeTile(tile.key);
    }
  }, {
    key: "tileUpdate",
    value: function () {
      var _tileUpdate = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        var _this3 = this;
        var minZoom, maxZoom;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (this.tilesetManager) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              minZoom = this.parent.getMinZoom();
              maxZoom = this.parent.getMaxZoom();
              _context2.next = 6;
              return Promise.all(this.tilesetManager.tiles.filter(function (tile) {
                return tile.isLoaded;
              }) // 过滤未加载完成的
              .filter(function (tile) {
                return tile.isVisibleChange;
              }) // 过滤未发生变化的
              .filter(function (tile) {
                return tile.data;
              }).filter(function (tile) {
                return tile.z >= minZoom && tile.z < maxZoom;
              }).map( /*#__PURE__*/function () {
                var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(tile) {
                  var tileInstance, tileLayer;
                  return _regenerator.default.wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        if (_this3.tileLayerService.hasTile(tile.key)) {
                          _context.next = 9;
                          break;
                        }
                        tileInstance = (0, _tileFactory.getTileFactory)(_this3.parent);
                        tileLayer = new tileInstance(tile, _this3.parent);
                        _context.next = 5;
                        return tileLayer.initTileLayer();
                      case 5:
                        _this3.tilePickService.setPickState();
                        if (tileLayer.getLayers().length !== 0) {
                          _this3.tileLayerService.addTile(tileLayer);
                          _this3.tileLayerService.updateTileVisible(tile);
                          _this3.layerService.reRender();
                        }
                        _context.next = 12;
                        break;
                      case 9:
                        // 已加载瓦片

                        _this3.tileLayerService.updateTileVisible(tile);
                        _this3.tilePickService.setPickState();
                        _this3.layerService.reRender();
                      case 12:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                }));
                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              }()));
            case 6:
              if (this.tilesetManager.isLoaded) {
                // 将事件抛出，图层上可以使用瓦片
                this.parent.emit('tiles-loaded', this.tilesetManager.currentTiles);
              }
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function tileUpdate() {
        return _tileUpdate.apply(this, arguments);
      }
      return tileUpdate;
    }() // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "setPickState",
    value: function setPickState(layers) {
      return;
    }
  }, {
    key: "pickRender",
    value: function pickRender(target) {
      this.tilePickService.pickRender(target);
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(pickedColors) {
      this.tilePickService.selectFeature(pickedColors);
    }
  }, {
    key: "highlightPickedFeature",
    value: function highlightPickedFeature(pickedColors) {
      this.tilePickService.highlightPickedFeature(pickedColors);
    }

    /**
     * 实现 TileLayer 对子图层方法的代理
     * @param parent
     */
  }, {
    key: "proxy",
    value: function proxy(parent) {
      var _this4 = this;
      _constants.ProxyFuncs.forEach(function (func) {
        // @ts-ignore
        var oldStyleFunc = parent[func].bind(parent);
        // @ts-ignore
        parent[func] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          oldStyleFunc.apply(void 0, args);
          _this4.getLayers().map(function (child) {
            // @ts-ignore
            child[func].apply(child, args);
          });
          // Tip: 目前在更新 RasterData 的 colorTexture 的时候需要额外优化
          if (func === 'style') {
            _this4.getTiles().forEach(function (tile) {
              return tile.styleUpdate.apply(tile, args);
            });
          }
          return parent;
        };
      });
    }
  }]);
  return BaseTileLayer;
}();
exports.default = BaseTileLayer;