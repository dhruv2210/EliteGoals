"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _raster = _interopRequireDefault(require("../../raster"));
var _Tile2 = _interopRequireDefault(require("./Tile"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var RasterTerrainRGBTile = /*#__PURE__*/function (_Tile) {
  (0, _inherits2.default)(RasterTerrainRGBTile, _Tile);
  var _super = _createSuper(RasterTerrainRGBTile);
  function RasterTerrainRGBTile() {
    (0, _classCallCheck2.default)(this, RasterTerrainRGBTile);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(RasterTerrainRGBTile, [{
    key: "initTileLayer",
    value: function () {
      var _initTileLayer = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var attributes, layerOptions, sourceOptions, layer;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              attributes = this.parent.getLayerAttributeConfig();
              layerOptions = this.getLayerOptions();
              sourceOptions = this.getSourceOption();
              layer = new _raster.default((0, _objectSpread2.default)({}, layerOptions)).source(sourceOptions.data, sourceOptions.options); // 初始化数据映射
              // tslint:disable-next-line: no-unused-expression
              attributes && Object.keys(attributes).forEach(function (type) {
                var _attributes$attr, _attributes$attr2;
                var attr = type;
                // @ts-ignore
                layer[attr]((_attributes$attr = attributes[attr]) === null || _attributes$attr === void 0 ? void 0 : _attributes$attr.field, (_attributes$attr2 = attributes[attr]) === null || _attributes$attr2 === void 0 ? void 0 : _attributes$attr2.values);
              });
              _context.next = 7;
              return this.addLayer(layer);
            case 7:
              this.isLoaded = true;
            case 8:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initTileLayer() {
        return _initTileLayer.apply(this, arguments);
      }
      return initTileLayer;
    }()
  }, {
    key: "getSourceOption",
    value: function getSourceOption() {
      var rawSource = this.parent.getSource();
      return {
        data: this.sourceTile.data,
        options: {
          parser: {
            type: 'image',
            extent: this.sourceTile.bounds
          },
          transforms: rawSource.transforms
        }
      };
    }
  }]);
  return RasterTerrainRGBTile;
}(_Tile2.default);
exports.default = RasterTerrainRGBTile;