"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _l7Utils = require("@antv/l7-utils");
var _raster = _interopRequireDefault(require("../../raster"));
var _Tile2 = _interopRequireDefault(require("./Tile"));
var _excluded = ["rasterData"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DEFAULT_COLOR_TEXTURE_OPTION = {
  positions: [0, 1],
  colors: ['#000', '#fff']
};
var RasterTile = /*#__PURE__*/function (_Tile) {
  (0, _inherits2.default)(RasterTile, _Tile);
  var _super = _createSuper(RasterTile);
  function RasterTile() {
    (0, _classCallCheck2.default)(this, RasterTile);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(RasterTile, [{
    key: "initTileLayer",
    value: function () {
      var _initTileLayer = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var attributes, layerOptions, sourceOptions, _ref, rampColors, domain, layer;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              attributes = this.parent.getLayerAttributeConfig();
              layerOptions = this.getLayerOptions();
              sourceOptions = this.getSourceOption();
              _ref = this.getLayerOptions(), rampColors = _ref.rampColors, domain = _ref.domain;
              this.colorTexture = this.parent.textureService.getColorTexture(rampColors, domain);
              layer = new _raster.default((0, _objectSpread2.default)((0, _objectSpread2.default)({}, layerOptions), {}, {
                colorTexture: this.colorTexture
              })).source(sourceOptions.data, sourceOptions.options); // 初始化数据映射
              // tslint:disable-next-line: no-unused-expression
              attributes && Object.keys(attributes).forEach(function (type) {
                var _attributes$attr, _attributes$attr2;
                var attr = type;
                // @ts-ignore
                layer[attr]((_attributes$attr = attributes[attr]) === null || _attributes$attr === void 0 ? void 0 : _attributes$attr.field, (_attributes$attr2 = attributes[attr]) === null || _attributes$attr2 === void 0 ? void 0 : _attributes$attr2.values);
              });
              _context.next = 9;
              return this.addLayer(layer);
            case 9:
              this.isLoaded = true;
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initTileLayer() {
        return _initTileLayer.apply(this, arguments);
      }
      return initTileLayer;
    }()
  }, {
    key: "getSourceOption",
    value: function getSourceOption() {
      var rawSource = this.parent.getSource();
      var _this$sourceTile$data = this.sourceTile.data.data,
        rasterData = _this$sourceTile$data.rasterData,
        res = (0, _objectWithoutProperties2.default)(_this$sourceTile$data, _excluded);
      return {
        data: rasterData,
        options: {
          parser: (0, _objectSpread2.default)({
            type: 'raster',
            extent: this.sourceTile.bounds
          }, res),
          transforms: rawSource.transforms
        }
      };
    }

    /**
     * 用于 style 更新 colorTexture 的优化
     * @param arg
     */
  }, {
    key: "styleUpdate",
    value: function styleUpdate() {
      var _this = this;
      for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
        arg[_key] = arguments[_key];
      }
      var _ref2 = arg,
        _ref2$rampColors = _ref2.rampColors,
        rampColors = _ref2$rampColors === void 0 ? DEFAULT_COLOR_TEXTURE_OPTION : _ref2$rampColors,
        domain = _ref2.domain;
      this.colorTexture = this.parent.textureService.getColorTexture(rampColors, domain || (0, _l7Utils.getDefaultDomain)(rampColors));
      this.layers.forEach(function (layer) {
        return layer.style({
          colorTexture: _this.colorTexture
        });
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        return layer.destroy();
      });
    }
  }]);
  return RasterTile;
}(_Tile2.default);
exports.default = RasterTile;