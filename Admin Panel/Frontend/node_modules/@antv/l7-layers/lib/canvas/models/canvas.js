"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));
var _interface = require("../../core/interface");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var CanvaModel = /*#__PURE__*/function (_BaseModel) {
  (0, _inherits2.default)(CanvaModel, _BaseModel);
  var _super = _createSuper(CanvaModel);
  function CanvaModel() {
    var _this;
    (0, _classCallCheck2.default)(this, CanvaModel);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateMode", _interface.CanvasUpdateType.ALWAYS);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderUpdate", function () {
      var _ref = _this.layer.getLayerConfig(),
        _ref$zIndex = _ref.zIndex,
        zIndex = _ref$zIndex === void 0 ? 10 : _ref$zIndex,
        _ref$update = _ref.update,
        update = _ref$update === void 0 ? _interface.CanvasUpdateType.ALWAYS : _ref$update,
        _ref$animateOption = _ref.animateOption,
        animateOption = _ref$animateOption === void 0 ? {
          enable: false,
          duration: 20
        } : _ref$animateOption;
      if (+_this.canvas.style.zIndex === zIndex) {
        _this.canvas.style.zIndex = zIndex + '';
      }
      if (_this.updateMode !== update) {
        _this.updateMode = update;
        _this.unBindListener();
        _this.bindListener();
      }
      if (_this.updateMode === _interface.CanvasUpdateType.ALWAYS && animateOption.enable) {
        _this.renderCanvas();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "unBindListener", function () {
      _this.mapService.off('mapchange', _this.renderCanvas);
      _this.mapService.off('zoomstart', _this.clearCanvas);
      _this.mapService.off('zoomend', _this.renderCanvas);
      _this.mapService.off('movestart', _this.clearCanvas);
      _this.mapService.off('moveend', _this.renderCanvas);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindListener", function () {
      if (_this.updateMode === _interface.CanvasUpdateType.ALWAYS) {
        _this.mapService.on('mapchange', _this.renderCanvas);
      } else {
        _this.mapService.on('zoomstart', _this.clearCanvas);
        _this.mapService.on('zoomend', _this.renderCanvas);
        _this.mapService.on('movestart', _this.clearCanvas);
        _this.mapService.on('moveend', _this.renderCanvas);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clearCanvas", function () {
      if (_this.ctx) {
        var _this$rendererService = _this.rendererService.getViewportSize(),
          w = _this$rendererService.width,
          h = _this$rendererService.height;
        _this.ctx.clearRect(0, 0, w, h);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderCanvas", function () {
      var _this$rendererService2 = _this.rendererService.getViewportSize(),
        viewWidth = _this$rendererService2.width,
        viewHeight = _this$rendererService2.height;
      if (_this.prevSize[0] !== viewWidth || _this.prevSize[1] !== viewHeight) {
        _this.prevSize = [viewWidth, viewHeight];
        var size = _this.mapService.getSize();
        var _size = (0, _slicedToArray2.default)(size, 2),
          width = _size[0],
          height = _size[1];
        _this.canvas.width = viewWidth;
        _this.canvas.height = viewHeight;
        _this.canvas.style.width = width + 'px';
        _this.canvas.style.height = height + 'px';
      }
      var _ref2 = _this.layer.getLayerConfig(),
        drawingOnCanvas = _ref2.drawingOnCanvas;
      if (_this.ctx) {
        drawingOnCanvas({
          canvas: _this.canvas,
          ctx: _this.ctx,
          mapService: _this.mapService,
          size: [viewWidth, viewHeight]
        });
      }
    });
    return _this;
  }
  (0, _createClass2.default)(CanvaModel, [{
    key: "clearModels",
    value: function clearModels() {
      if (this.canvas) {
        var _this$mapService$getC;
        (_this$mapService$getC = this.mapService.getContainer()) === null || _this$mapService$getC === void 0 ? void 0 : _this$mapService$getC.removeChild(this.canvas);
        // @ts-ignore
        this.canvas = null;
      }
      this.unBindListener();
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _ref3, _ref3$update, update;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _ref3 = this.layer.getLayerConfig(), _ref3$update = _ref3.update, update = _ref3$update === void 0 ? _interface.CanvasUpdateType.ALWAYS : _ref3$update;
              this.updateMode = update;
              this.initCanvas();
              this.renderCanvas();
              this.bindListener();
              this.mapService.getContainer();
              return _context.abrupt("return", []);
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "initCanvas",
    value: function initCanvas() {
      var _this$mapService$getC2;
      var _ref4 = this.layer.getLayerConfig(),
        zIndex = _ref4.zIndex;
      var size = this.mapService.getSize();
      var _size2 = (0, _slicedToArray2.default)(size, 2),
        width = _size2[0],
        height = _size2[1];
      var _this$rendererService3 = this.rendererService.getViewportSize(),
        viewWidth = _this$rendererService3.width,
        viewHeight = _this$rendererService3.height;
      this.prevSize = [viewWidth, viewHeight];
      var canvas = document.createElement('canvas');
      this.canvas = canvas;
      canvas.width = viewWidth;
      canvas.height = viewHeight;
      canvas.style.pointerEvents = 'none';
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
      canvas.style.position = 'absolute';
      canvas.style.top = '0';
      canvas.style.left = '0';
      canvas.style.zIndex = zIndex + '';
      (_this$mapService$getC2 = this.mapService.getContainer()) === null || _this$mapService$getC2 === void 0 ? void 0 : _this$mapService$getC2.appendChild(canvas);
      var ctx = canvas.getContext('2d');
      this.ctx = ctx;
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.initModels());
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      return;
    }
  }]);
  return CanvaModel;
}(_BaseModel2.default);
exports.default = CanvaModel;