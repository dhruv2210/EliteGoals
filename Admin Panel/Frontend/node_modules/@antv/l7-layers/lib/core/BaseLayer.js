"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _initializerDefineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerDefineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _initializerWarningHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/initializerWarningHelper"));
var _asyncHook = require("@antv/async-hook");
var _l7Core = require("@antv/l7-core");
var _l7Source = _interopRequireDefault(require("@antv/l7-source"));
var _l7Utils = require("@antv/l7-utils");
var _eventemitter = require("eventemitter3");
var _lodash = require("lodash");
var _blend = require("../utils/blend");
var _dataMappingStyle = require("../utils/dataMappingStyle");
var _layerData = require("../utils/layerData");
var _multiPassRender = require("../utils/multiPassRender");
var _LayerPickService = _interopRequireDefault(require("./LayerPickService"));
var _TextureService = _interopRequireDefault(require("./TextureService"));
var _excluded = ["passes"],
  _excluded2 = ["moduleName", "vertexShader", "fragmentShader", "triangulation", "segmentNumber", "workerEnabled", "workerOptions"];
var _dec, _class, _descriptor;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * 分配 layer id
 */
var layerIdCounter = 0;
var BaseLayer = (_dec = (0, _l7Core.lazyInject)(_l7Core.TYPES.IGlobalConfigService), (_class = /*#__PURE__*/function (_ref) {
  (0, _inherits2.default)(BaseLayer, _ref);
  var _super = _createSuper(BaseLayer);
  // 生命周期钩子

  // 待渲染 model 列表

  // 用于保存子图层对象

  /**
   * 待更新样式属性，在初始化阶段完成注册
   */

  // private pickingPassRender: IPass<'pixelPicking'>;

  function BaseLayer() {
    var _this;
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, BaseLayer);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "id", "".concat(layerIdCounter++));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "name", "".concat(layerIdCounter));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "visible", true);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "zIndex", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "inited", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "layerModelNeedUpdate", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pickedFeatureID", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "selectedFeatureID", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "styleNeedUpdate", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "forceRender", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clusterZoom", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "defaultSourceConfig", {
      data: [],
      options: {
        parser: {
          type: 'json'
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dataState", {
      dataSourceNeedUpdate: false,
      dataMappingNeedUpdate: false,
      filterNeedUpdate: false,
      featureScaleNeedUpdate: false,
      StyleAttrNeedUpdate: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hooks", {
      init: new _asyncHook.AsyncSeriesBailHook(),
      afterInit: new _asyncHook.SyncBailHook(),
      beforeRender: new _asyncHook.SyncBailHook(),
      beforeRenderData: new _asyncHook.AsyncWaterfallHook(),
      afterRender: new _asyncHook.SyncHook(),
      beforePickingEncode: new _asyncHook.SyncHook(),
      afterPickingEncode: new _asyncHook.SyncHook(),
      beforeHighlight: new _asyncHook.SyncHook(['pickedColor']),
      afterHighlight: new _asyncHook.SyncHook(),
      beforeSelect: new _asyncHook.SyncHook(['pickedColor']),
      afterSelect: new _asyncHook.SyncHook(),
      beforeDestroy: new _asyncHook.SyncHook(),
      afterDestroy: new _asyncHook.SyncHook()
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "models", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startInit", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "layerChildren", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "masks", []);
    (0, _initializerDefineProperty2.default)((0, _assertThisInitialized2.default)(_this), "configService", _descriptor, (0, _assertThisInitialized2.default)(_this));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "animateOptions", {
      enable: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "currentPickId", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pendingStyleAttributes", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scaleOptions", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "animateStatus", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isDestroyed", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "encodeDataLength", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sourceEvent", function () {
      _this.dataState.dataSourceNeedUpdate = true;
      var layerConfig = _this.getLayerConfig();
      if (layerConfig && layerConfig.autoFit) {
        _this.fitBounds(layerConfig.fitBoundsOptions);
      }
      var autoRender = _this.layerSource.getSourceCfg().autoRender;
      if (autoRender) {
        _this.reRender();
      }
    });
    _this.name = config.name || _this.id;
    _this.zIndex = config.zIndex || 0;
    _this.rawConfig = config;
    // this.parent = this;
    return _this;
  }
  (0, _createClass2.default)(BaseLayer, [{
    key: "addMask",
    value: function addMask(layer) {
      this.masks.push(layer);
      this.enableMask();
    }
  }, {
    key: "removeMask",
    value: function removeMask(layer) {
      var layerIndex = this.masks.indexOf(layer);
      if (layerIndex > -1) {
        this.masks.splice(layerIndex, 1);
      }
    }
  }, {
    key: "disableMask",
    value: function disableMask() {
      this.updateLayerConfig({
        enableMask: false
      });
    }
  }, {
    key: "enableMask",
    value: function enableMask() {
      this.updateLayerConfig({
        enableMask: true
      });
    }
    // 将废弃
  }, {
    key: "addMaskLayer",
    value: function addMaskLayer(maskLayer) {
      this.masks.push(maskLayer);
    }
    // 将废弃
  }, {
    key: "removeMaskLayer",
    value: function removeMaskLayer(maskLayer) {
      var layerIndex = this.masks.indexOf(maskLayer);
      if (layerIndex > -1) {
        this.masks.splice(layerIndex, 1);
      }
      maskLayer.destroy();
    }
  }, {
    key: "getAttribute",
    value: function getAttribute(name) {
      return this.styleAttributeService.getLayerStyleAttribute(name);
    }
  }, {
    key: "getLayerConfig",
    value: function getLayerConfig() {
      return this.configService.getLayerConfig(this.id);
    }
  }, {
    key: "updateLayerConfig",
    value: function updateLayerConfig(configToUpdate) {
      var _this2 = this;
      // 同步 rawConfig
      Object.keys(configToUpdate).map(function (key) {
        if (key in _this2.rawConfig) {
          // @ts-ignore
          _this2.rawConfig[key] = configToUpdate[key];
        }
      });
      if (!this.startInit) {
        this.needUpdateConfig = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.needUpdateConfig), configToUpdate);
      } else {
        var sceneId = this.container.get(_l7Core.TYPES.SceneID);
        // @ts-ignore
        (0, _dataMappingStyle.styleDataMapping)(configToUpdate, this); // 处理 style 中进行数据映射的属性字段
        this.configService.setLayerConfig(sceneId, this.id, (0, _objectSpread2.default)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.configService.getLayerConfig(this.id)), this.needUpdateConfig), configToUpdate));
        this.needUpdateConfig = {};
      }
    }

    /**
     * 注入图层容器，父容器为场景容器
     * RootContainer 1
     *  -> SceneContainer 1.*
     *   -> LayerContainer 1.*
     */
  }, {
    key: "setContainer",
    value: function setContainer(container, sceneContainer) {
      this.container = container;
      this.sceneContainer = sceneContainer;
    }
  }, {
    key: "getContainer",
    value: function getContainer() {
      return this.container;
    }
  }, {
    key: "addPlugin",
    value: function addPlugin(plugin) {
      this.plugins.push(plugin);
      return this;
    }
  }, {
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _this3 = this;
        var sceneId, _this$getLayerConfig, enableMultiPassRenderer, passes, _iterator, _step, plugin;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              // 设置配置项
              sceneId = this.container.get(_l7Core.TYPES.SceneID);
              this.startInit = true;
              // 初始化图层配置项
              // const { enableMultiPassRenderer = false } = this.rawConfig;
              // this.configService.setLayerConfig(sceneId, this.id, {
              //   enableMultiPassRenderer,
              // });
              this.configService.setLayerConfig(sceneId, this.id, this.rawConfig);
              this.layerType = this.rawConfig.layerType;

              // 全局容器服务

              // 场景容器服务
              this.iconService = this.container.get(_l7Core.TYPES.IIconService);
              this.fontService = this.container.get(_l7Core.TYPES.IFontService);
              this.rendererService = this.container.get(_l7Core.TYPES.IRendererService);
              this.layerService = this.container.get(_l7Core.TYPES.ILayerService);
              this.debugService = this.container.get(_l7Core.TYPES.IDebugService);
              this.interactionService = this.container.get(_l7Core.TYPES.IInteractionService);
              this.pickingService = this.container.get(_l7Core.TYPES.IPickingService);
              this.mapService = this.container.get(_l7Core.TYPES.IMapService);
              _this$getLayerConfig = this.getLayerConfig(), enableMultiPassRenderer = _this$getLayerConfig.enableMultiPassRenderer, passes = _this$getLayerConfig.passes;
              if (enableMultiPassRenderer && passes !== null && passes !== void 0 && passes.length && passes.length > 0) {
                // Tip: 兼容 multiPassRender 在 amap1 时存在的图层不同步问题 zoom
                this.mapService.on('mapAfterFrameChange', function () {
                  _this3.renderLayers();
                });
              }
              this.cameraService = this.container.get(_l7Core.TYPES.ICameraService);
              this.coordinateService = this.container.get(_l7Core.TYPES.ICoordinateSystemService);
              this.shaderModuleService = this.container.get(_l7Core.TYPES.IShaderModuleService);
              this.postProcessingPassFactory = this.container.get(_l7Core.TYPES.IFactoryPostProcessingPass);
              this.normalPassFactory = this.container.get(_l7Core.TYPES.IFactoryNormalPass);

              // 图层容器服务
              this.styleAttributeService = this.container.get(_l7Core.TYPES.IStyleAttributeService);
              if (enableMultiPassRenderer) {
                // 按需初始化 瓦片频繁报错
                this.multiPassRenderer = this.container.get(_l7Core.TYPES.IMultiPassRenderer);
                this.multiPassRenderer.setLayer(this);
              }
              // 完成样式服务注册完成前添加的属性
              this.pendingStyleAttributes.forEach(function (_ref2) {
                var attributeName = _ref2.attributeName,
                  attributeField = _ref2.attributeField,
                  attributeValues = _ref2.attributeValues,
                  updateOptions = _ref2.updateOptions;
                _this3.styleAttributeService.updateStyleAttribute(attributeName, {
                  // @ts-ignore
                  scale: (0, _objectSpread2.default)({
                    field: attributeField
                  }, _this3.splitValuesAndCallbackInAttribute(
                  // @ts-ignore
                  attributeValues,
                  // @ts-ignore
                  _this3.getLayerConfig()[attributeName]))
                },
                // @ts-ignore
                updateOptions);
              });
              this.pendingStyleAttributes = [];

              // 获取插件集
              this.plugins = this.container.getAll(_l7Core.TYPES.ILayerPlugin);
              // 完成插件注册，传入场景和图层容器内的服务
              _iterator = _createForOfIteratorHelper(this.plugins);
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  plugin = _step.value;
                  plugin.apply(this, {
                    rendererService: this.rendererService,
                    mapService: this.mapService,
                    styleAttributeService: this.styleAttributeService,
                    normalPassFactory: this.normalPassFactory,
                    postProcessingPassFactory: this.postProcessingPassFactory
                  });
                }

                // 初始化其他服务
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              this.layerPickService = new _LayerPickService.default(this);

              // 颜色纹理服务
              this.textureService = new _TextureService.default(this);
              this.log(_l7Core.IDebugLog.LayerInitStart);
              // 触发 init 生命周期插件
              _context.next = 31;
              return this.hooks.init.promise();
            case 31:
              this.log(_l7Core.IDebugLog.LayerInitEnd);
              this.inited = true;
              // add mask layer
              // 触发初始化完成事件;
              this.emit('inited', {
                target: this,
                type: 'inited'
              });
              this.emit('add', {
                target: this,
                type: 'add'
              });
              this.hooks.afterInit.call();
            case 36:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "log",
    value: function log(logType) {
      var _this$debugService;
      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'init';
      // @ts-ignore 瓦片、瓦片图层目前不参与日志
      if (this.tileLayer || this.isTileLayer) {
        return;
      }
      var key = "".concat(this.id, ".").concat(step, ".").concat(logType);
      var values = {
        id: this.id,
        type: this.type
      };
      (_this$debugService = this.debugService) === null || _this$debugService === void 0 ? void 0 : _this$debugService.log(key, values);
    }
  }, {
    key: "updateModelData",
    value: function updateModelData(data) {
      if (data.attributes && data.elements) {
        this.models.map(function (m) {
          m.updateAttributesAndElements(data.attributes, data.elements);
        });
      } else {
        console.warn('data error');
      }
    }
  }, {
    key: "createModelData",
    value: function createModelData(data, option) {
      var _this$layerModel;
      if ((_this$layerModel = this.layerModel) !== null && _this$layerModel !== void 0 && _this$layerModel.createModelData) {
        // 在某些特殊图层中单独构建 attribute & elements
        return this.layerModel.createModelData(option);
      }
      var calEncodeData = this.calculateEncodeData(data, option);
      var triangulation = this.triangulation;
      if (calEncodeData && triangulation) {
        return this.styleAttributeService.createAttributesAndIndices(calEncodeData, triangulation);
      } else {
        return {
          attributes: undefined,
          elements: undefined
        };
      }
    }
  }, {
    key: "setLayerPickService",
    value: function setLayerPickService(layerPickService) {
      this.layerPickService = layerPickService;
    }
  }, {
    key: "calculateEncodeData",
    value: function calculateEncodeData(data, option) {
      if (this.inited) {
        return (0, _layerData.calculateData)(this, this.fontService, this.mapService, this.styleAttributeService, data, option);
      } else {
        console.warn('layer not inited!');
        return null;
      }
    }
    /**
     * Model初始化前需要更新Model样式
     */
  }, {
    key: "prepareBuildModel",
    value: function prepareBuildModel() {
      this.updateLayerConfig((0, _objectSpread2.default)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.getDefaultConfig()), this.rawConfig), this.needUpdateConfig));

      // 启动动画
      var _this$getLayerConfig2 = this.getLayerConfig(),
        animateOption = _this$getLayerConfig2.animateOption;
      if (animateOption !== null && animateOption !== void 0 && animateOption.enable) {
        this.layerService.startAnimate();
        this.animateStatus = true;
      }
    }
  }, {
    key: "color",
    value: function color(field, values, updateOptions) {
      this.updateStyleAttribute('color', field, values, updateOptions);
      return this;
    }

    // 为对应的图层传入纹理的编号名称（point/image 在 shape 方法中传入纹理名称的方法并不通用）
  }, {
    key: "texture",
    value: function texture(field, values, updateOptions) {
      this.updateStyleAttribute('texture', field, values, updateOptions);
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(field, values, updateOptions) {
      this.updateStyleAttribute('rotate', field, values, updateOptions);
      return this;
    }
  }, {
    key: "size",
    value: function size(field, values, updateOptions) {
      this.updateStyleAttribute('size', field, values, updateOptions);
      return this;
    }
    // 对mapping后的数据过滤，scale保持不变
  }, {
    key: "filter",
    value: function filter(field, values, updateOptions) {
      var flag = this.updateStyleAttribute('filter', field, values, updateOptions);
      this.dataState.dataSourceNeedUpdate = flag && this.inited;
      return this;
    }
  }, {
    key: "shape",
    value: function shape(field, values, updateOptions) {
      this.shapeOption = {
        field: field,
        values: values
      };
      var flag = this.updateStyleAttribute('shape', field, values, updateOptions);
      this.dataState.dataSourceNeedUpdate = flag && this.inited;
      return this;
    }
  }, {
    key: "label",
    value: function label(field, values, updateOptions) {
      this.pendingStyleAttributes.push({
        attributeName: 'label',
        attributeField: field,
        attributeValues: values,
        updateOptions: updateOptions
      });
      return this;
    }
  }, {
    key: "animate",
    value: function animate(options) {
      var rawAnimate = {};
      if ((0, _lodash.isObject)(options)) {
        rawAnimate.enable = true;
        rawAnimate = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, rawAnimate), options);
      } else {
        rawAnimate.enable = options;
      }
      this.updateLayerConfig({
        animateOption: rawAnimate
      });
      return this;
    }
  }, {
    key: "source",
    value: function source(data, options) {
      if ((data === null || data === void 0 ? void 0 : data.type) === 'source') {
        // 判断是否为source
        this.setSource(data);
        return this;
      }
      // 设置source 配置
      this.sourceOption = {
        data: data,
        options: options
      };
      this.clusterZoom = 0;
      return this;
    }
  }, {
    key: "setData",
    value: function setData(data, options) {
      var _this4 = this;
      if (this.inited) {
        this.log(_l7Core.IDebugLog.SourceInitStart, _l7Core.ILayerStage.UPDATE);
        this.layerSource.setData(data, options);
        this.log(_l7Core.IDebugLog.SourceInitEnd, _l7Core.ILayerStage.UPDATE);
      } else {
        this.on('inited', function () {
          _this4.log(_l7Core.IDebugLog.SourceInitStart, _l7Core.ILayerStage.UPDATE);
          var currentSource = _this4.getSource();
          if (!currentSource) {
            // 执行 setData 的时候 source 还不存在（还未执行 addLayer）
            _this4.source(new _l7Source.default(data, options));
          } else {
            _this4.layerSource.setData(data, options);
          }
          _this4.layerSource.once('update', function () {
            _this4.log(_l7Core.IDebugLog.SourceInitEnd, _l7Core.ILayerStage.UPDATE);
          });
        });
      }
      return this;
    }
  }, {
    key: "style",
    value: function style(options) {
      var _this5 = this;
      var passes = options.passes,
        rest = (0, _objectWithoutProperties2.default)(options, _excluded);
      // passes 特殊处理
      if (passes) {
        (0, _multiPassRender.normalizePasses)(passes).forEach(function (pass) {
          var postProcessingPass = _this5.multiPassRenderer.getPostProcessor().getPostProcessingPassByName(pass[0]);
          if (postProcessingPass) {
            postProcessingPass.updateOptions(pass[1]);
          }
        });
      }
      this.rawConfig = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.rawConfig), rest);
      if (this.container) {
        this.updateLayerConfig(this.rawConfig);
        this.styleNeedUpdate = true;
      }
      // TODO style model 更新
      // @ts-ignore
      // if (lastConfig && lastConfig.mask === true && options.mask === false) {
      //   this.clearModels();
      //   this.layerModel.buildModels((models) => {
      //     this.models = models;
      //   });
      // }
      return this;
    }
  }, {
    key: "scale",
    value: function scale(field, cfg) {
      var preOption = (0, _objectSpread2.default)({}, this.scaleOptions);
      if ((0, _lodash.isObject)(field)) {
        this.scaleOptions = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.scaleOptions), field);
      } else {
        this.scaleOptions[field] = cfg;
      }
      if (this.styleAttributeService && !(0, _lodash.isEqual)(preOption, this.scaleOptions)) {
        var scaleOptions = (0, _lodash.isObject)(field) ? field : (0, _defineProperty2.default)({}, field, cfg);
        this.styleAttributeService.updateScaleAttribute(scaleOptions);
      }
      return this;
    }

    /**
     * 渲染所有的图层
     */
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      this.rendering = true;
      this.layerService.renderLayers();
      this.rendering = false;
    }
  }, {
    key: "render",
    value: function render() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (this.tileLayer) {
        // 瓦片图层执行单独的 render 渲染队列
        this.tileLayer.render();
        return this;
      }
      this.layerService.beforeRenderData(this);
      if (this.encodeDataLength <= 0 && !this.forceRender) {
        return this;
      }
      // Tip: this.getEncodedData().length !== 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题
      this.renderModels(options);
      return this;
    }

    /**
     * renderMultiPass 专门用于渲染支持 multipass 的 layer
     */
  }, {
    key: "renderMultiPass",
    value: function () {
      var _renderMultiPass = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.encodeDataLength <= 0 && !this.forceRender)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              if (!(this.multiPassRenderer && this.multiPassRenderer.getRenderFlag())) {
                _context2.next = 7;
                break;
              }
              _context2.next = 5;
              return this.multiPassRenderer.render();
            case 5:
              _context2.next = 8;
              break;
            case 7:
              if (this.multiPassRenderer) {
                // renderPass 触发的渲染
                this.renderModels();
              } else {
                this.renderModels();
              }
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function renderMultiPass() {
        return _renderMultiPass.apply(this, arguments);
      }
      return renderMultiPass;
    }()
  }, {
    key: "active",
    value: function active(options) {
      var activeOption = {};
      activeOption.enableHighlight = (0, _lodash.isObject)(options) ? true : options;
      if ((0, _lodash.isObject)(options)) {
        activeOption.enableHighlight = true;
        if (options.color) {
          activeOption.highlightColor = options.color;
        }
        if (options.mix) {
          activeOption.activeMix = options.mix;
        }
      } else {
        activeOption.enableHighlight = !!options;
      }
      this.updateLayerConfig(activeOption);
      return this;
    }
  }, {
    key: "setActive",
    value: function setActive(id, options) {
      var _this6 = this;
      if ((0, _lodash.isObject)(id)) {
        var _id$x = id.x,
          x = _id$x === void 0 ? 0 : _id$x,
          _id$y = id.y,
          y = _id$y === void 0 ? 0 : _id$y;
        this.updateLayerConfig({
          highlightColor: (0, _lodash.isObject)(options) ? options.color : this.getLayerConfig().highlightColor,
          activeMix: (0, _lodash.isObject)(options) ? options.mix : this.getLayerConfig().activeMix
        });
        this.pick({
          x: x,
          y: y
        });
      } else {
        this.updateLayerConfig({
          pickedFeatureID: id,
          highlightColor: (0, _lodash.isObject)(options) ? options.color : this.getLayerConfig().highlightColor,
          activeMix: (0, _lodash.isObject)(options) ? options.mix : this.getLayerConfig().activeMix
        });
        this.hooks.beforeHighlight.call((0, _l7Utils.encodePickingColor)(id))
        // @ts-ignore
        .then(function () {
          setTimeout(function () {
            _this6.reRender();
          }, 1);
        });
      }
    }
  }, {
    key: "select",
    value: function select(option) {
      var activeOption = {};
      activeOption.enableSelect = (0, _lodash.isObject)(option) ? true : option;
      if ((0, _lodash.isObject)(option)) {
        activeOption.enableSelect = true;
        if (option.color) {
          activeOption.selectColor = option.color;
        }
        if (option.mix) {
          activeOption.selectMix = option.mix;
        }
      } else {
        activeOption.enableSelect = !!option;
      }
      this.updateLayerConfig(activeOption);
      return this;
    }
  }, {
    key: "setSelect",
    value: function setSelect(id, options) {
      var _this7 = this;
      if ((0, _lodash.isObject)(id)) {
        var _id$x2 = id.x,
          x = _id$x2 === void 0 ? 0 : _id$x2,
          _id$y2 = id.y,
          y = _id$y2 === void 0 ? 0 : _id$y2;
        this.updateLayerConfig({
          selectColor: (0, _lodash.isObject)(options) ? options.color : this.getLayerConfig().selectColor,
          selectMix: (0, _lodash.isObject)(options) ? options.mix : this.getLayerConfig().selectMix
        });
        this.pick({
          x: x,
          y: y
        });
      } else {
        this.updateLayerConfig({
          pickedFeatureID: id,
          selectColor: (0, _lodash.isObject)(options) ? options.color : this.getLayerConfig().selectColor,
          selectMix: (0, _lodash.isObject)(options) ? options.mix : this.getLayerConfig().selectMix
        });
        this.hooks.beforeSelect.call((0, _l7Utils.encodePickingColor)(id))
        // @ts-ignore
        .then(function () {
          setTimeout(function () {
            _this7.reRender();
          }, 1);
        });
      }
    }
  }, {
    key: "setBlend",
    value: function setBlend(type) {
      this.updateLayerConfig({
        blend: type
      });
      // this.layerModelNeedUpdate = true;
      this.reRender();
      return this;
    }
  }, {
    key: "show",
    value: function show() {
      this.updateLayerConfig({
        visible: true
      });
      this.reRender();
      this.emit('show');
      return this;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.updateLayerConfig({
        visible: false
      });
      this.reRender();
      this.emit('hide');
      return this;
    }
  }, {
    key: "setIndex",
    value: function setIndex(index) {
      this.zIndex = index;
      this.layerService.updateLayerRenderList();
      this.layerService.renderLayers();
      return this;
    }
  }, {
    key: "setCurrentPickId",
    value: function setCurrentPickId(id) {
      this.currentPickId = id;
    }
  }, {
    key: "getCurrentPickId",
    value: function getCurrentPickId() {
      return this.currentPickId;
    }
  }, {
    key: "setCurrentSelectedId",
    value: function setCurrentSelectedId(id) {
      this.selectedFeatureID = id;
    }
  }, {
    key: "getCurrentSelectedId",
    value: function getCurrentSelectedId() {
      return this.selectedFeatureID;
    }
  }, {
    key: "isVisible",
    value: function isVisible() {
      var zoom = this.mapService.getZoom();
      var _this$getLayerConfig3 = this.getLayerConfig(),
        visible = _this$getLayerConfig3.visible,
        _this$getLayerConfig4 = _this$getLayerConfig3.minZoom,
        minZoom = _this$getLayerConfig4 === void 0 ? -Infinity : _this$getLayerConfig4,
        _this$getLayerConfig5 = _this$getLayerConfig3.maxZoom,
        maxZoom = _this$getLayerConfig5 === void 0 ? Infinity : _this$getLayerConfig5;
      return !!visible && zoom >= minZoom && zoom < maxZoom;
    }
  }, {
    key: "setMultiPass",
    value: function setMultiPass(enableMultiPass, currentPasses) {
      this.updateLayerConfig({
        enableMultiPassRenderer: enableMultiPass
      });
      if (currentPasses) {
        this.updateLayerConfig({
          passes: currentPasses
        });
      }
      if (enableMultiPass) {
        var _this$getLayerConfig6 = this.getLayerConfig(),
          _this$getLayerConfig7 = _this$getLayerConfig6.passes,
          passes = _this$getLayerConfig7 === void 0 ? [] : _this$getLayerConfig7;
        this.multiPassRenderer = (0, _multiPassRender.createMultiPassRenderer)(this, passes, this.postProcessingPassFactory, this.normalPassFactory);
        this.multiPassRenderer.setRenderFlag(true);
        var _this$rendererService = this.rendererService.getViewportSize(),
          width = _this$rendererService.width,
          height = _this$rendererService.height;
        this.multiPassRenderer.resize(width, height);
      }
      return this;
    }
  }, {
    key: "setMinZoom",
    value: function setMinZoom(minZoom) {
      this.updateLayerConfig({
        minZoom: minZoom
      });
      return this;
    }
  }, {
    key: "getMinZoom",
    value: function getMinZoom() {
      var _this$getLayerConfig8 = this.getLayerConfig(),
        minZoom = _this$getLayerConfig8.minZoom;
      return minZoom;
    }
  }, {
    key: "getMaxZoom",
    value: function getMaxZoom() {
      var _this$getLayerConfig9 = this.getLayerConfig(),
        maxZoom = _this$getLayerConfig9.maxZoom;
      return maxZoom;
    }
  }, {
    key: "get",
    value: function get(name) {
      var cfg = this.getLayerConfig();
      // @ts-ignore
      return cfg[name];
    }
  }, {
    key: "setMaxZoom",
    value: function setMaxZoom(maxZoom) {
      this.updateLayerConfig({
        maxZoom: maxZoom
      });
      return this;
    }
  }, {
    key: "setAutoFit",
    value: function setAutoFit(autoFit) {
      this.updateLayerConfig({
        autoFit: autoFit
      });
      return this;
    }

    /**
     * zoom to layer Bounds
     */
  }, {
    key: "fitBounds",
    value: function fitBounds(fitBoundsOptions) {
      if (!this.inited) {
        this.updateLayerConfig({
          autoFit: true
        });
        return this;
      }
      var source = this.getSource();
      var extent = source.extent;
      var isValid = extent.some(function (v) {
        return Math.abs(v) === Infinity;
      });
      if (isValid) {
        return this;
      }
      this.mapService.fitBounds([[extent[0], extent[1]], [extent[2], extent[3]]], fitBoundsOptions);
      return this;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$multiPassRender, _this$layerModel2, _this$tileLayer, _this$debugService2;
      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this.isDestroyed) {
        return;
      }

      // remove child layer
      this.layerChildren.map(function (child) {
        return child.destroy(false);
      });
      this.layerChildren = [];

      // remove mask list maskfence 掩膜需要销毁
      var _this$getLayerConfig10 = this.getLayerConfig(),
        maskfence = _this$getLayerConfig10.maskfence;
      if (maskfence) {
        this.masks.map(function (mask) {
          return mask.destroy(false);
        });
        this.masks = [];
      }
      this.hooks.beforeDestroy.call();
      // 清除sources事件
      this.layerSource.off('update', this.sourceEvent);
      (_this$multiPassRender = this.multiPassRenderer) === null || _this$multiPassRender === void 0 ? void 0 : _this$multiPassRender.destroy();
      this.textureService.destroy();

      // 清除所有属性以及关联的 vao == 销毁所有 => model this.models.forEach((model) => model.destroy());
      this.styleAttributeService.clearAllAttributes();

      // 执行每个图层单独的 clearModels 方法 （清除一些额外的 texture、program、buffer 等）

      this.hooks.afterDestroy.call();
      // Tip: 清除各个图层自定义的 models 资源
      (_this$layerModel2 = this.layerModel) === null || _this$layerModel2 === void 0 ? void 0 : _this$layerModel2.clearModels(refresh);
      (_this$tileLayer = this.tileLayer) === null || _this$tileLayer === void 0 ? void 0 : _this$tileLayer.destroy();
      this.models = [];
      // 清除图层日志（如果有的话：非瓦片相关）
      (_this$debugService2 = this.debugService) === null || _this$debugService2 === void 0 ? void 0 : _this$debugService2.removeLog(this.id);
      this.emit('remove', {
        target: this,
        type: 'remove'
      });
      this.emit('destroy', {
        target: this,
        type: 'destroy'
      });
      this.removeAllListeners();
      // 解绑图层容器中的服务
      // this.container.unbind(TYPES.IStyleAttributeService);

      this.isDestroyed = true;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.styleAttributeService.clearAllAttributes();
      // 销毁所有 model
    }
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$layerModel3;
      this.models.forEach(function (model) {
        return model.destroy();
      });
      (_this$layerModel3 = this.layerModel) === null || _this$layerModel3 === void 0 ? void 0 : _this$layerModel3.clearModels();
      this.models = [];
    }
  }, {
    key: "isDirty",
    value: function isDirty() {
      return !!(this.styleAttributeService.getLayerStyleAttributes() || []).filter(function (attribute) {
        return attribute.needRescale || attribute.needRemapping || attribute.needRegenerateVertices;
      }).length;
    }
    // 外部初始化Source
  }, {
    key: "setSource",
    value: function setSource(source) {
      var _this8 = this;
      // 解除原 sources 事件
      if (this.layerSource) {
        this.layerSource.off('update', this.sourceEvent);
      }
      this.layerSource = source;
      this.clusterZoom = 0;

      // 已 inited 且启用聚合进行更新聚合数据
      if (this.inited && this.layerSource.cluster) {
        var zoom = this.mapService.getZoom();
        this.layerSource.updateClusterData(zoom);
      }
      if (this.layerSource.inited) {
        this.sourceEvent();
      }
      // this.layerSource.inited 为 true update 事件不会再触发
      this.layerSource.on('update', function (_ref4) {
        var type = _ref4.type;
        if (_this8.coordCenter === undefined) {
          var _this8$mapService;
          var layerCenter = _this8.layerSource.center;
          _this8.coordCenter = layerCenter;
          if ((_this8$mapService = _this8.mapService) !== null && _this8$mapService !== void 0 && _this8$mapService.setCoordCenter) {
            _this8.mapService.setCoordCenter(layerCenter);
          }
        }
        if (type === 'update') {
          if (_this8.tileLayer) {
            // 瓦片图层独立更新
            _this8.tileLayer.reload();
            return;
          }
          // source 初始化不需要处理
          _this8.sourceEvent();
        }
      });
    }
  }, {
    key: "getSource",
    value: function getSource() {
      return this.layerSource;
    }
  }, {
    key: "getScaleOptions",
    value: function getScaleOptions() {
      return this.scaleOptions;
    }
  }, {
    key: "setEncodedData",
    value: function setEncodedData(encodedData) {
      this.encodedData = encodedData;
      this.encodeDataLength = encodedData.length;
    }
  }, {
    key: "getEncodedData",
    value: function getEncodedData() {
      return this.encodedData;
    }
  }, {
    key: "getScale",
    value: function getScale(name) {
      return this.styleAttributeService.getLayerAttributeScale(name);
    }
  }, {
    key: "getLegend",
    value: function getLegend(name) {
      var _attribute$scale, _scales$0$option, _attribute$scale2;
      var attribute = this.styleAttributeService.getLayerStyleAttribute(name);
      var scales = (attribute === null || attribute === void 0 ? void 0 : (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers) || [];
      return {
        type: (_scales$0$option = scales[0].option) === null || _scales$0$option === void 0 ? void 0 : _scales$0$option.type,
        field: attribute === null || attribute === void 0 ? void 0 : (_attribute$scale2 = attribute.scale) === null || _attribute$scale2 === void 0 ? void 0 : _attribute$scale2.field,
        items: this.getLegendItems(name)
      };
    }
  }, {
    key: "getLegendItems",
    value: function getLegendItems(name) {
      var scale = this.styleAttributeService.getLayerAttributeScale(name);
      // 函数自定义映射，没有 scale 返回为空数组
      if (!scale) {
        return [];
      }
      if (scale.invertExtent) {
        // 分段类型  Quantize、Quantile、Threshold
        var items = scale.range().map(function (item) {
          return (0, _defineProperty2.default)({
            value: scale.invertExtent(item)
          }, name, item);
        });
        return items;
      } else if (scale.ticks) {
        // 连续类型 Continuous (Linear, Power, Log, Identity, Time)
        var _items = scale.ticks().map(function (item) {
          return (0, _defineProperty2.default)({
            value: item
          }, name, scale(item));
        });
        return _items;
      } else if (scale !== null && scale !== void 0 && scale.domain) {
        // 枚举类型 Cat
        var _items2 = scale.domain().filter(function (item) {
          return !(0, _lodash.isUndefined)(item);
        }).map(function (item) {
          return (0, _defineProperty2.default)({
            value: item
          }, name, scale(item));
        });
        return _items2;
      }
      return [];
    }
  }, {
    key: "pick",
    value: function pick(_ref8) {
      var x = _ref8.x,
        y = _ref8.y;
      this.interactionService.triggerHover({
        x: x,
        y: y
      });
    }
  }, {
    key: "boxSelect",
    value: function boxSelect(box, cb) {
      this.pickingService.boxPickLayer(this, box, cb);
    }
  }, {
    key: "buildLayerModel",
    value: function () {
      var _buildLayerModel = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options) {
        var _this9 = this;
        var moduleName, vertexShader, fragmentShader, triangulation, segmentNumber, _options$workerEnable, workerEnabled, workerOptions, rest, _this$shaderModuleSer, vs, fs, uniforms, createModel;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              moduleName = options.moduleName, vertexShader = options.vertexShader, fragmentShader = options.fragmentShader, triangulation = options.triangulation, segmentNumber = options.segmentNumber, _options$workerEnable = options.workerEnabled, workerEnabled = _options$workerEnable === void 0 ? false : _options$workerEnable, workerOptions = options.workerOptions, rest = (0, _objectWithoutProperties2.default)(options, _excluded2);
              this.shaderModuleService.registerModule(moduleName, {
                vs: vertexShader,
                fs: fragmentShader
              });
              _this$shaderModuleSer = this.shaderModuleService.getModule(moduleName), vs = _this$shaderModuleSer.vs, fs = _this$shaderModuleSer.fs, uniforms = _this$shaderModuleSer.uniforms;
              createModel = this.rendererService.createModel;
              return _context3.abrupt("return", new Promise(function (resolve, reject) {
                // filter supported worker & worker enabled layer
                if (workerOptions && workerOptions.modelType in _l7Utils.WorkerSourceMap && workerEnabled) {
                  _this9.styleAttributeService.createAttributesAndIndicesAscy(_this9.encodedData, segmentNumber, workerOptions).then(function (_ref9) {
                    var attributes = _ref9.attributes,
                      elements = _ref9.elements;
                    var m = createModel((0, _objectSpread2.default)({
                      attributes: attributes,
                      uniforms: uniforms,
                      fs: fs,
                      vs: vs,
                      elements: elements,
                      blend: _blend.BlendTypes[_l7Core.BlendType.normal]
                    }, rest));
                    resolve(m);
                  }).catch(function (err) {
                    return reject(err);
                  });
                } else {
                  var _this9$styleAttribute = _this9.styleAttributeService.createAttributesAndIndices(_this9.encodedData, triangulation, segmentNumber),
                    attributes = _this9$styleAttribute.attributes,
                    elements = _this9$styleAttribute.elements,
                    count = _this9$styleAttribute.count;
                  var modelOptions = (0, _objectSpread2.default)({
                    attributes: attributes,
                    uniforms: uniforms,
                    fs: fs,
                    vs: vs,
                    elements: elements,
                    blend: _blend.BlendTypes[_l7Core.BlendType.normal]
                  }, rest);
                  if (count) {
                    modelOptions.count = count;
                  }
                  var m = createModel(modelOptions);
                  resolve(m);
                }
              }));
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function buildLayerModel(_x) {
        return _buildLayerModel.apply(this, arguments);
      }
      return buildLayerModel;
    }()
  }, {
    key: "createAttributes",
    value: function createAttributes(options) {
      var triangulation = options.triangulation;
      // @ts-ignore
      var _this$styleAttributeS = this.styleAttributeService.createAttributes(this.encodedData, triangulation),
        attributes = _this$styleAttributeS.attributes;
      return attributes;
    }
  }, {
    key: "getTime",
    value: function getTime() {
      return this.layerService.clock.getDelta();
    }
  }, {
    key: "setAnimateStartTime",
    value: function setAnimateStartTime() {
      this.animateStartTime = this.layerService.clock.getElapsedTime();
    }
  }, {
    key: "stopAnimate",
    value: function stopAnimate() {
      if (this.animateStatus) {
        this.layerService.stopAnimate();
        this.animateStatus = false;
        this.updateLayerConfig({
          animateOption: {
            enable: false
          }
        });
      }
    }
  }, {
    key: "getLayerAnimateTime",
    value: function getLayerAnimateTime() {
      return this.layerService.clock.getElapsedTime() - this.animateStartTime;
    }
  }, {
    key: "needPick",
    value: function needPick(type) {
      var _this$getLayerConfig11 = this.getLayerConfig(),
        _this$getLayerConfig12 = _this$getLayerConfig11.enableHighlight,
        enableHighlight = _this$getLayerConfig12 === void 0 ? true : _this$getLayerConfig12,
        _this$getLayerConfig13 = _this$getLayerConfig11.enableSelect,
        enableSelect = _this$getLayerConfig13 === void 0 ? true : _this$getLayerConfig13;
      // 判断layer是否监听事件;
      var isPick = this.eventNames().indexOf(type) !== -1 || this.eventNames().indexOf('un' + type) !== -1;
      if ((type === 'click' || type === 'dblclick') && enableSelect) {
        isPick = true;
      }
      if (type === 'mousemove' && (enableHighlight || this.eventNames().indexOf('mouseenter') !== -1 || this.eventNames().indexOf('unmousemove') !== -1 || this.eventNames().indexOf('mouseout') !== -1)) {
        isPick = true;
      }
      return this.isVisible() && isPick;
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              throw new Error('Method not implemented.');
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "rebuildModels",
    value: function () {
      var _rebuildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.buildModels();
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function rebuildModels() {
        return _rebuildModels.apply(this, arguments);
      }
      return rebuildModels;
    }()
  }, {
    key: "renderMulPass",
    value: function () {
      var _renderMulPass = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(multiPassRenderer) {
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return multiPassRenderer.render();
            case 2:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function renderMulPass(_x2) {
        return _renderMulPass.apply(this, arguments);
      }
      return renderMulPass;
    }()
  }, {
    key: "renderModels",
    value: function renderModels() {
      var _this10 = this;
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // TODO: this.getEncodedData().length > 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题
      if (this.encodeDataLength <= 0 && !this.forceRender) {
        return this;
      }
      this.hooks.beforeRender.call();
      this.models.forEach(function (model) {
        model.draw({
          uniforms: _this10.layerModel.getUninforms(),
          blend: _this10.layerModel.getBlend(),
          stencil: _this10.layerModel.getStencil(options)
        }, (options === null || options === void 0 ? void 0 : options.ispick) || false);
      });
      this.hooks.afterRender.call();
      return this;
    }
  }, {
    key: "updateStyleAttribute",
    value: function updateStyleAttribute(type, field, values, updateOptions) {
      // encode diff
      var preAttribute = this.configService.getAttributeConfig(this.id) || {};
      // @ts-ignore
      if ((0, _lodash.isEqual)(preAttribute[type], {
        field: field,
        values: values
      })) {
        return false;
      }

      // 存储 Attribute
      if (['color', 'size', 'texture', 'rotate', 'filter', 'label', 'shape'].indexOf(type) !== -1) {
        this.configService.setAttributeConfig(this.id, (0, _defineProperty2.default)({}, type, {
          field: field,
          values: values
        }));
      }
      if (!this.startInit) {
        // 开始初始化执行
        this.pendingStyleAttributes.push({
          attributeName: type,
          attributeField: field,
          attributeValues: values,
          updateOptions: updateOptions
        });
      } else {
        this.styleAttributeService.updateStyleAttribute(type, {
          // @ts-ignore
          scale: (0, _objectSpread2.default)({
            field: field
          }, this.splitValuesAndCallbackInAttribute(
          // @ts-ignore
          values,
          // @ts-ignore
          this.getLayerConfig()[field]))
        },
        // @ts-ignore
        updateOptions);
      }
      return true;
    }
  }, {
    key: "getLayerAttributeConfig",
    value: function getLayerAttributeConfig() {
      return this.configService.getAttributeConfig(this.id);
    }
  }, {
    key: "getShaderPickStat",
    value: function getShaderPickStat() {
      return this.layerService.getShaderPickStat();
    }

    /**
     * 继承空方法
     * @param time
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "setEarthTime",
    value: function setEarthTime(time) {
      console.warn('empty fn');
    }

    // 数据处理 在数据进行 mapping 生成 encodeData 之前对数据进行处理
    // 在各个 layer 中继承
  }, {
    key: "processData",
    value: function processData(filterData) {
      return filterData;
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      return {};
    }
  }, {
    key: "initLayerModels",
    value: function () {
      var _initLayerModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              this.models.forEach(function (model) {
                return model.destroy();
              });
              this.models = [];
              _context7.next = 4;
              return this.layerModel.initModels();
            case 4:
              this.models = _context7.sent;
            case 5:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function initLayerModels() {
        return _initLayerModels.apply(this, arguments);
      }
      return initLayerModels;
    }()
  }, {
    key: "reRender",
    value: function reRender() {
      if (this.inited) {
        this.layerService.reRender();
      }
    }
  }, {
    key: "splitValuesAndCallbackInAttribute",
    value: function splitValuesAndCallbackInAttribute(valuesOrCallback, defaultValues) {
      return {
        values: (0, _lodash.isFunction)(valuesOrCallback) ? undefined : valuesOrCallback || defaultValues,
        callback: (0, _lodash.isFunction)(valuesOrCallback) ? valuesOrCallback : undefined
      };
    }
  }]);
  return BaseLayer;
}(_eventemitter.EventEmitter), (_descriptor = (0, _applyDecoratedDescriptor2.default)(_class.prototype, "configService", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class));
exports.default = BaseLayer;