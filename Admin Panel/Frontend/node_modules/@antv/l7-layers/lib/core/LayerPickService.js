"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var BaseLayerPickService = /*#__PURE__*/function () {
  function BaseLayerPickService(layer) {
    (0, _classCallCheck2.default)(this, BaseLayerPickService);
    this.layer = layer;
  }
  (0, _createClass2.default)(BaseLayerPickService, [{
    key: "pickRender",
    value: function pickRender(target) {
      var container = this.layer.getContainer();
      var layerService = container.get(_l7Core.TYPES.ILayerService);
      var layer = this.layer;
      // 瓦片图层的拾取绘制
      if (layer.tileLayer) {
        return layer.tileLayer.pickRender(target);
      }
      layer.hooks.beforePickingEncode.call();
      layerService.renderTileLayerMask(layer);
      layer.renderModels({
        ispick: true
      });
      layer.hooks.afterPickingEncode.call();
    }
  }, {
    key: "pick",
    value: function pick(layer, target) {
      var container = this.layer.getContainer();
      var pickingService = container.get(_l7Core.TYPES.IPickingService);
      if (layer.type === 'RasterLayer') {
        return this.pickRasterLayer(layer, target);
      }
      this.pickRender(target);
      return pickingService.pickFromPickingFBO(layer, target);
    }
  }, {
    key: "pickRasterLayer",
    value: function pickRasterLayer(layer, target, parent) {
      var container = this.layer.getContainer();
      var pickingService = container.get(_l7Core.TYPES.IPickingService);
      var mapService = container.get(_l7Core.TYPES.IMapService);
      var extent = this.layer.getSource().extent;
      var isPick = (0, _l7Utils.lngLatInExtent)(target.lngLat, extent);
      var layerTarget = {
        x: target.x,
        y: target.y,
        type: target.type,
        lngLat: target.lngLat,
        target: target,
        rasterValue: null
      };
      var adviceTarget = parent ? parent : layer;
      if (isPick) {
        var rasterValue = this.readRasterValue(layer, extent, mapService, target.x, target.y);
        layerTarget.rasterValue = rasterValue;
        pickingService.triggerHoverOnLayer(adviceTarget, layerTarget);
        return true;
      } else {
        layerTarget.type = target.type === 'mousemove' ? 'mouseout' : 'un' + target.type;
        pickingService.triggerHoverOnLayer(adviceTarget, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, layerTarget), {}, {
          type: 'unpick'
        }));
        pickingService.triggerHoverOnLayer(adviceTarget, layerTarget);
        return false;
      }
    }
  }, {
    key: "readRasterValue",
    value: function readRasterValue(layer, bbox, mapService, x, y) {
      var rasterData = layer.getSource().data.dataArray[0];
      var _bbox = (0, _slicedToArray2.default)(bbox, 4),
        _bbox$ = _bbox[0],
        minLng = _bbox$ === void 0 ? 0 : _bbox$,
        _bbox$2 = _bbox[1],
        minLat = _bbox$2 === void 0 ? 0 : _bbox$2,
        _bbox$3 = _bbox[2],
        maxLng = _bbox$3 === void 0 ? 10 : _bbox$3,
        _bbox$4 = _bbox[3],
        maxLat = _bbox$4 === void 0 ? -10 : _bbox$4;
      var tileXY = mapService.lngLatToContainer([minLng, minLat]);
      var tileMaxXY = mapService.lngLatToContainer([maxLng, maxLat]);
      var tilePixelWidth = tileMaxXY.x - tileXY.x;
      var tilePixelHeight = tileXY.y - tileMaxXY.y;
      var pos = [(x - tileXY.x) / tilePixelWidth,
      // x
      (y - tileMaxXY.y) / tilePixelHeight // y
      ];

      var tileWidth = rasterData.width || 1;
      var tileHeight = rasterData.height || 1;
      var indexX = Math.floor(pos[0] * tileWidth);
      var indexY = Math.floor(pos[1] * tileHeight);
      var index = Math.max(0, indexY - 1) * tileWidth + indexX;
      var data = rasterData.data[index];
      return data;
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(pickedColors) {
      var layer = this.layer;
      // @ts-ignore
      var _pickedColors = (0, _slicedToArray2.default)(pickedColors, 3),
        r = _pickedColors[0],
        g = _pickedColors[1],
        b = _pickedColors[2];
      layer.hooks.beforeSelect.call([r, g, b]);
    }
  }, {
    key: "highlightPickedFeature",
    value: function highlightPickedFeature(pickedColors) {
      // @ts-ignore
      var _pickedColors2 = (0, _slicedToArray2.default)(pickedColors, 3),
        r = _pickedColors2[0],
        g = _pickedColors2[1],
        b = _pickedColors2[2];
      this.layer.hooks.beforeHighlight.call([r, g, b]);
    }
  }, {
    key: "getFeatureById",
    value: function getFeatureById(pickedFeatureIdx) {
      return this.layer.getSource().getFeatureById(pickedFeatureIdx);
    }
  }]);
  return BaseLayerPickService;
}();
exports.default = BaseLayerPickService;